
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d20  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009ef8  08009ef8  00019ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f50  08009f50  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009f50  08009f50  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f50  08009f50  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001514  20000184  0800a0dc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001698  0800a0dc  00021698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af07  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003481  00000000  00000000  0003b0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003e540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003f908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020618  00000000  00000000  00040b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d16  00000000  00000000  00061170  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4550  00000000  00000000  00072e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001373d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  00137454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009ee0 	.word	0x08009ee0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009ee0 	.word	0x08009ee0

08000218 <CDC_On_Receive>:
volatile uint8_t command_received = 0;
volatile uint8_t command_received_ticker = 0;

volatile float pGain, iGain, dGain = 0;

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b1c      	cmp	r3, #28
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	221c      	movs	r2, #28
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fe42 	bl	8009eb8 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001d8 	.word	0x200001d8

08000258 <Set_Motor_Speed>:

inline void Set_Motor_Speed(volatile uint32_t *channel_a,
		volatile uint32_t *channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	dd15      	ble.n	8000296 <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b64      	cmp	r3, #100	; 0x64
 800026e:	dc0b      	bgt.n	8000288 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000276:	fb02 f303 	mul.w	r3, r2, r3
 800027a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800027e:	3320      	adds	r3, #32
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	e002      	b.n	800028e <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000294:	e020      	b.n	80002d8 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	da17      	bge.n	80002cc <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002a2:	db0a      	blt.n	80002ba <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <Set_Motor_Speed+0x8c>)
 80002a8:	fb02 f303 	mul.w	r3, r2, r3
 80002ac:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80002b0:	3320      	adds	r3, #32
 80002b2:	461a      	mov	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e004      	b.n	80002c4 <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	425b      	negs	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	e005      	b.n	80002d8 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	fffffe3e 	.word	0xfffffe3e

080002e8 <Set_Thrower_Speed>:
		*channel_b = 0;
	}
}

inline void Set_Thrower_Speed(volatile uint32_t *channel_a,
		int32_t thrower_speed) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	if (thrower_speed > 0) {
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dd0e      	ble.n	8000316 <Set_Thrower_Speed+0x2e>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	dc0f      	bgt.n	800031e <Set_Thrower_Speed+0x36>
			// 0 to 100 compact range
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	4613      	mov	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	1a9b      	subs	r3, r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800030c:	3308      	adds	r3, #8
 800030e:	461a      	mov	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 8000314:	e003      	b.n	800031e <Set_Thrower_Speed+0x36>
		*channel_a = ESC_IDLE_CCR;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t *channel_a, int32_t servo_speed,
		GPIO_PinState ir_status, int32_t ir_control) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	4613      	mov	r3, r2
 800033a:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d005      	beq.n	800034e <Set_Servo_Speed+0x22>
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d02a      	beq.n	800039e <Set_Servo_Speed+0x72>
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d027      	beq.n	800039e <Set_Servo_Speed+0x72>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2b00      	cmp	r3, #0
 8000352:	dd0c      	ble.n	800036e <Set_Servo_Speed+0x42>
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	2b64      	cmp	r3, #100	; 0x64
 8000358:	dc09      	bgt.n	800036e <Set_Servo_Speed+0x42>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <Set_Servo_Speed+0x80>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f5c3 6392 	rsb	r3, r3, #1168	; 0x490
 8000362:	3307      	adds	r3, #7
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	461a      	mov	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	e017      	b.n	800039e <Set_Servo_Speed+0x72>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <Set_Servo_Speed+0x80>)
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	2b00      	cmp	r3, #0
 8000374:	da0f      	bge.n	8000396 <Set_Servo_Speed+0x6a>
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800037c:	db0b      	blt.n	8000396 <Set_Servo_Speed+0x6a>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <Set_Servo_Speed+0x80>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	f2a3 42e2 	subw	r2, r3, #1250	; 0x4e2
 8000386:	4613      	mov	r3, r2
 8000388:	079b      	lsls	r3, r3, #30
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	461a      	mov	r2, r3
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	e003      	b.n	800039e <Set_Servo_Speed+0x72>
		} else {
			*channel_a = 0;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800039c:	e7ff      	b.n	800039e <Set_Servo_Speed+0x72>
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	200001a0 	.word	0x200001a0

080003b0 <Calculate_PID>:
Motor motor2 = { .prev_pos = 0, .cur_pos = 0, .cur_enc_speed = 0,
		.target_speed = 0, .cur_speed = 0, .prev_speed = 0, .err_sum = 0 };
Motor motor3 = { .prev_pos = 0, .cur_pos = 0, .cur_enc_speed = 0,
		.target_speed = 0, .cur_speed = 0, .prev_speed = 0, .err_sum = 0 };

inline void Calculate_PID(Motor *motor) {
 80003b0:	b480      	push	{r7}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	pGain = 1;
 80003b8:	4b57      	ldr	r3, [pc, #348]	; (8000518 <Calculate_PID+0x168>)
 80003ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80003be:	601a      	str	r2, [r3, #0]
	iGain = 0.005;
 80003c0:	4b56      	ldr	r3, [pc, #344]	; (800051c <Calculate_PID+0x16c>)
 80003c2:	4a57      	ldr	r2, [pc, #348]	; (8000520 <Calculate_PID+0x170>)
 80003c4:	601a      	str	r2, [r3, #0]
	dGain = 5;
 80003c6:	4b57      	ldr	r3, [pc, #348]	; (8000524 <Calculate_PID+0x174>)
 80003c8:	4a57      	ldr	r2, [pc, #348]	; (8000528 <Calculate_PID+0x178>)
 80003ca:	601a      	str	r2, [r3, #0]

	int error = motor->target_speed - motor->cur_enc_speed;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	ee07 3a90 	vmov	s15, r3
 80003da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003e6:	ee17 3a90 	vmov	r3, s15
 80003ea:	617b      	str	r3, [r7, #20]
	int pTerm = error * pGain;
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	ee07 3a90 	vmov	s15, r3
 80003f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003f6:	4b48      	ldr	r3, [pc, #288]	; (8000518 <Calculate_PID+0x168>)
 80003f8:	edd3 7a00 	vldr	s15, [r3]
 80003fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000404:	ee17 3a90 	vmov	r3, s15
 8000408:	613b      	str	r3, [r7, #16]

	motor->err_sum += error;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	441a      	add	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
	motor->err_sum = clamp(-1000, 1000, motor->err_sum);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800041e:	db07      	blt.n	8000430 <Calculate_PID+0x80>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000428:	bfa8      	it	ge
 800042a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800042e:	e000      	b.n	8000432 <Calculate_PID+0x82>
 8000430:	4b3e      	ldr	r3, [pc, #248]	; (800052c <Calculate_PID+0x17c>)
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	6153      	str	r3, [r2, #20]
	float iTerm = iGain * motor->err_sum;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	ee07 3a90 	vmov	s15, r3
 800043e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000442:	4b36      	ldr	r3, [pc, #216]	; (800051c <Calculate_PID+0x16c>)
 8000444:	edd3 7a00 	vldr	s15, [r3]
 8000448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800044c:	edc7 7a03 	vstr	s15, [r7, #12]

	float dTerm = dGain * (motor->prev_speed - motor->cur_enc_speed);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	ed93 7a04 	vldr	s14, [r3, #16]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	ee07 3a90 	vmov	s15, r3
 800045e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000462:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000466:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <Calculate_PID+0x174>)
 8000468:	edd3 7a00 	vldr	s15, [r3]
 800046c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000470:	edc7 7a02 	vstr	s15, [r7, #8]
	motor->prev_speed = motor->cur_enc_speed;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	ee07 3a90 	vmov	s15, r3
 800047c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	edc3 7a04 	vstr	s15, [r3, #16]

	motor->cur_speed = motor->cur_speed + pTerm + iTerm + dTerm;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	ed93 7a03 	vldr	s14, [r3, #12]
 800048c:	693b      	ldr	r3, [r7, #16]
 800048e:	ee07 3a90 	vmov	s15, r3
 8000492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800049a:	edd7 7a03 	vldr	s15, [r7, #12]
 800049e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80004a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80004a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	edc3 7a03 	vstr	s15, [r3, #12]
	motor->cur_speed = clamp(-100, 100, motor->cur_speed);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80004b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000530 <Calculate_PID+0x180>
 80004ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004c2:	dd01      	ble.n	80004c8 <Calculate_PID+0x118>
 80004c4:	2300      	movs	r3, #0
 80004c6:	e00c      	b.n	80004e2 <Calculate_PID+0x132>
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80004ce:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000534 <Calculate_PID+0x184>
 80004d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004da:	bf4c      	ite	mi
 80004dc:	2301      	movmi	r3, #1
 80004de:	2300      	movpl	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <Calculate_PID+0x13a>
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <Calculate_PID+0x188>)
 80004e8:	e00d      	b.n	8000506 <Calculate_PID+0x156>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80004f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000530 <Calculate_PID+0x180>
 80004f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80004f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004fc:	dd01      	ble.n	8000502 <Calculate_PID+0x152>
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <Calculate_PID+0x18c>)
 8000500:	e001      	b.n	8000506 <Calculate_PID+0x156>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	60d3      	str	r3, [r2, #12]
}
 800050a:	bf00      	nop
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200005c8 	.word	0x200005c8
 800051c:	20000618 	.word	0x20000618
 8000520:	3ba3d70a 	.word	0x3ba3d70a
 8000524:	200001dc 	.word	0x200001dc
 8000528:	40a00000 	.word	0x40a00000
 800052c:	fffffc18 	.word	0xfffffc18
 8000530:	42c80000 	.word	0x42c80000
 8000534:	c2c80000 	.word	0xc2c80000
 8000538:	c2c80000 	.word	0xc2c80000
 800053c:	42c80000 	.word	0x42c80000

08000540 <Calculate_Encoder_Diff>:

inline int Calculate_Encoder_Diff(uint16_t prev_pos, uint16_t cur_pos) {
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	4613      	mov	r3, r2
 800054e:	80bb      	strh	r3, [r7, #4]
	int diff = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 800055a:	4293      	cmp	r3, r2
 800055c:	d90c      	bls.n	8000578 <Calculate_Encoder_Diff+0x38>
 800055e:	88bb      	ldrh	r3, [r7, #4]
 8000560:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000564:	4293      	cmp	r3, r2
 8000566:	d807      	bhi.n	8000578 <Calculate_Encoder_Diff+0x38>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800056e:	33ff      	adds	r3, #255	; 0xff
 8000570:	88ba      	ldrh	r2, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	e015      	b.n	80005a4 <Calculate_Encoder_Diff+0x64>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 800057e:	4293      	cmp	r3, r2
 8000580:	d80c      	bhi.n	800059c <Calculate_Encoder_Diff+0x5c>
 8000582:	88bb      	ldrh	r3, [r7, #4]
 8000584:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000588:	4293      	cmp	r3, r2
 800058a:	d907      	bls.n	800059c <Calculate_Encoder_Diff+0x5c>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000592:	3bff      	subs	r3, #255	; 0xff
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e003      	b.n	80005a4 <Calculate_Encoder_Diff+0x64>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 800059c:	88ba      	ldrh	r2, [r7, #4]
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	60fb      	str	r3, [r7, #12]
	}
	return clamp(-200, 200, diff) / 2;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80005aa:	db07      	blt.n	80005bc <Calculate_Encoder_Diff+0x7c>
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2bc8      	cmp	r3, #200	; 0xc8
 80005b0:	bfa8      	it	ge
 80005b2:	23c8      	movge	r3, #200	; 0xc8
 80005b4:	0fda      	lsrs	r2, r3, #31
 80005b6:	4413      	add	r3, r2
 80005b8:	105b      	asrs	r3, r3, #1
 80005ba:	e001      	b.n	80005c0 <Calculate_Encoder_Diff+0x80>
 80005bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <Handle_Encoder>:

void Handle_Encoder(Motor *motor, uint16_t count) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
	motor->cur_pos = count;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	887a      	ldrh	r2, [r7, #2]
 80005dc:	805a      	strh	r2, [r3, #2]
	motor->cur_enc_speed = Calculate_Encoder_Diff(motor->prev_pos,
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	885b      	ldrh	r3, [r3, #2]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4610      	mov	r0, r2
 80005ea:	f7ff ffa9 	bl	8000540 <Calculate_Encoder_Diff>
 80005ee:	4602      	mov	r2, r0
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	605a      	str	r2, [r3, #4]
			motor->cur_pos);
	motor->prev_pos = motor->cur_pos;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	885a      	ldrh	r2, [r3, #2]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	801a      	strh	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000604:	b598      	push	{r3, r4, r7, lr}
 8000606:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000608:	f001 f923 	bl	8001852 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800060c:	f000 f8d6 	bl	80007bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000610:	f000 fd2a 	bl	8001068 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000614:	f000 fab2 	bl	8000b7c <MX_TIM4_Init>
	MX_TIM8_Init();
 8000618:	f000 fb3c 	bl	8000c94 <MX_TIM8_Init>
	MX_TIM15_Init();
 800061c:	f000 fbaa 	bl	8000d74 <MX_TIM15_Init>
	MX_TIM16_Init();
 8000620:	f000 fc2e 	bl	8000e80 <MX_TIM16_Init>
	MX_TIM1_Init();
 8000624:	f000 f932 	bl	800088c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000628:	f000 f9e0 	bl	80009ec <MX_TIM2_Init>
	MX_TIM3_Init();
 800062c:	f000 fa32 	bl	8000a94 <MX_TIM3_Init>
	MX_TIM7_Init();
 8000630:	f000 fafa 	bl	8000c28 <MX_TIM7_Init>
	MX_TIM17_Init();
 8000634:	f000 fc9e 	bl	8000f74 <MX_TIM17_Init>
	MX_USB_Device_Init();
 8000638:	f008 ff22 	bl	8009480 <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800063c:	2104      	movs	r1, #4
 800063e:	4847      	ldr	r0, [pc, #284]	; (800075c <main+0x158>)
 8000640:	f004 fa1c 	bl	8004a7c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000644:	2104      	movs	r1, #4
 8000646:	4846      	ldr	r0, [pc, #280]	; (8000760 <main+0x15c>)
 8000648:	f004 fa18 	bl	8004a7c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800064c:	2104      	movs	r1, #4
 800064e:	4845      	ldr	r0, [pc, #276]	; (8000764 <main+0x160>)
 8000650:	f004 fa14 	bl	8004a7c <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000654:	2100      	movs	r1, #0
 8000656:	4844      	ldr	r0, [pc, #272]	; (8000768 <main+0x164>)
 8000658:	f004 f86a 	bl	8004730 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800065c:	2104      	movs	r1, #4
 800065e:	4842      	ldr	r0, [pc, #264]	; (8000768 <main+0x164>)
 8000660:	f004 f866 	bl	8004730 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000664:	2108      	movs	r1, #8
 8000666:	4840      	ldr	r0, [pc, #256]	; (8000768 <main+0x164>)
 8000668:	f004 f862 	bl	8004730 <HAL_TIM_PWM_Start>
	TIM1->CCR1 = 0;
 800066c:	4b3f      	ldr	r3, [pc, #252]	; (800076c <main+0x168>)
 800066e:	2200      	movs	r2, #0
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000672:	4b3e      	ldr	r3, [pc, #248]	; (800076c <main+0x168>)
 8000674:	2200      	movs	r2, #0
 8000676:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <main+0x168>)
 800067a:	2200      	movs	r2, #0
 800067c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800067e:	2100      	movs	r1, #0
 8000680:	483b      	ldr	r0, [pc, #236]	; (8000770 <main+0x16c>)
 8000682:	f004 f855 	bl	8004730 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000686:	2104      	movs	r1, #4
 8000688:	4839      	ldr	r0, [pc, #228]	; (8000770 <main+0x16c>)
 800068a:	f004 f851 	bl	8004730 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800068e:	2108      	movs	r1, #8
 8000690:	4837      	ldr	r0, [pc, #220]	; (8000770 <main+0x16c>)
 8000692:	f004 f84d 	bl	8004730 <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 8000696:	4b37      	ldr	r3, [pc, #220]	; (8000774 <main+0x170>)
 8000698:	2200      	movs	r2, #0
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <main+0x170>)
 800069e:	2200      	movs	r2, #0
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <main+0x170>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80006a8:	2100      	movs	r1, #0
 80006aa:	4833      	ldr	r0, [pc, #204]	; (8000778 <main+0x174>)
 80006ac:	f004 f840 	bl	8004730 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4832      	ldr	r0, [pc, #200]	; (800077c <main+0x178>)
 80006b4:	f004 f83c 	bl	8004730 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80006b8:	2100      	movs	r1, #0
 80006ba:	4831      	ldr	r0, [pc, #196]	; (8000780 <main+0x17c>)
 80006bc:	f004 f838 	bl	8004730 <HAL_TIM_PWM_Start>
	TIM15->CCR1 = 0;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <main+0x180>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = ESC_IDLE_CCR;
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <main+0x184>)
 80006c8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = 0;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <main+0x188>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Base_Start_IT(&htim7);
 80006d4:	482e      	ldr	r0, [pc, #184]	; (8000790 <main+0x18c>)
 80006d6:	f003 ff69 	bl	80045ac <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (command_received == 1) {
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <main+0x190>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d1fa      	bne.n	80006da <main+0xd6>
			command_received = 0;
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <main+0x190>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
			command_received_ticker = 70;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <main+0x194>)
 80006ec:	2246      	movs	r2, #70	; 0x46
 80006ee:	701a      	strb	r2, [r3, #0]

			// toggle led
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80006f0:	2120      	movs	r1, #32
 80006f2:	482a      	ldr	r0, [pc, #168]	; (800079c <main+0x198>)
 80006f4:	f001 fbe0 	bl	8001eb8 <HAL_GPIO_TogglePin>

			feedback.thrower = 666;
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <main+0x19c>)
 80006fa:	f240 229a 	movw	r2, #666	; 0x29a
 80006fe:	60da      	str	r2, [r3, #12]
			feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000700:	2108      	movs	r1, #8
 8000702:	4826      	ldr	r0, [pc, #152]	; (800079c <main+0x198>)
 8000704:	f001 fba8 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <main+0x19c>)
 800070e:	615a      	str	r2, [r3, #20]

			motor1.target_speed = command.motor1;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <main+0x1a0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <main+0x1a4>)
 8000716:	6093      	str	r3, [r2, #8]
			motor2.target_speed = command.motor2;
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <main+0x1a0>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4a23      	ldr	r2, [pc, #140]	; (80007ac <main+0x1a8>)
 800071e:	6093      	str	r3, [r2, #8]
			motor3.target_speed = command.motor3;
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <main+0x1a0>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <main+0x1ac>)
 8000726:	6093      	str	r3, [r2, #8]

			Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <main+0x1a0>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4619      	mov	r1, r3
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <main+0x1b0>)
 8000730:	f7ff fdda 	bl	80002e8 <Set_Thrower_Speed>

			Set_Servo_Speed(&(TIM17->CCR1), command.servo,
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <main+0x1a0>)
 8000736:	691c      	ldr	r4, [r3, #16]
 8000738:	2108      	movs	r1, #8
 800073a:	4818      	ldr	r0, [pc, #96]	; (800079c <main+0x198>)
 800073c:	f001 fb8c 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <main+0x1a0>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4621      	mov	r1, r4
 800074a:	481b      	ldr	r0, [pc, #108]	; (80007b8 <main+0x1b4>)
 800074c:	f7ff fdee 	bl	800032c <Set_Servo_Speed>
					HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);

			CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000750:	211c      	movs	r1, #28
 8000752:	4813      	ldr	r0, [pc, #76]	; (80007a0 <main+0x19c>)
 8000754:	f008 ff56 	bl	8009604 <CDC_Transmit_FS>
		if (command_received == 1) {
 8000758:	e7bf      	b.n	80006da <main+0xd6>
 800075a:	bf00      	nop
 800075c:	2000061c 	.word	0x2000061c
 8000760:	20000498 	.word	0x20000498
 8000764:	2000044c 	.word	0x2000044c
 8000768:	200005cc 	.word	0x200005cc
 800076c:	40012c00 	.word	0x40012c00
 8000770:	2000057c 	.word	0x2000057c
 8000774:	40000400 	.word	0x40000400
 8000778:	200004e4 	.word	0x200004e4
 800077c:	20000668 	.word	0x20000668
 8000780:	20000530 	.word	0x20000530
 8000784:	40014000 	.word	0x40014000
 8000788:	40014400 	.word	0x40014400
 800078c:	40014800 	.word	0x40014800
 8000790:	200006b4 	.word	0x200006b4
 8000794:	200001d8 	.word	0x200001d8
 8000798:	200001d9 	.word	0x200001d9
 800079c:	48000400 	.word	0x48000400
 80007a0:	200001bc 	.word	0x200001bc
 80007a4:	200001a0 	.word	0x200001a0
 80007a8:	200001e0 	.word	0x200001e0
 80007ac:	200001f8 	.word	0x200001f8
 80007b0:	20000210 	.word	0x20000210
 80007b4:	40014434 	.word	0x40014434
 80007b8:	40014834 	.word	0x40014834

080007bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0a4      	sub	sp, #144	; 0x90
 80007c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007c6:	2238      	movs	r2, #56	; 0x38
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f009 fb7f 	bl	8009ece <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80007e0:	463b      	mov	r3, r7
 80007e2:	2244      	movs	r2, #68	; 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f009 fb71 	bl	8009ece <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f002 fee5 	bl	80035bc <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80007f2:	2322      	movs	r3, #34	; 0x22
 80007f4:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800080c:	2301      	movs	r3, #1
 800080e:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000810:	2314      	movs	r3, #20
 8000812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000828:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800082c:	4618      	mov	r0, r3
 800082e:	f002 ff79 	bl	8003724 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x80>
		Error_Handler();
 8000838:	f000 fd1e 	bl	8001278 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2303      	movs	r3, #3
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000850:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000854:	2104      	movs	r1, #4
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fa7c 	bl	8003d54 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xaa>
		Error_Handler();
 8000862:	f000 fd09 	bl	8001278 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	603b      	str	r3, [r7, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000870:	463b      	mov	r3, r7
 8000872:	4618      	mov	r0, r3
 8000874:	f003 fc52 	bl	800411c <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xc6>
		Error_Handler();
 800087e:	f000 fcfb 	bl	8001278 <Error_Handler>
	}
}
 8000882:	bf00      	nop
 8000884:	3790      	adds	r7, #144	; 0x90
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b098      	sub	sp, #96	; 0x60
 8000890:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000892:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800089e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2234      	movs	r2, #52	; 0x34
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f009 fb08 	bl	8009ece <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008be:	4b49      	ldr	r3, [pc, #292]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008c0:	4a49      	ldr	r2, [pc, #292]	; (80009e8 <MX_TIM1_Init+0x15c>)
 80008c2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80008d0:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80008ea:	483e      	ldr	r0, [pc, #248]	; (80009e4 <MX_TIM1_Init+0x158>)
 80008ec:	f003 fec8 	bl	8004680 <HAL_TIM_PWM_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x6e>
		Error_Handler();
 80008f6:	f000 fcbf 	bl	8001278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000906:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800090a:	4619      	mov	r1, r3
 800090c:	4835      	ldr	r0, [pc, #212]	; (80009e4 <MX_TIM1_Init+0x158>)
 800090e:	f004 ffa5 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000918:	f000 fcae 	bl	8001278 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091c:	2360      	movs	r3, #96	; 0x60
 800091e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	4828      	ldr	r0, [pc, #160]	; (80009e4 <MX_TIM1_Init+0x158>)
 8000942:	f004 faa7 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800094c:	f000 fc94 	bl	8001278 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000954:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000958:	2204      	movs	r2, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4821      	ldr	r0, [pc, #132]	; (80009e4 <MX_TIM1_Init+0x158>)
 800095e:	f004 fa99 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8000968:	f000 fc86 	bl	8001278 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000974:	2208      	movs	r2, #8
 8000976:	4619      	mov	r1, r3
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <MX_TIM1_Init+0x158>)
 800097a:	f004 fa8b 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8000984:	f000 fc78 	bl	8001278 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM1_Init+0x158>)
 80009c6:	f004 ffcb 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x148>
			!= HAL_OK) {
		Error_Handler();
 80009d0:	f000 fc52 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM1_Init+0x158>)
 80009d6:	f000 fdd3 	bl	8001580 <HAL_TIM_MspPostInit>

}
 80009da:	bf00      	nop
 80009dc:	3760      	adds	r7, #96	; 0x60
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200005cc 	.word	0x200005cc
 80009e8:	40012c00 	.word	0x40012c00

080009ec <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2224      	movs	r2, #36	; 0x24
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f009 fa67 	bl	8009ece <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a10:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a24:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a32:	2303      	movs	r3, #3
 8000a34:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a5e:	f003 ff67 	bl	8004930 <HAL_TIM_Encoder_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x80>
		Error_Handler();
 8000a68:	f000 fc06 	bl	8001278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_TIM2_Init+0xa4>)
 8000a7a:	f004 feef 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000a84:	f000 fbf8 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000061c 	.word	0x2000061c

08000a94 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000aba:	4a2f      	ldr	r2, [pc, #188]	; (8000b78 <MX_TIM3_Init+0xe4>)
 8000abc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000ade:	4825      	ldr	r0, [pc, #148]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000ae0:	f003 fdce 	bl	8004680 <HAL_TIM_PWM_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0x5a>
		Error_Handler();
 8000aea:	f000 fbc5 	bl	8001278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	481d      	ldr	r0, [pc, #116]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000afe:	f004 fead 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000b08:	f000 fbb6 	bl	8001278 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0c:	2360      	movs	r3, #96	; 0x60
 8000b0e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	4814      	ldr	r0, [pc, #80]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000b24:	f004 f9b6 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000b2e:	f000 fba3 	bl	8001278 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000b3e:	f004 f9a9 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000b48:	f000 fb96 	bl	8001278 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2208      	movs	r2, #8
 8000b54:	4619      	mov	r1, r3
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000b58:	f004 f99c 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 8000b62:	f000 fb89 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000b66:	4803      	ldr	r0, [pc, #12]	; (8000b74 <MX_TIM3_Init+0xe0>)
 8000b68:	f000 fd0a 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000057c 	.word	0x2000057c
 8000b78:	40000400 	.word	0x40000400

08000b7c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2224      	movs	r2, #36	; 0x24
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f009 f99f 	bl	8009ece <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b90:	463b      	mov	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <MX_TIM4_Init+0xa8>)
 8000b9e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000bec:	f003 fea0 	bl	8004930 <HAL_TIM_Encoder_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM4_Init+0x7e>
		Error_Handler();
 8000bf6:	f000 fb3f 	bl	8001278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_TIM4_Init+0xa4>)
 8000c08:	f004 fe28 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8000c12:	f000 fb31 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3730      	adds	r7, #48	; 0x30
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000498 	.word	0x20000498
 8000c24:	40000800 	.word	0x40000800

08000c28 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_TIM7_Init+0x64>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_TIM7_Init+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 40;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_TIM7_Init+0x64>)
 8000c40:	2228      	movs	r2, #40	; 0x28
 8000c42:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_TIM7_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65044;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_TIM7_Init+0x64>)
 8000c4c:	f64f 6214 	movw	r2, #65044	; 0xfe14
 8000c50:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_TIM7_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_TIM7_Init+0x64>)
 8000c5a:	f003 fc4f 	bl	80044fc <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM7_Init+0x40>
		Error_Handler();
 8000c64:	f000 fb08 	bl	8001278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_TIM7_Init+0x64>)
 8000c76:	f004 fdf1 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000c80:	f000 fafa 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200006b4 	.word	0x200006b4
 8000c90:	40001400 	.word	0x40001400

08000c94 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09a      	sub	sp, #104	; 0x68
 8000c98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000c9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c9e:	2224      	movs	r2, #36	; 0x24
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f009 f913 	bl	8009ece <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2234      	movs	r2, #52	; 0x34
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f009 f907 	bl	8009ece <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000cc2:	4a2b      	ldr	r2, [pc, #172]	; (8000d70 <MX_TIM8_Init+0xdc>)
 8000cc4:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd8:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cec:	2303      	movs	r3, #3
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	653b      	str	r3, [r7, #80]	; 0x50
	sConfig.IC1Filter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	657b      	str	r3, [r7, #84]	; 0x54
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	663b      	str	r3, [r7, #96]	; 0x60
	sConfig.IC2Filter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 8000d10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d14:	4619      	mov	r1, r3
 8000d16:	4815      	ldr	r0, [pc, #84]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000d18:	f003 fe0a 	bl	8004930 <HAL_TIM_Encoder_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM8_Init+0x92>
		Error_Handler();
 8000d22:	f000 faa9 	bl	8001278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000d32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000d3a:	f004 fd8f 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM8_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000d44:	f000 fa98 	bl	8001278 <Error_Handler>
	}
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_TIM8_Init+0xd8>)
 8000d56:	f004 fe03 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM8_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 8000d60:	f000 fa8a 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3768      	adds	r7, #104	; 0x68
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000044c 	.word	0x2000044c
 8000d70:	40013400 	.word	0x40013400

08000d74 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b098      	sub	sp, #96	; 0x60
 8000d78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2234      	movs	r2, #52	; 0x34
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f009 f894 	bl	8009ece <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000da8:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <MX_TIM15_Init+0x108>)
 8000daa:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dbe:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8000dd2:	4829      	ldr	r0, [pc, #164]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000dd4:	f003 fc54 	bl	8004680 <HAL_TIM_PWM_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM15_Init+0x6e>
		Error_Handler();
 8000dde:	f000 fa4b 	bl	8001278 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8000dea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dee:	4619      	mov	r1, r3
 8000df0:	4821      	ldr	r0, [pc, #132]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000df2:	f004 fd33 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM15_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000dfc:	f000 fa3c 	bl	8001278 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e00:	2360      	movs	r3, #96	; 0x60
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8000e1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000e26:	f004 f835 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM15_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8000e30:	f000 fa22 	bl	8001278 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000e5c:	f004 fd80 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM15_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8000e66:	f000 fa07 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <MX_TIM15_Init+0x104>)
 8000e6c:	f000 fb88 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8000e70:	bf00      	nop
 8000e72:	3760      	adds	r7, #96	; 0x60
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200004e4 	.word	0x200004e4
 8000e7c:	40014000 	.word	0x40014000

08000e80 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2234      	movs	r2, #52	; 0x34
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f009 f814 	bl	8009ece <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <MX_TIM16_Init+0xf0>)
 8000eaa:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65300;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000eba:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000ebe:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000ec6:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000ed2:	4826      	ldr	r0, [pc, #152]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000ed4:	f003 fb12 	bl	80044fc <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM16_Init+0x62>
		Error_Handler();
 8000ede:	f000 f9cb 	bl	8001278 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 8000ee2:	4822      	ldr	r0, [pc, #136]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000ee4:	f003 fbcc 	bl	8004680 <HAL_TIM_PWM_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM16_Init+0x72>
		Error_Handler();
 8000eee:	f000 f9c3 	bl	8001278 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef2:	2360      	movs	r3, #96	; 0x60
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 8000f0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f12:	2200      	movs	r2, #0
 8000f14:	4619      	mov	r1, r3
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000f18:	f003 ffbc 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM16_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8000f22:	f000 f9a9 	bl	8001278 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000f4e:	f004 fd07 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM16_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000f58:	f000 f98e 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
	HAL_TIM_MspPostInit(&htim16);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM16_Init+0xec>)
 8000f5e:	f000 fb0f 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	; 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000668 	.word	0x20000668
 8000f70:	40014400 	.word	0x40014400

08000f74 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2234      	movs	r2, #52	; 0x34
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f008 ff9a 	bl	8009ece <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <MX_TIM17_Init+0xec>)
 8000f9c:	4a31      	ldr	r2, [pc, #196]	; (8001064 <MX_TIM17_Init+0xf0>)
 8000f9e:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fa2:	2230      	movs	r2, #48	; 0x30
 8000fa4:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 65300;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fae:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000fb2:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000fc6:	4826      	ldr	r0, [pc, #152]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fc8:	f003 fa98 	bl	80044fc <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM17_Init+0x62>
		Error_Handler();
 8000fd2:	f000 f951 	bl	8001278 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <MX_TIM17_Init+0xec>)
 8000fd8:	f003 fb52 	bl	8004680 <HAL_TIM_PWM_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM17_Init+0x72>
		Error_Handler();
 8000fe2:	f000 f949 	bl	8001278 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe6:	2360      	movs	r3, #96	; 0x60
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 8001002:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001006:	2200      	movs	r2, #0
 8001008:	4619      	mov	r1, r3
 800100a:	4815      	ldr	r0, [pc, #84]	; (8001060 <MX_TIM17_Init+0xec>)
 800100c:	f003 ff42 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM17_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8001016:	f000 f92f 	bl	8001278 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_TIM17_Init+0xec>)
 8001042:	f004 fc8d 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM17_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 800104c:	f000 f914 	bl	8001278 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM17_Init+0xec>)
 8001052:	f000 fa95 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000530 	.word	0x20000530
 8001064:	40014800 	.word	0x40014800

08001068 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_GPIO_Init+0x8c>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_GPIO_Init+0x8c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_GPIO_Init+0x8c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_GPIO_Init+0x8c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <MX_GPIO_Init+0x8c>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_GPIO_Init+0x8c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_GPIO_Init+0x90>)
 80010b4:	f000 fee8 	bl	8001e88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b8:	2308      	movs	r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	480b      	ldr	r0, [pc, #44]	; (80010f8 <MX_GPIO_Init+0x90>)
 80010cc:	f000 fd42 	bl	8001b54 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010d0:	2320      	movs	r3, #32
 80010d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_GPIO_Init+0x90>)
 80010e8:	f000 fd34 	bl	8001b54 <HAL_GPIO_Init>

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000400 	.word	0x48000400

080010fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
//	unsigned long t1 = DWT->CYCCNT;

	Handle_Encoder(&motor1, TIM2->CNT);
 8001104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	b29b      	uxth	r3, r3
 800110c:	4619      	mov	r1, r3
 800110e:	4847      	ldr	r0, [pc, #284]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001110:	f7ff fa5c 	bl	80005cc <Handle_Encoder>
	Handle_Encoder(&motor2, TIM4->CNT);
 8001114:	4b46      	ldr	r3, [pc, #280]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	b29b      	uxth	r3, r3
 800111a:	4619      	mov	r1, r3
 800111c:	4845      	ldr	r0, [pc, #276]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800111e:	f7ff fa55 	bl	80005cc <Handle_Encoder>
	Handle_Encoder(&motor3, TIM8->CNT);
 8001122:	4b45      	ldr	r3, [pc, #276]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	b29b      	uxth	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	4844      	ldr	r0, [pc, #272]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800112c:	f7ff fa4e 	bl	80005cc <Handle_Encoder>
	feedback.motor1 = motor1.cur_enc_speed;
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	4b40      	ldr	r3, [pc, #256]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800113e:	edc3 7a00 	vstr	s15, [r3]
	feedback.motor2 = motor2.cur_enc_speed;
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001150:	edc3 7a01 	vstr	s15, [r3, #4]
	feedback.motor3 = motor3.cur_enc_speed;
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001162:	edc3 7a02 	vstr	s15, [r3, #8]

	Calculate_PID(&motor1);
 8001166:	4831      	ldr	r0, [pc, #196]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001168:	f7ff f922 	bl	80003b0 <Calculate_PID>
	Calculate_PID(&motor2);
 800116c:	4831      	ldr	r0, [pc, #196]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800116e:	f7ff f91f 	bl	80003b0 <Calculate_PID>
	Calculate_PID(&motor3);
 8001172:	4832      	ldr	r0, [pc, #200]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001174:	f7ff f91c 	bl	80003b0 <Calculate_PID>
	Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), motor1.cur_speed);
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800117a:	edd3 7a03 	vldr	s15, [r3, #12]
 800117e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001182:	ee17 2a90 	vmov	r2, s15
 8001186:	492f      	ldr	r1, [pc, #188]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001188:	482f      	ldr	r0, [pc, #188]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800118a:	f7ff f865 	bl	8000258 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), motor2.cur_speed);
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001190:	edd3 7a03 	vldr	s15, [r3, #12]
 8001194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001198:	ee17 2a90 	vmov	r2, s15
 800119c:	492b      	ldr	r1, [pc, #172]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800119e:	482c      	ldr	r0, [pc, #176]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80011a0:	f7ff f85a 	bl	8000258 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), motor3.cur_speed);
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80011a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80011aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ae:	ee17 2a90 	vmov	r2, s15
 80011b2:	4928      	ldr	r1, [pc, #160]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80011b4:	4828      	ldr	r0, [pc, #160]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80011b6:	f7ff f84f 	bl	8000258 <Set_Motor_Speed>

	// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 80011ba:	2108      	movs	r1, #8
 80011bc:	4827      	ldr	r0, [pc, #156]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80011be:	f000 fe4b 	bl	8001e58 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0xda>
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0xda>
		TIM17->CCR1 = 0;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// timeout
	if (command_received_ticker > 0) {
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0xf4>
		command_received_ticker -= 1;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80011ec:	701a      	strb	r2, [r3, #0]
		TIM16->CCR1 = ESC_IDLE_CCR;

		// stop servo
		TIM17->CCR1 = 0;
	}
}
 80011ee:	e018      	b.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x126>
		TIM1->CCR1 = 0;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800120a:	2200      	movs	r2, #0
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001210:	2200      	movs	r2, #0
 8001212:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001216:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800121e:	2200      	movs	r2, #0
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001e0 	.word	0x200001e0
 8001230:	40000800 	.word	0x40000800
 8001234:	200001f8 	.word	0x200001f8
 8001238:	40013400 	.word	0x40013400
 800123c:	20000210 	.word	0x20000210
 8001240:	200001bc 	.word	0x200001bc
 8001244:	40012c3c 	.word	0x40012c3c
 8001248:	40012c38 	.word	0x40012c38
 800124c:	4000043c 	.word	0x4000043c
 8001250:	40012c34 	.word	0x40012c34
 8001254:	40000438 	.word	0x40000438
 8001258:	40000434 	.word	0x40000434
 800125c:	48000400 	.word	0x48000400
 8001260:	200001a0 	.word	0x200001a0
 8001264:	40014800 	.word	0x40014800
 8001268:	200001d9 	.word	0x200001d9
 800126c:	40012c00 	.word	0x40012c00
 8001270:	40000400 	.word	0x40000400
 8001274:	40014400 	.word	0x40014400

08001278 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x44>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x44>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6613      	str	r3, [r2, #96]	; 0x60
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x44>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x44>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x44>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x44>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012be:	f002 fa21 	bl	8003704 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_TIM_PWM_MspInit+0x80>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10c      	bne.n	80012fc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 80012e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ec:	6613      	str	r3, [r2, #96]	; 0x60
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80012fa:	e022      	b.n	8001342 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a15      	ldr	r2, [pc, #84]	; (8001358 <HAL_TIM_PWM_MspInit+0x88>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10c      	bne.n	8001320 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
}
 800131e:	e010      	b.n	8001342 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <HAL_TIM_PWM_MspInit+0x8c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6613      	str	r3, [r2, #96]	; 0x60
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_TIM_PWM_MspInit+0x84>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	bf00      	nop
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40012c00 	.word	0x40012c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40000400 	.word	0x40000400
 800135c:	40014000 	.word	0x40014000

08001360 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001380:	d129      	bne.n	80013d6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001382:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6593      	str	r3, [r2, #88]	; 0x58
 800138e:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	623b      	str	r3, [r7, #32]
 8001398:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b2:	2303      	movs	r3, #3
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c2:	2301      	movs	r3, #1
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f000 fbc0 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80013d4:	e079      	b.n	80014ca <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a3f      	ldr	r2, [pc, #252]	; (80014d8 <HAL_TIM_Encoder_MspInit+0x178>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d128      	bne.n	8001432 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6593      	str	r3, [r2, #88]	; 0x58
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	4a35      	ldr	r2, [pc, #212]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001410:	23c0      	movs	r3, #192	; 0xc0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001420:	2302      	movs	r3, #2
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	482c      	ldr	r0, [pc, #176]	; (80014dc <HAL_TIM_Encoder_MspInit+0x17c>)
 800142c:	f000 fb92 	bl	8001b54 <HAL_GPIO_Init>
}
 8001430:	e04b      	b.n	80014ca <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <HAL_TIM_Encoder_MspInit+0x180>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d146      	bne.n	80014ca <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 800143e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001440:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001446:	6613      	str	r3, [r2, #96]	; 0x60
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x174>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001496:	2302      	movs	r3, #2
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f000 fb56 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80014ba:	230a      	movs	r3, #10
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_TIM_Encoder_MspInit+0x17c>)
 80014c6:	f000 fb45 	bl	8001b54 <HAL_GPIO_Init>
}
 80014ca:	bf00      	nop
 80014cc:	3738      	adds	r7, #56	; 0x38
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40000800 	.word	0x40000800
 80014dc:	48000400 	.word	0x48000400
 80014e0:	40013400 	.word	0x40013400

080014e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d114      	bne.n	8001520 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 80014fc:	f043 0320 	orr.w	r3, r3, #32
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2037      	movs	r0, #55	; 0x37
 8001514:	f000 fae9 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001518:	2037      	movs	r0, #55	; 0x37
 800151a:	f000 fb00 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800151e:	e022      	b.n	8001566 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_TIM_Base_MspInit+0x94>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10c      	bne.n	8001544 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6613      	str	r3, [r2, #96]	; 0x60
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
}
 8001542:	e010      	b.n	8001566 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_TIM_Base_MspInit+0x98>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10b      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001558:	6613      	str	r3, [r2, #96]	; 0x60
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40001400 	.word	0x40001400
 8001574:	40021000 	.word	0x40021000
 8001578:	40014400 	.word	0x40014400
 800157c:	40014800 	.word	0x40014800

08001580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	; 0x38
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a65      	ldr	r2, [pc, #404]	; (8001734 <HAL_TIM_MspPostInit+0x1b4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d11e      	bne.n	80015e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a64      	ldr	r2, [pc, #400]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b62      	ldr	r3, [pc, #392]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80015ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015cc:	2306      	movs	r3, #6
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f000 fabb 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80015de:	e0a5      	b.n	800172c <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a55      	ldr	r2, [pc, #340]	; (800173c <HAL_TIM_MspPostInit+0x1bc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d139      	bne.n	800165e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b53      	ldr	r3, [pc, #332]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a52      	ldr	r2, [pc, #328]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a4c      	ldr	r2, [pc, #304]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800161a:	2350      	movs	r3, #80	; 0x50
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800162a:	2302      	movs	r3, #2
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f000 fa8c 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163c:	2301      	movs	r3, #1
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800164c:	2302      	movs	r3, #2
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	483a      	ldr	r0, [pc, #232]	; (8001740 <HAL_TIM_MspPostInit+0x1c0>)
 8001658:	f000 fa7c 	bl	8001b54 <HAL_GPIO_Init>
}
 800165c:	e066      	b.n	800172c <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a38      	ldr	r2, [pc, #224]	; (8001744 <HAL_TIM_MspPostInit+0x1c4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d11d      	bne.n	80016a4 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001680:	2304      	movs	r3, #4
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001690:	2309      	movs	r3, #9
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f000 fa59 	bl	8001b54 <HAL_GPIO_Init>
}
 80016a2:	e043      	b.n	800172c <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <HAL_TIM_MspPostInit+0x1c8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d11c      	bne.n	80016e8 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016c6:	2310      	movs	r3, #16
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80016d6:	2301      	movs	r3, #1
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	4817      	ldr	r0, [pc, #92]	; (8001740 <HAL_TIM_MspPostInit+0x1c0>)
 80016e2:	f000 fa37 	bl	8001b54 <HAL_GPIO_Init>
}
 80016e6:	e021      	b.n	800172c <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_TIM_MspPostInit+0x1cc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d11c      	bne.n	800172c <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_TIM_MspPostInit+0x1b8>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800171a:	2301      	movs	r3, #1
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f000 fa14 	bl	8001b54 <HAL_GPIO_Init>
}
 800172c:	bf00      	nop
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40000400 	.word	0x40000400
 8001740:	48000400 	.word	0x48000400
 8001744:	40014000 	.word	0x40014000
 8001748:	40014400 	.word	0x40014400
 800174c:	40014800 	.word	0x40014800

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f8a8 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <USB_LP_IRQHandler+0x10>)
 80017b2:	f000 fca2 	bl	80020fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200013a4 	.word	0x200013a4

080017c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM7_IRQHandler+0x10>)
 80017c6:	f003 f9e6 	bl	8004b96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200006b4 	.word	0x200006b4

080017d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <SystemInit+0x28>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <SystemInit+0x28>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SystemInit+0x28>)
 80017ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ee:	609a      	str	r2, [r3, #8]
#endif
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001802:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <LoopForever+0x6>)
  ldr r1, =_edata
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LoopForever+0xe>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LoopForever+0x12>)
  ldr r4, =_ebss
 800181c:	4c0b      	ldr	r4, [pc, #44]	; (800184c <LoopForever+0x16>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800182a:	f7ff ffd3 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182e:	f008 fb1f 	bl	8009e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001832:	f7fe fee7 	bl	8000604 <main>

08001836 <LoopForever>:

LoopForever:
    b LoopForever
 8001836:	e7fe      	b.n	8001836 <LoopForever>
  ldr   r0, =_estack
 8001838:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001844:	08009f58 	.word	0x08009f58
  ldr r2, =_sbss
 8001848:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800184c:	20001698 	.word	0x20001698

08001850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC1_2_IRQHandler>

08001852 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f939 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f80e 	bl	8001884 <HAL_InitTick>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	e001      	b.n	8001878 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001874:	f7ff fd08 	bl	8001288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001878:	79fb      	ldrb	r3, [r7, #7]

}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_InitTick+0x68>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d022      	beq.n	80018de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_InitTick+0x6c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_InitTick+0x68>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f944 	bl	8001b3a <HAL_SYSTICK_Config>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10f      	bne.n	80018d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	d809      	bhi.n	80018d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018be:	2200      	movs	r2, #0
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	f04f 30ff 	mov.w	r0, #4294967295
 80018c6:	f000 f910 	bl	8001aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <HAL_InitTick+0x70>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	e004      	b.n	80018e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e001      	b.n	80018e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x1c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_IncTick+0x20>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4413      	add	r3, r2
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <HAL_IncTick+0x1c>)
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000700 	.word	0x20000700
 8001918:	20000008 	.word	0x20000008

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000700 	.word	0x20000700

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff29 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff40 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff90 	bl	8001a28 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5f 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff33 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffa4 	bl	8001a90 <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b62:	e15a      	b.n	8001e1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 814c 	beq.w	8001e14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d00b      	beq.n	8001b9c <HAL_GPIO_Init+0x48>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d007      	beq.n	8001b9c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b90:	2b11      	cmp	r3, #17
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b12      	cmp	r3, #18
 8001b9a:	d130      	bne.n	8001bfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 0201 	and.w	r2, r3, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0xea>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d123      	bne.n	8001c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0203 	and.w	r2, r3, #3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80a6 	beq.w	8001e14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	4a5a      	ldr	r2, [pc, #360]	; (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd4:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce0:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d0a:	d01f      	beq.n	8001d4c <HAL_GPIO_Init+0x1f8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <HAL_GPIO_Init+0x2ec>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d019      	beq.n	8001d48 <HAL_GPIO_Init+0x1f4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4b      	ldr	r2, [pc, #300]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_GPIO_Init+0x1f0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4a      	ldr	r2, [pc, #296]	; (8001e48 <HAL_GPIO_Init+0x2f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00d      	beq.n	8001d40 <HAL_GPIO_Init+0x1ec>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_GPIO_Init+0x2f8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x1e8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_GPIO_Init+0x1e4>
 8001d34:	2305      	movs	r3, #5
 8001d36:	e00a      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d38:	2306      	movs	r3, #6
 8001d3a:	e008      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d40:	2303      	movs	r3, #3
 8001d42:	e004      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	f002 0203 	and.w	r2, r2, #3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4093      	lsls	r3, r2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5e:	4937      	ldr	r1, [pc, #220]	; (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d90:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dba:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e0e:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f47f ae9d 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800
 8001e48:	48000c00 	.word	0x48000c00
 8001e4c:	48001000 	.word	0x48001000
 8001e50:	48001400 	.word	0x48001400
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e001      	b.n	8001e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43d9      	mvns	r1, r3
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	400b      	ands	r3, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	af06      	add	r7, sp, #24
 8001ef2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0d7      	b.n	80020ae <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f007 fcbc 	bl	8009890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fe18 	bl	8005b5a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e04c      	b.n	8001fca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	3301      	adds	r3, #1
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	b298      	uxth	r0, r3
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3336      	adds	r3, #54	; 0x36
 8001f6e:	4602      	mov	r2, r0
 8001f70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3303      	adds	r3, #3
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3338      	adds	r3, #56	; 0x38
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	333c      	adds	r3, #60	; 0x3c
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3340      	adds	r3, #64	; 0x40
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3ad      	bcc.n	8001f30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e044      	b.n	8002064 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3301      	adds	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d3b5      	bcc.n	8001fda <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	687e      	ldr	r6, [r7, #4]
 8002076:	466d      	mov	r5, sp
 8002078:	f106 0410 	add.w	r4, r6, #16
 800207c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	602b      	str	r3, [r5, #0]
 8002084:	1d33      	adds	r3, r6, #4
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	6838      	ldr	r0, [r7, #0]
 800208a:	f003 fd81 	bl	8005b90 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f001 fa5e 	bl	8003568 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_PCD_Start+0x16>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e012      	b.n	80020f2 <HAL_PCD_Start+0x3c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fd27 	bl	8005b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 fd13 	bl	8007b0e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f005 fd18 	bl	8007b3c <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002116:	d102      	bne.n	800211e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fb5b 	bl	80027d4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f005 fd0a 	bl	8007b3c <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002132:	d112      	bne.n	800215a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002146:	b292      	uxth	r2, r2
 8002148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f007 fc1a 	bl	8009986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002152:	2100      	movs	r1, #0
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f91e 	bl	8002396 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f005 fcec 	bl	8007b3c <USB_ReadInterrupts>
 8002164:	4603      	mov	r3, r0
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800216e:	d10b      	bne.n	8002188 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002182:	b292      	uxth	r2, r2
 8002184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f005 fcd5 	bl	8007b3c <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219c:	d10b      	bne.n	80021b6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b0:	b292      	uxth	r2, r2
 80021b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fcbe 	bl	8007b3c <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d133      	bne.n	8002234 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	b292      	uxth	r2, r2
 80021e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0208 	bic.w	r2, r2, #8
 80021f6:	b292      	uxth	r2, r2
 80021f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002202:	2b01      	cmp	r3, #1
 8002204:	d107      	bne.n	8002216 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800220e:	2100      	movs	r1, #0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f007 fdad 	bl	8009d70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f007 fbee 	bl	80099f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800222e:	b292      	uxth	r2, r2
 8002230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f005 fc7f 	bl	8007b3c <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002248:	d126      	bne.n	8002298 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0208 	orr.w	r2, r2, #8
 800225c:	b292      	uxth	r2, r2
 800225e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002274:	b292      	uxth	r2, r2
 8002276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0204 	orr.w	r2, r2, #4
 800228c:	b292      	uxth	r2, r2
 800228e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f007 fb96 	bl	80099c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f005 fc4d 	bl	8007b3c <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d13f      	bne.n	800232c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022be:	b292      	uxth	r2, r2
 80022c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d12b      	bne.n	8002326 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0204 	orr.w	r2, r2, #4
 80022e0:	b292      	uxth	r2, r2
 80022e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0208 	orr.w	r2, r2, #8
 80022f8:	b292      	uxth	r2, r2
 80022fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800230e:	b29b      	uxth	r3, r3
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800231c:	2101      	movs	r1, #1
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f007 fd26 	bl	8009d70 <HAL_PCDEx_LPM_Callback>
 8002324:	e002      	b.n	800232c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f007 fb4c 	bl	80099c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f005 fc03 	bl	8007b3c <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002340:	d10e      	bne.n	8002360 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002354:	b292      	uxth	r2, r2
 8002356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f007 fb05 	bl	800996a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f005 fbe9 	bl	8007b3c <USB_ReadInterrupts>
 800236a:	4603      	mov	r3, r0
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002374:	d10b      	bne.n	800238e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800237e:	b29a      	uxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	b292      	uxth	r2, r2
 800238a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_SetAddress+0x1a>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e013      	b.n	80023d8 <HAL_PCD_SetAddress+0x42>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f005 fb8c 	bl	8007ae6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	70fb      	strb	r3, [r7, #3]
 80023f2:	460b      	mov	r3, r1
 80023f4:	803b      	strh	r3, [r7, #0]
 80023f6:	4613      	mov	r3, r2
 80023f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0e      	bge.n	8002424 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	705a      	strb	r2, [r3, #1]
 8002422:	e00e      	b.n	8002442 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 0207 	and.w	r2, r3, #7
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800244e:	883a      	ldrh	r2, [r7, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	78ba      	ldrb	r2, [r7, #2]
 8002458:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800246c:	78bb      	ldrb	r3, [r7, #2]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d102      	bne.n	8002478 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_PCD_EP_Open+0xa6>
 8002482:	2302      	movs	r3, #2
 8002484:	e00e      	b.n	80024a4 <HAL_PCD_EP_Open+0xc4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fb9d 	bl	8005bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80024a2:	7afb      	ldrb	r3, [r7, #11]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da0e      	bge.n	80024de <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	705a      	strb	r2, [r3, #1]
 80024dc:	e00e      	b.n	80024fc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 0207 	and.w	r2, r3, #7
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	b2da      	uxtb	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_PCD_EP_Close+0x6a>
 8002512:	2302      	movs	r3, #2
 8002514:	e00e      	b.n	8002534 <HAL_PCD_EP_Close+0x88>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fec3 	bl	80062b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	f003 0207 	and.w	r2, r3, #7
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2200      	movs	r2, #0
 800257a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	b2da      	uxtb	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6979      	ldr	r1, [r7, #20]
 8002598:	4618      	mov	r0, r3
 800259a:	f004 f876 	bl	800668a <USB_EPStartXfer>
 800259e:	e005      	b.n	80025ac <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6979      	ldr	r1, [r7, #20]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 f86f 	bl	800668a <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 0207 	and.w	r2, r3, #7
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80025d8:	681b      	ldr	r3, [r3, #0]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	460b      	mov	r3, r1
 80025f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f6:	7afb      	ldrb	r3, [r7, #11]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4413      	add	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2200      	movs	r2, #0
 800262a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2201      	movs	r2, #1
 8002630:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	b2da      	uxtb	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6979      	ldr	r1, [r7, #20]
 800264e:	4618      	mov	r0, r3
 8002650:	f004 f81b 	bl	800668a <USB_EPStartXfer>
 8002654:	e005      	b.n	8002662 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6979      	ldr	r1, [r7, #20]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 f814 	bl	800668a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 0207 	and.w	r2, r3, #7
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d901      	bls.n	800268a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e04c      	b.n	8002724 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800268a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268e:	2b00      	cmp	r3, #0
 8002690:	da0e      	bge.n	80026b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	705a      	strb	r2, [r3, #1]
 80026ae:	e00c      	b.n	80026ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_EP_SetStall+0x7e>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e01c      	b.n	8002724 <HAL_PCD_EP_SetStall+0xb8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f005 f8f5 	bl	80078e8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	2b00      	cmp	r3, #0
 8002706:	d108      	bne.n	800271a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f005 fa21 	bl	8007b5c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d901      	bls.n	800274a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e040      	b.n	80027cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800274a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274e:	2b00      	cmp	r3, #0
 8002750:	da0e      	bge.n	8002770 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	705a      	strb	r2, [r3, #1]
 800276e:	e00e      	b.n	800278e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 0207 	and.w	r2, r3, #7
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	b2da      	uxtb	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_PCD_EP_ClrStall+0x82>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e00e      	b.n	80027cc <HAL_PCD_EP_ClrStall+0xa0>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68f9      	ldr	r1, [r7, #12]
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 f8e4 	bl	800798a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027dc:	e2d1      	b.n	8002d82 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80027f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8152 	bne.w	8002aa2 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d150      	bne.n	80028aa <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	81fb      	strh	r3, [r7, #14]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002828:	b29b      	uxth	r3, r3
 800282a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3328      	adds	r3, #40	; 0x28
 8002830:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	4413      	add	r3, r2
 800284c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	441a      	add	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002868:	2100      	movs	r1, #0
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f007 f863 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8282 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x5ae>
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 827d 	bne.w	8002d82 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002894:	b2da      	uxtb	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b292      	uxth	r2, r2
 800289c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a8:	e26b      	b.n	8002d82 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d032      	beq.n	800292a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f005 f979 	bl	8007bf6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29a      	uxth	r2, r3
 800290c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002910:	4013      	ands	r3, r2
 8002912:	823b      	strh	r3, [r7, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	8a3a      	ldrh	r2, [r7, #16]
 800291a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800291e:	b292      	uxth	r2, r2
 8002920:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f006 ffda 	bl	80098dc <HAL_PCD_SetupStageCallback>
 8002928:	e22b      	b.n	8002d82 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800292a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800292e:	2b00      	cmp	r3, #0
 8002930:	f280 8227 	bge.w	8002d82 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29a      	uxth	r2, r3
 800293c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002940:	4013      	ands	r3, r2
 8002942:	83bb      	strh	r3, [r7, #28]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	8bba      	ldrh	r2, [r7, #28]
 800294a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800294e:	b292      	uxth	r2, r2
 8002950:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	4413      	add	r3, r2
 800296c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d019      	beq.n	80029b6 <PCD_EP_ISR_Handler+0x1e2>
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	6959      	ldr	r1, [r3, #20]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800299a:	b29b      	uxth	r3, r3
 800299c:	f005 f92b 	bl	8007bf6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	441a      	add	r2, r3
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029ae:	2100      	movs	r1, #0
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f006 ffa5 	bl	8009900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d112      	bne.n	8002a04 <PCD_EP_ISR_Handler+0x230>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	e02f      	b.n	8002a64 <PCD_EP_ISR_Handler+0x290>
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b3e      	cmp	r3, #62	; 0x3e
 8002a0a:	d813      	bhi.n	8002a34 <PCD_EP_ISR_Handler+0x260>
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <PCD_EP_ISR_Handler+0x252>
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	3301      	adds	r3, #1
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	029b      	lsls	r3, r3, #10
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	e017      	b.n	8002a64 <PCD_EP_ISR_Handler+0x290>
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <PCD_EP_ISR_Handler+0x27a>
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	827b      	strh	r3, [r7, #18]
 8002a76:	8a7b      	ldrh	r3, [r7, #18]
 8002a78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a7c:	827b      	strh	r3, [r7, #18]
 8002a7e:	8a7b      	ldrh	r3, [r7, #18]
 8002a80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a84:	827b      	strh	r3, [r7, #18]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8013      	strh	r3, [r2, #0]
 8002aa0:	e16f      	b.n	8002d82 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ab4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f280 80e4 	bge.w	8002c86 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	853b      	strh	r3, [r7, #40]	; 0x28
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aec:	b292      	uxth	r2, r2
 8002aee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002af0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	7b1b      	ldrb	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d120      	bne.n	8002b50 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b32:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8083 	beq.w	8002c42 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	6959      	ldr	r1, [r3, #20]
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	88da      	ldrh	r2, [r3, #6]
 8002b48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b4a:	f005 f854 	bl	8007bf6 <USB_ReadPMA>
 8002b4e:	e078      	b.n	8002c42 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	78db      	ldrb	r3, [r3, #3]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d108      	bne.n	8002b6a <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f91d 	bl	8002d9e <HAL_PCD_EP_DB_Receive>
 8002b64:	4603      	mov	r3, r0
 8002b66:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b68:	e06b      	b.n	8002c42 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b84:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	441a      	add	r2, r3
 8002b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01f      	beq.n	8002c04 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002bea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d028      	beq.n	8002c42 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	6959      	ldr	r1, [r3, #20]
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	891a      	ldrh	r2, [r3, #8]
 8002bfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bfe:	f004 fffa 	bl	8007bf6 <USB_ReadPMA>
 8002c02:	e01e      	b.n	8002c42 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c28:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	6959      	ldr	r1, [r3, #20]
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	895a      	ldrh	r2, [r3, #10]
 8002c3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c3e:	f004 ffda 	bl	8007bf6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c48:	441a      	add	r2, r3
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c54:	441a      	add	r2, r3
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <PCD_EP_ISR_Handler+0x498>
 8002c62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d206      	bcs.n	8002c7a <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f006 fe44 	bl	8009900 <HAL_PCD_DataOutStageCallback>
 8002c78:	e005      	b.n	8002c86 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fd02 	bl	800668a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d078      	beq.n	8002d82 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	843b      	strh	r3, [r7, #32]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	8c3b      	ldrh	r3, [r7, #32]
 8002cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	78db      	ldrb	r3, [r3, #3]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d108      	bne.n	8002cf6 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d144      	bne.n	8002d76 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002cec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d13f      	bne.n	8002d76 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	8bfb      	ldrh	r3, [r7, #30]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d906      	bls.n	8002d34 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	8bfb      	ldrh	r3, [r7, #30]
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	619a      	str	r2, [r3, #24]
 8002d32:	e002      	b.n	8002d3a <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f006 fdf4 	bl	8009936 <HAL_PCD_DataInStageCallback>
 8002d4e:	e018      	b.n	8002d82 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	8bfb      	ldrh	r3, [r7, #30]
 8002d56:	441a      	add	r2, r3
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	8bfb      	ldrh	r3, [r7, #30]
 8002d62:	441a      	add	r2, r3
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fc8b 	bl	800668a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002d74:	e005      	b.n	8002d82 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f917 	bl	8002fb0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f6ff ad25 	blt.w	80027de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3738      	adds	r7, #56	; 0x38
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b088      	sub	sp, #32
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07c      	beq.n	8002eb0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	8b7b      	ldrh	r3, [r7, #26]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d306      	bcc.n	8002df4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	8b7b      	ldrh	r3, [r7, #26]
 8002dec:	1ad2      	subs	r2, r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	619a      	str	r2, [r3, #24]
 8002df2:	e002      	b.n	8002dfa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d123      	bne.n	8002e4a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	833b      	strh	r3, [r7, #24]
 8002e1e:	8b3b      	ldrh	r3, [r7, #24]
 8002e20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e24:	833b      	strh	r3, [r7, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	8b3b      	ldrh	r3, [r7, #24]
 8002e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01f      	beq.n	8002e94 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	82fb      	strh	r3, [r7, #22]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	441a      	add	r2, r3
 8002e7e:	8afb      	ldrh	r3, [r7, #22]
 8002e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e94:	8b7b      	ldrh	r3, [r7, #26]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8085 	beq.w	8002fa6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6959      	ldr	r1, [r3, #20]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	891a      	ldrh	r2, [r3, #8]
 8002ea8:	8b7b      	ldrh	r3, [r7, #26]
 8002eaa:	f004 fea4 	bl	8007bf6 <USB_ReadPMA>
 8002eae:	e07a      	b.n	8002fa6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	8b7b      	ldrh	r3, [r7, #26]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d306      	bcc.n	8002eee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	8b7b      	ldrh	r3, [r7, #26]
 8002ee6:	1ad2      	subs	r2, r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	619a      	str	r2, [r3, #24]
 8002eec:	e002      	b.n	8002ef4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d123      	bne.n	8002f44 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	83fb      	strh	r3, [r7, #30]
 8002f18:	8bfb      	ldrh	r3, [r7, #30]
 8002f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f1e:	83fb      	strh	r3, [r7, #30]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	441a      	add	r2, r3
 8002f2e:	8bfb      	ldrh	r3, [r7, #30]
 8002f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11f      	bne.n	8002f8e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f68:	83bb      	strh	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	8bbb      	ldrh	r3, [r7, #28]
 8002f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f8e:	8b7b      	ldrh	r3, [r7, #26]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6959      	ldr	r1, [r3, #20]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	895a      	ldrh	r2, [r3, #10]
 8002fa0:	8b7b      	ldrh	r3, [r7, #26]
 8002fa2:	f004 fe28 	bl	8007bf6 <USB_ReadPMA>
    }
  }

  return count;
 8002fa6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b092      	sub	sp, #72	; 0x48
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8130 	beq.w	800322a <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d906      	bls.n	8003008 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	619a      	str	r2, [r3, #24]
 8003006:	e002      	b.n	800300e <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d12c      	bne.n	8003070 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	4619      	mov	r1, r3
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f006 fc8a 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 822d 	beq.w	8003488 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	827b      	strh	r3, [r7, #18]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	441a      	add	r2, r3
 8003058:	8a7b      	ldrh	r3, [r7, #18]
 800305a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800305e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306a:	b29b      	uxth	r3, r3
 800306c:	8013      	strh	r3, [r2, #0]
 800306e:	e20b      	b.n	8003488 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01f      	beq.n	80030ba <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003094:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	441a      	add	r2, r3
 80030a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 81e1 	bne.w	8003488 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030cc:	441a      	add	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030d8:	441a      	add	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d309      	bcc.n	80030fe <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	1ad2      	subs	r2, r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	621a      	str	r2, [r3, #32]
 80030fc:	e014      	b.n	8003128 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8003106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003108:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003112:	e009      	b.n	8003128 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2200      	movs	r2, #0
 8003126:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d155      	bne.n	80031dc <HAL_PCD_EP_DB_Transmit+0x22c>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4413      	add	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	00da      	lsls	r2, r3, #3
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4413      	add	r3, r2
 8003152:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315a:	2b00      	cmp	r3, #0
 800315c:	d112      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x1d4>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003168:	b29a      	uxth	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	801a      	strh	r2, [r3, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317c:	b29a      	uxth	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e047      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x264>
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	2b3e      	cmp	r3, #62	; 0x3e
 8003188:	d811      	bhi.n	80031ae <HAL_PCD_EP_DB_Transmit+0x1fe>
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_PCD_EP_DB_Transmit+0x1f0>
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	3301      	adds	r3, #1
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	e032      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x264>
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x214>
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	029b      	lsls	r3, r3, #10
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	e01b      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x264>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d117      	bne.n	8003214 <HAL_PCD_EP_DB_Transmit+0x264>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	623b      	str	r3, [r7, #32]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	4413      	add	r3, r2
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	00da      	lsls	r2, r3, #3
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	4413      	add	r3, r2
 8003206:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	b29a      	uxth	r2, r3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6959      	ldr	r1, [r3, #20]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	891a      	ldrh	r2, [r3, #8]
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	b29b      	uxth	r3, r3
 8003224:	f004 fca6 	bl	8007b74 <USB_WritePMA>
 8003228:	e12e      	b.n	8003488 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003232:	b29b      	uxth	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4413      	add	r3, r2
 8003244:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800324e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003256:	429a      	cmp	r2, r3
 8003258:	d306      	bcc.n	8003268 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003260:	1ad2      	subs	r2, r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	619a      	str	r2, [r3, #24]
 8003266:	e002      	b.n	800326e <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12c      	bne.n	80032d0 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	4619      	mov	r1, r3
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f006 fb5a 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 80fd 	bne.w	8003488 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	8013      	strh	r3, [r2, #0]
 80032ce:	e0db      	b.n	8003488 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11f      	bne.n	800331a <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	441a      	add	r2, r3
 8003304:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003316:	b29b      	uxth	r3, r3
 8003318:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003320:	2b01      	cmp	r3, #1
 8003322:	f040 80b1 	bne.w	8003488 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800332c:	441a      	add	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003338:	441a      	add	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	429a      	cmp	r2, r3
 8003348:	d309      	bcc.n	800335e <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	621a      	str	r2, [r3, #32]
 800335c:	e014      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8003366:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003372:	e009      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2200      	movs	r2, #0
 800337e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d155      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x492>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033aa:	4413      	add	r3, r2
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	00da      	lsls	r2, r3, #3
 80033b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b6:	4413      	add	r3, r2
 80033b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d112      	bne.n	80033ea <HAL_PCD_EP_DB_Transmit+0x43a>
 80033c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e044      	b.n	8003474 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	2b3e      	cmp	r3, #62	; 0x3e
 80033ee:	d811      	bhi.n	8003414 <HAL_PCD_EP_DB_Transmit+0x464>
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_PCD_EP_DB_Transmit+0x456>
 8003400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003402:	3301      	adds	r3, #1
 8003404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	b29b      	uxth	r3, r3
 800340a:	029b      	lsls	r3, r3, #10
 800340c:	b29a      	uxth	r2, r3
 800340e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	e02f      	b.n	8003474 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_PCD_EP_DB_Transmit+0x47a>
 8003424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003426:	3b01      	subs	r3, #1
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800342c:	b29b      	uxth	r3, r3
 800342e:	029b      	lsls	r3, r3, #10
 8003430:	b29b      	uxth	r3, r3
 8003432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343a:	b29a      	uxth	r2, r3
 800343c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	e018      	b.n	8003474 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d114      	bne.n	8003474 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003458:	4413      	add	r3, r2
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	00da      	lsls	r2, r3, #3
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	4413      	add	r3, r2
 8003466:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	b29a      	uxth	r2, r3
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6959      	ldr	r1, [r3, #20]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	895a      	ldrh	r2, [r3, #10]
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	b29b      	uxth	r3, r3
 8003484:	f004 fb76 	bl	8007b74 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a2:	823b      	strh	r3, [r7, #16]
 80034a4:	8a3b      	ldrh	r3, [r7, #16]
 80034a6:	f083 0310 	eor.w	r3, r3, #16
 80034aa:	823b      	strh	r3, [r7, #16]
 80034ac:	8a3b      	ldrh	r3, [r7, #16]
 80034ae:	f083 0320 	eor.w	r3, r3, #32
 80034b2:	823b      	strh	r3, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	8a3b      	ldrh	r3, [r7, #16]
 80034c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3748      	adds	r7, #72	; 0x48
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
 80034f0:	4613      	mov	r3, r2
 80034f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034f4:	897b      	ldrh	r3, [r7, #10]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003500:	897b      	ldrh	r3, [r7, #10]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e009      	b.n	800352c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003518:	897a      	ldrh	r2, [r7, #10]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800352c:	893b      	ldrh	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d107      	bne.n	8003542 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	b29a      	uxth	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	80da      	strh	r2, [r3, #6]
 8003540:	e00b      	b.n	800355a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2201      	movs	r2, #1
 8003546:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	b29a      	uxth	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b29a      	uxth	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800358c:	b29b      	uxth	r3, r3
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f043 0302 	orr.w	r3, r3, #2
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d141      	bne.n	800364e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ca:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d131      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035d8:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035de:	4a46      	ldr	r2, [pc, #280]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035f0:	4a41      	ldr	r2, [pc, #260]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035f8:	4b40      	ldr	r3, [pc, #256]	; (80036fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2232      	movs	r2, #50	; 0x32
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	4a3f      	ldr	r2, [pc, #252]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	0c9b      	lsrs	r3, r3, #18
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800360e:	e002      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b01      	subs	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003616:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003622:	d102      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f2      	bne.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800362a:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d158      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e057      	b.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800363c:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800364c:	e04d      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d141      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d131      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366a:	4a23      	ldr	r2, [pc, #140]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367c:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2232      	movs	r2, #50	; 0x32
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9b      	lsrs	r3, r3, #18
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369a:	e002      	b.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d102      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f2      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d112      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e011      	b.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036d8:	e007      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e2:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40007000 	.word	0x40007000
 80036fc:	20000000 	.word	0x20000000
 8003700:	431bde83 	.word	0x431bde83

08003704 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800370e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003712:	6093      	str	r3, [r2, #8]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40007000 	.word	0x40007000

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e308      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d075      	beq.n	800382e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003742:	4ba3      	ldr	r3, [pc, #652]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374c:	4ba0      	ldr	r3, [pc, #640]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d102      	bne.n	8003762 <HAL_RCC_OscConfig+0x3e>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d002      	beq.n	8003768 <HAL_RCC_OscConfig+0x44>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d10b      	bne.n	8003780 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	4b99      	ldr	r3, [pc, #612]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d05b      	beq.n	800382c <HAL_RCC_OscConfig+0x108>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d157      	bne.n	800382c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e2e3      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x74>
 800378a:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a90      	ldr	r2, [pc, #576]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01d      	b.n	80037d4 <HAL_RCC_OscConfig+0xb0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x98>
 80037a2:	4b8b      	ldr	r3, [pc, #556]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a8a      	ldr	r2, [pc, #552]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a87      	ldr	r2, [pc, #540]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0xb0>
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a83      	ldr	r2, [pc, #524]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe f89e 	bl	800191c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe f89a 	bl	800191c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e2a8      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0xc0>
 8003802:	e014      	b.n	800382e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe f88a 	bl	800191c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe f886 	bl	800191c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e294      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381e:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0xe8>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d075      	beq.n	8003926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003844:	4b62      	ldr	r3, [pc, #392]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d102      	bne.n	800385a <HAL_RCC_OscConfig+0x136>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d002      	beq.n	8003860 <HAL_RCC_OscConfig+0x13c>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11f      	bne.n	80038a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003860:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_OscConfig+0x154>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e267      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b55      	ldr	r3, [pc, #340]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	4952      	ldr	r1, [pc, #328]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800388c:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <HAL_RCC_OscConfig+0x2b0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fff7 	bl	8001884 <HAL_InitTick>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d043      	beq.n	8003924 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e253      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d023      	beq.n	80038f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe f832 	bl	800191c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fe f82e 	bl	800191c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e23c      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ce:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	061b      	lsls	r3, r3, #24
 80038e8:	4939      	ldr	r1, [pc, #228]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
 80038ee:	e01a      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe f80e 	bl	800191c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003904:	f7fe f80a 	bl	800191c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e218      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x1e0>
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003924:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03c      	beq.n	80039ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01c      	beq.n	8003974 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003940:	4a23      	ldr	r2, [pc, #140]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fd ffe7 	bl	800191c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003952:	f7fd ffe3 	bl	800191c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1f1      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ef      	beq.n	8003952 <HAL_RCC_OscConfig+0x22e>
 8003972:	e01b      	b.n	80039ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397a:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fd ffca 	bl	800191c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fd ffc6 	bl	800191c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1d4      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ef      	bne.n	800398c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80ab 	beq.w	8003b10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2b4>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e005      	b.n	80039da <HAL_RCC_OscConfig+0x2b6>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	20000004 	.word	0x20000004
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4baf      	ldr	r3, [pc, #700]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	4aae      	ldr	r2, [pc, #696]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ea:	4bac      	ldr	r3, [pc, #688]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	4ba9      	ldr	r3, [pc, #676]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a06:	4ba6      	ldr	r3, [pc, #664]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4aa5      	ldr	r2, [pc, #660]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fd ff83 	bl	800191c <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fd ff7f 	bl	800191c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e18d      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2c:	4b9c      	ldr	r3, [pc, #624]	; (8003ca0 <HAL_RCC_OscConfig+0x57c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d108      	bne.n	8003a52 <HAL_RCC_OscConfig+0x32e>
 8003a40:	4b96      	ldr	r3, [pc, #600]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	4a95      	ldr	r2, [pc, #596]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a50:	e024      	b.n	8003a9c <HAL_RCC_OscConfig+0x378>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d110      	bne.n	8003a7c <HAL_RCC_OscConfig+0x358>
 8003a5a:	4b90      	ldr	r3, [pc, #576]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	4a8e      	ldr	r2, [pc, #568]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6a:	4b8c      	ldr	r3, [pc, #560]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	4a8a      	ldr	r2, [pc, #552]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7a:	e00f      	b.n	8003a9c <HAL_RCC_OscConfig+0x378>
 8003a7c:	4b87      	ldr	r3, [pc, #540]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a86      	ldr	r2, [pc, #536]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8c:	4b83      	ldr	r3, [pc, #524]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a82      	ldr	r2, [pc, #520]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd ff3a 	bl	800191c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd ff36 	bl	800191c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e142      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ed      	beq.n	8003aac <HAL_RCC_OscConfig+0x388>
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fd ff23 	bl	800191c <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fd ff1f 	bl	800191c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e12b      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ed      	bne.n	8003ada <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b04:	4b65      	ldr	r3, [pc, #404]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d03c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b24:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2a:	4a5c      	ldr	r2, [pc, #368]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd fef2 	bl	800191c <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b3c:	f7fd feee 	bl	800191c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0fc      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b4e:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ef      	beq.n	8003b3c <HAL_RCC_OscConfig+0x418>
 8003b5c:	e01b      	b.n	8003b96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b5e:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b64:	4a4d      	ldr	r2, [pc, #308]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fed5 	bl	800191c <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b76:	f7fd fed1 	bl	800191c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0df      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b88:	4b44      	ldr	r3, [pc, #272]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ef      	bne.n	8003b76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80d3 	beq.w	8003d46 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	f000 808d 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d15a      	bne.n	8003c6c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd feab 	bl	800191c <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fd fea7 	bl	800191c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0b5      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bdc:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x580>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6a11      	ldr	r1, [r2, #32]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf8:	3a01      	subs	r2, #1
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c02:	0212      	lsls	r2, r2, #8
 8003c04:	4311      	orrs	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c0a:	0852      	lsrs	r2, r2, #1
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	0552      	lsls	r2, r2, #21
 8003c10:	4311      	orrs	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c16:	0852      	lsrs	r2, r2, #1
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	0652      	lsls	r2, r2, #25
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c22:	06d2      	lsls	r2, r2, #27
 8003c24:	430a      	orrs	r2, r1
 8003c26:	491d      	ldr	r1, [pc, #116]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fe6a 	bl	800191c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fd fe66 	bl	800191c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e074      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x528>
 8003c6a:	e06c      	b.n	8003d46 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <HAL_RCC_OscConfig+0x578>)
 8003c8a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fd fe42 	bl	800191c <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9a:	e00e      	b.n	8003cba <HAL_RCC_OscConfig+0x596>
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd fe38 	bl	800191c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e046      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_OscConfig+0x62c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x584>
 8003cc6:	e03e      	b.n	8003d46 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e039      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCC_OscConfig+0x62c>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0203 	and.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d12c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d123      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d11b      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d113      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e11e      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b91      	ldr	r3, [pc, #580]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b8e      	ldr	r3, [pc, #568]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 020f 	bic.w	r2, r3, #15
 8003d82:	498c      	ldr	r1, [pc, #560]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b8a      	ldr	r3, [pc, #552]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e106      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d073      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d129      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0f4      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003dc0:	f000 f966 	bl	8004090 <RCC_GetSysClockFreqFromPLLSource>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <HAL_RCC_ClockConfig+0x268>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d93f      	bls.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dce:	4b7a      	ldr	r3, [pc, #488]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d033      	beq.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d12f      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dee:	4b72      	ldr	r3, [pc, #456]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df6:	4a70      	ldr	r2, [pc, #448]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e024      	b.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0c6      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e1c:	4b66      	ldr	r3, [pc, #408]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0be      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e2c:	f000 f8ce 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4a61      	ldr	r2, [pc, #388]	; (8003fbc <HAL_RCC_ClockConfig+0x268>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d909      	bls.n	8003e4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e42:	4a5d      	ldr	r2, [pc, #372]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4b5a      	ldr	r3, [pc, #360]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4957      	ldr	r1, [pc, #348]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fd fd5c 	bl	800191c <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fd fd58 	bl	800191c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e095      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b4e      	ldr	r3, [pc, #312]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d023      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a42      	ldr	r2, [pc, #264]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ec0:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ec8:	4a3b      	ldr	r2, [pc, #236]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ece:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b39      	ldr	r3, [pc, #228]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4936      	ldr	r1, [pc, #216]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eea:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4a32      	ldr	r2, [pc, #200]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d21d      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 020f 	bic.w	r2, r3, #15
 8003f0c:	4929      	ldr	r1, [pc, #164]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f14:	f7fd fd02 	bl	800191c <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd fcfe 	bl	800191c <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e03b      	b.n	8003faa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1ed      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4917      	ldr	r1, [pc, #92]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	490f      	ldr	r1, [pc, #60]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f7e:	f000 f825 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f82:	4601      	mov	r1, r0
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCC_ClockConfig+0x264>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_RCC_ClockConfig+0x26c>)
 8003f90:	5cd3      	ldrb	r3, [r2, r3]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	fa21 f303 	lsr.w	r3, r1, r3
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x270>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCC_ClockConfig+0x274>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd fc6e 	bl	8001884 <HAL_InitTick>
 8003fa8:	4603      	mov	r3, r0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	04c4b400 	.word	0x04c4b400
 8003fc0:	08009f40 	.word	0x08009f40
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	20000004 	.word	0x20000004

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e047      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fe4:	4b27      	ldr	r3, [pc, #156]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e03e      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d136      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800400c:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	3301      	adds	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d10c      	bne.n	800403a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004020:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	4a16      	ldr	r2, [pc, #88]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402a:	68d2      	ldr	r2, [r2, #12]
 800402c:	0a12      	lsrs	r2, r2, #8
 800402e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	617b      	str	r3, [r7, #20]
      break;
 8004038:	e00c      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <HAL_RCC_GetSysClockFreq+0xbc>)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	4a10      	ldr	r2, [pc, #64]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004044:	68d2      	ldr	r2, [r2, #12]
 8004046:	0a12      	lsrs	r2, r2, #8
 8004048:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
      break;
 8004052:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0e5b      	lsrs	r3, r3, #25
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	e001      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004074:	693b      	ldr	r3, [r7, #16]
}
 8004076:	4618      	mov	r0, r3
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3301      	adds	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d10c      	bne.n	80040ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040be:	68d2      	ldr	r2, [r2, #12]
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	617b      	str	r3, [r7, #20]
    break;
 80040cc:	e00c      	b.n	80040e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	4a0e      	ldr	r2, [pc, #56]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d8:	68d2      	ldr	r2, [r2, #12]
 80040da:	0a12      	lsrs	r2, r2, #8
 80040dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040e0:	fb02 f303 	mul.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
    break;
 80040e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	0e5b      	lsrs	r3, r3, #25
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004102:	687b      	ldr	r3, [r7, #4]
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40021000 	.word	0x40021000
 8004114:	007a1200 	.word	0x007a1200
 8004118:	00f42400 	.word	0x00f42400

0800411c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004124:	2300      	movs	r3, #0
 8004126:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004128:	2300      	movs	r3, #0
 800412a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8098 	beq.w	800426a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	4b40      	ldr	r3, [pc, #256]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	4a3f      	ldr	r2, [pc, #252]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6593      	str	r3, [r2, #88]	; 0x58
 8004156:	4b3d      	ldr	r3, [pc, #244]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004166:	4b3a      	ldr	r3, [pc, #232]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a39      	ldr	r2, [pc, #228]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004172:	f7fd fbd3 	bl	800191c <HAL_GetTick>
 8004176:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004178:	e009      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fd fbcf 	bl	800191c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d902      	bls.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	74fb      	strb	r3, [r7, #19]
        break;
 800418c:	e005      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800418e:	4b30      	ldr	r3, [pc, #192]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ef      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d159      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041a0:	4b2a      	ldr	r3, [pc, #168]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01e      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d019      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	4a1b      	ldr	r2, [pc, #108]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fd fb8f 	bl	800191c <HAL_GetTick>
 80041fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004200:	e00b      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fd fb8b 	bl	800191c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d902      	bls.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	74fb      	strb	r3, [r7, #19]
            break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ec      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004244:	e008      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	74bb      	strb	r3, [r7, #18]
 800424a:	e005      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800424c:	40021000 	.word	0x40021000
 8004250:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004258:	7c7b      	ldrb	r3, [r7, #17]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d105      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425e:	4ba6      	ldr	r3, [pc, #664]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	4aa5      	ldr	r2, [pc, #660]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004268:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004276:	4ba0      	ldr	r3, [pc, #640]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f023 0203 	bic.w	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	499c      	ldr	r1, [pc, #624]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004298:	4b97      	ldr	r3, [pc, #604]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 020c 	bic.w	r2, r3, #12
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	4994      	ldr	r1, [pc, #592]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ba:	4b8f      	ldr	r3, [pc, #572]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	498b      	ldr	r1, [pc, #556]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042dc:	4b86      	ldr	r3, [pc, #536]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	4983      	ldr	r1, [pc, #524]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042fe:	4b7e      	ldr	r3, [pc, #504]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	497a      	ldr	r1, [pc, #488]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004320:	4b75      	ldr	r3, [pc, #468]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	4972      	ldr	r1, [pc, #456]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004342:	4b6d      	ldr	r3, [pc, #436]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4969      	ldr	r1, [pc, #420]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004364:	4b64      	ldr	r3, [pc, #400]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	4961      	ldr	r1, [pc, #388]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004386:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	4958      	ldr	r1, [pc, #352]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d015      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	4950      	ldr	r1, [pc, #320]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c6:	d105      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a4a      	ldr	r2, [pc, #296]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d015      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e0:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4942      	ldr	r1, [pc, #264]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fe:	d105      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004400:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a3c      	ldr	r2, [pc, #240]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004418:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	4934      	ldr	r1, [pc, #208]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004436:	d105      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004438:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a2e      	ldr	r2, [pc, #184]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004442:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004450:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	4926      	ldr	r1, [pc, #152]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446e:	d105      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	4918      	ldr	r1, [pc, #96]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	490a      	ldr	r1, [pc, #40]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044de:	d105      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e049      	b.n	80045a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fc ffde 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 fde2 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d001      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e04a      	b.n	800465a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <HAL_TIM_Base_Start_IT+0xbc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d018      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x6c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d013      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x6c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_TIM_Base_Start_IT+0xc0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00e      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x6c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_TIM_Base_Start_IT+0xc4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d009      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x6c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <HAL_TIM_Base_Start_IT+0xc8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x6c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_TIM_Base_Start_IT+0xcc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d115      	bne.n	8004644 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_TIM_Base_Start_IT+0xd0>)
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b06      	cmp	r3, #6
 8004628:	d015      	beq.n	8004656 <HAL_TIM_Base_Start_IT+0xaa>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d011      	beq.n	8004656 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004642:	e008      	b.n	8004656 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e000      	b.n	8004658 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004656:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40013400 	.word	0x40013400
 8004678:	40014000 	.word	0x40014000
 800467c:	00010007 	.word	0x00010007

08004680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e049      	b.n	8004726 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fe12 	bl	80012d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f000 fd20 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_TIM_PWM_Start+0x24>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	bf14      	ite	ne
 800474c:	2301      	movne	r3, #1
 800474e:	2300      	moveq	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	e03c      	b.n	80047ce <HAL_TIM_PWM_Start+0x9e>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d109      	bne.n	800476e <HAL_TIM_PWM_Start+0x3e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e02f      	b.n	80047ce <HAL_TIM_PWM_Start+0x9e>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d109      	bne.n	8004788 <HAL_TIM_PWM_Start+0x58>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e022      	b.n	80047ce <HAL_TIM_PWM_Start+0x9e>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d109      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x72>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	bf14      	ite	ne
 800479a:	2301      	movne	r3, #1
 800479c:	2300      	moveq	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	e015      	b.n	80047ce <HAL_TIM_PWM_Start+0x9e>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d109      	bne.n	80047bc <HAL_TIM_PWM_Start+0x8c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e008      	b.n	80047ce <HAL_TIM_PWM_Start+0x9e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e097      	b.n	8004906 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Start+0xb6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	e023      	b.n	800482e <HAL_TIM_PWM_Start+0xfe>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0xc6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f4:	e01b      	b.n	800482e <HAL_TIM_PWM_Start+0xfe>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0xd6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004804:	e013      	b.n	800482e <HAL_TIM_PWM_Start+0xfe>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0xe6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004814:	e00b      	b.n	800482e <HAL_TIM_PWM_Start+0xfe>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start+0xf6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004824:	e003      	b.n	800482e <HAL_TIM_PWM_Start+0xfe>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2201      	movs	r2, #1
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 ffea 	bl	8005810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a33      	ldr	r2, [pc, #204]	; (8004910 <HAL_TIM_PWM_Start+0x1e0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_TIM_PWM_Start+0x13e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a32      	ldr	r2, [pc, #200]	; (8004914 <HAL_TIM_PWM_Start+0x1e4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_TIM_PWM_Start+0x13e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	; (8004918 <HAL_TIM_PWM_Start+0x1e8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_TIM_PWM_Start+0x13e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2f      	ldr	r2, [pc, #188]	; (800491c <HAL_TIM_PWM_Start+0x1ec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIM_PWM_Start+0x13e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <HAL_TIM_PWM_Start+0x1f0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_TIM_PWM_Start+0x142>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <HAL_TIM_PWM_Start+0x144>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004886:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a20      	ldr	r2, [pc, #128]	; (8004910 <HAL_TIM_PWM_Start+0x1e0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d018      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x194>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d013      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x194>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a20      	ldr	r2, [pc, #128]	; (8004924 <HAL_TIM_PWM_Start+0x1f4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00e      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x194>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <HAL_TIM_PWM_Start+0x1f8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x194>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_TIM_PWM_Start+0x1e4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x194>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a16      	ldr	r2, [pc, #88]	; (8004918 <HAL_TIM_PWM_Start+0x1e8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d115      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <HAL_TIM_PWM_Start+0x1fc>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b06      	cmp	r3, #6
 80048d4:	d015      	beq.n	8004902 <HAL_TIM_PWM_Start+0x1d2>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d011      	beq.n	8004902 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	e008      	b.n	8004902 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e000      	b.n	8004904 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40012c00 	.word	0x40012c00
 8004914:	40013400 	.word	0x40013400
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	00010007 	.word	0x00010007

08004930 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e097      	b.n	8004a74 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fc fd01 	bl	8001360 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004974:	f023 0307 	bic.w	r3, r3, #7
 8004978:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f000 fbbd 	bl	8005104 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	4313      	orrs	r3, r2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049d0:	f023 030c 	bic.w	r3, r3, #12
 80049d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	4313      	orrs	r3, r2
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	011a      	lsls	r2, r3, #4
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	031b      	lsls	r3, r3, #12
 8004a00:	4313      	orrs	r3, r2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	4313      	orrs	r3, r2
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d102      	bne.n	8004ab8 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ab2:	7b7b      	ldrb	r3, [r7, #13]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e068      	b.n	8004b8e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004acc:	e031      	b.n	8004b32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d110      	bne.n	8004af6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad4:	7bbb      	ldrb	r3, [r7, #14]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ada:	7b3b      	ldrb	r3, [r7, #12]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d001      	beq.n	8004ae4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e054      	b.n	8004b8e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af4:	e01d      	b.n	8004b32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d108      	bne.n	8004b0e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d105      	bne.n	8004b0e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b02:	7b7b      	ldrb	r3, [r7, #13]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d102      	bne.n	8004b0e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b08:	7b3b      	ldrb	r3, [r7, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d001      	beq.n	8004b12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e03d      	b.n	8004b8e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_TIM_Encoder_Start+0xc2>
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d008      	beq.n	8004b4e <HAL_TIM_Encoder_Start+0xd2>
 8004b3c:	e00f      	b.n	8004b5e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fe62 	bl	8005810 <TIM_CCxChannelCmd>
      break;
 8004b4c:	e016      	b.n	8004b7c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2201      	movs	r2, #1
 8004b54:	2104      	movs	r1, #4
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fe5a 	bl	8005810 <TIM_CCxChannelCmd>
      break;
 8004b5c:	e00e      	b.n	8004b7c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2201      	movs	r2, #1
 8004b64:	2100      	movs	r1, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fe52 	bl	8005810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2201      	movs	r2, #1
 8004b72:	2104      	movs	r1, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fe4b 	bl	8005810 <TIM_CCxChannelCmd>
      break;
 8004b7a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d122      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d11b      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f06f 0202 	mvn.w	r2, #2
 8004bc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa75 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004bde:	e005      	b.n	8004bec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fa67 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa78 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d122      	bne.n	8004c46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d11b      	bne.n	8004c46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f06f 0204 	mvn.w	r2, #4
 8004c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa4b 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004c32:	e005      	b.n	8004c40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fa3d 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa4e 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d122      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d11b      	bne.n	8004c9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0208 	mvn.w	r2, #8
 8004c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa21 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004c86:	e005      	b.n	8004c94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fa13 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa24 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d122      	bne.n	8004cee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d11b      	bne.n	8004cee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0210 	mvn.w	r2, #16
 8004cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f9f7 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004cda:	e005      	b.n	8004ce8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f9e9 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9fa 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10e      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d107      	bne.n	8004d1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0201 	mvn.w	r2, #1
 8004d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fc f9f1 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d10e      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d107      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 feb7 	bl	8005ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d54:	d10e      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b80      	cmp	r3, #128	; 0x80
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 feaa 	bl	8005ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f9a8 	bl	80050f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0220 	mvn.w	r2, #32
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fe6a 	bl	8005aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dda:	d10f      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dea:	d107      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fe70 	bl	8005adc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0a:	d10f      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fe62 	bl	8005af0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3a:	d10f      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fe54 	bl	8005b04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e6a:	d10f      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fe46 	bl	8005b18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e0fd      	b.n	80050aa <HAL_TIM_PWM_ConfigChannel+0x216>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b14      	cmp	r3, #20
 8004eba:	f200 80f0 	bhi.w	800509e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	0800509f 	.word	0x0800509f
 8004ecc:	0800509f 	.word	0x0800509f
 8004ed0:	0800509f 	.word	0x0800509f
 8004ed4:	08004f59 	.word	0x08004f59
 8004ed8:	0800509f 	.word	0x0800509f
 8004edc:	0800509f 	.word	0x0800509f
 8004ee0:	0800509f 	.word	0x0800509f
 8004ee4:	08004f9b 	.word	0x08004f9b
 8004ee8:	0800509f 	.word	0x0800509f
 8004eec:	0800509f 	.word	0x0800509f
 8004ef0:	0800509f 	.word	0x0800509f
 8004ef4:	08004fdb 	.word	0x08004fdb
 8004ef8:	0800509f 	.word	0x0800509f
 8004efc:	0800509f 	.word	0x0800509f
 8004f00:	0800509f 	.word	0x0800509f
 8004f04:	0800501d 	.word	0x0800501d
 8004f08:	0800509f 	.word	0x0800509f
 8004f0c:	0800509f 	.word	0x0800509f
 8004f10:	0800509f 	.word	0x0800509f
 8004f14:	0800505d 	.word	0x0800505d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f980 	bl	8005224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0204 	bic.w	r2, r2, #4
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	619a      	str	r2, [r3, #24]
      break;
 8004f56:	e0a3      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f9f0 	bl	8005344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]
      break;
 8004f98:	e082      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fa59 	bl	8005458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0204 	bic.w	r2, r2, #4
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
      break;
 8004fd8:	e062      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fac1 	bl	8005568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	021a      	lsls	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	61da      	str	r2, [r3, #28]
      break;
 800501a:	e041      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fb2a 	bl	800567c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0208 	orr.w	r2, r2, #8
 8005036:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0204 	bic.w	r2, r2, #4
 8005046:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800505a:	e021      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fb6e 	bl	8005744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005076:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005086:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800509c:	e000      	b.n	80050a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800509e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop

080050b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3c      	ldr	r2, [pc, #240]	; (8005208 <TIM_Base_SetConfig+0x104>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00f      	beq.n	800513c <TIM_Base_SetConfig+0x38>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d00b      	beq.n	800513c <TIM_Base_SetConfig+0x38>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a39      	ldr	r2, [pc, #228]	; (800520c <TIM_Base_SetConfig+0x108>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d007      	beq.n	800513c <TIM_Base_SetConfig+0x38>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a38      	ldr	r2, [pc, #224]	; (8005210 <TIM_Base_SetConfig+0x10c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_Base_SetConfig+0x38>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a37      	ldr	r2, [pc, #220]	; (8005214 <TIM_Base_SetConfig+0x110>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d108      	bne.n	800514e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <TIM_Base_SetConfig+0x104>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01b      	beq.n	800518e <TIM_Base_SetConfig+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515c:	d017      	beq.n	800518e <TIM_Base_SetConfig+0x8a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2a      	ldr	r2, [pc, #168]	; (800520c <TIM_Base_SetConfig+0x108>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <TIM_Base_SetConfig+0x8a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a29      	ldr	r2, [pc, #164]	; (8005210 <TIM_Base_SetConfig+0x10c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00f      	beq.n	800518e <TIM_Base_SetConfig+0x8a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a28      	ldr	r2, [pc, #160]	; (8005214 <TIM_Base_SetConfig+0x110>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00b      	beq.n	800518e <TIM_Base_SetConfig+0x8a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a27      	ldr	r2, [pc, #156]	; (8005218 <TIM_Base_SetConfig+0x114>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <TIM_Base_SetConfig+0x8a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a26      	ldr	r2, [pc, #152]	; (800521c <TIM_Base_SetConfig+0x118>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a25      	ldr	r2, [pc, #148]	; (8005220 <TIM_Base_SetConfig+0x11c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d108      	bne.n	80051a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <TIM_Base_SetConfig+0x104>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0xe8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a11      	ldr	r2, [pc, #68]	; (8005214 <TIM_Base_SetConfig+0x110>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0xe8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a10      	ldr	r2, [pc, #64]	; (8005218 <TIM_Base_SetConfig+0x114>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0xe8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0f      	ldr	r2, [pc, #60]	; (800521c <TIM_Base_SetConfig+0x118>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0xe8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <TIM_Base_SetConfig+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 0302 	bic.w	r3, r3, #2
 8005270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a2c      	ldr	r2, [pc, #176]	; (8005330 <TIM_OC1_SetConfig+0x10c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_OC1_SetConfig+0x80>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <TIM_OC1_SetConfig+0x110>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_OC1_SetConfig+0x80>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <TIM_OC1_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_OC1_SetConfig+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a29      	ldr	r2, [pc, #164]	; (800533c <TIM_OC1_SetConfig+0x118>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC1_SetConfig+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a28      	ldr	r2, [pc, #160]	; (8005340 <TIM_OC1_SetConfig+0x11c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0308 	bic.w	r3, r3, #8
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 0304 	bic.w	r3, r3, #4
 80052bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <TIM_OC1_SetConfig+0x10c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00f      	beq.n	80052e6 <TIM_OC1_SetConfig+0xc2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <TIM_OC1_SetConfig+0x110>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_OC1_SetConfig+0xc2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <TIM_OC1_SetConfig+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_OC1_SetConfig+0xc2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a18      	ldr	r2, [pc, #96]	; (800533c <TIM_OC1_SetConfig+0x118>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC1_SetConfig+0xc2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <TIM_OC1_SetConfig+0x11c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d111      	bne.n	800530a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0210 	bic.w	r2, r3, #16
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a28      	ldr	r2, [pc, #160]	; (8005444 <TIM_OC2_SetConfig+0x100>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC2_SetConfig+0x6c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a27      	ldr	r2, [pc, #156]	; (8005448 <TIM_OC2_SetConfig+0x104>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10d      	bne.n	80053cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <TIM_OC2_SetConfig+0x100>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00f      	beq.n	80053f4 <TIM_OC2_SetConfig+0xb0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <TIM_OC2_SetConfig+0x104>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <TIM_OC2_SetConfig+0xb0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <TIM_OC2_SetConfig+0x108>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_OC2_SetConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <TIM_OC2_SetConfig+0x10c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC2_SetConfig+0xb0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a19      	ldr	r2, [pc, #100]	; (8005454 <TIM_OC2_SetConfig+0x110>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d113      	bne.n	800541c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a27      	ldr	r2, [pc, #156]	; (8005554 <TIM_OC3_SetConfig+0xfc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <TIM_OC3_SetConfig+0x6a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a26      	ldr	r2, [pc, #152]	; (8005558 <TIM_OC3_SetConfig+0x100>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10d      	bne.n	80054de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	; (8005554 <TIM_OC3_SetConfig+0xfc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00f      	beq.n	8005506 <TIM_OC3_SetConfig+0xae>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1b      	ldr	r2, [pc, #108]	; (8005558 <TIM_OC3_SetConfig+0x100>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_OC3_SetConfig+0xae>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	; (800555c <TIM_OC3_SetConfig+0x104>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_OC3_SetConfig+0xae>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <TIM_OC3_SetConfig+0x108>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_OC3_SetConfig+0xae>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <TIM_OC3_SetConfig+0x10c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d113      	bne.n	800552e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800550c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40013400 	.word	0x40013400
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	031b      	lsls	r3, r3, #12
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a28      	ldr	r2, [pc, #160]	; (8005668 <TIM_OC4_SetConfig+0x100>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_OC4_SetConfig+0x6c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a27      	ldr	r2, [pc, #156]	; (800566c <TIM_OC4_SetConfig+0x104>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10d      	bne.n	80055f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	031b      	lsls	r3, r3, #12
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <TIM_OC4_SetConfig+0x100>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00f      	beq.n	8005618 <TIM_OC4_SetConfig+0xb0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <TIM_OC4_SetConfig+0x104>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00b      	beq.n	8005618 <TIM_OC4_SetConfig+0xb0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <TIM_OC4_SetConfig+0x108>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_OC4_SetConfig+0xb0>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a1a      	ldr	r2, [pc, #104]	; (8005674 <TIM_OC4_SetConfig+0x10c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_OC4_SetConfig+0xb0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a19      	ldr	r2, [pc, #100]	; (8005678 <TIM_OC4_SetConfig+0x110>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d113      	bne.n	8005640 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800561e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005626:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	019b      	lsls	r3, r3, #6
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40013400 	.word	0x40013400
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800

0800567c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <TIM_OC5_SetConfig+0xb4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_OC5_SetConfig+0x7a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <TIM_OC5_SetConfig+0xb8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_OC5_SetConfig+0x7a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a15      	ldr	r2, [pc, #84]	; (8005738 <TIM_OC5_SetConfig+0xbc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_OC5_SetConfig+0x7a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <TIM_OC5_SetConfig+0xc0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_OC5_SetConfig+0x7a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a13      	ldr	r2, [pc, #76]	; (8005740 <TIM_OC5_SetConfig+0xc4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d109      	bne.n	800570a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40013400 	.word	0x40013400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800578a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	051b      	lsls	r3, r3, #20
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <TIM_OC6_SetConfig+0xb8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_OC6_SetConfig+0x7c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a17      	ldr	r2, [pc, #92]	; (8005800 <TIM_OC6_SetConfig+0xbc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_OC6_SetConfig+0x7c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a16      	ldr	r2, [pc, #88]	; (8005804 <TIM_OC6_SetConfig+0xc0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_OC6_SetConfig+0x7c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <TIM_OC6_SetConfig+0xc4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC6_SetConfig+0x7c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a14      	ldr	r2, [pc, #80]	; (800580c <TIM_OC6_SetConfig+0xc8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d109      	bne.n	80057d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40013400 	.word	0x40013400
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800

08005810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	2201      	movs	r2, #1
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1a      	ldr	r2, [r3, #32]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	43db      	mvns	r3, r3
 8005832:	401a      	ands	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005870:	2302      	movs	r3, #2
 8005872:	e065      	b.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2c      	ldr	r2, [pc, #176]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d018      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d013      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a18      	ldr	r2, [pc, #96]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a12      	ldr	r2, [pc, #72]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a13      	ldr	r2, [pc, #76]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d10c      	bne.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800591a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40013400 	.word	0x40013400
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40014000 	.word	0x40014000

08005960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e087      	b.n	8005a8c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a27      	ldr	r2, [pc, #156]	; (8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d106      	bne.n	8005a18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d126      	bne.n	8005a7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	051b      	lsls	r3, r3, #20
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d106      	bne.n	8005a7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40013400 	.word	0x40013400

08005aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b3c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005b40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b62:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005b66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4013      	ands	r3, r2
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b90:	b084      	sub	sp, #16
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	f107 0014 	add.w	r0, r7, #20
 8005b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	b004      	add	sp, #16
 8005bd0:	4770      	bx	lr
	...

08005bd4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b09b      	sub	sp, #108	; 0x6c
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	78db      	ldrb	r3, [r3, #3]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d81f      	bhi.n	8005c46 <USB_ActivateEndpoint+0x72>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <USB_ActivateEndpoint+0x38>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c1d 	.word	0x08005c1d
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c4f 	.word	0x08005c4f
 8005c18:	08005c2b 	.word	0x08005c2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c28:	e012      	b.n	8005c50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005c32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c36:	e00b      	b.n	8005c50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005c44:	e004      	b.n	8005c50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005c4c:	e000      	b.n	8005c50 <USB_ActivateEndpoint+0x7c>
      break;
 8005c4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	b21b      	sxth	r3, r3
 8005c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	b21a      	sxth	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b21b      	sxth	r3, r3
 8005c92:	4313      	orrs	r3, r2
 8005c94:	b21b      	sxth	r3, r3
 8005c96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	7b1b      	ldrb	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 8149 	bne.w	8005f58 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8084 	beq.w	8005dd8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	00da      	lsls	r2, r3, #3
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	88db      	ldrh	r3, [r3, #6]
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	81fb      	strh	r3, [r7, #14]
 8005d12:	89fb      	ldrh	r3, [r7, #14]
 8005d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01b      	beq.n	8005d54 <USB_ActivateEndpoint+0x180>
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	81bb      	strh	r3, [r7, #12]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	89bb      	ldrh	r3, [r7, #12]
 8005d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	78db      	ldrb	r3, [r3, #3]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d020      	beq.n	8005d9e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d72:	813b      	strh	r3, [r7, #8]
 8005d74:	893b      	ldrh	r3, [r7, #8]
 8005d76:	f083 0320 	eor.w	r3, r3, #32
 8005d7a:	813b      	strh	r3, [r7, #8]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	893b      	ldrh	r3, [r7, #8]
 8005d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	8013      	strh	r3, [r2, #0]
 8005d9c:	e27f      	b.n	800629e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db4:	817b      	strh	r3, [r7, #10]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	897b      	ldrh	r3, [r7, #10]
 8005dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	8013      	strh	r3, [r2, #0]
 8005dd6:	e262      	b.n	800629e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	461a      	mov	r2, r3
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	4413      	add	r3, r2
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	00da      	lsls	r2, r3, #3
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	88db      	ldrh	r3, [r3, #6]
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	4413      	add	r3, r2
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	00da      	lsls	r2, r3, #3
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d112      	bne.n	8005e5e <USB_ActivateEndpoint+0x28a>
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e02f      	b.n	8005ebe <USB_ActivateEndpoint+0x2ea>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b3e      	cmp	r3, #62	; 0x3e
 8005e64:	d813      	bhi.n	8005e8e <USB_ActivateEndpoint+0x2ba>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <USB_ActivateEndpoint+0x2ac>
 8005e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	029b      	lsls	r3, r3, #10
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	e017      	b.n	8005ebe <USB_ActivateEndpoint+0x2ea>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	663b      	str	r3, [r7, #96]	; 0x60
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <USB_ActivateEndpoint+0x2d4>
 8005ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ea8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	029b      	lsls	r3, r3, #10
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	83fb      	strh	r3, [r7, #30]
 8005ecc:	8bfb      	ldrh	r3, [r7, #30]
 8005ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01b      	beq.n	8005f0e <USB_ActivateEndpoint+0x33a>
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	83bb      	strh	r3, [r7, #28]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	8bbb      	ldrh	r3, [r7, #28]
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f24:	837b      	strh	r3, [r7, #26]
 8005f26:	8b7b      	ldrh	r3, [r7, #26]
 8005f28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f2c:	837b      	strh	r3, [r7, #26]
 8005f2e:	8b7b      	ldrh	r3, [r7, #26]
 8005f30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f34:	837b      	strh	r3, [r7, #26]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	8b7b      	ldrh	r3, [r7, #26]
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
 8005f56:	e1a2      	b.n	800629e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f88:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fa4:	4413      	add	r3, r2
 8005fa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00da      	lsls	r2, r3, #3
 8005fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	891b      	ldrh	r3, [r3, #8]
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	653b      	str	r3, [r7, #80]	; 0x50
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd8:	4413      	add	r3, r2
 8005fda:	653b      	str	r3, [r7, #80]	; 0x50
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	00da      	lsls	r2, r3, #3
 8005fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	895b      	ldrh	r3, [r3, #10]
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 8091 	bne.w	8006128 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006014:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01b      	beq.n	8006056 <USB_ActivateEndpoint+0x482>
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006034:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	441a      	add	r2, r3
 8006040:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	b29b      	uxth	r3, r3
 8006054:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	873b      	strh	r3, [r7, #56]	; 0x38
 8006064:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <USB_ActivateEndpoint+0x4d2>
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006104:	867b      	strh	r3, [r7, #50]	; 0x32
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
 8006126:	e0ba      	b.n	800629e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006138:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800613c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01d      	beq.n	8006180 <USB_ActivateEndpoint+0x5ac>
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800616c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	b29b      	uxth	r3, r3
 800617e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006190:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01d      	beq.n	80061d8 <USB_ActivateEndpoint+0x604>
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	441a      	add	r2, r3
 80061c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	78db      	ldrb	r3, [r3, #3]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d024      	beq.n	800622a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061fe:	f083 0320 	eor.w	r3, r3, #32
 8006202:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
 8006228:	e01d      	b.n	8006266 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006240:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	b29b      	uxth	r3, r3
 8006264:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800628a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629a:	b29b      	uxth	r3, r3
 800629c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800629e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	376c      	adds	r7, #108	; 0x6c
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop

080062b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b08d      	sub	sp, #52	; 0x34
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	7b1b      	ldrb	r3, [r3, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 808e 	bne.w	80063e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d044      	beq.n	8006356 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	81bb      	strh	r3, [r7, #12]
 80062da:	89bb      	ldrh	r3, [r7, #12]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01b      	beq.n	800631c <USB_DeactivateEndpoint+0x6c>
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	817b      	strh	r3, [r7, #10]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006318:	b29b      	uxth	r3, r3
 800631a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006332:	813b      	strh	r3, [r7, #8]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	441a      	add	r2, r3
 800633e:	893b      	ldrh	r3, [r7, #8]
 8006340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006350:	b29b      	uxth	r3, r3
 8006352:	8013      	strh	r3, [r2, #0]
 8006354:	e192      	b.n	800667c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	827b      	strh	r3, [r7, #18]
 8006364:	8a7b      	ldrh	r3, [r7, #18]
 8006366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01b      	beq.n	80063a6 <USB_DeactivateEndpoint+0xf6>
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006384:	823b      	strh	r3, [r7, #16]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	8a3b      	ldrh	r3, [r7, #16]
 8006392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800639e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	81fb      	strh	r3, [r7, #14]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	89fb      	ldrh	r3, [r7, #14]
 80063ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063da:	b29b      	uxth	r3, r3
 80063dc:	8013      	strh	r3, [r2, #0]
 80063de:	e14d      	b.n	800667c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 80a5 	bne.w	8006534 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	843b      	strh	r3, [r7, #32]
 80063f8:	8c3b      	ldrh	r3, [r7, #32]
 80063fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01b      	beq.n	800643a <USB_DeactivateEndpoint+0x18a>
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006418:	83fb      	strh	r3, [r7, #30]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	441a      	add	r2, r3
 8006424:	8bfb      	ldrh	r3, [r7, #30]
 8006426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006436:	b29b      	uxth	r3, r3
 8006438:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	83bb      	strh	r3, [r7, #28]
 8006448:	8bbb      	ldrh	r3, [r7, #28]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01b      	beq.n	800648a <USB_DeactivateEndpoint+0x1da>
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006468:	837b      	strh	r3, [r7, #26]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8b7b      	ldrh	r3, [r7, #26]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	833b      	strh	r3, [r7, #24]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	8b3b      	ldrh	r3, [r7, #24]
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d8:	82fb      	strh	r3, [r7, #22]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	8afb      	ldrh	r3, [r7, #22]
 80064e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006510:	82bb      	strh	r3, [r7, #20]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8abb      	ldrh	r3, [r7, #20]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]
 8006532:	e0a3      	b.n	800667c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01b      	beq.n	8006584 <USB_DeactivateEndpoint+0x2d4>
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006562:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	441a      	add	r2, r3
 800656e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800657c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006580:	b29b      	uxth	r3, r3
 8006582:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01b      	beq.n	80065d4 <USB_DeactivateEndpoint+0x324>
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006608:	b29b      	uxth	r3, r3
 800660a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006622:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	441a      	add	r2, r3
 800662e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006640:	b29b      	uxth	r3, r3
 8006642:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	847b      	strh	r3, [r7, #34]	; 0x22
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3734      	adds	r7, #52	; 0x34
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b0c4      	sub	sp, #272	; 0x110
 800668e:	af00      	add	r7, sp, #0
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	6018      	str	r0, [r3, #0]
 8006694:	463b      	mov	r3, r7
 8006696:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006698:	463b      	mov	r3, r7
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	f040 8566 	bne.w	8007170 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80066a4:	463b      	mov	r3, r7
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	463b      	mov	r3, r7
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d905      	bls.n	80066c0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80066b4:	463b      	mov	r3, r7
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066be:	e004      	b.n	80066ca <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80066c0:	463b      	mov	r3, r7
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066ca:	463b      	mov	r3, r7
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	7b1b      	ldrb	r3, [r3, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d12c      	bne.n	800672e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6959      	ldr	r1, [r3, #20]
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	88da      	ldrh	r2, [r3, #6]
 80066e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	1d38      	adds	r0, r7, #4
 80066e8:	6800      	ldr	r0, [r0, #0]
 80066ea:	f001 fa43 	bl	8007b74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	1d3b      	adds	r3, r7, #4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4413      	add	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	463b      	mov	r3, r7
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	00da      	lsls	r2, r3, #3
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006716:	f107 0310 	add.w	r3, r7, #16
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006720:	b29a      	uxth	r2, r3
 8006722:	f107 0310 	add.w	r3, r7, #16
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	f000 bcec 	b.w	8007106 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	2b02      	cmp	r3, #2
 8006736:	f040 8356 	bne.w	8006de6 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	f240 82fa 	bls.w	8006d40 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800674c:	1d3b      	adds	r3, r7, #4
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	463b      	mov	r3, r7
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	463b      	mov	r3, r7
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006784:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800679a:	463b      	mov	r3, r7
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	463b      	mov	r3, r7
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067ac:	1d3b      	adds	r3, r7, #4
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 815e 	beq.w	8006a84 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
 80067ce:	463b      	mov	r3, r7
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d164      	bne.n	80068a2 <USB_EPStartXfer+0x218>
 80067d8:	1d3b      	adds	r3, r7, #4
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	4413      	add	r3, r2
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	00da      	lsls	r2, r3, #3
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	4413      	add	r3, r2
 80067fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
 8006802:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006806:	2b00      	cmp	r3, #0
 8006808:	d112      	bne.n	8006830 <USB_EPStartXfer+0x1a6>
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006814:	b29a      	uxth	r2, r3
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006828:	b29a      	uxth	r2, r3
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e054      	b.n	80068da <USB_EPStartXfer+0x250>
 8006830:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006834:	2b3e      	cmp	r3, #62	; 0x3e
 8006836:	d817      	bhi.n	8006868 <USB_EPStartXfer+0x1de>
 8006838:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006842:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <USB_EPStartXfer+0x1ce>
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006852:	3301      	adds	r3, #1
 8006854:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685c:	b29b      	uxth	r3, r3
 800685e:	029b      	lsls	r3, r3, #10
 8006860:	b29a      	uxth	r2, r3
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	801a      	strh	r2, [r3, #0]
 8006866:	e038      	b.n	80068da <USB_EPStartXfer+0x250>
 8006868:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006872:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <USB_EPStartXfer+0x1fe>
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006882:	3b01      	subs	r3, #1
 8006884:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688c:	b29b      	uxth	r3, r3
 800688e:	029b      	lsls	r3, r3, #10
 8006890:	b29b      	uxth	r3, r3
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	b29a      	uxth	r2, r3
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	e01b      	b.n	80068da <USB_EPStartXfer+0x250>
 80068a2:	463b      	mov	r3, r7
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d116      	bne.n	80068da <USB_EPStartXfer+0x250>
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	4413      	add	r3, r2
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
 80068be:	463b      	mov	r3, r7
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	00da      	lsls	r2, r3, #3
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	4413      	add	r3, r2
 80068ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068ce:	633b      	str	r3, [r7, #48]	; 0x30
 80068d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068da:	463b      	mov	r3, r7
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	895b      	ldrh	r3, [r3, #10]
 80068e0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6959      	ldr	r1, [r3, #20]
 80068ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80068f4:	1d38      	adds	r0, r7, #4
 80068f6:	6800      	ldr	r0, [r0, #0]
 80068f8:	f001 f93c 	bl	8007b74 <USB_WritePMA>
            ep->xfer_buff += len;
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006906:	441a      	add	r2, r3
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800690e:	463b      	mov	r3, r7
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	429a      	cmp	r2, r3
 800691c:	d90e      	bls.n	800693c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	463b      	mov	r3, r7
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	621a      	str	r2, [r3, #32]
 800693a:	e008      	b.n	800694e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800694e:	463b      	mov	r3, r7
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d164      	bne.n	8006a22 <USB_EPStartXfer+0x398>
 8006958:	1d3b      	adds	r3, r7, #4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006966:	b29b      	uxth	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	463b      	mov	r3, r7
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	00da      	lsls	r2, r3, #3
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006986:	2b00      	cmp	r3, #0
 8006988:	d112      	bne.n	80069b0 <USB_EPStartXfer+0x326>
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006994:	b29a      	uxth	r2, r3
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	e057      	b.n	8006a60 <USB_EPStartXfer+0x3d6>
 80069b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b4:	2b3e      	cmp	r3, #62	; 0x3e
 80069b6:	d817      	bhi.n	80069e8 <USB_EPStartXfer+0x35e>
 80069b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d004      	beq.n	80069d8 <USB_EPStartXfer+0x34e>
 80069ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069d2:	3301      	adds	r3, #1
 80069d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069dc:	b29b      	uxth	r3, r3
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	e03b      	b.n	8006a60 <USB_EPStartXfer+0x3d6>
 80069e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <USB_EPStartXfer+0x37e>
 80069fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a02:	3b01      	subs	r3, #1
 8006a04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	029b      	lsls	r3, r3, #10
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	801a      	strh	r2, [r3, #0]
 8006a20:	e01e      	b.n	8006a60 <USB_EPStartXfer+0x3d6>
 8006a22:	463b      	mov	r3, r7
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d119      	bne.n	8006a60 <USB_EPStartXfer+0x3d6>
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	4413      	add	r3, r2
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	00da      	lsls	r2, r3, #3
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a54:	623b      	str	r3, [r7, #32]
 8006a56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a60:	463b      	mov	r3, r7
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	891b      	ldrh	r3, [r3, #8]
 8006a66:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6959      	ldr	r1, [r3, #20]
 8006a70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a7a:	1d38      	adds	r0, r7, #4
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	f001 f879 	bl	8007b74 <USB_WritePMA>
 8006a82:	e340      	b.n	8007106 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a84:	463b      	mov	r3, r7
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d164      	bne.n	8006b58 <USB_EPStartXfer+0x4ce>
 8006a8e:	1d3b      	adds	r3, r7, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a94:	1d3b      	adds	r3, r7, #4
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	4413      	add	r3, r2
 8006aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	00da      	lsls	r2, r3, #3
 8006aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ab8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d112      	bne.n	8006ae6 <USB_EPStartXfer+0x45c>
 8006ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	e057      	b.n	8006b96 <USB_EPStartXfer+0x50c>
 8006ae6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aea:	2b3e      	cmp	r3, #62	; 0x3e
 8006aec:	d817      	bhi.n	8006b1e <USB_EPStartXfer+0x494>
 8006aee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d004      	beq.n	8006b0e <USB_EPStartXfer+0x484>
 8006b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	e03b      	b.n	8006b96 <USB_EPStartXfer+0x50c>
 8006b1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <USB_EPStartXfer+0x4b4>
 8006b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e01e      	b.n	8006b96 <USB_EPStartXfer+0x50c>
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d119      	bne.n	8006b96 <USB_EPStartXfer+0x50c>
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	657b      	str	r3, [r7, #84]	; 0x54
 8006b68:	1d3b      	adds	r3, r7, #4
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b76:	4413      	add	r3, r2
 8006b78:	657b      	str	r3, [r7, #84]	; 0x54
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	00da      	lsls	r2, r3, #3
 8006b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006b8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b96:	463b      	mov	r3, r7
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	891b      	ldrh	r3, [r3, #8]
 8006b9c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006bb0:	1d38      	adds	r0, r7, #4
 8006bb2:	6800      	ldr	r0, [r0, #0]
 8006bb4:	f000 ffde 	bl	8007b74 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bb8:	463b      	mov	r3, r7
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc2:	441a      	add	r2, r3
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006bca:	463b      	mov	r3, r7
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a1a      	ldr	r2, [r3, #32]
 8006bd0:	463b      	mov	r3, r7
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d90e      	bls.n	8006bf8 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006bda:	463b      	mov	r3, r7
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006be4:	463b      	mov	r3, r7
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6a1a      	ldr	r2, [r3, #32]
 8006bea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	463b      	mov	r3, r7
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	621a      	str	r2, [r3, #32]
 8006bf6:	e008      	b.n	8006c0a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006c02:	463b      	mov	r3, r7
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2200      	movs	r2, #0
 8006c08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c0a:	1d3b      	adds	r3, r7, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d164      	bne.n	8006ce4 <USB_EPStartXfer+0x65a>
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2e:	4413      	add	r3, r2
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c32:	463b      	mov	r3, r7
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	00da      	lsls	r2, r3, #3
 8006c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d112      	bne.n	8006c72 <USB_EPStartXfer+0x5e8>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e054      	b.n	8006d1c <USB_EPStartXfer+0x692>
 8006c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c76:	2b3e      	cmp	r3, #62	; 0x3e
 8006c78:	d817      	bhi.n	8006caa <USB_EPStartXfer+0x620>
 8006c7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <USB_EPStartXfer+0x610>
 8006c90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c94:	3301      	adds	r3, #1
 8006c96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	029b      	lsls	r3, r3, #10
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	e038      	b.n	8006d1c <USB_EPStartXfer+0x692>
 8006caa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <USB_EPStartXfer+0x640>
 8006cc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	029b      	lsls	r3, r3, #10
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e01b      	b.n	8006d1c <USB_EPStartXfer+0x692>
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d116      	bne.n	8006d1c <USB_EPStartXfer+0x692>
 8006cee:	1d3b      	adds	r3, r7, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfc:	4413      	add	r3, r2
 8006cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	00da      	lsls	r2, r3, #3
 8006d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d10:	643b      	str	r3, [r7, #64]	; 0x40
 8006d12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	895b      	ldrh	r3, [r3, #10]
 8006d22:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d26:	463b      	mov	r3, r7
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6959      	ldr	r1, [r3, #20]
 8006d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006d36:	1d38      	adds	r0, r7, #4
 8006d38:	6800      	ldr	r0, [r0, #0]
 8006d3a:	f000 ff1b 	bl	8007b74 <USB_WritePMA>
 8006d3e:	e1e2      	b.n	8007106 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006d40:	463b      	mov	r3, r7
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006d4a:	1d3b      	adds	r3, r7, #4
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	463b      	mov	r3, r7
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	663b      	str	r3, [r7, #96]	; 0x60
 8006d94:	1d3b      	adds	r3, r7, #4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da2:	4413      	add	r3, r2
 8006da4:	663b      	str	r3, [r7, #96]	; 0x60
 8006da6:	463b      	mov	r3, r7
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00da      	lsls	r2, r3, #3
 8006dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	891b      	ldrh	r3, [r3, #8]
 8006dc8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dcc:	463b      	mov	r3, r7
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6959      	ldr	r1, [r3, #20]
 8006dd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006ddc:	1d38      	adds	r0, r7, #4
 8006dde:	6800      	ldr	r0, [r0, #0]
 8006de0:	f000 fec8 	bl	8007b74 <USB_WritePMA>
 8006de4:	e18f      	b.n	8007106 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	463b      	mov	r3, r7
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 808f 	beq.w	8006f20 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e08:	463b      	mov	r3, r7
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d164      	bne.n	8006edc <USB_EPStartXfer+0x852>
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	673b      	str	r3, [r7, #112]	; 0x70
 8006e18:	1d3b      	adds	r3, r7, #4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e26:	4413      	add	r3, r2
 8006e28:	673b      	str	r3, [r7, #112]	; 0x70
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	00da      	lsls	r2, r3, #3
 8006e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e34:	4413      	add	r3, r2
 8006e36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d112      	bne.n	8006e6a <USB_EPStartXfer+0x7e0>
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	e054      	b.n	8006f14 <USB_EPStartXfer+0x88a>
 8006e6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e70:	d817      	bhi.n	8006ea2 <USB_EPStartXfer+0x818>
 8006e72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <USB_EPStartXfer+0x808>
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	029b      	lsls	r3, r3, #10
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e038      	b.n	8006f14 <USB_EPStartXfer+0x88a>
 8006ea2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006eac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <USB_EPStartXfer+0x838>
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	029b      	lsls	r3, r3, #10
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e01b      	b.n	8006f14 <USB_EPStartXfer+0x88a>
 8006edc:	463b      	mov	r3, r7
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d116      	bne.n	8006f14 <USB_EPStartXfer+0x88a>
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef4:	4413      	add	r3, r2
 8006ef6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ef8:	463b      	mov	r3, r7
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	00da      	lsls	r2, r3, #3
 8006f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f02:	4413      	add	r3, r2
 8006f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f08:	677b      	str	r3, [r7, #116]	; 0x74
 8006f0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f14:	463b      	mov	r3, r7
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	895b      	ldrh	r3, [r3, #10]
 8006f1a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006f1e:	e097      	b.n	8007050 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d168      	bne.n	8006ffc <USB_EPStartXfer+0x972>
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f32:	1d3b      	adds	r3, r7, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f42:	4413      	add	r3, r2
 8006f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f48:	463b      	mov	r3, r7
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	00da      	lsls	r2, r3, #3
 8006f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f54:	4413      	add	r3, r2
 8006f56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d112      	bne.n	8006f8a <USB_EPStartXfer+0x900>
 8006f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	e05d      	b.n	8007046 <USB_EPStartXfer+0x9bc>
 8006f8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f8e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f90:	d817      	bhi.n	8006fc2 <USB_EPStartXfer+0x938>
 8006f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <USB_EPStartXfer+0x928>
 8006fa8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fac:	3301      	adds	r3, #1
 8006fae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	029b      	lsls	r3, r3, #10
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	e041      	b.n	8007046 <USB_EPStartXfer+0x9bc>
 8006fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <USB_EPStartXfer+0x958>
 8006fd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fe2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	029b      	lsls	r3, r3, #10
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e024      	b.n	8007046 <USB_EPStartXfer+0x9bc>
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	785b      	ldrb	r3, [r3, #1]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d11f      	bne.n	8007046 <USB_EPStartXfer+0x9bc>
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800700e:	1d3b      	adds	r3, r7, #4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007016:	b29b      	uxth	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800701e:	4413      	add	r3, r2
 8007020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007024:	463b      	mov	r3, r7
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	00da      	lsls	r2, r3, #3
 800702c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007030:	4413      	add	r3, r2
 8007032:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800703a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007044:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007046:	463b      	mov	r3, r7
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	891b      	ldrh	r3, [r3, #8]
 800704c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007050:	463b      	mov	r3, r7
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800705a:	b29b      	uxth	r3, r3
 800705c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007060:	1d38      	adds	r0, r7, #4
 8007062:	6800      	ldr	r0, [r0, #0]
 8007064:	f000 fd86 	bl	8007b74 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d122      	bne.n	80070b8 <USB_EPStartXfer+0xa2e>
 8007072:	1d3b      	adds	r3, r7, #4
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	463b      	mov	r3, r7
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80070a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	8013      	strh	r3, [r2, #0]
 80070b6:	e026      	b.n	8007106 <USB_EPStartXfer+0xa7c>
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d121      	bne.n	8007106 <USB_EPStartXfer+0xa7c>
 80070c2:	1d3b      	adds	r3, r7, #4
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	463b      	mov	r3, r7
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80070e0:	1d3b      	adds	r3, r7, #4
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	463b      	mov	r3, r7
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	441a      	add	r2, r3
 80070ee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80070f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007102:	b29b      	uxth	r3, r3
 8007104:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007106:	1d3b      	adds	r3, r7, #4
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	463b      	mov	r3, r7
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f107 020e 	add.w	r2, r7, #14
 800711c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007124:	8013      	strh	r3, [r2, #0]
 8007126:	f107 030e 	add.w	r3, r7, #14
 800712a:	f107 020e 	add.w	r2, r7, #14
 800712e:	8812      	ldrh	r2, [r2, #0]
 8007130:	f082 0210 	eor.w	r2, r2, #16
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	f107 030e 	add.w	r3, r7, #14
 800713a:	f107 020e 	add.w	r2, r7, #14
 800713e:	8812      	ldrh	r2, [r2, #0]
 8007140:	f082 0220 	eor.w	r2, r2, #32
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	1d3b      	adds	r3, r7, #4
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	f107 030e 	add.w	r3, r7, #14
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
 800716e:	e3b5      	b.n	80078dc <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007170:	463b      	mov	r3, r7
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	7b1b      	ldrb	r3, [r3, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f040 8090 	bne.w	800729c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800717c:	463b      	mov	r3, r7
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	463b      	mov	r3, r7
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	429a      	cmp	r2, r3
 800718a:	d90e      	bls.n	80071aa <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800718c:	463b      	mov	r3, r7
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8007196:	463b      	mov	r3, r7
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	699a      	ldr	r2, [r3, #24]
 800719c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	463b      	mov	r3, r7
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	619a      	str	r2, [r3, #24]
 80071a8:	e008      	b.n	80071bc <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2200      	movs	r2, #0
 80071ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80071bc:	1d3b      	adds	r3, r7, #4
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071c4:	1d3b      	adds	r3, r7, #4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071d4:	4413      	add	r3, r2
 80071d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071da:	463b      	mov	r3, r7
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	00da      	lsls	r2, r3, #3
 80071e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071e6:	4413      	add	r3, r2
 80071e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d116      	bne.n	8007226 <USB_EPStartXfer+0xb9c>
 80071f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007204:	b29a      	uxth	r2, r3
 8007206:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721c:	b29a      	uxth	r2, r3
 800721e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e32c      	b.n	8007880 <USB_EPStartXfer+0x11f6>
 8007226:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800722a:	2b3e      	cmp	r3, #62	; 0x3e
 800722c:	d818      	bhi.n	8007260 <USB_EPStartXfer+0xbd6>
 800722e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007238:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <USB_EPStartXfer+0xbc4>
 8007244:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007248:	3301      	adds	r3, #1
 800724a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800724e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007252:	b29b      	uxth	r3, r3
 8007254:	029b      	lsls	r3, r3, #10
 8007256:	b29a      	uxth	r2, r3
 8007258:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800725c:	801a      	strh	r2, [r3, #0]
 800725e:	e30f      	b.n	8007880 <USB_EPStartXfer+0x11f6>
 8007260:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800726a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800726e:	f003 031f 	and.w	r3, r3, #31
 8007272:	2b00      	cmp	r3, #0
 8007274:	d104      	bne.n	8007280 <USB_EPStartXfer+0xbf6>
 8007276:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800727a:	3b01      	subs	r3, #1
 800727c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007280:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007284:	b29b      	uxth	r3, r3
 8007286:	029b      	lsls	r3, r3, #10
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007292:	b29a      	uxth	r2, r3
 8007294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	e2f1      	b.n	8007880 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800729c:	463b      	mov	r3, r7
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	f040 818f 	bne.w	80075c6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80072a8:	463b      	mov	r3, r7
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d175      	bne.n	800739e <USB_EPStartXfer+0xd14>
 80072b2:	1d3b      	adds	r3, r7, #4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072ba:	1d3b      	adds	r3, r7, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072ca:	4413      	add	r3, r2
 80072cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072d0:	463b      	mov	r3, r7
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	00da      	lsls	r2, r3, #3
 80072d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072dc:	4413      	add	r3, r2
 80072de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072e6:	463b      	mov	r3, r7
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d116      	bne.n	800731e <USB_EPStartXfer+0xc94>
 80072f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007314:	b29a      	uxth	r2, r3
 8007316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e065      	b.n	80073ea <USB_EPStartXfer+0xd60>
 800731e:	463b      	mov	r3, r7
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2b3e      	cmp	r3, #62	; 0x3e
 8007326:	d81a      	bhi.n	800735e <USB_EPStartXfer+0xcd4>
 8007328:	463b      	mov	r3, r7
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d004      	beq.n	800734c <USB_EPStartXfer+0xcc2>
 8007342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007346:	3301      	adds	r3, #1
 8007348:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800734c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007350:	b29b      	uxth	r3, r3
 8007352:	029b      	lsls	r3, r3, #10
 8007354:	b29a      	uxth	r2, r3
 8007356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	e045      	b.n	80073ea <USB_EPStartXfer+0xd60>
 800735e:	463b      	mov	r3, r7
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <USB_EPStartXfer+0xcf8>
 8007378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800737c:	3b01      	subs	r3, #1
 800737e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007382:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007386:	b29b      	uxth	r3, r3
 8007388:	029b      	lsls	r3, r3, #10
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007394:	b29a      	uxth	r2, r3
 8007396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e025      	b.n	80073ea <USB_EPStartXfer+0xd60>
 800739e:	463b      	mov	r3, r7
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d120      	bne.n	80073ea <USB_EPStartXfer+0xd60>
 80073a8:	1d3b      	adds	r3, r7, #4
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073b0:	1d3b      	adds	r3, r7, #4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073c0:	4413      	add	r3, r2
 80073c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073c6:	463b      	mov	r3, r7
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	00da      	lsls	r2, r3, #3
 80073ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073d2:	4413      	add	r3, r2
 80073d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073dc:	463b      	mov	r3, r7
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	1d3b      	adds	r3, r7, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073f2:	463b      	mov	r3, r7
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d175      	bne.n	80074e8 <USB_EPStartXfer+0xe5e>
 80073fc:	1d3b      	adds	r3, r7, #4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740c:	b29b      	uxth	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007414:	4413      	add	r3, r2
 8007416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	00da      	lsls	r2, r3, #3
 8007422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007426:	4413      	add	r3, r2
 8007428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800742c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007430:	463b      	mov	r3, r7
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d116      	bne.n	8007468 <USB_EPStartXfer+0xdde>
 800743a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745e:	b29a      	uxth	r2, r3
 8007460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	e061      	b.n	800752c <USB_EPStartXfer+0xea2>
 8007468:	463b      	mov	r3, r7
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b3e      	cmp	r3, #62	; 0x3e
 8007470:	d81a      	bhi.n	80074a8 <USB_EPStartXfer+0xe1e>
 8007472:	463b      	mov	r3, r7
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800747e:	463b      	mov	r3, r7
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <USB_EPStartXfer+0xe0c>
 800748c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007490:	3301      	adds	r3, #1
 8007492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	b29b      	uxth	r3, r3
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	b29a      	uxth	r2, r3
 80074a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	e041      	b.n	800752c <USB_EPStartXfer+0xea2>
 80074a8:	463b      	mov	r3, r7
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <USB_EPStartXfer+0xe42>
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	3b01      	subs	r3, #1
 80074c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	029b      	lsls	r3, r3, #10
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074de:	b29a      	uxth	r2, r3
 80074e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e021      	b.n	800752c <USB_EPStartXfer+0xea2>
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d11c      	bne.n	800752c <USB_EPStartXfer+0xea2>
 80074f2:	1d3b      	adds	r3, r7, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007502:	4413      	add	r3, r2
 8007504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007508:	463b      	mov	r3, r7
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	00da      	lsls	r2, r3, #3
 8007510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007514:	4413      	add	r3, r2
 8007516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800751a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	b29a      	uxth	r2, r3
 8007526:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800752a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800752c:	463b      	mov	r3, r7
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 81a4 	beq.w	8007880 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	463b      	mov	r3, r7
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800754c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <USB_EPStartXfer+0xeda>
 8007558:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10d      	bne.n	8007580 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007564:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800756c:	2b00      	cmp	r3, #0
 800756e:	f040 8187 	bne.w	8007880 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007572:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 8180 	bne.w	8007880 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007580:	1d3b      	adds	r3, r7, #4
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	463b      	mov	r3, r7
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800759e:	1d3b      	adds	r3, r7, #4
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	463b      	mov	r3, r7
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80075b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8013      	strh	r3, [r2, #0]
 80075c4:	e15c      	b.n	8007880 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075c6:	463b      	mov	r3, r7
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	78db      	ldrb	r3, [r3, #3]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	f040 8155 	bne.w	800787c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80075d2:	463b      	mov	r3, r7
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699a      	ldr	r2, [r3, #24]
 80075d8:	463b      	mov	r3, r7
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d90e      	bls.n	8007600 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80075e2:	463b      	mov	r3, r7
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	463b      	mov	r3, r7
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	619a      	str	r2, [r3, #24]
 80075fe:	e008      	b.n	8007612 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007600:	463b      	mov	r3, r7
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800760a:	463b      	mov	r3, r7
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2200      	movs	r2, #0
 8007610:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007612:	463b      	mov	r3, r7
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d16f      	bne.n	80076fc <USB_EPStartXfer+0x1072>
 800761c:	1d3b      	adds	r3, r7, #4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007634:	4413      	add	r3, r2
 8007636:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800763a:	463b      	mov	r3, r7
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	00da      	lsls	r2, r3, #3
 8007642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007646:	4413      	add	r3, r2
 8007648:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800764c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007654:	2b00      	cmp	r3, #0
 8007656:	d116      	bne.n	8007686 <USB_EPStartXfer+0xffc>
 8007658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007664:	b29a      	uxth	r2, r3
 8007666:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767c:	b29a      	uxth	r2, r3
 800767e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	e05f      	b.n	8007746 <USB_EPStartXfer+0x10bc>
 8007686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800768a:	2b3e      	cmp	r3, #62	; 0x3e
 800768c:	d818      	bhi.n	80076c0 <USB_EPStartXfer+0x1036>
 800768e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007698:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <USB_EPStartXfer+0x1024>
 80076a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a8:	3301      	adds	r3, #1
 80076aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	029b      	lsls	r3, r3, #10
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	e042      	b.n	8007746 <USB_EPStartXfer+0x10bc>
 80076c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <USB_EPStartXfer+0x1056>
 80076d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076da:	3b01      	subs	r3, #1
 80076dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	029b      	lsls	r3, r3, #10
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	e024      	b.n	8007746 <USB_EPStartXfer+0x10bc>
 80076fc:	463b      	mov	r3, r7
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d11f      	bne.n	8007746 <USB_EPStartXfer+0x10bc>
 8007706:	1d3b      	adds	r3, r7, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800770e:	1d3b      	adds	r3, r7, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007716:	b29b      	uxth	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800771e:	4413      	add	r3, r2
 8007720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007724:	463b      	mov	r3, r7
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	00da      	lsls	r2, r3, #3
 800772c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007730:	4413      	add	r3, r2
 8007732:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800773a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800773e:	b29a      	uxth	r2, r3
 8007740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007744:	801a      	strh	r2, [r3, #0]
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800774e:	463b      	mov	r3, r7
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	785b      	ldrb	r3, [r3, #1]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d16f      	bne.n	8007838 <USB_EPStartXfer+0x11ae>
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007768:	b29b      	uxth	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007770:	4413      	add	r3, r2
 8007772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007776:	463b      	mov	r3, r7
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	00da      	lsls	r2, r3, #3
 800777e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007782:	4413      	add	r3, r2
 8007784:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800778c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007790:	2b00      	cmp	r3, #0
 8007792:	d116      	bne.n	80077c2 <USB_EPStartXfer+0x1138>
 8007794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	e05e      	b.n	8007880 <USB_EPStartXfer+0x11f6>
 80077c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077c6:	2b3e      	cmp	r3, #62	; 0x3e
 80077c8:	d818      	bhi.n	80077fc <USB_EPStartXfer+0x1172>
 80077ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <USB_EPStartXfer+0x1160>
 80077e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e4:	3301      	adds	r3, #1
 80077e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077f8:	801a      	strh	r2, [r3, #0]
 80077fa:	e041      	b.n	8007880 <USB_EPStartXfer+0x11f6>
 80077fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007806:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <USB_EPStartXfer+0x1192>
 8007812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007816:	3b01      	subs	r3, #1
 8007818:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800781c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007820:	b29b      	uxth	r3, r3
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	b29b      	uxth	r3, r3
 8007826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800782a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782e:	b29a      	uxth	r2, r3
 8007830:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	e023      	b.n	8007880 <USB_EPStartXfer+0x11f6>
 8007838:	463b      	mov	r3, r7
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d11e      	bne.n	8007880 <USB_EPStartXfer+0x11f6>
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007852:	4413      	add	r3, r2
 8007854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007858:	463b      	mov	r3, r7
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	00da      	lsls	r2, r3, #3
 8007860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007864:	4413      	add	r3, r2
 8007866:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800786a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800786e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	e001      	b.n	8007880 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e02e      	b.n	80078de <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007880:	1d3b      	adds	r3, r7, #4
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	463b      	mov	r3, r7
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800789e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80078a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80078aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80078ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80078b6:	1d3b      	adds	r3, r7, #4
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	463b      	mov	r3, r7
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	441a      	add	r2, r3
 80078c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80078c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d8:	b29b      	uxth	r3, r3
 80078da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d020      	beq.n	800793c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007910:	81bb      	strh	r3, [r7, #12]
 8007912:	89bb      	ldrh	r3, [r7, #12]
 8007914:	f083 0310 	eor.w	r3, r3, #16
 8007918:	81bb      	strh	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	441a      	add	r2, r3
 8007924:	89bb      	ldrh	r3, [r7, #12]
 8007926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007936:	b29b      	uxth	r3, r3
 8007938:	8013      	strh	r3, [r2, #0]
 800793a:	e01f      	b.n	800797c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	81fb      	strh	r3, [r7, #14]
 8007954:	89fb      	ldrh	r3, [r7, #14]
 8007956:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800795a:	81fb      	strh	r3, [r7, #14]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	441a      	add	r2, r3
 8007966:	89fb      	ldrh	r3, [r7, #14]
 8007968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007978:	b29b      	uxth	r3, r3
 800797a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800798a:	b480      	push	{r7}
 800798c:	b087      	sub	sp, #28
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	7b1b      	ldrb	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 809d 	bne.w	8007ad8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d04c      	beq.n	8007a40 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	823b      	strh	r3, [r7, #16]
 80079b4:	8a3b      	ldrh	r3, [r7, #16]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01b      	beq.n	80079f6 <USB_EPClearStall+0x6c>
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	81fb      	strh	r3, [r7, #14]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	441a      	add	r2, r3
 80079e0:	89fb      	ldrh	r3, [r7, #14]
 80079e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	78db      	ldrb	r3, [r3, #3]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d06c      	beq.n	8007ad8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a14:	81bb      	strh	r3, [r7, #12]
 8007a16:	89bb      	ldrh	r3, [r7, #12]
 8007a18:	f083 0320 	eor.w	r3, r3, #32
 8007a1c:	81bb      	strh	r3, [r7, #12]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	441a      	add	r2, r3
 8007a28:	89bb      	ldrh	r3, [r7, #12]
 8007a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8013      	strh	r3, [r2, #0]
 8007a3e:	e04b      	b.n	8007ad8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	82fb      	strh	r3, [r7, #22]
 8007a4e:	8afb      	ldrh	r3, [r7, #22]
 8007a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01b      	beq.n	8007a90 <USB_EPClearStall+0x106>
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6e:	82bb      	strh	r3, [r7, #20]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	441a      	add	r2, r3
 8007a7a:	8abb      	ldrh	r3, [r7, #20]
 8007a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa6:	827b      	strh	r3, [r7, #18]
 8007aa8:	8a7b      	ldrh	r3, [r7, #18]
 8007aaa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007aae:	827b      	strh	r3, [r7, #18]
 8007ab0:	8a7b      	ldrh	r3, [r7, #18]
 8007ab2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ab6:	827b      	strh	r3, [r7, #18]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	441a      	add	r2, r3
 8007ac2:	8a7b      	ldrh	r3, [r7, #18]
 8007ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2280      	movs	r2, #128	; 0x80
 8007afc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b08d      	sub	sp, #52	; 0x34
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	461a      	mov	r2, r3
 8007b82:	460b      	mov	r3, r1
 8007b84:	80fb      	strh	r3, [r7, #6]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b8a:	88bb      	ldrh	r3, [r7, #4]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b9a:	88fa      	ldrh	r2, [r7, #6]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007baa:	e01b      	b.n	8007be4 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	3301      	adds	r3, #1
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	3b01      	subs	r3, #1
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e0      	bne.n	8007bac <USB_WritePMA+0x38>
  }
}
 8007bea:	bf00      	nop
 8007bec:	3734      	adds	r7, #52	; 0x34
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b08b      	sub	sp, #44	; 0x2c
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	4611      	mov	r1, r2
 8007c02:	461a      	mov	r2, r3
 8007c04:	460b      	mov	r3, r1
 8007c06:	80fb      	strh	r3, [r7, #6]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007c0c:	88bb      	ldrh	r3, [r7, #4]
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c26:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2c:	e018      	b.n	8007c60 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	3302      	adds	r3, #2
 8007c3a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	3301      	adds	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	0a1b      	lsrs	r3, r3, #8
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	3301      	adds	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e3      	bne.n	8007c2e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007c66:	88bb      	ldrh	r3, [r7, #4]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	701a      	strb	r2, [r3, #0]
  }
}
 8007c82:	bf00      	nop
 8007c84:	372c      	adds	r7, #44	; 0x2c
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c9a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c9e:	f002 f89d 	bl	8009ddc <USBD_static_malloc>
 8007ca2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d105      	bne.n	8007cb6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e066      	b.n	8007d84 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	7c1b      	ldrb	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d119      	bne.n	8007cfa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cca:	2202      	movs	r2, #2
 8007ccc:	2181      	movs	r1, #129	; 0x81
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 ff29 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cde:	2202      	movs	r2, #2
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 ff1f 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007cf8:	e016      	b.n	8007d28 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cfa:	2340      	movs	r3, #64	; 0x40
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	2181      	movs	r1, #129	; 0x81
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 ff10 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	2202      	movs	r2, #2
 8007d10:	2101      	movs	r1, #1
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 ff07 	bl	8009b26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2210      	movs	r2, #16
 8007d24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d28:	2308      	movs	r3, #8
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	2182      	movs	r1, #130	; 0x82
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 fef9 	bl	8009b26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7c1b      	ldrb	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d68:	2101      	movs	r1, #1
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 ffcb 	bl	8009d06 <USBD_LL_PrepareReceive>
 8007d70:	e007      	b.n	8007d82 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 ffc2 	bl	8009d06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d98:	2181      	movs	r1, #129	; 0x81
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 fee9 	bl	8009b72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007da6:	2101      	movs	r1, #1
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 fee2 	bl	8009b72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007db6:	2182      	movs	r1, #130	; 0x82
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 feda 	bl	8009b72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de8:	4618      	mov	r0, r3
 8007dea:	f002 f805 	bl	8009df8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e10:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d03a      	beq.n	8007ea0 <USBD_CDC_Setup+0xa0>
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	f040 8097 	bne.w	8007f5e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	88db      	ldrh	r3, [r3, #6]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d029      	beq.n	8007e8c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	da11      	bge.n	8007e66 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007e4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	88d2      	ldrh	r2, [r2, #6]
 8007e54:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e56:	6939      	ldr	r1, [r7, #16]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	88db      	ldrh	r3, [r3, #6]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fa8d 	bl	800937e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007e64:	e082      	b.n	8007f6c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	785a      	ldrb	r2, [r3, #1]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	88db      	ldrh	r3, [r3, #6]
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e7c:	6939      	ldr	r1, [r7, #16]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	88db      	ldrh	r3, [r3, #6]
 8007e82:	461a      	mov	r2, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 faa6 	bl	80093d6 <USBD_CtlPrepareRx>
      break;
 8007e8a:	e06f      	b.n	8007f6c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	7850      	ldrb	r0, [r2, #1]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	4798      	blx	r3
      break;
 8007e9e:	e065      	b.n	8007f6c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b0b      	cmp	r3, #11
 8007ea6:	d84f      	bhi.n	8007f48 <USBD_CDC_Setup+0x148>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USBD_CDC_Setup+0xb0>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007f57 	.word	0x08007f57
 8007eb8:	08007f49 	.word	0x08007f49
 8007ebc:	08007f49 	.word	0x08007f49
 8007ec0:	08007f49 	.word	0x08007f49
 8007ec4:	08007f49 	.word	0x08007f49
 8007ec8:	08007f49 	.word	0x08007f49
 8007ecc:	08007f49 	.word	0x08007f49
 8007ed0:	08007f49 	.word	0x08007f49
 8007ed4:	08007f49 	.word	0x08007f49
 8007ed8:	08007f09 	.word	0x08007f09
 8007edc:	08007f31 	.word	0x08007f31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d107      	bne.n	8007efa <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007eea:	f107 030c 	add.w	r3, r7, #12
 8007eee:	2202      	movs	r2, #2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fa43 	bl	800937e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ef8:	e030      	b.n	8007f5c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f9cd 	bl	800929c <USBD_CtlError>
            ret = USBD_FAIL;
 8007f02:	2303      	movs	r3, #3
 8007f04:	75fb      	strb	r3, [r7, #23]
          break;
 8007f06:	e029      	b.n	8007f5c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d107      	bne.n	8007f22 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f12:	f107 030f 	add.w	r3, r7, #15
 8007f16:	2201      	movs	r2, #1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fa2f 	bl	800937e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f20:	e01c      	b.n	8007f5c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f9b9 	bl	800929c <USBD_CtlError>
            ret = USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f2e:	e015      	b.n	8007f5c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d00f      	beq.n	8007f5a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f9ad 	bl	800929c <USBD_CtlError>
            ret = USBD_FAIL;
 8007f42:	2303      	movs	r3, #3
 8007f44:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f46:	e008      	b.n	8007f5a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 f9a6 	bl	800929c <USBD_CtlError>
          ret = USBD_FAIL;
 8007f50:	2303      	movs	r3, #3
 8007f52:	75fb      	strb	r3, [r7, #23]
          break;
 8007f54:	e002      	b.n	8007f5c <USBD_CDC_Setup+0x15c>
          break;
 8007f56:	bf00      	nop
 8007f58:	e008      	b.n	8007f6c <USBD_CDC_Setup+0x16c>
          break;
 8007f5a:	bf00      	nop
      }
      break;
 8007f5c:	e006      	b.n	8007f6c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f99b 	bl	800929c <USBD_CtlError>
      ret = USBD_FAIL;
 8007f66:	2303      	movs	r3, #3
 8007f68:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop

08007f78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e04f      	b.n	800803a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fa0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d029      	beq.n	800800c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fb8:	78fa      	ldrb	r2, [r7, #3]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3318      	adds	r3, #24
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	78f9      	ldrb	r1, [r7, #3]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	4403      	add	r3, r0
 8007fd8:	3338      	adds	r3, #56	; 0x38
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fe0:	fb03 f301 	mul.w	r3, r3, r1
 8007fe4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d110      	bne.n	800800c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3318      	adds	r3, #24
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ffe:	78f9      	ldrb	r1, [r7, #3]
 8008000:	2300      	movs	r3, #0
 8008002:	2200      	movs	r2, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fe5d 	bl	8009cc4 <USBD_LL_Transmit>
 800800a:	e015      	b.n	8008038 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008054:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	e015      	b.n	8008090 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 fe6d 	bl	8009d48 <USBD_LL_GetRxDataSize>
 800806e:	4602      	mov	r2, r0
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800808a:	4611      	mov	r1, r2
 800808c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d015      	beq.n	80080de <USBD_CDC_EP0_RxReady+0x46>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080b8:	2bff      	cmp	r3, #255	; 0xff
 80080ba:	d010      	beq.n	80080de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80080ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080d2:	b292      	uxth	r2, r2
 80080d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2243      	movs	r2, #67	; 0x43
 80080f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80080f6:	4b03      	ldr	r3, [pc, #12]	; (8008104 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	20000094 	.word	0x20000094

08008108 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2243      	movs	r2, #67	; 0x43
 8008114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008116:	4b03      	ldr	r3, [pc, #12]	; (8008124 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20000050 	.word	0x20000050

08008128 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2243      	movs	r2, #67	; 0x43
 8008134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008136:	4b03      	ldr	r3, [pc, #12]	; (8008144 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	200000d8 	.word	0x200000d8

08008148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	220a      	movs	r2, #10
 8008154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	2000000c 	.word	0x2000000c

08008168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	e004      	b.n	8008186 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008192:	b480      	push	{r7}
 8008194:	b087      	sub	sp, #28
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	371c      	adds	r7, #28
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081d4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800820a:	2303      	movs	r3, #3
 800820c:	e01a      	b.n	8008244 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008214:	2b00      	cmp	r3, #0
 8008216:	d114      	bne.n	8008242 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2201      	movs	r2, #1
 800821c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008236:	2181      	movs	r1, #129	; 0x81
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fd43 	bl	8009cc4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800825a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	e016      	b.n	8008298 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7c1b      	ldrb	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800827c:	2101      	movs	r1, #1
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fd41 	bl	8009d06 <USBD_LL_PrepareReceive>
 8008284:	e007      	b.n	8008296 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800828c:	2340      	movs	r3, #64	; 0x40
 800828e:	2101      	movs	r1, #1
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 fd38 	bl	8009d06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e01f      	b.n	80082f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	79fa      	ldrb	r2, [r7, #7]
 80082ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f001 fb9f 	bl	8009a30 <USBD_LL_Init>
 80082f2:	4603      	mov	r3, r0
 80082f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008314:	2303      	movs	r3, #3
 8008316:	e016      	b.n	8008346 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00b      	beq.n	8008344 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008334:	f107 020e 	add.w	r2, r7, #14
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
 800833c:	4602      	mov	r2, r0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 fbca 	bl	8009af0 <USBD_LL_Start>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	4611      	mov	r1, r2
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	4611      	mov	r1, r2
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
  }

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 ff16 	bl	8009228 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	2b01      	cmp	r3, #1
 800841e:	d00e      	beq.n	800843e <USBD_LL_SetupStage+0x5a>
 8008420:	2b01      	cmp	r3, #1
 8008422:	d302      	bcc.n	800842a <USBD_LL_SetupStage+0x46>
 8008424:	2b02      	cmp	r3, #2
 8008426:	d014      	beq.n	8008452 <USBD_LL_SetupStage+0x6e>
 8008428:	e01d      	b.n	8008466 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f9d6 	bl	80087e4 <USBD_StdDevReq>
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]
      break;
 800843c:	e020      	b.n	8008480 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa3a 	bl	80088c0 <USBD_StdItfReq>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
      break;
 8008450:	e016      	b.n	8008480 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fa76 	bl	800894c <USBD_StdEPReq>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]
      break;
 8008464:	e00c      	b.n	8008480 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800846c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 fb9b 	bl	8009bb0 <USBD_LL_StallEP>
 800847a:	4603      	mov	r3, r0
 800847c:	73fb      	strb	r3, [r7, #15]
      break;
 800847e:	bf00      	nop
  }

  return ret;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b086      	sub	sp, #24
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	460b      	mov	r3, r1
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d137      	bne.n	800850e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d14a      	bne.n	8008546 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d913      	bls.n	80084e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	bf28      	it	cs
 80084d6:	4613      	movcs	r3, r2
 80084d8:	461a      	mov	r2, r3
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 ff97 	bl	8009410 <USBD_CtlContinueRx>
 80084e2:	e030      	b.n	8008546 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d105      	bne.n	8008506 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 ff93 	bl	8009432 <USBD_CtlSendStatus>
 800850c:	e01b      	b.n	8008546 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d013      	beq.n	8008542 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008520:	2b03      	cmp	r3, #3
 8008522:	d10e      	bne.n	8008542 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	7afa      	ldrb	r2, [r7, #11]
 800852e:	4611      	mov	r1, r2
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	4798      	blx	r3
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	e002      	b.n	8008548 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008542:	2303      	movs	r3, #3
 8008544:	e000      	b.n	8008548 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	460b      	mov	r3, r1
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d16a      	bne.n	800863a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3314      	adds	r3, #20
 8008568:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008570:	2b02      	cmp	r3, #2
 8008572:	d155      	bne.n	8008620 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	429a      	cmp	r2, r3
 800857e:	d914      	bls.n	80085aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	1ad2      	subs	r2, r2, r3
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	461a      	mov	r2, r3
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 ff0c 	bl	80093b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	2100      	movs	r1, #0
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f001 fbaf 	bl	8009d06 <USBD_LL_PrepareReceive>
 80085a8:	e03a      	b.n	8008620 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d11c      	bne.n	80085f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085be:	429a      	cmp	r2, r3
 80085c0:	d316      	bcc.n	80085f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d20f      	bcs.n	80085f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085d0:	2200      	movs	r2, #0
 80085d2:	2100      	movs	r1, #0
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 feed 	bl	80093b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085e2:	2300      	movs	r3, #0
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f001 fb8c 	bl	8009d06 <USBD_LL_PrepareReceive>
 80085ee:	e017      	b.n	8008620 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008602:	2b03      	cmp	r3, #3
 8008604:	d105      	bne.n	8008612 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f001 facb 	bl	8009bb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 ff1c 	bl	8009458 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008626:	2b01      	cmp	r3, #1
 8008628:	d123      	bne.n	8008672 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fe9b 	bl	8008366 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008638:	e01b      	b.n	8008672 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d013      	beq.n	800866e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800864c:	2b03      	cmp	r3, #3
 800864e:	d10e      	bne.n	800866e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	7afa      	ldrb	r2, [r7, #11]
 800865a:	4611      	mov	r1, r2
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	4798      	blx	r3
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	e002      	b.n	8008674 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800866e:	2303      	movs	r3, #3
 8008670:	e000      	b.n	8008674 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d009      	beq.n	80086c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6852      	ldr	r2, [r2, #4]
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	4611      	mov	r1, r2
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086c0:	2340      	movs	r3, #64	; 0x40
 80086c2:	2200      	movs	r2, #0
 80086c4:	2100      	movs	r1, #0
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 fa2d 	bl	8009b26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2240      	movs	r2, #64	; 0x40
 80086d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	2200      	movs	r2, #0
 80086e0:	2180      	movs	r1, #128	; 0x80
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 fa1f 	bl	8009b26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2240      	movs	r2, #64	; 0x40
 80086f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086fe:	b480      	push	{r7}
 8008700:	b083      	sub	sp, #12
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	78fa      	ldrb	r2, [r7, #3]
 800870e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2204      	movs	r2, #4
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008756:	2b04      	cmp	r3, #4
 8008758:	d105      	bne.n	8008766 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008782:	2b03      	cmp	r3, #3
 8008784:	d10b      	bne.n	800879e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	3301      	adds	r3, #1
 80087be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087c6:	8a3b      	ldrh	r3, [r7, #16]
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	b21a      	sxth	r2, r3
 80087cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	b21b      	sxth	r3, r3
 80087d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087d6:	89fb      	ldrh	r3, [r7, #14]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d004      	beq.n	8008808 <USBD_StdDevReq+0x24>
 80087fe:	2b40      	cmp	r3, #64	; 0x40
 8008800:	d002      	beq.n	8008808 <USBD_StdDevReq+0x24>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <USBD_StdDevReq+0x38>
 8008806:	e050      	b.n	80088aa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	4798      	blx	r3
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]
    break;
 800881a:	e04b      	b.n	80088b4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	2b09      	cmp	r3, #9
 8008822:	d83c      	bhi.n	800889e <USBD_StdDevReq+0xba>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <USBD_StdDevReq+0x48>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008881 	.word	0x08008881
 8008830:	08008895 	.word	0x08008895
 8008834:	0800889f 	.word	0x0800889f
 8008838:	0800888b 	.word	0x0800888b
 800883c:	0800889f 	.word	0x0800889f
 8008840:	0800885f 	.word	0x0800885f
 8008844:	08008855 	.word	0x08008855
 8008848:	0800889f 	.word	0x0800889f
 800884c:	08008877 	.word	0x08008877
 8008850:	08008869 	.word	0x08008869
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f9d0 	bl	8008bfc <USBD_GetDescriptor>
      break;
 800885c:	e024      	b.n	80088a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb5f 	bl	8008f24 <USBD_SetAddress>
      break;
 8008866:	e01f      	b.n	80088a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fb9c 	bl	8008fa8 <USBD_SetConfig>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]
      break;
 8008874:	e018      	b.n	80088a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fc39 	bl	80090f0 <USBD_GetConfig>
      break;
 800887e:	e013      	b.n	80088a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fc68 	bl	8009158 <USBD_GetStatus>
      break;
 8008888:	e00e      	b.n	80088a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fc96 	bl	80091be <USBD_SetFeature>
      break;
 8008892:	e009      	b.n	80088a8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fca5 	bl	80091e6 <USBD_ClrFeature>
      break;
 800889c:	e004      	b.n	80088a8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fcfb 	bl	800929c <USBD_CtlError>
      break;
 80088a6:	bf00      	nop
    }
    break;
 80088a8:	e004      	b.n	80088b4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fcf5 	bl	800929c <USBD_CtlError>
    break;
 80088b2:	bf00      	nop
  }

  return ret;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop

080088c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d003      	beq.n	80088e2 <USBD_StdItfReq+0x22>
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d001      	beq.n	80088e2 <USBD_StdItfReq+0x22>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d12a      	bne.n	8008938 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e8:	3b01      	subs	r3, #1
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d81d      	bhi.n	800892a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	889b      	ldrh	r3, [r3, #4]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d813      	bhi.n	8008920 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	88db      	ldrh	r3, [r3, #6]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d110      	bne.n	8008934 <USBD_StdItfReq+0x74>
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10d      	bne.n	8008934 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fd8a 	bl	8009432 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800891e:	e009      	b.n	8008934 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fcba 	bl	800929c <USBD_CtlError>
      break;
 8008928:	e004      	b.n	8008934 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fcb5 	bl	800929c <USBD_CtlError>
      break;
 8008932:	e000      	b.n	8008936 <USBD_StdItfReq+0x76>
      break;
 8008934:	bf00      	nop
    }
    break;
 8008936:	e004      	b.n	8008942 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fcae 	bl	800929c <USBD_CtlError>
    break;
 8008940:	bf00      	nop
  }

  return ret;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	889b      	ldrh	r3, [r3, #4]
 800895e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008968:	2b20      	cmp	r3, #32
 800896a:	d004      	beq.n	8008976 <USBD_StdEPReq+0x2a>
 800896c:	2b40      	cmp	r3, #64	; 0x40
 800896e:	d002      	beq.n	8008976 <USBD_StdEPReq+0x2a>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <USBD_StdEPReq+0x3e>
 8008974:	e137      	b.n	8008be6 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
    break;
 8008988:	e132      	b.n	8008bf0 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d03e      	beq.n	8008a10 <USBD_StdEPReq+0xc4>
 8008992:	2b03      	cmp	r3, #3
 8008994:	d002      	beq.n	800899c <USBD_StdEPReq+0x50>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d079      	beq.n	8008a8e <USBD_StdEPReq+0x142>
 800899a:	e11e      	b.n	8008bda <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d002      	beq.n	80089ac <USBD_StdEPReq+0x60>
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d015      	beq.n	80089d6 <USBD_StdEPReq+0x8a>
 80089aa:	e02b      	b.n	8008a04 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00c      	beq.n	80089cc <USBD_StdEPReq+0x80>
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b80      	cmp	r3, #128	; 0x80
 80089b6:	d009      	beq.n	80089cc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f8f7 	bl	8009bb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c2:	2180      	movs	r1, #128	; 0x80
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f8f3 	bl	8009bb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089ca:	e020      	b.n	8008a0e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fc64 	bl	800929c <USBD_CtlError>
        break;
 80089d4:	e01b      	b.n	8008a0e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	885b      	ldrh	r3, [r3, #2]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10e      	bne.n	80089fc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <USBD_StdEPReq+0xb0>
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b80      	cmp	r3, #128	; 0x80
 80089e8:	d008      	beq.n	80089fc <USBD_StdEPReq+0xb0>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	88db      	ldrh	r3, [r3, #6]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d104      	bne.n	80089fc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f8da 	bl	8009bb0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fd18 	bl	8009432 <USBD_CtlSendStatus>

        break;
 8008a02:	e004      	b.n	8008a0e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fc48 	bl	800929c <USBD_CtlError>
        break;
 8008a0c:	bf00      	nop
      }
      break;
 8008a0e:	e0e9      	b.n	8008be4 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d002      	beq.n	8008a20 <USBD_StdEPReq+0xd4>
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d015      	beq.n	8008a4a <USBD_StdEPReq+0xfe>
 8008a1e:	e02f      	b.n	8008a80 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00c      	beq.n	8008a40 <USBD_StdEPReq+0xf4>
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b80      	cmp	r3, #128	; 0x80
 8008a2a:	d009      	beq.n	8008a40 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 f8bd 	bl	8009bb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 f8b9 	bl	8009bb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a3e:	e025      	b.n	8008a8c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fc2a 	bl	800929c <USBD_CtlError>
        break;
 8008a48:	e020      	b.n	8008a8c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	885b      	ldrh	r3, [r3, #2]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d11b      	bne.n	8008a8a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d004      	beq.n	8008a66 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 f8c4 	bl	8009bee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fce3 	bl	8009432 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	4798      	blx	r3
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a7e:	e004      	b.n	8008a8a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc0a 	bl	800929c <USBD_CtlError>
        break;
 8008a88:	e000      	b.n	8008a8c <USBD_StdEPReq+0x140>
        break;
 8008a8a:	bf00      	nop
      }
      break;
 8008a8c:	e0aa      	b.n	8008be4 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d002      	beq.n	8008a9e <USBD_StdEPReq+0x152>
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d032      	beq.n	8008b02 <USBD_StdEPReq+0x1b6>
 8008a9c:	e097      	b.n	8008bce <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <USBD_StdEPReq+0x168>
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b80      	cmp	r3, #128	; 0x80
 8008aa8:	d004      	beq.n	8008ab4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fbf5 	bl	800929c <USBD_CtlError>
          break;
 8008ab2:	e091      	b.n	8008bd8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da0b      	bge.n	8008ad4 <USBD_StdEPReq+0x188>
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	3310      	adds	r3, #16
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4413      	add	r3, r2
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	e00b      	b.n	8008aec <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	4413      	add	r3, r2
 8008aea:	3304      	adds	r3, #4
 8008aec:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2202      	movs	r2, #2
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fc3f 	bl	800937e <USBD_CtlSendData>
        break;
 8008b00:	e06a      	b.n	8008bd8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da11      	bge.n	8008b2e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	f003 020f 	and.w	r2, r3, #15
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	3324      	adds	r3, #36	; 0x24
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d117      	bne.n	8008b54 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fbb8 	bl	800929c <USBD_CtlError>
            break;
 8008b2c:	e054      	b.n	8008bd8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 020f 	and.w	r2, r3, #15
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fba5 	bl	800929c <USBD_CtlError>
            break;
 8008b52:	e041      	b.n	8008bd8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	da0b      	bge.n	8008b74 <USBD_StdEPReq+0x228>
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	3310      	adds	r3, #16
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	3304      	adds	r3, #4
 8008b72:	e00b      	b.n	8008b8c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b8e:	7bbb      	ldrb	r3, [r7, #14]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <USBD_StdEPReq+0x24e>
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d103      	bne.n	8008ba2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	e00e      	b.n	8008bc0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f840 	bl	8009c2c <USBD_LL_IsStallEP>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	e002      	b.n	8008bc0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fbd9 	bl	800937e <USBD_CtlSendData>
          break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fb63 	bl	800929c <USBD_CtlError>
        break;
 8008bd6:	bf00      	nop
      }
      break;
 8008bd8:	e004      	b.n	8008be4 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fb5d 	bl	800929c <USBD_CtlError>
      break;
 8008be2:	bf00      	nop
    }
    break;
 8008be4:	e004      	b.n	8008bf0 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fb57 	bl	800929c <USBD_CtlError>
    break;
 8008bee:	bf00      	nop
  }

  return ret;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	885b      	ldrh	r3, [r3, #2]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	2b0e      	cmp	r3, #14
 8008c1e:	f200 8152 	bhi.w	8008ec6 <USBD_GetDescriptor+0x2ca>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_GetDescriptor+0x2c>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c99 	.word	0x08008c99
 8008c2c:	08008cb1 	.word	0x08008cb1
 8008c30:	08008cf1 	.word	0x08008cf1
 8008c34:	08008ec7 	.word	0x08008ec7
 8008c38:	08008ec7 	.word	0x08008ec7
 8008c3c:	08008e67 	.word	0x08008e67
 8008c40:	08008e93 	.word	0x08008e93
 8008c44:	08008ec7 	.word	0x08008ec7
 8008c48:	08008ec7 	.word	0x08008ec7
 8008c4c:	08008ec7 	.word	0x08008ec7
 8008c50:	08008ec7 	.word	0x08008ec7
 8008c54:	08008ec7 	.word	0x08008ec7
 8008c58:	08008ec7 	.word	0x08008ec7
 8008c5c:	08008ec7 	.word	0x08008ec7
 8008c60:	08008c65 	.word	0x08008c65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7c12      	ldrb	r2, [r2, #16]
 8008c7c:	f107 0108 	add.w	r1, r7, #8
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c86:	e126      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fb06 	bl	800929c <USBD_CtlError>
      err++;
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	3301      	adds	r3, #1
 8008c94:	72fb      	strb	r3, [r7, #11]
    break;
 8008c96:	e11e      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7c12      	ldrb	r2, [r2, #16]
 8008ca4:	f107 0108 	add.w	r1, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
    break;
 8008cae:	e112      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7c1b      	ldrb	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10d      	bne.n	8008cd4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	f107 0208 	add.w	r2, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008cd2:	e100      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	f107 0208 	add.w	r2, r7, #8
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	2202      	movs	r2, #2
 8008cec:	701a      	strb	r2, [r3, #0]
    break;
 8008cee:	e0f2      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	885b      	ldrh	r3, [r3, #2]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	f200 80ac 	bhi.w	8008e54 <USBD_GetDescriptor+0x258>
 8008cfc:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <USBD_GetDescriptor+0x108>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d1d 	.word	0x08008d1d
 8008d08:	08008d51 	.word	0x08008d51
 8008d0c:	08008d85 	.word	0x08008d85
 8008d10:	08008db9 	.word	0x08008db9
 8008d14:	08008ded 	.word	0x08008ded
 8008d18:	08008e21 	.word	0x08008e21
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	7c12      	ldrb	r2, [r2, #16]
 8008d34:	f107 0108 	add.w	r1, r7, #8
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d3e:	e091      	b.n	8008e64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 faaa 	bl	800929c <USBD_CtlError>
        err++;
 8008d48:	7afb      	ldrb	r3, [r7, #11]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d4e:	e089      	b.n	8008e64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	7c12      	ldrb	r2, [r2, #16]
 8008d68:	f107 0108 	add.w	r1, r7, #8
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4798      	blx	r3
 8008d70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d72:	e077      	b.n	8008e64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fa90 	bl	800929c <USBD_CtlError>
        err++;
 8008d7c:	7afb      	ldrb	r3, [r7, #11]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	72fb      	strb	r3, [r7, #11]
      break;
 8008d82:	e06f      	b.n	8008e64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00b      	beq.n	8008da8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	7c12      	ldrb	r2, [r2, #16]
 8008d9c:	f107 0108 	add.w	r1, r7, #8
 8008da0:	4610      	mov	r0, r2
 8008da2:	4798      	blx	r3
 8008da4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008da6:	e05d      	b.n	8008e64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa76 	bl	800929c <USBD_CtlError>
        err++;
 8008db0:	7afb      	ldrb	r3, [r7, #11]
 8008db2:	3301      	adds	r3, #1
 8008db4:	72fb      	strb	r3, [r7, #11]
      break;
 8008db6:	e055      	b.n	8008e64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	7c12      	ldrb	r2, [r2, #16]
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dda:	e043      	b.n	8008e64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa5c 	bl	800929c <USBD_CtlError>
        err++;
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	3301      	adds	r3, #1
 8008de8:	72fb      	strb	r3, [r7, #11]
      break;
 8008dea:	e03b      	b.n	8008e64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	7c12      	ldrb	r2, [r2, #16]
 8008e04:	f107 0108 	add.w	r1, r7, #8
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
 8008e0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e0e:	e029      	b.n	8008e64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa42 	bl	800929c <USBD_CtlError>
        err++;
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e1e:	e021      	b.n	8008e64 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7c12      	ldrb	r2, [r2, #16]
 8008e38:	f107 0108 	add.w	r1, r7, #8
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e42:	e00f      	b.n	8008e64 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa28 	bl	800929c <USBD_CtlError>
        err++;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	72fb      	strb	r3, [r7, #11]
      break;
 8008e52:	e007      	b.n	8008e64 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fa20 	bl	800929c <USBD_CtlError>
      err++;
 8008e5c:	7afb      	ldrb	r3, [r7, #11]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008e62:	bf00      	nop
    }
    break;
 8008e64:	e037      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	7c1b      	ldrb	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d109      	bne.n	8008e82 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e76:	f107 0208 	add.w	r2, r7, #8
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	4798      	blx	r3
 8008e7e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e80:	e029      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fa09 	bl	800929c <USBD_CtlError>
      err++;
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	72fb      	strb	r3, [r7, #11]
    break;
 8008e90:	e021      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7c1b      	ldrb	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	f107 0208 	add.w	r2, r7, #8
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4798      	blx	r3
 8008eaa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008eb4:	e00f      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f9ef 	bl	800929c <USBD_CtlError>
      err++;
 8008ebe:	7afb      	ldrb	r3, [r7, #11]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ec4:	e007      	b.n	8008ed6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f9e7 	bl	800929c <USBD_CtlError>
    err++;
 8008ece:	7afb      	ldrb	r3, [r7, #11]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	72fb      	strb	r3, [r7, #11]
    break;
 8008ed4:	bf00      	nop
  }

  if (err != 0U)
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d11e      	bne.n	8008f1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	88db      	ldrh	r3, [r3, #6]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d016      	beq.n	8008f12 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008ee4:	893b      	ldrh	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00e      	beq.n	8008f08 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	88da      	ldrh	r2, [r3, #6]
 8008eee:	893b      	ldrh	r3, [r7, #8]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	bf28      	it	cs
 8008ef4:	4613      	movcs	r3, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008efa:	893b      	ldrh	r3, [r7, #8]
 8008efc:	461a      	mov	r2, r3
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa3c 	bl	800937e <USBD_CtlSendData>
 8008f06:	e009      	b.n	8008f1c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9c6 	bl	800929c <USBD_CtlError>
 8008f10:	e004      	b.n	8008f1c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa8d 	bl	8009432 <USBD_CtlSendStatus>
 8008f18:	e000      	b.n	8008f1c <USBD_GetDescriptor+0x320>
    return;
 8008f1a:	bf00      	nop
    }
  }
}
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop

08008f24 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	889b      	ldrh	r3, [r3, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d130      	bne.n	8008f98 <USBD_SetAddress+0x74>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	88db      	ldrh	r3, [r3, #6]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d12c      	bne.n	8008f98 <USBD_SetAddress+0x74>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	885b      	ldrh	r3, [r3, #2]
 8008f42:	2b7f      	cmp	r3, #127	; 0x7f
 8008f44:	d828      	bhi.n	8008f98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d104      	bne.n	8008f66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f99c 	bl	800929c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f64:	e01c      	b.n	8008fa0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	7bfa      	ldrb	r2, [r7, #15]
 8008f6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fe87 	bl	8009c86 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa5a 	bl	8009432 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8c:	e008      	b.n	8008fa0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f96:	e003      	b.n	8008fa0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f98:	6839      	ldr	r1, [r7, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f97e 	bl	800929c <USBD_CtlError>
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	885b      	ldrh	r3, [r3, #2]
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	4b4b      	ldr	r3, [pc, #300]	; (80090ec <USBD_SetConfig+0x144>)
 8008fbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fc0:	4b4a      	ldr	r3, [pc, #296]	; (80090ec <USBD_SetConfig+0x144>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d905      	bls.n	8008fd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f966 	bl	800929c <USBD_CtlError>
    return USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e087      	b.n	80090e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d002      	beq.n	8008fe4 <USBD_SetConfig+0x3c>
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d025      	beq.n	800902e <USBD_SetConfig+0x86>
 8008fe2:	e071      	b.n	80090c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008fe4:	4b41      	ldr	r3, [pc, #260]	; (80090ec <USBD_SetConfig+0x144>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01c      	beq.n	8009026 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008fec:	4b3f      	ldr	r3, [pc, #252]	; (80090ec <USBD_SetConfig+0x144>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ff6:	4b3d      	ldr	r3, [pc, #244]	; (80090ec <USBD_SetConfig+0x144>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff f9bd 	bl	800837c <USBD_SetClassConfig>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f944 	bl	800929c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009014:	e065      	b.n	80090e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa0b 	bl	8009432 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2203      	movs	r2, #3
 8009020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009024:	e05d      	b.n	80090e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fa03 	bl	8009432 <USBD_CtlSendStatus>
    break;
 800902c:	e059      	b.n	80090e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800902e:	4b2f      	ldr	r3, [pc, #188]	; (80090ec <USBD_SetConfig+0x144>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d112      	bne.n	800905c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2202      	movs	r2, #2
 800903a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800903e:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <USBD_SetConfig+0x144>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009048:	4b28      	ldr	r3, [pc, #160]	; (80090ec <USBD_SetConfig+0x144>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff f9b0 	bl	80083b4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9ec 	bl	8009432 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800905a:	e042      	b.n	80090e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800905c:	4b23      	ldr	r3, [pc, #140]	; (80090ec <USBD_SetConfig+0x144>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	461a      	mov	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	429a      	cmp	r2, r3
 8009068:	d02a      	beq.n	80090c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff f99e 	bl	80083b4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009078:	4b1c      	ldr	r3, [pc, #112]	; (80090ec <USBD_SetConfig+0x144>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009082:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <USBD_SetConfig+0x144>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff f977 	bl	800837c <USBD_SetClassConfig>
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00f      	beq.n	80090b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f8fe 	bl	800929c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff f983 	bl	80083b4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2202      	movs	r2, #2
 80090b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80090b6:	e014      	b.n	80090e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f9ba 	bl	8009432 <USBD_CtlSendStatus>
    break;
 80090be:	e010      	b.n	80090e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9b6 	bl	8009432 <USBD_CtlSendStatus>
    break;
 80090c6:	e00c      	b.n	80090e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f8e6 	bl	800929c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <USBD_SetConfig+0x144>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff f96c 	bl	80083b4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80090dc:	2303      	movs	r3, #3
 80090de:	73fb      	strb	r3, [r7, #15]
    break;
 80090e0:	bf00      	nop
  }

  return ret;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000228 	.word	0x20000228

080090f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88db      	ldrh	r3, [r3, #6]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d004      	beq.n	800910c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f8c9 	bl	800929c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800910a:	e021      	b.n	8009150 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009112:	2b01      	cmp	r3, #1
 8009114:	db17      	blt.n	8009146 <USBD_GetConfig+0x56>
 8009116:	2b02      	cmp	r3, #2
 8009118:	dd02      	ble.n	8009120 <USBD_GetConfig+0x30>
 800911a:	2b03      	cmp	r3, #3
 800911c:	d00b      	beq.n	8009136 <USBD_GetConfig+0x46>
 800911e:	e012      	b.n	8009146 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3308      	adds	r3, #8
 800912a:	2201      	movs	r2, #1
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f925 	bl	800937e <USBD_CtlSendData>
      break;
 8009134:	e00c      	b.n	8009150 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3304      	adds	r3, #4
 800913a:	2201      	movs	r2, #1
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f91d 	bl	800937e <USBD_CtlSendData>
      break;
 8009144:	e004      	b.n	8009150 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f8a7 	bl	800929c <USBD_CtlError>
      break;
 800914e:	bf00      	nop
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009168:	3b01      	subs	r3, #1
 800916a:	2b02      	cmp	r3, #2
 800916c:	d81e      	bhi.n	80091ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	88db      	ldrh	r3, [r3, #6]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d004      	beq.n	8009180 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f88f 	bl	800929c <USBD_CtlError>
      break;
 800917e:	e01a      	b.n	80091b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800918c:	2b00      	cmp	r3, #0
 800918e:	d005      	beq.n	800919c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f043 0202 	orr.w	r2, r3, #2
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	330c      	adds	r3, #12
 80091a0:	2202      	movs	r2, #2
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8ea 	bl	800937e <USBD_CtlSendData>
    break;
 80091aa:	e004      	b.n	80091b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f874 	bl	800929c <USBD_CtlError>
    break;
 80091b4:	bf00      	nop
  }
}
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	885b      	ldrh	r3, [r3, #2]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d106      	bne.n	80091de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f92a 	bl	8009432 <USBD_CtlSendStatus>
  }
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f6:	3b01      	subs	r3, #1
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d80b      	bhi.n	8009214 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	885b      	ldrh	r3, [r3, #2]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d10c      	bne.n	800921e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f910 	bl	8009432 <USBD_CtlSendStatus>
      }
      break;
 8009212:	e004      	b.n	800921e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f840 	bl	800929c <USBD_CtlError>
      break;
 800921c:	e000      	b.n	8009220 <USBD_ClrFeature+0x3a>
      break;
 800921e:	bf00      	nop
  }
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	781a      	ldrb	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3301      	adds	r3, #1
 8009242:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	781a      	ldrb	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	3301      	adds	r3, #1
 8009250:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff faa8 	bl	80087a8 <SWAPBYTE>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3301      	adds	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7ff fa9b 	bl	80087a8 <SWAPBYTE>
 8009272:	4603      	mov	r3, r0
 8009274:	461a      	mov	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3301      	adds	r3, #1
 800927e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3301      	adds	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f7ff fa8e 	bl	80087a8 <SWAPBYTE>
 800928c:	4603      	mov	r3, r0
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	80da      	strh	r2, [r3, #6]
}
 8009294:	bf00      	nop
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a6:	2180      	movs	r1, #128	; 0x80
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fc81 	bl	8009bb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092ae:	2100      	movs	r1, #0
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fc7d 	bl	8009bb0 <USBD_LL_StallEP>
}
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d036      	beq.n	8009342 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092d8:	6938      	ldr	r0, [r7, #16]
 80092da:	f000 f836 	bl	800934a <USBD_GetLen>
 80092de:	4603      	mov	r3, r0
 80092e0:	3301      	adds	r3, #1
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	7812      	ldrb	r2, [r2, #0]
 80092f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	3301      	adds	r3, #1
 80092fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	4413      	add	r3, r2
 8009304:	2203      	movs	r2, #3
 8009306:	701a      	strb	r2, [r3, #0]
  idx++;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	3301      	adds	r3, #1
 800930c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800930e:	e013      	b.n	8009338 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	4413      	add	r3, r2
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	3301      	adds	r3, #1
 8009320:	613b      	str	r3, [r7, #16]
    idx++;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	3301      	adds	r3, #1
 8009326:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	4413      	add	r3, r2
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
    idx++;
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	3301      	adds	r3, #1
 8009336:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e7      	bne.n	8009310 <USBD_GetString+0x52>
 8009340:	e000      	b.n	8009344 <USBD_GetString+0x86>
    return;
 8009342:	bf00      	nop
  }
}
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800935a:	e005      	b.n	8009368 <USBD_GetLen+0x1e>
  {
    len++;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	3301      	adds	r3, #1
 8009360:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	3301      	adds	r3, #1
 8009366:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1f5      	bne.n	800935c <USBD_GetLen+0x12>
  }

  return len;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2202      	movs	r2, #2
 800938e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	2100      	movs	r1, #0
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 fc8d 	bl	8009cc4 <USBD_LL_Transmit>

  return USBD_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	2100      	movs	r1, #0
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fc7c 	bl	8009cc4 <USBD_LL_Transmit>

  return USBD_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2203      	movs	r2, #3
 80093e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	2100      	movs	r1, #0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 fc80 	bl	8009d06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	2100      	movs	r1, #0
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fc6f 	bl	8009d06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2204      	movs	r2, #4
 800943e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009442:	2300      	movs	r3, #0
 8009444:	2200      	movs	r2, #0
 8009446:	2100      	movs	r1, #0
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fc3b 	bl	8009cc4 <USBD_LL_Transmit>

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2205      	movs	r2, #5
 8009464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009468:	2300      	movs	r3, #0
 800946a:	2200      	movs	r2, #0
 800946c:	2100      	movs	r1, #0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fc49 	bl	8009d06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009484:	2200      	movs	r2, #0
 8009486:	4912      	ldr	r1, [pc, #72]	; (80094d0 <MX_USB_Device_Init+0x50>)
 8009488:	4812      	ldr	r0, [pc, #72]	; (80094d4 <MX_USB_Device_Init+0x54>)
 800948a:	f7fe ff09 	bl	80082a0 <USBD_Init>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009494:	f7f7 fef0 	bl	8001278 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009498:	490f      	ldr	r1, [pc, #60]	; (80094d8 <MX_USB_Device_Init+0x58>)
 800949a:	480e      	ldr	r0, [pc, #56]	; (80094d4 <MX_USB_Device_Init+0x54>)
 800949c:	f7fe ff30 	bl	8008300 <USBD_RegisterClass>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80094a6:	f7f7 fee7 	bl	8001278 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80094aa:	490c      	ldr	r1, [pc, #48]	; (80094dc <MX_USB_Device_Init+0x5c>)
 80094ac:	4809      	ldr	r0, [pc, #36]	; (80094d4 <MX_USB_Device_Init+0x54>)
 80094ae:	f7fe fe5b 	bl	8008168 <USBD_CDC_RegisterInterface>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80094b8:	f7f7 fede 	bl	8001278 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80094bc:	4805      	ldr	r0, [pc, #20]	; (80094d4 <MX_USB_Device_Init+0x54>)
 80094be:	f7fe ff46 	bl	800834e <USBD_Start>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80094c8:	f7f7 fed6 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80094cc:	bf00      	nop
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20000130 	.word	0x20000130
 80094d4:	20000704 	.word	0x20000704
 80094d8:	20000018 	.word	0x20000018
 80094dc:	2000011c 	.word	0x2000011c

080094e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094e4:	2200      	movs	r2, #0
 80094e6:	4905      	ldr	r1, [pc, #20]	; (80094fc <CDC_Init_FS+0x1c>)
 80094e8:	4805      	ldr	r0, [pc, #20]	; (8009500 <CDC_Init_FS+0x20>)
 80094ea:	f7fe fe52 	bl	8008192 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094ee:	4905      	ldr	r1, [pc, #20]	; (8009504 <CDC_Init_FS+0x24>)
 80094f0:	4803      	ldr	r0, [pc, #12]	; (8009500 <CDC_Init_FS+0x20>)
 80094f2:	f7fe fe67 	bl	80081c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80094f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000dbc 	.word	0x20000dbc
 8009500:	20000704 	.word	0x20000704
 8009504:	200009d4 	.word	0x200009d4

08009508 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009508:	b480      	push	{r7}
 800950a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800950c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800950e:	4618      	mov	r0, r3
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	71fb      	strb	r3, [r7, #7]
 8009524:	4613      	mov	r3, r2
 8009526:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	2b23      	cmp	r3, #35	; 0x23
 800952c:	d84a      	bhi.n	80095c4 <CDC_Control_FS+0xac>
 800952e:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <CDC_Control_FS+0x1c>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	080095c5 	.word	0x080095c5
 8009538:	080095c5 	.word	0x080095c5
 800953c:	080095c5 	.word	0x080095c5
 8009540:	080095c5 	.word	0x080095c5
 8009544:	080095c5 	.word	0x080095c5
 8009548:	080095c5 	.word	0x080095c5
 800954c:	080095c5 	.word	0x080095c5
 8009550:	080095c5 	.word	0x080095c5
 8009554:	080095c5 	.word	0x080095c5
 8009558:	080095c5 	.word	0x080095c5
 800955c:	080095c5 	.word	0x080095c5
 8009560:	080095c5 	.word	0x080095c5
 8009564:	080095c5 	.word	0x080095c5
 8009568:	080095c5 	.word	0x080095c5
 800956c:	080095c5 	.word	0x080095c5
 8009570:	080095c5 	.word	0x080095c5
 8009574:	080095c5 	.word	0x080095c5
 8009578:	080095c5 	.word	0x080095c5
 800957c:	080095c5 	.word	0x080095c5
 8009580:	080095c5 	.word	0x080095c5
 8009584:	080095c5 	.word	0x080095c5
 8009588:	080095c5 	.word	0x080095c5
 800958c:	080095c5 	.word	0x080095c5
 8009590:	080095c5 	.word	0x080095c5
 8009594:	080095c5 	.word	0x080095c5
 8009598:	080095c5 	.word	0x080095c5
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095c5 	.word	0x080095c5
 80095a4:	080095c5 	.word	0x080095c5
 80095a8:	080095c5 	.word	0x080095c5
 80095ac:	080095c5 	.word	0x080095c5
 80095b0:	080095c5 	.word	0x080095c5
 80095b4:	080095c5 	.word	0x080095c5
 80095b8:	080095c5 	.word	0x080095c5
 80095bc:	080095c5 	.word	0x080095c5
 80095c0:	080095c5 	.word	0x080095c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095c4:	bf00      	nop
  }

  return (USBD_OK);
 80095c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7f6 fe19 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	4805      	ldr	r0, [pc, #20]	; (8009600 <CDC_Receive_FS+0x2c>)
 80095ea:	f7fe fdeb 	bl	80081c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80095ee:	4804      	ldr	r0, [pc, #16]	; (8009600 <CDC_Receive_FS+0x2c>)
 80095f0:	f7fe fe2c 	bl	800824c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80095f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000704 	.word	0x20000704

08009604 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009614:	4b0d      	ldr	r3, [pc, #52]	; (800964c <CDC_Transmit_FS+0x48>)
 8009616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800961a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009626:	2301      	movs	r3, #1
 8009628:	e00b      	b.n	8009642 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800962a:	887b      	ldrh	r3, [r7, #2]
 800962c:	461a      	mov	r2, r3
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	4806      	ldr	r0, [pc, #24]	; (800964c <CDC_Transmit_FS+0x48>)
 8009632:	f7fe fdae 	bl	8008192 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009636:	4805      	ldr	r0, [pc, #20]	; (800964c <CDC_Transmit_FS+0x48>)
 8009638:	f7fe fdd8 	bl	80081ec <USBD_CDC_TransmitPacket>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20000704 	.word	0x20000704

08009650 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	4613      	mov	r3, r2
 800965c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009662:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009666:	4618      	mov	r0, r3
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
	...

08009674 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2212      	movs	r2, #18
 8009684:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009686:	4b03      	ldr	r3, [pc, #12]	; (8009694 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	20000150 	.word	0x20000150

08009698 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2204      	movs	r2, #4
 80096a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096aa:	4b03      	ldr	r3, [pc, #12]	; (80096b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20000164 	.word	0x20000164

080096bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d105      	bne.n	80096da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	4907      	ldr	r1, [pc, #28]	; (80096f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80096d2:	4808      	ldr	r0, [pc, #32]	; (80096f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80096d4:	f7ff fdf3 	bl	80092be <USBD_GetString>
 80096d8:	e004      	b.n	80096e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	4904      	ldr	r1, [pc, #16]	; (80096f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80096de:	4805      	ldr	r0, [pc, #20]	; (80096f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80096e0:	f7ff fded 	bl	80092be <USBD_GetString>
  }
  return USBD_StrDesc;
 80096e4:	4b02      	ldr	r3, [pc, #8]	; (80096f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	200011a4 	.word	0x200011a4
 80096f4:	08009ef8 	.word	0x08009ef8

080096f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	6039      	str	r1, [r7, #0]
 8009702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	4904      	ldr	r1, [pc, #16]	; (8009718 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009708:	4804      	ldr	r0, [pc, #16]	; (800971c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800970a:	f7ff fdd8 	bl	80092be <USBD_GetString>
  return USBD_StrDesc;
 800970e:	4b02      	ldr	r3, [pc, #8]	; (8009718 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	200011a4 	.word	0x200011a4
 800971c:	08009f10 	.word	0x08009f10

08009720 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	221a      	movs	r2, #26
 8009730:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009732:	f000 f843 	bl	80097bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009736:	4b02      	ldr	r3, [pc, #8]	; (8009740 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20000168 	.word	0x20000168

08009744 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d105      	bne.n	8009762 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	4907      	ldr	r1, [pc, #28]	; (8009778 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800975a:	4808      	ldr	r0, [pc, #32]	; (800977c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800975c:	f7ff fdaf 	bl	80092be <USBD_GetString>
 8009760:	e004      	b.n	800976c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4904      	ldr	r1, [pc, #16]	; (8009778 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009766:	4805      	ldr	r0, [pc, #20]	; (800977c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009768:	f7ff fda9 	bl	80092be <USBD_GetString>
  }
  return USBD_StrDesc;
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	200011a4 	.word	0x200011a4
 800977c:	08009f24 	.word	0x08009f24

08009780 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4907      	ldr	r1, [pc, #28]	; (80097b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009796:	4808      	ldr	r0, [pc, #32]	; (80097b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009798:	f7ff fd91 	bl	80092be <USBD_GetString>
 800979c:	e004      	b.n	80097a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4904      	ldr	r1, [pc, #16]	; (80097b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80097a2:	4805      	ldr	r0, [pc, #20]	; (80097b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80097a4:	f7ff fd8b 	bl	80092be <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a8:	4b02      	ldr	r3, [pc, #8]	; (80097b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	200011a4 	.word	0x200011a4
 80097b8:	08009f30 	.word	0x08009f30

080097bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097c2:	4b0f      	ldr	r3, [pc, #60]	; (8009800 <Get_SerialNum+0x44>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097c8:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <Get_SerialNum+0x48>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <Get_SerialNum+0x4c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4413      	add	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d009      	beq.n	80097f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097e2:	2208      	movs	r2, #8
 80097e4:	4909      	ldr	r1, [pc, #36]	; (800980c <Get_SerialNum+0x50>)
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f814 	bl	8009814 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097ec:	2204      	movs	r2, #4
 80097ee:	4908      	ldr	r1, [pc, #32]	; (8009810 <Get_SerialNum+0x54>)
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f000 f80f 	bl	8009814 <IntToUnicode>
  }
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	1fff7590 	.word	0x1fff7590
 8009804:	1fff7594 	.word	0x1fff7594
 8009808:	1fff7598 	.word	0x1fff7598
 800980c:	2000016a 	.word	0x2000016a
 8009810:	2000017a 	.word	0x2000017a

08009814 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	4613      	mov	r3, r2
 8009820:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009826:	2300      	movs	r3, #0
 8009828:	75fb      	strb	r3, [r7, #23]
 800982a:	e027      	b.n	800987c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	0f1b      	lsrs	r3, r3, #28
 8009830:	2b09      	cmp	r3, #9
 8009832:	d80b      	bhi.n	800984c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	0f1b      	lsrs	r3, r3, #28
 8009838:	b2da      	uxtb	r2, r3
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	4619      	mov	r1, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	440b      	add	r3, r1
 8009844:	3230      	adds	r2, #48	; 0x30
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	e00a      	b.n	8009862 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	0f1b      	lsrs	r3, r3, #28
 8009850:	b2da      	uxtb	r2, r3
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	4619      	mov	r1, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	440b      	add	r3, r1
 800985c:	3237      	adds	r2, #55	; 0x37
 800985e:	b2d2      	uxtb	r2, r2
 8009860:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	3301      	adds	r3, #1
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	4413      	add	r3, r2
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	3301      	adds	r3, #1
 800987a:	75fb      	strb	r3, [r7, #23]
 800987c:	7dfa      	ldrb	r2, [r7, #23]
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	429a      	cmp	r2, r3
 8009882:	d3d3      	bcc.n	800982c <IntToUnicode+0x18>
  }
}
 8009884:	bf00      	nop
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a0d      	ldr	r2, [pc, #52]	; (80098d4 <HAL_PCD_MspInit+0x44>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d113      	bne.n	80098ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098a2:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <HAL_PCD_MspInit+0x48>)
 80098a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a6:	4a0c      	ldr	r2, [pc, #48]	; (80098d8 <HAL_PCD_MspInit+0x48>)
 80098a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80098ac:	6593      	str	r3, [r2, #88]	; 0x58
 80098ae:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <HAL_PCD_MspInit+0x48>)
 80098b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80098ba:	2200      	movs	r2, #0
 80098bc:	2100      	movs	r1, #0
 80098be:	2014      	movs	r0, #20
 80098c0:	f7f8 f913 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80098c4:	2014      	movs	r0, #20
 80098c6:	f7f8 f92a 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	40005c00 	.word	0x40005c00
 80098d8:	40021000 	.word	0x40021000

080098dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80098f0:	4619      	mov	r1, r3
 80098f2:	4610      	mov	r0, r2
 80098f4:	f7fe fd76 	bl	80083e4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	440b      	add	r3, r1
 8009920:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	4619      	mov	r1, r3
 800992a:	f7fe fdae 	bl	800848a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	440b      	add	r3, r1
 8009956:	333c      	adds	r3, #60	; 0x3c
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	4619      	mov	r1, r3
 800995e:	f7fe fdf7 	bl	8008550 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe fefb 	bl	8008774 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800998e:	2301      	movs	r3, #1
 8009990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d001      	beq.n	800999e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800999a:	f7f7 fc6d 	bl	8001278 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe fea8 	bl	80086fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fe61 	bl	800867c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80099ba:	bf00      	nop
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fea3 	bl	800871e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099e0:	4b04      	ldr	r3, [pc, #16]	; (80099f4 <HAL_PCD_SuspendCallback+0x30>)
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	4a03      	ldr	r2, [pc, #12]	; (80099f4 <HAL_PCD_SuspendCallback+0x30>)
 80099e6:	f043 0306 	orr.w	r3, r3, #6
 80099ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	e000ed00 	.word	0xe000ed00

080099f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d007      	beq.n	8009a18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a08:	4b08      	ldr	r3, [pc, #32]	; (8009a2c <HAL_PCD_ResumeCallback+0x34>)
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	4a07      	ldr	r2, [pc, #28]	; (8009a2c <HAL_PCD_ResumeCallback+0x34>)
 8009a0e:	f023 0306 	bic.w	r3, r3, #6
 8009a12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009a14:	f000 f9fa 	bl	8009e0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fe92 	bl	8008748 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009a38:	4a2b      	ldr	r2, [pc, #172]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a29      	ldr	r2, [pc, #164]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009a48:	4b27      	ldr	r3, [pc, #156]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a4a:	4a28      	ldr	r2, [pc, #160]	; (8009aec <USBD_LL_Init+0xbc>)
 8009a4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a4e:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a50:	2208      	movs	r2, #8
 8009a52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a54:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a56:	2202      	movs	r2, #2
 8009a58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a5a:	4b23      	ldr	r3, [pc, #140]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009a60:	4b21      	ldr	r3, [pc, #132]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a66:	4b20      	ldr	r3, [pc, #128]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a72:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a78:	481b      	ldr	r0, [pc, #108]	; (8009ae8 <USBD_LL_Init+0xb8>)
 8009a7a:	f7f8 fa37 	bl	8001eec <HAL_PCD_Init>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009a84:	f7f7 fbf8 	bl	8001278 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a8e:	2318      	movs	r3, #24
 8009a90:	2200      	movs	r2, #0
 8009a92:	2100      	movs	r1, #0
 8009a94:	f7f9 fd25 	bl	80034e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a9e:	2358      	movs	r3, #88	; 0x58
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2180      	movs	r1, #128	; 0x80
 8009aa4:	f7f9 fd1d 	bl	80034e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aae:	23c0      	movs	r3, #192	; 0xc0
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2181      	movs	r1, #129	; 0x81
 8009ab4:	f7f9 fd15 	bl	80034e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009abe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	f7f9 fd0c 	bl	80034e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2182      	movs	r1, #130	; 0x82
 8009ad8:	f7f9 fd03 	bl	80034e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200013a4 	.word	0x200013a4
 8009aec:	40005c00 	.word	0x40005c00

08009af0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7f8 fad5 	bl	80020b6 <HAL_PCD_Start>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 f980 	bl	8009e18 <USBD_Get_USB_Status>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	4608      	mov	r0, r1
 8009b30:	4611      	mov	r1, r2
 8009b32:	461a      	mov	r2, r3
 8009b34:	4603      	mov	r3, r0
 8009b36:	70fb      	strb	r3, [r7, #3]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70bb      	strb	r3, [r7, #2]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b4e:	78bb      	ldrb	r3, [r7, #2]
 8009b50:	883a      	ldrh	r2, [r7, #0]
 8009b52:	78f9      	ldrb	r1, [r7, #3]
 8009b54:	f7f8 fc44 	bl	80023e0 <HAL_PCD_EP_Open>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f95a 	bl	8009e18 <USBD_Get_USB_Status>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b8c:	78fa      	ldrb	r2, [r7, #3]
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7f8 fc8b 	bl	80024ac <HAL_PCD_EP_Close>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f93b 	bl	8009e18 <USBD_Get_USB_Status>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bca:	78fa      	ldrb	r2, [r7, #3]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f8 fd4c 	bl	800266c <HAL_PCD_EP_SetStall>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f91c 	bl	8009e18 <USBD_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7f8 fd8d 	bl	800272c <HAL_PCD_EP_ClrStall>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 f8fd 	bl	8009e18 <USBD_Get_USB_Status>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da0c      	bge.n	8009c62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c48:	78fb      	ldrb	r3, [r7, #3]
 8009c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4e:	68f9      	ldr	r1, [r7, #12]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	440b      	add	r3, r1
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	e00b      	b.n	8009c7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	440b      	add	r3, r1
 8009c74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009c78:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ca0:	78fa      	ldrb	r2, [r7, #3]
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7f8 fb76 	bl	8002396 <HAL_PCD_SetAddress>
 8009caa:	4603      	mov	r3, r0
 8009cac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 f8b1 	bl	8009e18 <USBD_Get_USB_Status>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	607a      	str	r2, [r7, #4]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ce2:	7af9      	ldrb	r1, [r7, #11]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	f7f8 fc7d 	bl	80025e6 <HAL_PCD_EP_Transmit>
 8009cec:	4603      	mov	r3, r0
 8009cee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 f890 	bl	8009e18 <USBD_Get_USB_Status>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b086      	sub	sp, #24
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
 8009d12:	460b      	mov	r3, r1
 8009d14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d24:	7af9      	ldrb	r1, [r7, #11]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	f7f8 fc07 	bl	800253c <HAL_PCD_EP_Receive>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f86f 	bl	8009e18 <USBD_Get_USB_Status>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f8 fc29 	bl	80025b6 <HAL_PCD_EP_GetRxCount>
 8009d64:	4603      	mov	r3, r0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <HAL_PCDEx_LPM_Callback+0x18>
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d013      	beq.n	8009dae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009d86:	e023      	b.n	8009dd0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d007      	beq.n	8009da0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009d90:	f000 f83c 	bl	8009e0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d94:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	4a0f      	ldr	r2, [pc, #60]	; (8009dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009d9a:	f023 0306 	bic.w	r3, r3, #6
 8009d9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fcce 	bl	8008748 <USBD_LL_Resume>
    break;
 8009dac:	e010      	b.n	8009dd0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fcb2 	bl	800871e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	4a04      	ldr	r2, [pc, #16]	; (8009dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8009dc8:	f043 0306 	orr.w	r3, r3, #6
 8009dcc:	6113      	str	r3, [r2, #16]
    break;
 8009dce:	bf00      	nop
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	e000ed00 	.word	0xe000ed00

08009ddc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009de4:	4b03      	ldr	r3, [pc, #12]	; (8009df4 <USBD_static_malloc+0x18>)
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	2000022c 	.word	0x2000022c

08009df8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]

}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009e10:	f7f6 fcd4 	bl	80007bc <SystemClock_Config>
}
 8009e14:	bf00      	nop
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d817      	bhi.n	8009e5c <USBD_Get_USB_Status+0x44>
 8009e2c:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <USBD_Get_USB_Status+0x1c>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e45 	.word	0x08009e45
 8009e38:	08009e4b 	.word	0x08009e4b
 8009e3c:	08009e51 	.word	0x08009e51
 8009e40:	08009e57 	.word	0x08009e57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
    break;
 8009e48:	e00b      	b.n	8009e62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4e:	e008      	b.n	8009e62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e50:	2301      	movs	r3, #1
 8009e52:	73fb      	strb	r3, [r7, #15]
    break;
 8009e54:	e005      	b.n	8009e62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e56:	2303      	movs	r3, #3
 8009e58:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5a:	e002      	b.n	8009e62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e60:	bf00      	nop
  }
  return usb_status;
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <__libc_init_array>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4e0d      	ldr	r6, [pc, #52]	; (8009ea8 <__libc_init_array+0x38>)
 8009e74:	4c0d      	ldr	r4, [pc, #52]	; (8009eac <__libc_init_array+0x3c>)
 8009e76:	1ba4      	subs	r4, r4, r6
 8009e78:	10a4      	asrs	r4, r4, #2
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	42a5      	cmp	r5, r4
 8009e7e:	d109      	bne.n	8009e94 <__libc_init_array+0x24>
 8009e80:	4e0b      	ldr	r6, [pc, #44]	; (8009eb0 <__libc_init_array+0x40>)
 8009e82:	4c0c      	ldr	r4, [pc, #48]	; (8009eb4 <__libc_init_array+0x44>)
 8009e84:	f000 f82c 	bl	8009ee0 <_init>
 8009e88:	1ba4      	subs	r4, r4, r6
 8009e8a:	10a4      	asrs	r4, r4, #2
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	42a5      	cmp	r5, r4
 8009e90:	d105      	bne.n	8009e9e <__libc_init_array+0x2e>
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e98:	4798      	blx	r3
 8009e9a:	3501      	adds	r5, #1
 8009e9c:	e7ee      	b.n	8009e7c <__libc_init_array+0xc>
 8009e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ea2:	4798      	blx	r3
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	e7f2      	b.n	8009e8e <__libc_init_array+0x1e>
 8009ea8:	08009f50 	.word	0x08009f50
 8009eac:	08009f50 	.word	0x08009f50
 8009eb0:	08009f50 	.word	0x08009f50
 8009eb4:	08009f54 	.word	0x08009f54

08009eb8 <memcpy>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	1e43      	subs	r3, r0, #1
 8009ebc:	440a      	add	r2, r1
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	d100      	bne.n	8009ec4 <memcpy+0xc>
 8009ec2:	bd10      	pop	{r4, pc}
 8009ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ecc:	e7f7      	b.n	8009ebe <memcpy+0x6>

08009ece <memset>:
 8009ece:	4402      	add	r2, r0
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d100      	bne.n	8009ed8 <memset+0xa>
 8009ed6:	4770      	bx	lr
 8009ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8009edc:	e7f9      	b.n	8009ed2 <memset+0x4>
	...

08009ee0 <_init>:
 8009ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee2:	bf00      	nop
 8009ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee6:	bc08      	pop	{r3}
 8009ee8:	469e      	mov	lr, r3
 8009eea:	4770      	bx	lr

08009eec <_fini>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	bf00      	nop
 8009ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef2:	bc08      	pop	{r3}
 8009ef4:	469e      	mov	lr, r3
 8009ef6:	4770      	bx	lr
