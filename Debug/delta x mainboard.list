
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009970  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba0  08009ba0  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08009ba0  08009ba0  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ba0  08009ba0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ba0  08009ba0  00019ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba4  08009ba4  00019ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08009ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000190  08009d38  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08009d38  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad6f  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003465  00000000  00000000  0003af2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001398  00000000  00000000  0003e398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  0003f730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  00040950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011be3  00000000  00000000  00060ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4333  00000000  00000000  00072ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136df9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  00136e74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b30 	.word	0x08009b30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	08009b30 	.word	0x08009b30

08000218 <CDC_On_Receive>:
volatile uint8_t motor1_target_rpm = 0;
volatile uint8_t motor2_target_rpm = 0;
volatile uint8_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b14      	cmp	r3, #20
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2214      	movs	r2, #20
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fc6a 	bl	8009b08 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001ac 	.word	0x200001ac
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001d4 	.word	0x200001d4

08000258 <Set_Motor_Speed>:

int min_duty = 20000;
int max_duty = 65000;
int max_speed = 100;

inline void Set_Motor_Speed(volatile uint32_t * channel_a, volatile uint32_t * channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b087      	sub	sp, #28
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	int speed_cof = (max_duty - min_duty) / max_speed;
 8000264:	4b25      	ldr	r3, [pc, #148]	; (80002fc <Set_Motor_Speed+0xa4>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b25      	ldr	r3, [pc, #148]	; (8000300 <Set_Motor_Speed+0xa8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1ad2      	subs	r2, r2, r3
 800026e:	4b25      	ldr	r3, [pc, #148]	; (8000304 <Set_Motor_Speed+0xac>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	fb92 f3f3 	sdiv	r3, r2, r3
 8000276:	617b      	str	r3, [r7, #20]
	int speed_cof_n = speed_cof * -1;
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	425b      	negs	r3, r3
 800027c:	613b      	str	r3, [r7, #16]
	if (motor_speed > 0) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b00      	cmp	r3, #0
 8000282:	dd14      	ble.n	80002ae <Set_Motor_Speed+0x56>
		// forward
		if (motor_speed <= 100) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b64      	cmp	r3, #100	; 0x64
 8000288:	dc0a      	bgt.n	80002a0 <Set_Motor_Speed+0x48>
			// 0 to 100 compact range
			*channel_a = motor_speed * speed_cof + min_duty;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	fb02 f203 	mul.w	r2, r2, r3
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <Set_Motor_Speed+0xa8>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4413      	add	r3, r2
 8000298:	461a      	mov	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	e002      	b.n	80002a6 <Set_Motor_Speed+0x4e>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 80002ac:	e020      	b.n	80002f0 <Set_Motor_Speed+0x98>
	} else if (motor_speed < 0) {
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da17      	bge.n	80002e4 <Set_Motor_Speed+0x8c>
		if (motor_speed >= -100) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002ba:	db0a      	blt.n	80002d2 <Set_Motor_Speed+0x7a>
			*channel_b = motor_speed * speed_cof_n + min_duty;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	fb02 f203 	mul.w	r2, r2, r3
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <Set_Motor_Speed+0xa8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	461a      	mov	r2, r3
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	e004      	b.n	80002dc <Set_Motor_Speed+0x84>
			*channel_b = motor_speed * -1;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	425b      	negs	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
}
 80002e2:	e005      	b.n	80002f0 <Set_Motor_Speed+0x98>
		*channel_a = 0;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	371c      	adds	r7, #28
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000000 	.word	0x20000000
 8000304:	20000008 	.word	0x20000008

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030c:	f001 f8e1 	bl	80014d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000310:	f000 f8c4 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000314:	f000 fd18 	bl	8000d48 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000318:	f000 faa0 	bl	800085c <MX_TIM4_Init>
  MX_TIM8_Init();
 800031c:	f000 fb2a 	bl	8000974 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000320:	f000 fb98 	bl	8000a54 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000324:	f000 fc1c 	bl	8000b60 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000328:	f000 f920 	bl	800056c <MX_TIM1_Init>
  MX_TIM2_Init();
 800032c:	f000 f9ce 	bl	80006cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000330:	f000 fa20 	bl	8000774 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000334:	f000 fae8 	bl	8000908 <MX_TIM7_Init>
  MX_TIM17_Init();
 8000338:	f000 fc8c 	bl	8000c54 <MX_TIM17_Init>
  MX_USB_Device_Init();
 800033c:	f008 fec8 	bl	80090d0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000340:	2104      	movs	r1, #4
 8000342:	483d      	ldr	r0, [pc, #244]	; (8000438 <main+0x130>)
 8000344:	f004 f9c2 	bl	80046cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000348:	2104      	movs	r1, #4
 800034a:	483c      	ldr	r0, [pc, #240]	; (800043c <main+0x134>)
 800034c:	f004 f9be 	bl	80046cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000350:	2104      	movs	r1, #4
 8000352:	483b      	ldr	r0, [pc, #236]	; (8000440 <main+0x138>)
 8000354:	f004 f9ba 	bl	80046cc <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000358:	2100      	movs	r1, #0
 800035a:	483a      	ldr	r0, [pc, #232]	; (8000444 <main+0x13c>)
 800035c:	f004 f810 	bl	8004380 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000360:	2104      	movs	r1, #4
 8000362:	4838      	ldr	r0, [pc, #224]	; (8000444 <main+0x13c>)
 8000364:	f004 f80c 	bl	8004380 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000368:	2108      	movs	r1, #8
 800036a:	4836      	ldr	r0, [pc, #216]	; (8000444 <main+0x13c>)
 800036c:	f004 f808 	bl	8004380 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000370:	4b35      	ldr	r3, [pc, #212]	; (8000448 <main+0x140>)
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000376:	4b34      	ldr	r3, [pc, #208]	; (8000448 <main+0x140>)
 8000378:	2200      	movs	r2, #0
 800037a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 800037c:	4b32      	ldr	r3, [pc, #200]	; (8000448 <main+0x140>)
 800037e:	2200      	movs	r2, #0
 8000380:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000382:	2100      	movs	r1, #0
 8000384:	4831      	ldr	r0, [pc, #196]	; (800044c <main+0x144>)
 8000386:	f003 fffb 	bl	8004380 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800038a:	2104      	movs	r1, #4
 800038c:	482f      	ldr	r0, [pc, #188]	; (800044c <main+0x144>)
 800038e:	f003 fff7 	bl	8004380 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000392:	2108      	movs	r1, #8
 8000394:	482d      	ldr	r0, [pc, #180]	; (800044c <main+0x144>)
 8000396:	f003 fff3 	bl	8004380 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 800039a:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <main+0x148>)
 800039c:	2200      	movs	r2, #0
 800039e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <main+0x148>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 80003a6:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <main+0x148>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80003ac:	2100      	movs	r1, #0
 80003ae:	4829      	ldr	r0, [pc, #164]	; (8000454 <main+0x14c>)
 80003b0:	f003 ffe6 	bl	8004380 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80003b4:	2100      	movs	r1, #0
 80003b6:	4828      	ldr	r0, [pc, #160]	; (8000458 <main+0x150>)
 80003b8:	f003 ffe2 	bl	8004380 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80003bc:	2100      	movs	r1, #0
 80003be:	4827      	ldr	r0, [pc, #156]	; (800045c <main+0x154>)
 80003c0:	f003 ffde 	bl	8004380 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <main+0x158>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 0;
 80003ca:	4b26      	ldr	r3, [pc, #152]	; (8000464 <main+0x15c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <main+0x160>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 80003d6:	4825      	ldr	r0, [pc, #148]	; (800046c <main+0x164>)
 80003d8:	f003 ff10 	bl	80041fc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <main+0x168>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d1fa      	bne.n	80003dc <main+0xd4>
		command_received = 0;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <main+0x168>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
		command_received_ticker = 60;
 80003ec:	4b21      	ldr	r3, [pc, #132]	; (8000474 <main+0x16c>)
 80003ee:	223c      	movs	r2, #60	; 0x3c
 80003f0:	701a      	strb	r2, [r3, #0]

		// toggle led
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80003f2:	2120      	movs	r1, #32
 80003f4:	4820      	ldr	r0, [pc, #128]	; (8000478 <main+0x170>)
 80003f6:	f001 fb87 	bl	8001b08 <HAL_GPIO_TogglePin>

		feedback.thrower = 666;
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <main+0x174>)
 80003fc:	f240 229a 	movw	r2, #666	; 0x29a
 8000400:	60da      	str	r2, [r3, #12]

		// set motor speeds
		Set_Motor_Speed(&(TIM1->CCR3), &(TIM1->CCR2), command.motor1);
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <main+0x178>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	491e      	ldr	r1, [pc, #120]	; (8000484 <main+0x17c>)
 800040a:	481f      	ldr	r0, [pc, #124]	; (8000488 <main+0x180>)
 800040c:	f7ff ff24 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), command.motor2);
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <main+0x178>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	461a      	mov	r2, r3
 8000416:	491d      	ldr	r1, [pc, #116]	; (800048c <main+0x184>)
 8000418:	481d      	ldr	r0, [pc, #116]	; (8000490 <main+0x188>)
 800041a:	f7ff ff1d 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), command.motor3);
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <main+0x178>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	461a      	mov	r2, r3
 8000424:	491b      	ldr	r1, [pc, #108]	; (8000494 <main+0x18c>)
 8000426:	481c      	ldr	r0, [pc, #112]	; (8000498 <main+0x190>)
 8000428:	f7ff ff16 	bl	8000258 <Set_Motor_Speed>

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 800042c:	2114      	movs	r1, #20
 800042e:	4813      	ldr	r0, [pc, #76]	; (800047c <main+0x174>)
 8000430:	f008 ff10 	bl	8009254 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000434:	e7d2      	b.n	80003dc <main+0xd4>
 8000436:	bf00      	nop
 8000438:	200005c8 	.word	0x200005c8
 800043c:	2000044c 	.word	0x2000044c
 8000440:	20000400 	.word	0x20000400
 8000444:	2000057c 	.word	0x2000057c
 8000448:	40012c00 	.word	0x40012c00
 800044c:	20000530 	.word	0x20000530
 8000450:	40000400 	.word	0x40000400
 8000454:	20000498 	.word	0x20000498
 8000458:	20000614 	.word	0x20000614
 800045c:	200004e4 	.word	0x200004e4
 8000460:	40014000 	.word	0x40014000
 8000464:	40014400 	.word	0x40014400
 8000468:	40014800 	.word	0x40014800
 800046c:	20000660 	.word	0x20000660
 8000470:	200001d4 	.word	0x200001d4
 8000474:	200001d5 	.word	0x200001d5
 8000478:	48000400 	.word	0x48000400
 800047c:	200001c0 	.word	0x200001c0
 8000480:	200001ac 	.word	0x200001ac
 8000484:	40012c38 	.word	0x40012c38
 8000488:	40012c3c 	.word	0x40012c3c
 800048c:	4000043c 	.word	0x4000043c
 8000490:	40012c34 	.word	0x40012c34
 8000494:	40000438 	.word	0x40000438
 8000498:	40000434 	.word	0x40000434

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b0a4      	sub	sp, #144	; 0x90
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004a6:	2238      	movs	r2, #56	; 0x38
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f009 fb37 	bl	8009b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	463b      	mov	r3, r7
 80004c2:	2244      	movs	r2, #68	; 0x44
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f009 fb29 	bl	8009b1e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f002 fe9d 	bl	800320c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80004d2:	2322      	movs	r3, #34	; 0x22
 80004d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004dc:	2340      	movs	r3, #64	; 0x40
 80004de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004e0:	2301      	movs	r3, #1
 80004e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e4:	2302      	movs	r3, #2
 80004e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e8:	2302      	movs	r3, #2
 80004ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80004f0:	2314      	movs	r3, #20
 80004f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004fc:	2302      	movs	r3, #2
 80004fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000502:	2302      	movs	r3, #2
 8000504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000508:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800050c:	4618      	mov	r0, r3
 800050e:	f002 ff31 	bl	8003374 <HAL_RCC_OscConfig>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000518:	f000 fcee 	bl	8000ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	230f      	movs	r3, #15
 800051e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000520:	2303      	movs	r3, #3
 8000522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000530:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000534:	2104      	movs	r1, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fa34 	bl	80039a4 <HAL_RCC_ClockConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000542:	f000 fcd9 	bl	8000ef8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800054c:	2300      	movs	r3, #0
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4618      	mov	r0, r3
 8000554:	f003 fc0a 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800055e:	f000 fccb 	bl	8000ef8 <Error_Handler>
  }
}
 8000562:	bf00      	nop
 8000564:	3790      	adds	r7, #144	; 0x90
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b098      	sub	sp, #96	; 0x60
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000572:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2234      	movs	r2, #52	; 0x34
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f009 fac0 	bl	8009b1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800059e:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005a0:	4a49      	ldr	r2, [pc, #292]	; (80006c8 <MX_TIM1_Init+0x15c>)
 80005a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005a4:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	4b46      	ldr	r3, [pc, #280]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005b0:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005be:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005ca:	483e      	ldr	r0, [pc, #248]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005cc:	f003 fe80 	bl	80042d0 <HAL_TIM_PWM_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f000 fc8f 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005da:	2300      	movs	r3, #0
 80005dc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005ea:	4619      	mov	r1, r3
 80005ec:	4835      	ldr	r0, [pc, #212]	; (80006c4 <MX_TIM1_Init+0x158>)
 80005ee:	f004 ff5d 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005f8:	f000 fc7e 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000604:	2300      	movs	r3, #0
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000608:	2300      	movs	r3, #0
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000618:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	4828      	ldr	r0, [pc, #160]	; (80006c4 <MX_TIM1_Init+0x158>)
 8000622:	f004 fa5f 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800062c:	f000 fc64 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000638:	2204      	movs	r2, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4821      	ldr	r0, [pc, #132]	; (80006c4 <MX_TIM1_Init+0x158>)
 800063e:	f004 fa51 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000648:	f000 fc56 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000650:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000654:	2208      	movs	r2, #8
 8000656:	4619      	mov	r1, r3
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <MX_TIM1_Init+0x158>)
 800065a:	f004 fa43 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000664:	f000 fc48 	bl	8000ef8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800067c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000680:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800068e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_TIM1_Init+0x158>)
 80006a6:	f004 ff83 	bl	80055b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80006b0:	f000 fc22 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_TIM1_Init+0x158>)
 80006b6:	f000 fda3 	bl	8001200 <HAL_TIM_MspPostInit>

}
 80006ba:	bf00      	nop
 80006bc:	3760      	adds	r7, #96	; 0x60
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000057c 	.word	0x2000057c
 80006c8:	40012c00 	.word	0x40012c00

080006cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2224      	movs	r2, #36	; 0x24
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f009 fa1f 	bl	8009b1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_TIM2_Init+0xa4>)
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_TIM2_Init+0xa4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_TIM2_Init+0xa4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_TIM2_Init+0xa4>)
 8000700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000704:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_TIM2_Init+0xa4>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_TIM2_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000712:	2303      	movs	r3, #3
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800071a:	2301      	movs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800072a:	2301      	movs	r3, #1
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_TIM2_Init+0xa4>)
 800073e:	f003 ff1f 	bl	8004580 <HAL_TIM_Encoder_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000748:	f000 fbd6 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_TIM2_Init+0xa4>)
 800075a:	f004 fea7 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000764:	f000 fbc8 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3730      	adds	r7, #48	; 0x30
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200005c8 	.word	0x200005c8

08000774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MX_TIM3_Init+0xe0>)
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <MX_TIM3_Init+0xe4>)
 800079c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_TIM3_Init+0xe0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MX_TIM3_Init+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_TIM3_Init+0xe0>)
 80007ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_TIM3_Init+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_TIM3_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007be:	4825      	ldr	r0, [pc, #148]	; (8000854 <MX_TIM3_Init+0xe0>)
 80007c0:	f003 fd86 	bl	80042d0 <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007ca:	f000 fb95 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	481d      	ldr	r0, [pc, #116]	; (8000854 <MX_TIM3_Init+0xe0>)
 80007de:	f004 fe65 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80007e8:	f000 fb86 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_TIM3_Init+0xe0>)
 8000804:	f004 f96e 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800080e:	f000 fb73 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000816:	463b      	mov	r3, r7
 8000818:	2204      	movs	r2, #4
 800081a:	4619      	mov	r1, r3
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_TIM3_Init+0xe0>)
 800081e:	f004 f961 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000828:	f000 fb66 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2208      	movs	r2, #8
 8000834:	4619      	mov	r1, r3
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <MX_TIM3_Init+0xe0>)
 8000838:	f004 f954 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000842:	f000 fb59 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <MX_TIM3_Init+0xe0>)
 8000848:	f000 fcda 	bl	8001200 <HAL_TIM_MspPostInit>

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000530 	.word	0x20000530
 8000858:	40000400 	.word	0x40000400

0800085c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2224      	movs	r2, #36	; 0x24
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f009 f957 	bl	8009b1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_TIM4_Init+0xa4>)
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <MX_TIM4_Init+0xa8>)
 800087e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_TIM4_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_TIM4_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_TIM4_Init+0xa4>)
 800088e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000892:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_TIM4_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_TIM4_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008a0:	2303      	movs	r3, #3
 80008a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b8:	2301      	movs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_TIM4_Init+0xa4>)
 80008cc:	f003 fe58 	bl	8004580 <HAL_TIM_Encoder_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80008d6:	f000 fb0f 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_TIM4_Init+0xa4>)
 80008e8:	f004 fde0 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80008f2:	f000 fb01 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000044c 	.word	0x2000044c
 8000904:	40000800 	.word	0x40000800

08000908 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_TIM7_Init+0x64>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_TIM7_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_TIM7_Init+0x64>)
 8000920:	2228      	movs	r2, #40	; 0x28
 8000922:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_TIM7_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_TIM7_Init+0x64>)
 800092c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000930:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_TIM7_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_TIM7_Init+0x64>)
 800093a:	f003 fc07 	bl	800414c <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000944:	f000 fad8 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_TIM7_Init+0x64>)
 8000956:	f004 fda9 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 faca 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000660 	.word	0x20000660
 8000970:	40001400 	.word	0x40001400

08000974 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09a      	sub	sp, #104	; 0x68
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800097a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800097e:	2224      	movs	r2, #36	; 0x24
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f009 f8cb 	bl	8009b1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2234      	movs	r2, #52	; 0x34
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f009 f8bf 	bl	8009b1e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009a2:	4a2b      	ldr	r2, [pc, #172]	; (8000a50 <MX_TIM8_Init+0xdc>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009cc:	2303      	movs	r3, #3
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009d0:	2300      	movs	r3, #0
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009d4:	2301      	movs	r3, #1
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e0:	2300      	movs	r3, #0
 80009e2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e4:	2301      	movs	r3, #1
 80009e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80009f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009f4:	4619      	mov	r1, r3
 80009f6:	4815      	ldr	r0, [pc, #84]	; (8000a4c <MX_TIM8_Init+0xd8>)
 80009f8:	f003 fdc2 	bl	8004580 <HAL_TIM_Encoder_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000a02:	f000 fa79 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM8_Init+0xd8>)
 8000a1a:	f004 fd47 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000a24:	f000 fa68 	bl	8000ef8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM8_Init+0xd8>)
 8000a36:	f004 fdbb 	bl	80055b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000a40:	f000 fa5a 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3768      	adds	r7, #104	; 0x68
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000400 	.word	0x20000400
 8000a50:	40013400 	.word	0x40013400

08000a54 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b098      	sub	sp, #96	; 0x60
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2234      	movs	r2, #52	; 0x34
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f009 f84c 	bl	8009b1e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000a88:	4a34      	ldr	r2, [pc, #208]	; (8000b5c <MX_TIM15_Init+0x108>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000a8c:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ab2:	4829      	ldr	r0, [pc, #164]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000ab4:	f003 fc0c 	bl	80042d0 <HAL_TIM_PWM_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 fa1b 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000aca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4821      	ldr	r0, [pc, #132]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000ad2:	f004 fceb 	bl	80054ac <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 fa0c 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae0:	2360      	movs	r3, #96	; 0x60
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4814      	ldr	r0, [pc, #80]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000b06:	f003 ffed 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000b10:	f000 f9f2 	bl	8000ef8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000b3c:	f004 fd38 	bl	80055b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000b46:	f000 f9d7 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_TIM15_Init+0x104>)
 8000b4c:	f000 fb58 	bl	8001200 <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3760      	adds	r7, #96	; 0x60
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000498 	.word	0x20000498
 8000b5c:	40014000 	.word	0x40014000

08000b60 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2234      	movs	r2, #52	; 0x34
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 ffcc 	bl	8009b1e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000b88:	4a31      	ldr	r2, [pc, #196]	; (8000c50 <MX_TIM16_Init+0xf0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bb2:	4826      	ldr	r0, [pc, #152]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000bb4:	f003 faca 	bl	800414c <HAL_TIM_Base_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000bbe:	f000 f99b 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000bc2:	4822      	ldr	r0, [pc, #136]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000bc4:	f003 fb84 	bl	80042d0 <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000bce:	f000 f993 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd2:	2360      	movs	r3, #96	; 0x60
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bde:	2300      	movs	r3, #0
 8000be0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000be6:	2300      	movs	r3, #0
 8000be8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4815      	ldr	r0, [pc, #84]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000bf8:	f003 ff74 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000c02:	f000 f979 	bl	8000ef8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000c2e:	f004 fcbf 	bl	80055b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000c38:	f000 f95e 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_TIM16_Init+0xec>)
 8000c3e:	f000 fadf 	bl	8001200 <HAL_TIM_MspPostInit>

}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	; 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000614 	.word	0x20000614
 8000c50:	40014400 	.word	0x40014400

08000c54 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2234      	movs	r2, #52	; 0x34
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f008 ff52 	bl	8009b1e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000c7c:	4a31      	ldr	r2, [pc, #196]	; (8000d44 <MX_TIM17_Init+0xf0>)
 8000c7e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c92:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ca6:	4826      	ldr	r0, [pc, #152]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000ca8:	f003 fa50 	bl	800414c <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000cb2:	f000 f921 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000cb6:	4822      	ldr	r0, [pc, #136]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000cb8:	f003 fb0a 	bl	80042d0 <HAL_TIM_PWM_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000cc2:	f000 f919 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc6:	2360      	movs	r3, #96	; 0x60
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4815      	ldr	r0, [pc, #84]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000cec:	f003 fefa 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 f8ff 	bl	8000ef8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000d22:	f004 fc45 	bl	80055b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000d2c:	f000 f8e4 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <MX_TIM17_Init+0xec>)
 8000d32:	f000 fa65 	bl	8001200 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3750      	adds	r7, #80	; 0x50
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200004e4 	.word	0x200004e4
 8000d44:	40014800 	.word	0x40014800

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_GPIO_Init+0x8c>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <MX_GPIO_Init+0x8c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_GPIO_Init+0x8c>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_GPIO_Init+0x8c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <MX_GPIO_Init+0x8c>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_GPIO_Init+0x8c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2120      	movs	r1, #32
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000d94:	f000 fea0 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000dac:	f000 fd12 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db0:	2320      	movs	r3, #32
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_GPIO_Init+0x90>)
 8000dc8:	f000 fd04 	bl	80017d4 <HAL_GPIO_Init>

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000400 	.word	0x48000400

08000ddc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000dec:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000df8:	8bfb      	ldrh	r3, [r7, #30]
 8000dfa:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000dfc:	8812      	ldrh	r2, [r2, #0]
 8000dfe:	b292      	uxth	r2, r2
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000e04:	8bbb      	ldrh	r3, [r7, #28]
 8000e06:	4a35      	ldr	r2, [pc, #212]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000e10:	8b7b      	ldrh	r3, [r7, #26]
 8000e12:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e14:	8812      	ldrh	r2, [r2, #0]
 8000e16:	b292      	uxth	r2, r2
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000e1c:	4a2e      	ldr	r2, [pc, #184]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e1e:	8bfb      	ldrh	r3, [r7, #30]
 8000e20:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000e22:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e24:	8bbb      	ldrh	r3, [r7, #28]
 8000e26:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e2a:	8b7b      	ldrh	r3, [r7, #26]
 8000e2c:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19 * -1; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3e:	1252      	asrs	r2, r2, #9
 8000e40:	17db      	asrs	r3, r3, #31
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e46:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19 * -1;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e4e:	fb02 f303 	mul.w	r3, r2, r3
 8000e52:	4a24      	ldr	r2, [pc, #144]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1252      	asrs	r2, r2, #9
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e60:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19 * -1;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1252      	asrs	r2, r2, #9
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e7a:	6093      	str	r3, [r2, #8]
	feedback.thrower = 666;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e7e:	f240 229a 	movw	r2, #666	; 0x29a
 8000e82:	60da      	str	r2, [r3, #12]

	// pwm pid


	// timeout
	if (command_received_ticker > 0) {
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0xc2>
		command_received_ticker -= 1;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	3b01      	subs	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e9a:	701a      	strb	r2, [r3, #0]
		TIM1->CCR3 = 0;
		TIM3->CCR1 = 0;
		TIM3->CCR2 = 0;
		TIM3->CCR3 = 0;
	}
}
 8000e9c:	e011      	b.n	8000ec2 <HAL_TIM_PeriodElapsedCallback+0xe6>
		TIM1->CCR1 = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ec2:	bf00      	nop
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40000800 	.word	0x40000800
 8000ed4:	40013400 	.word	0x40013400
 8000ed8:	200001d6 	.word	0x200001d6
 8000edc:	200001d8 	.word	0x200001d8
 8000ee0:	200001da 	.word	0x200001da
 8000ee4:	6bca1af3 	.word	0x6bca1af3
 8000ee8:	200001c0 	.word	0x200001c0
 8000eec:	200001d5 	.word	0x200001d5
 8000ef0:	40012c00 	.word	0x40012c00
 8000ef4:	40000400 	.word	0x40000400

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x44>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_MspInit+0x44>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x44>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_MspInit+0x44>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HAL_MspInit+0x44>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	6593      	str	r3, [r2, #88]	; 0x58
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_MspInit+0x44>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f3e:	f002 fa09 	bl	8003354 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_TIM_PWM_MspInit+0x80>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10c      	bne.n	8000f7c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000f7a:	e022      	b.n	8000fc2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <HAL_TIM_PWM_MspInit+0x88>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10c      	bne.n	8000fa0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6593      	str	r3, [r2, #88]	; 0x58
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
}
 8000f9e:	e010      	b.n	8000fc2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_TIM_PWM_MspInit+0x8c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <HAL_TIM_PWM_MspInit+0x84>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
}
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	40014000 	.word	0x40014000

08000fe0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001000:	d129      	bne.n	8001056 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001002:	4b54      	ldr	r3, [pc, #336]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a53      	ldr	r2, [pc, #332]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b51      	ldr	r3, [pc, #324]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001032:	2303      	movs	r3, #3
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001042:	2301      	movs	r3, #1
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f000 fbc0 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001054:	e079      	b.n	800114a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3f      	ldr	r2, [pc, #252]	; (8001158 <HAL_TIM_Encoder_MspInit+0x178>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d128      	bne.n	80010b2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	4a3b      	ldr	r2, [pc, #236]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6593      	str	r3, [r2, #88]	; 0x58
 800106c:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	4a35      	ldr	r2, [pc, #212]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001090:	23c0      	movs	r3, #192	; 0xc0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010a0:	2302      	movs	r3, #2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	482c      	ldr	r0, [pc, #176]	; (800115c <HAL_TIM_Encoder_MspInit+0x17c>)
 80010ac:	f000 fb92 	bl	80017d4 <HAL_GPIO_Init>
}
 80010b0:	e04b      	b.n	800114a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <HAL_TIM_Encoder_MspInit+0x180>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d146      	bne.n	800114a <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010c6:	6613      	str	r3, [r2, #96]	; 0x60
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_TIM_Encoder_MspInit+0x174>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001116:	2302      	movs	r3, #2
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001124:	f000 fb56 	bl	80017d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800113a:	230a      	movs	r3, #10
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_TIM_Encoder_MspInit+0x17c>)
 8001146:	f000 fb45 	bl	80017d4 <HAL_GPIO_Init>
}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	; 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	40000800 	.word	0x40000800
 800115c:	48000400 	.word	0x48000400
 8001160:	40013400 	.word	0x40013400

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <HAL_TIM_Base_MspInit+0x8c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d114      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 800117c:	f043 0320 	orr.w	r3, r3, #32
 8001180:	6593      	str	r3, [r2, #88]	; 0x58
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2037      	movs	r0, #55	; 0x37
 8001194:	f000 fae9 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001198:	2037      	movs	r0, #55	; 0x37
 800119a:	f000 fb00 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800119e:	e022      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_TIM_Base_MspInit+0x94>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10c      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6613      	str	r3, [r2, #96]	; 0x60
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
}
 80011c2:	e010      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0c      	ldr	r2, [pc, #48]	; (80011fc <HAL_TIM_Base_MspInit+0x98>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10b      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6613      	str	r3, [r2, #96]	; 0x60
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_TIM_Base_MspInit+0x90>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40001400 	.word	0x40001400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40014400 	.word	0x40014400
 80011fc:	40014800 	.word	0x40014800

08001200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a65      	ldr	r2, [pc, #404]	; (80013b4 <HAL_TIM_MspPostInit+0x1b4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d11e      	bne.n	8001260 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b65      	ldr	r3, [pc, #404]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a64      	ldr	r2, [pc, #400]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800123a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800124c:	2306      	movs	r3, #6
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fabb 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800125e:	e0a5      	b.n	80013ac <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a55      	ldr	r2, [pc, #340]	; (80013bc <HAL_TIM_MspPostInit+0x1bc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d139      	bne.n	80012de <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800129a:	2350      	movs	r3, #80	; 0x50
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012aa:	2302      	movs	r3, #2
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f000 fa8c 	bl	80017d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012bc:	2301      	movs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012cc:	2302      	movs	r3, #2
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	483a      	ldr	r0, [pc, #232]	; (80013c0 <HAL_TIM_MspPostInit+0x1c0>)
 80012d8:	f000 fa7c 	bl	80017d4 <HAL_GPIO_Init>
}
 80012dc:	e066      	b.n	80013ac <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_TIM_MspPostInit+0x1c4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d11d      	bne.n	8001324 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a32      	ldr	r2, [pc, #200]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001300:	2304      	movs	r3, #4
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001310:	2309      	movs	r3, #9
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f000 fa59 	bl	80017d4 <HAL_GPIO_Init>
}
 8001322:	e043      	b.n	80013ac <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_TIM_MspPostInit+0x1c8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d11c      	bne.n	8001368 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001346:	2310      	movs	r3, #16
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001356:	2301      	movs	r3, #1
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4817      	ldr	r0, [pc, #92]	; (80013c0 <HAL_TIM_MspPostInit+0x1c0>)
 8001362:	f000 fa37 	bl	80017d4 <HAL_GPIO_Init>
}
 8001366:	e021      	b.n	80013ac <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_TIM_MspPostInit+0x1cc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d11c      	bne.n	80013ac <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_TIM_MspPostInit+0x1b8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800139a:	2301      	movs	r3, #1
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a8:	f000 fa14 	bl	80017d4 <HAL_GPIO_Init>
}
 80013ac:	bf00      	nop
 80013ae:	3738      	adds	r7, #56	; 0x38
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40012c00 	.word	0x40012c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40000400 	.word	0x40000400
 80013c0:	48000400 	.word	0x48000400
 80013c4:	40014000 	.word	0x40014000
 80013c8:	40014400 	.word	0x40014400
 80013cc:	40014800 	.word	0x40014800

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f8a8 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USB_LP_IRQHandler+0x10>)
 8001432:	f000 fc8a 	bl	8001d4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20001350 	.word	0x20001350

08001440 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM7_IRQHandler+0x10>)
 8001446:	f003 f9ce 	bl	80047e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000660 	.word	0x20000660

08001454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <SystemInit+0x28>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <SystemInit+0x28>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <SystemInit+0x28>)
 800146a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146e:	609a      	str	r2, [r3, #8]
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001482:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LoopForever+0xe>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <LoopForever+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014aa:	f7ff ffd3 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f008 fb07 	bl	8009ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b2:	f7fe ff29 	bl	8000308 <main>

080014b6 <LoopForever>:

LoopForever:
    b LoopForever
 80014b6:	e7fe      	b.n	80014b6 <LoopForever>
  ldr   r0, =_estack
 80014b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80014c4:	08009ba8 	.word	0x08009ba8
  ldr r2, =_sbss
 80014c8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80014cc:	20001644 	.word	0x20001644

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>

080014d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f939 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f80e 	bl	8001504 <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	e001      	b.n	80014f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f4:	f7ff fd08 	bl	8000f08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f8:	79fb      	ldrb	r3, [r7, #7]

}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_InitTick+0x68>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d022      	beq.n	800155e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_InitTick+0x6c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_InitTick+0x68>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001524:	fbb1 f3f3 	udiv	r3, r1, r3
 8001528:	fbb2 f3f3 	udiv	r3, r2, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f944 	bl	80017ba <HAL_SYSTICK_Config>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10f      	bne.n	8001558 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	d809      	bhi.n	8001552 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153e:	2200      	movs	r2, #0
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	f04f 30ff 	mov.w	r0, #4294967295
 8001546:	f000 f910 	bl	800176a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_InitTick+0x70>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e007      	b.n	8001562 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e004      	b.n	8001562 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e001      	b.n	8001562 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000014 	.word	0x20000014
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000010 	.word	0x20000010

08001578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x1c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x20>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4413      	add	r3, r2
 8001586:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_IncTick+0x1c>)
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	200006ac 	.word	0x200006ac
 8001598:	20000014 	.word	0x20000014

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200006ac 	.word	0x200006ac

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <__NVIC_EnableIRQ+0x38>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff8e 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff29 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff40 	bl	80015fc <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff90 	bl	80016a8 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5f 	bl	8001654 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff33 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa4 	bl	8001710 <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43d9      	mvns	r1, r3
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	400b      	ands	r3, r1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	b08b      	sub	sp, #44	; 0x2c
 8001b40:	af06      	add	r7, sp, #24
 8001b42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0d7      	b.n	8001cfe <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f007 fcbc 	bl	80094e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fe18 	bl	80057aa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e04c      	b.n	8001c1a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	3301      	adds	r3, #1
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	b298      	uxth	r0, r3
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	3336      	adds	r3, #54	; 0x36
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3303      	adds	r3, #3
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	3338      	adds	r3, #56	; 0x38
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	333c      	adds	r3, #60	; 0x3c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3340      	adds	r3, #64	; 0x40
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	3301      	adds	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d3ad      	bcc.n	8001b80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e044      	b.n	8001cb4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3b5      	bcc.n	8001c2a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	687e      	ldr	r6, [r7, #4]
 8001cc6:	466d      	mov	r5, sp
 8001cc8:	f106 0410 	add.w	r4, r6, #16
 8001ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	602b      	str	r3, [r5, #0]
 8001cd4:	1d33      	adds	r3, r6, #4
 8001cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd8:	6838      	ldr	r0, [r7, #0]
 8001cda:	f003 fd81 	bl	80057e0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 fa5e 	bl	80031b8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_PCD_Start+0x16>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e012      	b.n	8001d42 <HAL_PCD_Start+0x3c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 fd27 	bl	800577c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f005 fd13 	bl	800775e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f005 fd18 	bl	800778c <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d66:	d102      	bne.n	8001d6e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fb5b 	bl	8002424 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 fd0a 	bl	800778c <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d82:	d112      	bne.n	8001daa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d96:	b292      	uxth	r2, r2
 8001d98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f007 fc1a 	bl	80095d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001da2:	2100      	movs	r1, #0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f91e 	bl	8001fe6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 fcec 	bl	800778c <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 fcd5 	bl	800778c <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dec:	d10b      	bne.n	8001e06 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e00:	b292      	uxth	r2, r2
 8001e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f005 fcbe 	bl	800778c <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1a:	d133      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0204 	bic.w	r2, r2, #4
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0208 	bic.w	r2, r2, #8
 8001e46:	b292      	uxth	r2, r2
 8001e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f007 fdad 	bl	80099c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f007 fbee 	bl	8009648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 fc7f 	bl	800778c <USB_ReadInterrupts>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e98:	d126      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0208 	orr.w	r2, r2, #8
 8001eac:	b292      	uxth	r2, r2
 8001eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0204 	orr.w	r2, r2, #4
 8001edc:	b292      	uxth	r2, r2
 8001ede:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f007 fb96 	bl	8009614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 fc4d 	bl	800778c <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d13f      	bne.n	8001f7c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d12b      	bne.n	8001f76 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0204 	orr.w	r2, r2, #4
 8001f30:	b292      	uxth	r2, r2
 8001f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0208 	orr.w	r2, r2, #8
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f007 fd26 	bl	80099c0 <HAL_PCDEx_LPM_Callback>
 8001f74:	e002      	b.n	8001f7c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f007 fb4c 	bl	8009614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f005 fc03 	bl	800778c <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f90:	d10e      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f007 fb05 	bl	80095ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 fbe9 	bl	800778c <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc4:	d10b      	bne.n	8001fde <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd8:	b292      	uxth	r2, r2
 8001fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_SetAddress+0x1a>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e013      	b.n	8002028 <HAL_PCD_SetAddress+0x42>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f005 fb8c 	bl	8007736 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	460b      	mov	r3, r1
 8002044:	803b      	strh	r3, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800204e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0e      	bge.n	8002074 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e00e      	b.n	8002092 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 0207 	and.w	r2, r3, #7
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800209e:	883a      	ldrh	r2, [r7, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	78ba      	ldrb	r2, [r7, #2]
 80020a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020bc:	78bb      	ldrb	r3, [r7, #2]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d102      	bne.n	80020c8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_PCD_EP_Open+0xa6>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e00e      	b.n	80020f4 <HAL_PCD_EP_Open+0xc4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fb9d 	bl	8005824 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020f2:	7afb      	ldrb	r3, [r7, #11]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210c:	2b00      	cmp	r3, #0
 800210e:	da0e      	bge.n	800212e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	705a      	strb	r2, [r3, #1]
 800212c:	e00e      	b.n	800214c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 0207 	and.w	r2, r3, #7
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_PCD_EP_Close+0x6a>
 8002162:	2302      	movs	r3, #2
 8002164:	e00e      	b.n	8002184 <HAL_PCD_EP_Close+0x88>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68f9      	ldr	r1, [r7, #12]
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fec3 	bl	8005f00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	460b      	mov	r3, r1
 800219a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	f003 0207 	and.w	r2, r3, #7
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4413      	add	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021cc:	7afb      	ldrb	r3, [r7, #11]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6979      	ldr	r1, [r7, #20]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 f876 	bl	80062da <USB_EPStartXfer>
 80021ee:	e005      	b.n	80021fc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6979      	ldr	r1, [r7, #20]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 f86f 	bl	80062da <USB_EPStartXfer>
  }

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 0207 	and.w	r2, r3, #7
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002228:	681b      	ldr	r3, [r3, #0]
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	460b      	mov	r3, r1
 8002244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002246:	7afb      	ldrb	r3, [r7, #11]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2201      	movs	r2, #1
 8002280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002282:	7afb      	ldrb	r3, [r7, #11]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	b2da      	uxtb	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6979      	ldr	r1, [r7, #20]
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f81b 	bl	80062da <USB_EPStartXfer>
 80022a4:	e005      	b.n	80022b2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6979      	ldr	r1, [r7, #20]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 f814 	bl	80062da <USB_EPStartXfer>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 0207 	and.w	r2, r3, #7
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d901      	bls.n	80022da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e04c      	b.n	8002374 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da0e      	bge.n	8002300 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	705a      	strb	r2, [r3, #1]
 80022fe:	e00c      	b.n	800231a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_PCD_EP_SetStall+0x7e>
 8002336:	2302      	movs	r3, #2
 8002338:	e01c      	b.n	8002374 <HAL_PCD_EP_SetStall+0xb8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	4618      	mov	r0, r3
 800234a:	f005 f8f5 	bl	8007538 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	2b00      	cmp	r3, #0
 8002356:	d108      	bne.n	800236a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f005 fa21 	bl	80077ac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	f003 020f 	and.w	r2, r3, #15
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	d901      	bls.n	800239a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e040      	b.n	800241c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800239a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	da0e      	bge.n	80023c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	705a      	strb	r2, [r3, #1]
 80023be:	e00e      	b.n	80023de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_PCD_EP_ClrStall+0x82>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e00e      	b.n	800241c <HAL_PCD_EP_ClrStall+0xa0>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	4618      	mov	r0, r3
 800240e:	f005 f8e4 	bl	80075da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08e      	sub	sp, #56	; 0x38
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800242c:	e2d1      	b.n	80029d2 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002436:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002444:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 8152 	bne.w	80026f2 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800244e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d150      	bne.n	80024fa <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002468:	81fb      	strh	r3, [r7, #14]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	89fb      	ldrh	r3, [r7, #14]
 8002470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002478:	b29b      	uxth	r3, r3
 800247a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3328      	adds	r3, #40	; 0x28
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4413      	add	r3, r2
 800249c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	441a      	add	r2, r3
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024b8:	2100      	movs	r1, #0
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f007 f863 	bl	8009586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8282 	beq.w	80029d2 <PCD_EP_ISR_Handler+0x5ae>
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 827d 	bne.w	80029d2 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	b292      	uxth	r2, r2
 80024ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024f8:	e26b      	b.n	80029d2 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800250a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800250c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002510:	2b00      	cmp	r3, #0
 8002512:	d032      	beq.n	800257a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4413      	add	r3, r2
 800252e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800254e:	b29b      	uxth	r3, r3
 8002550:	f005 f979 	bl	8007846 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29a      	uxth	r2, r3
 800255c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002560:	4013      	ands	r3, r2
 8002562:	823b      	strh	r3, [r7, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	8a3a      	ldrh	r2, [r7, #16]
 800256a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800256e:	b292      	uxth	r2, r2
 8002570:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f006 ffda 	bl	800952c <HAL_PCD_SetupStageCallback>
 8002578:	e22b      	b.n	80029d2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800257a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800257e:	2b00      	cmp	r3, #0
 8002580:	f280 8227 	bge.w	80029d2 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29a      	uxth	r2, r3
 800258c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002590:	4013      	ands	r3, r2
 8002592:	83bb      	strh	r3, [r7, #28]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	8bba      	ldrh	r2, [r7, #28]
 800259a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800259e:	b292      	uxth	r2, r2
 80025a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d019      	beq.n	8002606 <PCD_EP_ISR_Handler+0x1e2>
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d015      	beq.n	8002606 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	6959      	ldr	r1, [r3, #20]
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f005 f92b 	bl	8007846 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	441a      	add	r2, r3
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025fe:	2100      	movs	r1, #0
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f006 ffa5 	bl	8009550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002614:	b29b      	uxth	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d112      	bne.n	8002654 <PCD_EP_ISR_Handler+0x230>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002638:	b29a      	uxth	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264c:	b29a      	uxth	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	801a      	strh	r2, [r3, #0]
 8002652:	e02f      	b.n	80026b4 <PCD_EP_ISR_Handler+0x290>
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b3e      	cmp	r3, #62	; 0x3e
 800265a:	d813      	bhi.n	8002684 <PCD_EP_ISR_Handler+0x260>
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <PCD_EP_ISR_Handler+0x252>
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	3301      	adds	r3, #1
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	b29b      	uxth	r3, r3
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	b29a      	uxth	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e017      	b.n	80026b4 <PCD_EP_ISR_Handler+0x290>
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <PCD_EP_ISR_Handler+0x27a>
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	3b01      	subs	r3, #1
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	029b      	lsls	r3, r3, #10
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c4:	827b      	strh	r3, [r7, #18]
 80026c6:	8a7b      	ldrh	r3, [r7, #18]
 80026c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026cc:	827b      	strh	r3, [r7, #18]
 80026ce:	8a7b      	ldrh	r3, [r7, #18]
 80026d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026d4:	827b      	strh	r3, [r7, #18]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	8a7b      	ldrh	r3, [r7, #18]
 80026dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8013      	strh	r3, [r2, #0]
 80026f0:	e16f      	b.n	80029d2 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002704:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002708:	2b00      	cmp	r3, #0
 800270a:	f280 80e4 	bge.w	80028d6 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29a      	uxth	r2, r3
 8002720:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002724:	4013      	ands	r3, r2
 8002726:	853b      	strh	r3, [r7, #40]	; 0x28
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800273c:	b292      	uxth	r2, r2
 800273e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002740:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	7b1b      	ldrb	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d120      	bne.n	80027a0 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	4413      	add	r3, r2
 8002778:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002782:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8083 	beq.w	8002892 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	6959      	ldr	r1, [r3, #20]
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	88da      	ldrh	r2, [r3, #6]
 8002798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279a:	f005 f854 	bl	8007846 <USB_ReadPMA>
 800279e:	e078      	b.n	8002892 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	78db      	ldrb	r3, [r3, #3]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d108      	bne.n	80027ba <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027aa:	461a      	mov	r2, r3
 80027ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f91d 	bl	80029ee <HAL_PCD_EP_DB_Receive>
 80027b4:	4603      	mov	r3, r0
 80027b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027b8:	e06b      	b.n	8002892 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	441a      	add	r2, r3
 80027e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01f      	beq.n	8002854 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	4413      	add	r3, r2
 800282e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002838:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800283a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800283c:	2b00      	cmp	r3, #0
 800283e:	d028      	beq.n	8002892 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	891a      	ldrh	r2, [r3, #8]
 800284c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284e:	f004 fffa 	bl	8007846 <USB_ReadPMA>
 8002852:	e01e      	b.n	8002892 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	4413      	add	r3, r2
 800286e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002878:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800287a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	6959      	ldr	r1, [r3, #20]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	895a      	ldrh	r2, [r3, #10]
 800288c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800288e:	f004 ffda 	bl	8007846 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002898:	441a      	add	r2, r3
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a4:	441a      	add	r2, r3
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <PCD_EP_ISR_Handler+0x498>
 80028b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d206      	bcs.n	80028ca <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f006 fe44 	bl	8009550 <HAL_PCD_DataOutStageCallback>
 80028c8:	e005      	b.n	80028d6 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fd02 	bl	80062da <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d078      	beq.n	80029d2 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80028e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	843b      	strh	r3, [r7, #32]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	8c3b      	ldrh	r3, [r7, #32]
 8002920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002928:	b29b      	uxth	r3, r3
 800292a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	78db      	ldrb	r3, [r3, #3]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d108      	bne.n	8002946 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002938:	2b02      	cmp	r3, #2
 800293a:	d144      	bne.n	80029c6 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800293c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d13f      	bne.n	80029c6 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	4413      	add	r3, r2
 8002960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	8bfb      	ldrh	r3, [r7, #30]
 8002972:	429a      	cmp	r2, r3
 8002974:	d906      	bls.n	8002984 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	8bfb      	ldrh	r3, [r7, #30]
 800297c:	1ad2      	subs	r2, r2, r3
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	619a      	str	r2, [r3, #24]
 8002982:	e002      	b.n	800298a <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f006 fdf4 	bl	8009586 <HAL_PCD_DataInStageCallback>
 800299e:	e018      	b.n	80029d2 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	8bfb      	ldrh	r3, [r7, #30]
 80029a6:	441a      	add	r2, r3
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	8bfb      	ldrh	r3, [r7, #30]
 80029b2:	441a      	add	r2, r3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fc8b 	bl	80062da <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029c4:	e005      	b.n	80029d2 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029c8:	461a      	mov	r2, r3
 80029ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f917 	bl	8002c00 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029da:	b29b      	uxth	r3, r3
 80029dc:	b21b      	sxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f6ff ad25 	blt.w	800242e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3738      	adds	r7, #56	; 0x38
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b088      	sub	sp, #32
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d07c      	beq.n	8002b00 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	8b7b      	ldrh	r3, [r7, #26]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d306      	bcc.n	8002a44 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	8b7b      	ldrh	r3, [r7, #26]
 8002a3c:	1ad2      	subs	r2, r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	619a      	str	r2, [r3, #24]
 8002a42:	e002      	b.n	8002a4a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d123      	bne.n	8002a9a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6c:	833b      	strh	r3, [r7, #24]
 8002a6e:	8b3b      	ldrh	r3, [r7, #24]
 8002a70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a74:	833b      	strh	r3, [r7, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	441a      	add	r2, r3
 8002a84:	8b3b      	ldrh	r3, [r7, #24]
 8002a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01f      	beq.n	8002ae4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	82fb      	strh	r3, [r7, #22]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	441a      	add	r2, r3
 8002ace:	8afb      	ldrh	r3, [r7, #22]
 8002ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002adc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ae4:	8b7b      	ldrh	r3, [r7, #26]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8085 	beq.w	8002bf6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6959      	ldr	r1, [r3, #20]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	891a      	ldrh	r2, [r3, #8]
 8002af8:	8b7b      	ldrh	r3, [r7, #26]
 8002afa:	f004 fea4 	bl	8007846 <USB_ReadPMA>
 8002afe:	e07a      	b.n	8002bf6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	8b7b      	ldrh	r3, [r7, #26]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d306      	bcc.n	8002b3e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	8b7b      	ldrh	r3, [r7, #26]
 8002b36:	1ad2      	subs	r2, r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	619a      	str	r2, [r3, #24]
 8002b3c:	e002      	b.n	8002b44 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d123      	bne.n	8002b94 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	83fb      	strh	r3, [r7, #30]
 8002b68:	8bfb      	ldrh	r3, [r7, #30]
 8002b6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b6e:	83fb      	strh	r3, [r7, #30]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	8bfb      	ldrh	r3, [r7, #30]
 8002b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11f      	bne.n	8002bde <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb8:	83bb      	strh	r3, [r7, #28]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	441a      	add	r2, r3
 8002bc8:	8bbb      	ldrh	r3, [r7, #28]
 8002bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bde:	8b7b      	ldrh	r3, [r7, #26]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6959      	ldr	r1, [r3, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	895a      	ldrh	r2, [r3, #10]
 8002bf0:	8b7b      	ldrh	r3, [r7, #26]
 8002bf2:	f004 fe28 	bl	8007846 <USB_ReadPMA>
    }
  }

  return count;
 8002bf6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b092      	sub	sp, #72	; 0x48
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8130 	beq.w	8002e7a <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d906      	bls.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c50:	1ad2      	subs	r2, r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	619a      	str	r2, [r3, #24]
 8002c56:	e002      	b.n	8002c5e <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d12c      	bne.n	8002cc0 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f006 fc8a 	bl	8009586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 822d 	beq.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	827b      	strh	r3, [r7, #18]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	441a      	add	r2, r3
 8002ca8:	8a7b      	ldrh	r3, [r7, #18]
 8002caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	8013      	strh	r3, [r2, #0]
 8002cbe:	e20b      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01f      	beq.n	8002d0a <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	441a      	add	r2, r3
 8002cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 81e1 	bne.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d1c:	441a      	add	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d28:	441a      	add	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d309      	bcc.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	621a      	str	r2, [r3, #32]
 8002d4c:	e014      	b.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d58:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d62:	e009      	b.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d155      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x22c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	00da      	lsls	r2, r3, #3
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d112      	bne.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	e047      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x264>
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8002dd8:	d811      	bhi.n	8002dfe <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	3301      	adds	r3, #1
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	e032      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x264>
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x214>
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	e01b      	b.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d117      	bne.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	623b      	str	r3, [r7, #32]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4413      	add	r3, r2
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	00da      	lsls	r2, r3, #3
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	4413      	add	r3, r2
 8002e56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6959      	ldr	r1, [r3, #20]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	891a      	ldrh	r2, [r3, #8]
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f004 fca6 	bl	80077c4 <USB_WritePMA>
 8002e78:	e12e      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d306      	bcc.n	8002eb8 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eb0:	1ad2      	subs	r2, r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	619a      	str	r2, [r3, #24]
 8002eb6:	e002      	b.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d12c      	bne.n	8002f20 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f006 fb5a 	bl	8009586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 80fd 	bne.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	441a      	add	r2, r3
 8002f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]
 8002f1e:	e0db      	b.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11f      	bne.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f44:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	441a      	add	r2, r3
 8002f54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 80b1 	bne.w	80030d8 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f88:	441a      	add	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d309      	bcc.n	8002fae <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	1ad2      	subs	r2, r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	621a      	str	r2, [r3, #32]
 8002fac:	e014      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002fb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fc2:	e009      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d155      	bne.n	8003092 <HAL_PCD_EP_DB_Transmit+0x492>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	647b      	str	r3, [r7, #68]	; 0x44
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffa:	4413      	add	r3, r2
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	00da      	lsls	r2, r3, #3
 8003004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003006:	4413      	add	r3, r2
 8003008:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800300c:	643b      	str	r3, [r7, #64]	; 0x40
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	2b00      	cmp	r3, #0
 8003012:	d112      	bne.n	800303a <HAL_PCD_EP_DB_Transmit+0x43a>
 8003014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800301e:	b29a      	uxth	r2, r3
 8003020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003032:	b29a      	uxth	r2, r3
 8003034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	e044      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b3e      	cmp	r3, #62	; 0x3e
 800303e:	d811      	bhi.n	8003064 <HAL_PCD_EP_DB_Transmit+0x464>
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_PCD_EP_DB_Transmit+0x456>
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	3301      	adds	r3, #1
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003058:	b29b      	uxth	r3, r3
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	b29a      	uxth	r2, r3
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	801a      	strh	r2, [r3, #0]
 8003062:	e02f      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <HAL_PCD_EP_DB_Transmit+0x47a>
 8003074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003076:	3b01      	subs	r3, #1
 8003078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307c:	b29b      	uxth	r3, r3
 800307e:	029b      	lsls	r3, r3, #10
 8003080:	b29b      	uxth	r3, r3
 8003082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308a:	b29a      	uxth	r2, r3
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	e018      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	785b      	ldrb	r3, [r3, #1]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d114      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	4413      	add	r3, r2
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	00da      	lsls	r2, r3, #3
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	4413      	add	r3, r2
 80030b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	b29a      	uxth	r2, r3
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6959      	ldr	r1, [r3, #20]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	895a      	ldrh	r2, [r3, #10]
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f004 fb76 	bl	80077c4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f2:	823b      	strh	r3, [r7, #16]
 80030f4:	8a3b      	ldrh	r3, [r7, #16]
 80030f6:	f083 0310 	eor.w	r3, r3, #16
 80030fa:	823b      	strh	r3, [r7, #16]
 80030fc:	8a3b      	ldrh	r3, [r7, #16]
 80030fe:	f083 0320 	eor.w	r3, r3, #32
 8003102:	823b      	strh	r3, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	8a3b      	ldrh	r3, [r7, #16]
 8003114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800311c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	b29b      	uxth	r3, r3
 8003126:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3748      	adds	r7, #72	; 0x48
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	817b      	strh	r3, [r7, #10]
 8003140:	4613      	mov	r3, r2
 8003142:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003150:	897b      	ldrh	r3, [r7, #10]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e009      	b.n	800317c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003168:	897a      	ldrh	r2, [r7, #10]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	b29a      	uxth	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	80da      	strh	r2, [r3, #6]
 8003190:	e00b      	b.n	80031aa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2201      	movs	r2, #1
 8003196:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	b29a      	uxth	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d141      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800321a:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d131      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003228:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322e:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003238:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003240:	4a41      	ldr	r2, [pc, #260]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003246:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003248:	4b40      	ldr	r3, [pc, #256]	; (800334c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2232      	movs	r2, #50	; 0x32
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	0c9b      	lsrs	r3, r3, #18
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800325e:	e002      	b.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3b01      	subs	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003266:	4b38      	ldr	r3, [pc, #224]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003272:	d102      	bne.n	800327a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f2      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	d158      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e057      	b.n	800333c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800328c:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003292:	4a2d      	ldr	r2, [pc, #180]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800329c:	e04d      	b.n	800333a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a4:	d141      	bne.n	800332a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d131      	bne.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ba:	4a23      	ldr	r2, [pc, #140]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2232      	movs	r2, #50	; 0x32
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	0c9b      	lsrs	r3, r3, #18
 80032e6:	3301      	adds	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ea:	e002      	b.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d102      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f2      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d112      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e011      	b.n	800333c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003324:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003328:	e007      	b.n	800333a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003338:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40007000 	.word	0x40007000
 800334c:	2000000c 	.word	0x2000000c
 8003350:	431bde83 	.word	0x431bde83

08003354 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800335e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003362:	6093      	str	r3, [r2, #8]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40007000 	.word	0x40007000

08003374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e308      	b.n	8003998 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003392:	4ba3      	ldr	r3, [pc, #652]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339c:	4ba0      	ldr	r3, [pc, #640]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3e>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b99      	ldr	r3, [pc, #612]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e2e3      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b91      	ldr	r3, [pc, #580]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a90      	ldr	r2, [pc, #576]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b8b      	ldr	r3, [pc, #556]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a8a      	ldr	r2, [pc, #552]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a87      	ldr	r2, [pc, #540]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b84      	ldr	r3, [pc, #528]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a83      	ldr	r2, [pc, #524]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b81      	ldr	r3, [pc, #516]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a80      	ldr	r2, [pc, #512]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe f8b6 	bl	800159c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe f8b2 	bl	800159c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e2a8      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003446:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe f8a2 	bl	800159c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe f89e 	bl	800159c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e294      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d075      	beq.n	8003576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348a:	4b65      	ldr	r3, [pc, #404]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003494:	4b62      	ldr	r3, [pc, #392]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d102      	bne.n	80034aa <HAL_RCC_OscConfig+0x136>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_OscConfig+0x13c>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11f      	bne.n	80034f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_OscConfig+0x154>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e267      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b55      	ldr	r3, [pc, #340]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	4952      	ldr	r1, [pc, #328]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034dc:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x2b0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe f80f 	bl	8001504 <HAL_InitTick>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d043      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e253      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d023      	beq.n	8003540 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b49      	ldr	r3, [pc, #292]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a48      	ldr	r2, [pc, #288]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe f84a 	bl	800159c <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350c:	f7fe f846 	bl	800159c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e23c      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351e:	4b40      	ldr	r3, [pc, #256]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	4939      	ldr	r1, [pc, #228]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
 800353e:	e01a      	b.n	8003576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003540:	4b37      	ldr	r3, [pc, #220]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a36      	ldr	r2, [pc, #216]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe f826 	bl	800159c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe f822 	bl	800159c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e218      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003566:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1e0>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d03c      	beq.n	80035fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b25      	ldr	r3, [pc, #148]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd ffff 	bl	800159c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fd fffb 	bl	800159c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1f1      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ef      	beq.n	80035a2 <HAL_RCC_OscConfig+0x22e>
 80035c2:	e01b      	b.n	80035fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fd ffe2 	bl	800159c <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fd ffde 	bl	800159c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1d4      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ef      	bne.n	80035dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80ab 	beq.w	8003760 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x2b4>
 800361a:	2301      	movs	r3, #1
 800361c:	e005      	b.n	800362a <HAL_RCC_OscConfig+0x2b6>
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	20000010 	.word	0x20000010
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	4baf      	ldr	r3, [pc, #700]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	4aae      	ldr	r2, [pc, #696]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
 800363a:	4bac      	ldr	r3, [pc, #688]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364a:	4ba9      	ldr	r3, [pc, #676]	; (80038f0 <HAL_RCC_OscConfig+0x57c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003656:	4ba6      	ldr	r3, [pc, #664]	; (80038f0 <HAL_RCC_OscConfig+0x57c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4aa5      	ldr	r2, [pc, #660]	; (80038f0 <HAL_RCC_OscConfig+0x57c>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fd ff9b 	bl	800159c <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fd ff97 	bl	800159c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e18d      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4b9c      	ldr	r3, [pc, #624]	; (80038f0 <HAL_RCC_OscConfig+0x57c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d108      	bne.n	80036a2 <HAL_RCC_OscConfig+0x32e>
 8003690:	4b96      	ldr	r3, [pc, #600]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	4a95      	ldr	r2, [pc, #596]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a0:	e024      	b.n	80036ec <HAL_RCC_OscConfig+0x378>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d110      	bne.n	80036cc <HAL_RCC_OscConfig+0x358>
 80036aa:	4b90      	ldr	r3, [pc, #576]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	4a8e      	ldr	r2, [pc, #568]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ba:	4b8c      	ldr	r3, [pc, #560]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	4a8a      	ldr	r2, [pc, #552]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ca:	e00f      	b.n	80036ec <HAL_RCC_OscConfig+0x378>
 80036cc:	4b87      	ldr	r3, [pc, #540]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	4a86      	ldr	r2, [pc, #536]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036dc:	4b83      	ldr	r3, [pc, #524]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a82      	ldr	r2, [pc, #520]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d016      	beq.n	8003722 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fd ff52 	bl	800159c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fc:	f7fd ff4e 	bl	800159c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e142      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b76      	ldr	r3, [pc, #472]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ed      	beq.n	80036fc <HAL_RCC_OscConfig+0x388>
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fd ff3b 	bl	800159c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd ff37 	bl	800159c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e12b      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003740:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ed      	bne.n	800372a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b65      	ldr	r3, [pc, #404]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4a64      	ldr	r2, [pc, #400]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003774:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377a:	4a5c      	ldr	r2, [pc, #368]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd ff0a 	bl	800159c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378c:	f7fd ff06 	bl	800159c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0fc      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379e:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80037a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x418>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ae:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80037b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b4:	4a4d      	ldr	r2, [pc, #308]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd feed 	bl	800159c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c6:	f7fd fee9 	bl	800159c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0df      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	4b44      	ldr	r3, [pc, #272]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80d3 	beq.w	8003996 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f0:	4b3e      	ldr	r3, [pc, #248]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	f000 808d 	beq.w	8003918 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d15a      	bne.n	80038bc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a38      	ldr	r2, [pc, #224]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800380c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd fec3 	bl	800159c <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd febf 	bl	800159c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0b5      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003838:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_RCC_OscConfig+0x580>)
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6a11      	ldr	r1, [r2, #32]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003848:	3a01      	subs	r2, #1
 800384a:	0112      	lsls	r2, r2, #4
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003852:	0212      	lsls	r2, r2, #8
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0552      	lsls	r2, r2, #21
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0652      	lsls	r2, r2, #25
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003872:	06d2      	lsls	r2, r2, #27
 8003874:	430a      	orrs	r2, r1
 8003876:	491d      	ldr	r1, [pc, #116]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003878:	4313      	orrs	r3, r2
 800387a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd fe82 	bl	800159c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd fe7e 	bl	800159c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e074      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x528>
 80038ba:	e06c      	b.n	8003996 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a04      	ldr	r2, [pc, #16]	; (80038ec <HAL_RCC_OscConfig+0x578>)
 80038da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fe5a 	bl	800159c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ea:	e00e      	b.n	800390a <HAL_RCC_OscConfig+0x596>
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40007000 	.word	0x40007000
 80038f4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fd fe50 	bl	800159c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e046      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390a:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <HAL_RCC_OscConfig+0x62c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x584>
 8003916:	e03e      	b.n	8003996 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e039      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_RCC_OscConfig+0x62c>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0203 	and.w	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	429a      	cmp	r2, r3
 8003936:	d12c      	bne.n	8003992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	3b01      	subs	r3, #1
 8003944:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d123      	bne.n	8003992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d11b      	bne.n	8003992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d113      	bne.n	8003992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d109      	bne.n	8003992 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	3b01      	subs	r3, #1
 800398c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e11e      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d910      	bls.n	80039ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b8e      	ldr	r3, [pc, #568]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 020f 	bic.w	r2, r3, #15
 80039d2:	498c      	ldr	r1, [pc, #560]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b8a      	ldr	r3, [pc, #552]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e106      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d073      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d129      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a00:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0f4      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a10:	f000 f966 	bl	8003ce0 <RCC_GetSysClockFreqFromPLLSource>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4a7c      	ldr	r2, [pc, #496]	; (8003c0c <HAL_RCC_ClockConfig+0x268>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d93f      	bls.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a1e:	4b7a      	ldr	r3, [pc, #488]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d033      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12f      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a46:	4a70      	ldr	r2, [pc, #448]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e024      	b.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0c6      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	4b66      	ldr	r3, [pc, #408]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0be      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a7c:	f000 f8ce 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4a61      	ldr	r2, [pc, #388]	; (8003c0c <HAL_RCC_ClockConfig+0x268>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d909      	bls.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a92:	4a5d      	ldr	r2, [pc, #372]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4957      	ldr	r1, [pc, #348]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fd74 	bl	800159c <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd fd70 	bl	800159c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e095      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d023      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b10:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b18:	4a3b      	ldr	r2, [pc, #236]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4936      	ldr	r1, [pc, #216]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b3a:	4b33      	ldr	r3, [pc, #204]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4a32      	ldr	r2, [pc, #200]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d21d      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 020f 	bic.w	r2, r3, #15
 8003b5c:	4929      	ldr	r1, [pc, #164]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b64:	f7fd fd1a 	bl	800159c <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fd fd16 	bl	800159c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e03b      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1ed      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4917      	ldr	r1, [pc, #92]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	490f      	ldr	r1, [pc, #60]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bce:	f000 f825 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <HAL_RCC_ClockConfig+0x26c>)
 8003be0:	5cd3      	ldrb	r3, [r2, r3]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bea:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x270>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x274>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd fc86 	bl	8001504 <HAL_InitTick>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	04c4b400 	.word	0x04c4b400
 8003c10:	08009b90 	.word	0x08009b90
 8003c14:	2000000c 	.word	0x2000000c
 8003c18:	20000010 	.word	0x20000010

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e047      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e03e      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c46:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d136      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3301      	adds	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c70:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	4a16      	ldr	r2, [pc, #88]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7a:	68d2      	ldr	r2, [r2, #12]
 8003c7c:	0a12      	lsrs	r2, r2, #8
 8003c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
      break;
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	0a12      	lsrs	r2, r2, #8
 8003c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
      break;
 8003ca2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e001      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cc4:	693b      	ldr	r3, [r7, #16]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	007a1200 	.word	0x007a1200

08003ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d10c      	bne.n	8003d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d0e:	68d2      	ldr	r2, [r2, #12]
 8003d10:	0a12      	lsrs	r2, r2, #8
 8003d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
    break;
 8003d1c:	e00c      	b.n	8003d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	0a12      	lsrs	r2, r2, #8
 8003d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    break;
 8003d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	0e5b      	lsrs	r3, r3, #25
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d52:	687b      	ldr	r3, [r7, #4]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40021000 	.word	0x40021000
 8003d64:	007a1200 	.word	0x007a1200
 8003d68:	00f42400 	.word	0x00f42400

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d74:	2300      	movs	r3, #0
 8003d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8098 	beq.w	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a3f      	ldr	r2, [pc, #252]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a39      	ldr	r2, [pc, #228]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fd fbeb 	bl	800159c <HAL_GetTick>
 8003dc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc8:	e009      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd fbe7 	bl	800159c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	74fb      	strb	r3, [r7, #19]
        break;
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ef      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d159      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d019      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e18:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e38:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd fba7 	bl	800159c <HAL_GetTick>
 8003e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e50:	e00b      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd fba3 	bl	800159c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d902      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	74fb      	strb	r3, [r7, #19]
            break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ec      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	74bb      	strb	r3, [r7, #18]
 8003e9a:	e005      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea8:	7c7b      	ldrb	r3, [r7, #17]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	4ba6      	ldr	r3, [pc, #664]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4aa5      	ldr	r2, [pc, #660]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec6:	4ba0      	ldr	r3, [pc, #640]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 0203 	bic.w	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	499c      	ldr	r1, [pc, #624]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee8:	4b97      	ldr	r3, [pc, #604]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 020c 	bic.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4994      	ldr	r1, [pc, #592]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0a:	4b8f      	ldr	r3, [pc, #572]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	498b      	ldr	r1, [pc, #556]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2c:	4b86      	ldr	r3, [pc, #536]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	4983      	ldr	r1, [pc, #524]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f4e:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	497a      	ldr	r1, [pc, #488]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f70:	4b75      	ldr	r3, [pc, #468]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	4972      	ldr	r1, [pc, #456]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4969      	ldr	r1, [pc, #420]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fb4:	4b64      	ldr	r3, [pc, #400]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4961      	ldr	r1, [pc, #388]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd6:	4b5c      	ldr	r3, [pc, #368]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	4958      	ldr	r1, [pc, #352]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	4950      	ldr	r1, [pc, #320]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b4b      	ldr	r3, [pc, #300]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a4a      	ldr	r2, [pc, #296]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004030:	4b45      	ldr	r3, [pc, #276]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	4942      	ldr	r1, [pc, #264]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4934      	ldr	r1, [pc, #208]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a2e      	ldr	r2, [pc, #184]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a0:	4b29      	ldr	r3, [pc, #164]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	4926      	ldr	r1, [pc, #152]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4918      	ldr	r1, [pc, #96]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d105      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a12      	ldr	r2, [pc, #72]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800412e:	d105      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800413c:	7cbb      	ldrb	r3, [r7, #18]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e049      	b.n	80041f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fff6 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f000 fde2 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e04a      	b.n	80042aa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d013      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <HAL_TIM_Base_Start_IT+0xc0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d115      	bne.n	8004294 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d015      	beq.n	80042a6 <HAL_TIM_Base_Start_IT+0xaa>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d011      	beq.n	80042a6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	e008      	b.n	80042a6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e000      	b.n	80042a8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	00010007 	.word	0x00010007

080042d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e049      	b.n	8004376 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fe2a 	bl	8000f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 fd20 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_TIM_PWM_Start+0x24>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e03c      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d109      	bne.n	80043be <HAL_TIM_PWM_Start+0x3e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e02f      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d109      	bne.n	80043d8 <HAL_TIM_PWM_Start+0x58>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e022      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d109      	bne.n	80043f2 <HAL_TIM_PWM_Start+0x72>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	bf14      	ite	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	2300      	moveq	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e015      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d109      	bne.n	800440c <HAL_TIM_PWM_Start+0x8c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e008      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e097      	b.n	8004556 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0xb6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	e023      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xc6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004444:	e01b      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d104      	bne.n	8004456 <HAL_TIM_PWM_Start+0xd6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004454:	e013      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b0c      	cmp	r3, #12
 800445a:	d104      	bne.n	8004466 <HAL_TIM_PWM_Start+0xe6>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004464:	e00b      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b10      	cmp	r3, #16
 800446a:	d104      	bne.n	8004476 <HAL_TIM_PWM_Start+0xf6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004474:	e003      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2201      	movs	r2, #1
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 ffea 	bl	8005460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a33      	ldr	r2, [pc, #204]	; (8004560 <HAL_TIM_PWM_Start+0x1e0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a32      	ldr	r2, [pc, #200]	; (8004564 <HAL_TIM_PWM_Start+0x1e4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a30      	ldr	r2, [pc, #192]	; (8004568 <HAL_TIM_PWM_Start+0x1e8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2f      	ldr	r2, [pc, #188]	; (800456c <HAL_TIM_PWM_Start+0x1ec>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <HAL_TIM_PWM_Start+0x1f0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x142>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_TIM_PWM_Start+0x144>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <HAL_TIM_PWM_Start+0x1e0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d013      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <HAL_TIM_PWM_Start+0x1f4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1f      	ldr	r2, [pc, #124]	; (8004578 <HAL_TIM_PWM_Start+0x1f8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_TIM_PWM_Start+0x1e4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a16      	ldr	r2, [pc, #88]	; (8004568 <HAL_TIM_PWM_Start+0x1e8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d115      	bne.n	8004540 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_TIM_PWM_Start+0x1fc>)
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d015      	beq.n	8004552 <HAL_TIM_PWM_Start+0x1d2>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452c:	d011      	beq.n	8004552 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453e:	e008      	b.n	8004552 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e000      	b.n	8004554 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40013400 	.word	0x40013400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	00010007 	.word	0x00010007

08004580 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e097      	b.n	80046c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fd19 	bl	8000fe0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80045c4:	f023 0307 	bic.w	r3, r3, #7
 80045c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 fbbd 	bl	8004d54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	4313      	orrs	r3, r2
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004620:	f023 030c 	bic.w	r3, r3, #12
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800462c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	4313      	orrs	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	011a      	lsls	r2, r3, #4
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	031b      	lsls	r3, r3, #12
 8004650:	4313      	orrs	r3, r2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	4313      	orrs	r3, r2
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d110      	bne.n	800471e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004702:	7b7b      	ldrb	r3, [r7, #13]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e068      	b.n	80047de <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	e031      	b.n	8004782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d110      	bne.n	8004746 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d102      	bne.n	8004730 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800472a:	7b3b      	ldrb	r3, [r7, #12]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e054      	b.n	80047de <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004744:	e01d      	b.n	8004782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d108      	bne.n	800475e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004752:	7b7b      	ldrb	r3, [r7, #13]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d102      	bne.n	800475e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004758:	7b3b      	ldrb	r3, [r7, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e03d      	b.n	80047de <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_TIM_Encoder_Start+0xc2>
 8004788:	2b04      	cmp	r3, #4
 800478a:	d008      	beq.n	800479e <HAL_TIM_Encoder_Start+0xd2>
 800478c:	e00f      	b.n	80047ae <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2201      	movs	r2, #1
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fe62 	bl	8005460 <TIM_CCxChannelCmd>
      break;
 800479c:	e016      	b.n	80047cc <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	2104      	movs	r1, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fe5a 	bl	8005460 <TIM_CCxChannelCmd>
      break;
 80047ac:	e00e      	b.n	80047cc <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fe52 	bl	8005460 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	2104      	movs	r1, #4
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fe4b 	bl	8005460 <TIM_CCxChannelCmd>
      break;
 80047ca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d122      	bne.n	8004842 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b02      	cmp	r3, #2
 8004808:	d11b      	bne.n	8004842 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f06f 0202 	mvn.w	r2, #2
 8004812:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fa75 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 800482e:	e005      	b.n	800483c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa67 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa78 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b04      	cmp	r3, #4
 800484e:	d122      	bne.n	8004896 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b04      	cmp	r3, #4
 800485c:	d11b      	bne.n	8004896 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f06f 0204 	mvn.w	r2, #4
 8004866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fa4b 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004882:	e005      	b.n	8004890 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fa3d 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa4e 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d122      	bne.n	80048ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d11b      	bne.n	80048ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f06f 0208 	mvn.w	r2, #8
 80048ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2204      	movs	r2, #4
 80048c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fa21 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 80048d6:	e005      	b.n	80048e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fa13 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa24 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d122      	bne.n	800493e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b10      	cmp	r3, #16
 8004904:	d11b      	bne.n	800493e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0210 	mvn.w	r2, #16
 800490e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2208      	movs	r2, #8
 8004914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f9f7 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 800492a:	e005      	b.n	8004938 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9e9 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9fa 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d10e      	bne.n	800496a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f06f 0201 	mvn.w	r2, #1
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc fa39 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d10e      	bne.n	8004996 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d107      	bne.n	8004996 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800498e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 feb7 	bl	8005704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 feaa 	bl	8005718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9a8 	bl	8004d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d10e      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0220 	mvn.w	r2, #32
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fe6a 	bl	80056f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2a:	d10f      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3a:	d107      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fe70 	bl	800572c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a5a:	d10f      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fe62 	bl	8005740 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8a:	d10f      	bne.n	8004aac <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fe54 	bl	8005754 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aba:	d10f      	bne.n	8004adc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aca:	d107      	bne.n	8004adc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fe46 	bl	8005768 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e0fd      	b.n	8004cfa <HAL_TIM_PWM_ConfigChannel+0x216>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b14      	cmp	r3, #20
 8004b0a:	f200 80f0 	bhi.w	8004cee <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004cef 	.word	0x08004cef
 8004b1c:	08004cef 	.word	0x08004cef
 8004b20:	08004cef 	.word	0x08004cef
 8004b24:	08004ba9 	.word	0x08004ba9
 8004b28:	08004cef 	.word	0x08004cef
 8004b2c:	08004cef 	.word	0x08004cef
 8004b30:	08004cef 	.word	0x08004cef
 8004b34:	08004beb 	.word	0x08004beb
 8004b38:	08004cef 	.word	0x08004cef
 8004b3c:	08004cef 	.word	0x08004cef
 8004b40:	08004cef 	.word	0x08004cef
 8004b44:	08004c2b 	.word	0x08004c2b
 8004b48:	08004cef 	.word	0x08004cef
 8004b4c:	08004cef 	.word	0x08004cef
 8004b50:	08004cef 	.word	0x08004cef
 8004b54:	08004c6d 	.word	0x08004c6d
 8004b58:	08004cef 	.word	0x08004cef
 8004b5c:	08004cef 	.word	0x08004cef
 8004b60:	08004cef 	.word	0x08004cef
 8004b64:	08004cad 	.word	0x08004cad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f980 	bl	8004e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0208 	orr.w	r2, r2, #8
 8004b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0204 	bic.w	r2, r2, #4
 8004b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6999      	ldr	r1, [r3, #24]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	619a      	str	r2, [r3, #24]
      break;
 8004ba6:	e0a3      	b.n	8004cf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f9f0 	bl	8004f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	619a      	str	r2, [r3, #24]
      break;
 8004be8:	e082      	b.n	8004cf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fa59 	bl	80050a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0208 	orr.w	r2, r2, #8
 8004c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0204 	bic.w	r2, r2, #4
 8004c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69d9      	ldr	r1, [r3, #28]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	61da      	str	r2, [r3, #28]
      break;
 8004c28:	e062      	b.n	8004cf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fac1 	bl	80051b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	021a      	lsls	r2, r3, #8
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	61da      	str	r2, [r3, #28]
      break;
 8004c6a:	e041      	b.n	8004cf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68b9      	ldr	r1, [r7, #8]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fb2a 	bl	80052cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0204 	bic.w	r2, r2, #4
 8004c96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004caa:	e021      	b.n	8004cf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fb6e 	bl	8005394 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cec:	e000      	b.n	8004cf0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004cee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop

08004d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a3c      	ldr	r2, [pc, #240]	; (8004e58 <TIM_Base_SetConfig+0x104>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d72:	d00b      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a39      	ldr	r2, [pc, #228]	; (8004e5c <TIM_Base_SetConfig+0x108>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a38      	ldr	r2, [pc, #224]	; (8004e60 <TIM_Base_SetConfig+0x10c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a37      	ldr	r2, [pc, #220]	; (8004e64 <TIM_Base_SetConfig+0x110>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2d      	ldr	r2, [pc, #180]	; (8004e58 <TIM_Base_SetConfig+0x104>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	; (8004e5c <TIM_Base_SetConfig+0x108>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <TIM_Base_SetConfig+0x10c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a28      	ldr	r2, [pc, #160]	; (8004e64 <TIM_Base_SetConfig+0x110>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <TIM_Base_SetConfig+0x114>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <TIM_Base_SetConfig+0x118>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <TIM_Base_SetConfig+0x11c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <TIM_Base_SetConfig+0x104>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00f      	beq.n	8004e3c <TIM_Base_SetConfig+0xe8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <TIM_Base_SetConfig+0x110>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_Base_SetConfig+0xe8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <TIM_Base_SetConfig+0x114>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_Base_SetConfig+0xe8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <TIM_Base_SetConfig+0x118>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_Base_SetConfig+0xe8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <TIM_Base_SetConfig+0x11c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d103      	bne.n	8004e44 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	615a      	str	r2, [r3, #20]
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800

08004e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a2c      	ldr	r2, [pc, #176]	; (8004f80 <TIM_OC1_SetConfig+0x10c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_OC1_SetConfig+0x80>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2b      	ldr	r2, [pc, #172]	; (8004f84 <TIM_OC1_SetConfig+0x110>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_OC1_SetConfig+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <TIM_OC1_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_OC1_SetConfig+0x80>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <TIM_OC1_SetConfig+0x118>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC1_SetConfig+0x80>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <TIM_OC1_SetConfig+0x11c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d10c      	bne.n	8004f0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0308 	bic.w	r3, r3, #8
 8004efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <TIM_OC1_SetConfig+0x10c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00f      	beq.n	8004f36 <TIM_OC1_SetConfig+0xc2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <TIM_OC1_SetConfig+0x110>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00b      	beq.n	8004f36 <TIM_OC1_SetConfig+0xc2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <TIM_OC1_SetConfig+0x114>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <TIM_OC1_SetConfig+0xc2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <TIM_OC1_SetConfig+0x118>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_OC1_SetConfig+0xc2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <TIM_OC1_SetConfig+0x11c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d111      	bne.n	8004f5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	621a      	str	r2, [r3, #32]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0210 	bic.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0320 	bic.w	r3, r3, #32
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a28      	ldr	r2, [pc, #160]	; (8005094 <TIM_OC2_SetConfig+0x100>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_OC2_SetConfig+0x6c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a27      	ldr	r2, [pc, #156]	; (8005098 <TIM_OC2_SetConfig+0x104>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10d      	bne.n	800501c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <TIM_OC2_SetConfig+0x100>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00f      	beq.n	8005044 <TIM_OC2_SetConfig+0xb0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <TIM_OC2_SetConfig+0x104>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00b      	beq.n	8005044 <TIM_OC2_SetConfig+0xb0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a1b      	ldr	r2, [pc, #108]	; (800509c <TIM_OC2_SetConfig+0x108>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_OC2_SetConfig+0xb0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <TIM_OC2_SetConfig+0x10c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_OC2_SetConfig+0xb0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <TIM_OC2_SetConfig+0x110>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d113      	bne.n	800506c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800504a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	40013400 	.word	0x40013400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800

080050a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <TIM_OC3_SetConfig+0xfc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_OC3_SetConfig+0x6a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a26      	ldr	r2, [pc, #152]	; (80051a8 <TIM_OC3_SetConfig+0x100>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10d      	bne.n	800512e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <TIM_OC3_SetConfig+0xfc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_OC3_SetConfig+0xae>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <TIM_OC3_SetConfig+0x100>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_OC3_SetConfig+0xae>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <TIM_OC3_SetConfig+0x104>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_OC3_SetConfig+0xae>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <TIM_OC3_SetConfig+0x108>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_OC3_SetConfig+0xae>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <TIM_OC3_SetConfig+0x10c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d113      	bne.n	800517e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800

080051b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a28      	ldr	r2, [pc, #160]	; (80052b8 <TIM_OC4_SetConfig+0x100>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_OC4_SetConfig+0x6c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a27      	ldr	r2, [pc, #156]	; (80052bc <TIM_OC4_SetConfig+0x104>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d10d      	bne.n	8005240 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	031b      	lsls	r3, r3, #12
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <TIM_OC4_SetConfig+0x100>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00f      	beq.n	8005268 <TIM_OC4_SetConfig+0xb0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <TIM_OC4_SetConfig+0x104>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00b      	beq.n	8005268 <TIM_OC4_SetConfig+0xb0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <TIM_OC4_SetConfig+0x108>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_OC4_SetConfig+0xb0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <TIM_OC4_SetConfig+0x10c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC4_SetConfig+0xb0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <TIM_OC4_SetConfig+0x110>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d113      	bne.n	8005290 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005276:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800

080052cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005310:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a17      	ldr	r2, [pc, #92]	; (8005380 <TIM_OC5_SetConfig+0xb4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00f      	beq.n	8005346 <TIM_OC5_SetConfig+0x7a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <TIM_OC5_SetConfig+0xb8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00b      	beq.n	8005346 <TIM_OC5_SetConfig+0x7a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <TIM_OC5_SetConfig+0xbc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <TIM_OC5_SetConfig+0x7a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <TIM_OC5_SetConfig+0xc0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_OC5_SetConfig+0x7a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a13      	ldr	r2, [pc, #76]	; (8005390 <TIM_OC5_SetConfig+0xc4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d109      	bne.n	800535a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	621a      	str	r2, [r3, #32]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40013400 	.word	0x40013400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800

08005394 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	051b      	lsls	r3, r3, #20
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a18      	ldr	r2, [pc, #96]	; (800544c <TIM_OC6_SetConfig+0xb8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00f      	beq.n	8005410 <TIM_OC6_SetConfig+0x7c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a17      	ldr	r2, [pc, #92]	; (8005450 <TIM_OC6_SetConfig+0xbc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00b      	beq.n	8005410 <TIM_OC6_SetConfig+0x7c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a16      	ldr	r2, [pc, #88]	; (8005454 <TIM_OC6_SetConfig+0xc0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d007      	beq.n	8005410 <TIM_OC6_SetConfig+0x7c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <TIM_OC6_SetConfig+0xc4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d003      	beq.n	8005410 <TIM_OC6_SetConfig+0x7c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a14      	ldr	r2, [pc, #80]	; (800545c <TIM_OC6_SetConfig+0xc8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d109      	bne.n	8005424 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	029b      	lsls	r3, r3, #10
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	621a      	str	r2, [r3, #32]
}
 800543e:	bf00      	nop
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40012c00 	.word	0x40012c00
 8005450:	40013400 	.word	0x40013400
 8005454:	40014000 	.word	0x40014000
 8005458:	40014400 	.word	0x40014400
 800545c:	40014800 	.word	0x40014800

08005460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2201      	movs	r2, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 031f 	and.w	r3, r3, #31
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	431a      	orrs	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e065      	b.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a2c      	ldr	r2, [pc, #176]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d108      	bne.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d013      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10c      	bne.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40000400 	.word	0x40000400
 80055a8:	40000800 	.word	0x40000800
 80055ac:	40014000 	.word	0x40014000

080055b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e087      	b.n	80056dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a25      	ldr	r2, [pc, #148]	; (80056ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d106      	bne.n	8005668 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1e      	ldr	r2, [pc, #120]	; (80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d126      	bne.n	80056ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	051b      	lsls	r3, r3, #20
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a0d      	ldr	r2, [pc, #52]	; (80056ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d106      	bne.n	80056ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40013400 	.word	0x40013400

080056f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800578c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005790:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057b2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4013      	ands	r3, r2
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057e0:	b084      	sub	sp, #16
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	f107 0014 	add.w	r0, r7, #20
 80057ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	b004      	add	sp, #16
 8005820:	4770      	bx	lr
	...

08005824 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005824:	b480      	push	{r7}
 8005826:	b09b      	sub	sp, #108	; 0x6c
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29b      	uxth	r3, r3
 8005842:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	78db      	ldrb	r3, [r3, #3]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d81f      	bhi.n	8005896 <USB_ActivateEndpoint+0x72>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <USB_ActivateEndpoint+0x38>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	0800586d 	.word	0x0800586d
 8005860:	08005889 	.word	0x08005889
 8005864:	0800589f 	.word	0x0800589f
 8005868:	0800587b 	.word	0x0800587b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800586c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005874:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005878:	e012      	b.n	80058a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800587a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800587e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005882:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005886:	e00b      	b.n	80058a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005888:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800588c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005890:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005894:	e004      	b.n	80058a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800589c:	e000      	b.n	80058a0 <USB_ActivateEndpoint+0x7c>
      break;
 800589e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058da:	b21a      	sxth	r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	4313      	orrs	r3, r2
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	441a      	add	r2, r3
 80058f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005908:	b29b      	uxth	r3, r3
 800590a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	7b1b      	ldrb	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 8149 	bne.w	8005ba8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8084 	beq.w	8005a28 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592a:	b29b      	uxth	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	4413      	add	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	00da      	lsls	r2, r3, #3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	88db      	ldrh	r3, [r3, #6]
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	81fb      	strh	r3, [r7, #14]
 8005962:	89fb      	ldrh	r3, [r7, #14]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <USB_ActivateEndpoint+0x180>
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	81bb      	strh	r3, [r7, #12]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	441a      	add	r2, r3
 800598e:	89bb      	ldrh	r3, [r7, #12]
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	78db      	ldrb	r3, [r3, #3]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d020      	beq.n	80059ee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c2:	813b      	strh	r3, [r7, #8]
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	f083 0320 	eor.w	r3, r3, #32
 80059ca:	813b      	strh	r3, [r7, #8]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	893b      	ldrh	r3, [r7, #8]
 80059d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]
 80059ec:	e27f      	b.n	8005eee <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a04:	817b      	strh	r3, [r7, #10]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	441a      	add	r2, r3
 8005a10:	897b      	ldrh	r3, [r7, #10]
 8005a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8013      	strh	r3, [r2, #0]
 8005a26:	e262      	b.n	8005eee <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	4413      	add	r3, r2
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	00da      	lsls	r2, r3, #3
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	4413      	add	r3, r2
 8005a46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	88db      	ldrh	r3, [r3, #6]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	4413      	add	r3, r2
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	00da      	lsls	r2, r3, #3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d112      	bne.n	8005aae <USB_ActivateEndpoint+0x28a>
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e02f      	b.n	8005b0e <USB_ActivateEndpoint+0x2ea>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab4:	d813      	bhi.n	8005ade <USB_ActivateEndpoint+0x2ba>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	663b      	str	r3, [r7, #96]	; 0x60
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <USB_ActivateEndpoint+0x2ac>
 8005aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005acc:	3301      	adds	r3, #1
 8005ace:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	029b      	lsls	r3, r3, #10
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	e017      	b.n	8005b0e <USB_ActivateEndpoint+0x2ea>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <USB_ActivateEndpoint+0x2d4>
 8005af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005af4:	3b01      	subs	r3, #1
 8005af6:	663b      	str	r3, [r7, #96]	; 0x60
 8005af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	029b      	lsls	r3, r3, #10
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	83fb      	strh	r3, [r7, #30]
 8005b1c:	8bfb      	ldrh	r3, [r7, #30]
 8005b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01b      	beq.n	8005b5e <USB_ActivateEndpoint+0x33a>
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	83bb      	strh	r3, [r7, #28]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	441a      	add	r2, r3
 8005b48:	8bbb      	ldrh	r3, [r7, #28]
 8005b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b74:	837b      	strh	r3, [r7, #26]
 8005b76:	8b7b      	ldrh	r3, [r7, #26]
 8005b78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b7c:	837b      	strh	r3, [r7, #26]
 8005b7e:	8b7b      	ldrh	r3, [r7, #26]
 8005b80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b84:	837b      	strh	r3, [r7, #26]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	441a      	add	r2, r3
 8005b90:	8b7b      	ldrh	r3, [r7, #26]
 8005b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	8013      	strh	r3, [r2, #0]
 8005ba6:	e1a2      	b.n	8005eee <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bf4:	4413      	add	r3, r2
 8005bf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	00da      	lsls	r2, r3, #3
 8005bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c06:	657b      	str	r3, [r7, #84]	; 0x54
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	891b      	ldrh	r3, [r3, #8]
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c28:	4413      	add	r3, r2
 8005c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	00da      	lsls	r2, r3, #3
 8005c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c34:	4413      	add	r3, r2
 8005c36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	895b      	ldrh	r3, [r3, #10]
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f040 8091 	bne.w	8005d78 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01b      	beq.n	8005ca6 <USB_ActivateEndpoint+0x482>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d01b      	beq.n	8005cf6 <USB_ActivateEndpoint+0x4d2>
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	441a      	add	r2, r3
 8005d28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	441a      	add	r2, r3
 8005d60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]
 8005d76:	e0ba      	b.n	8005eee <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01d      	beq.n	8005dd0 <USB_ActivateEndpoint+0x5ac>
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005de0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01d      	beq.n	8005e28 <USB_ActivateEndpoint+0x604>
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d024      	beq.n	8005e7a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e4e:	f083 0320 	eor.w	r3, r3, #32
 8005e52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	441a      	add	r2, r3
 8005e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
 8005e78:	e01d      	b.n	8005eb6 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	441a      	add	r2, r3
 8005e9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ecc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005eee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	376c      	adds	r7, #108	; 0x6c
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b08d      	sub	sp, #52	; 0x34
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	7b1b      	ldrb	r3, [r3, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 808e 	bne.w	8006030 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d044      	beq.n	8005fa6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	81bb      	strh	r3, [r7, #12]
 8005f2a:	89bb      	ldrh	r3, [r7, #12]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01b      	beq.n	8005f6c <USB_DeactivateEndpoint+0x6c>
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	817b      	strh	r3, [r7, #10]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f82:	813b      	strh	r3, [r7, #8]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	893b      	ldrh	r3, [r7, #8]
 8005f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	8013      	strh	r3, [r2, #0]
 8005fa4:	e192      	b.n	80062cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	827b      	strh	r3, [r7, #18]
 8005fb4:	8a7b      	ldrh	r3, [r7, #18]
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01b      	beq.n	8005ff6 <USB_DeactivateEndpoint+0xf6>
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	823b      	strh	r3, [r7, #16]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	8a3b      	ldrh	r3, [r7, #16]
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	81fb      	strh	r3, [r7, #14]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	89fb      	ldrh	r3, [r7, #14]
 800601a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800601e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]
 800602e:	e14d      	b.n	80062cc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 80a5 	bne.w	8006184 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	843b      	strh	r3, [r7, #32]
 8006048:	8c3b      	ldrh	r3, [r7, #32]
 800604a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d01b      	beq.n	800608a <USB_DeactivateEndpoint+0x18a>
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006068:	83fb      	strh	r3, [r7, #30]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	441a      	add	r2, r3
 8006074:	8bfb      	ldrh	r3, [r7, #30]
 8006076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	83bb      	strh	r3, [r7, #28]
 8006098:	8bbb      	ldrh	r3, [r7, #28]
 800609a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01b      	beq.n	80060da <USB_DeactivateEndpoint+0x1da>
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b8:	837b      	strh	r3, [r7, #26]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	8b7b      	ldrh	r3, [r7, #26]
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	833b      	strh	r3, [r7, #24]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	8b3b      	ldrh	r3, [r7, #24]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006128:	82fb      	strh	r3, [r7, #22]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	8afb      	ldrh	r3, [r7, #22]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	82bb      	strh	r3, [r7, #20]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	8abb      	ldrh	r3, [r7, #20]
 800616e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617e:	b29b      	uxth	r3, r3
 8006180:	8013      	strh	r3, [r2, #0]
 8006182:	e0a3      	b.n	80062cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01b      	beq.n	80061d4 <USB_DeactivateEndpoint+0x2d4>
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	441a      	add	r2, r3
 80061be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01b      	beq.n	8006224 <USB_DeactivateEndpoint+0x324>
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	853b      	strh	r3, [r7, #40]	; 0x28
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006220:	b29b      	uxth	r3, r3
 8006222:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006272:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3734      	adds	r7, #52	; 0x34
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b0c4      	sub	sp, #272	; 0x110
 80062de:	af00      	add	r7, sp, #0
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	6018      	str	r0, [r3, #0]
 80062e4:	463b      	mov	r3, r7
 80062e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062e8:	463b      	mov	r3, r7
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	f040 8566 	bne.w	8006dc0 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	463b      	mov	r3, r7
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	429a      	cmp	r2, r3
 8006302:	d905      	bls.n	8006310 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006304:	463b      	mov	r3, r7
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800630e:	e004      	b.n	800631a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	7b1b      	ldrb	r3, [r3, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d12c      	bne.n	800637e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006324:	463b      	mov	r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6959      	ldr	r1, [r3, #20]
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	88da      	ldrh	r2, [r3, #6]
 8006330:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006334:	b29b      	uxth	r3, r3
 8006336:	1d38      	adds	r0, r7, #4
 8006338:	6800      	ldr	r0, [r0, #0]
 800633a:	f001 fa43 	bl	80077c4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	1d3b      	adds	r3, r7, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634c:	b29b      	uxth	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	4413      	add	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00da      	lsls	r2, r3, #3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4413      	add	r3, r2
 8006362:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006366:	f107 0310 	add.w	r3, r7, #16
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006370:	b29a      	uxth	r2, r3
 8006372:	f107 0310 	add.w	r3, r7, #16
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	f000 bcec 	b.w	8006d56 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	78db      	ldrb	r3, [r3, #3]
 8006384:	2b02      	cmp	r3, #2
 8006386:	f040 8356 	bne.w	8006a36 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6a1a      	ldr	r2, [r3, #32]
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	429a      	cmp	r2, r3
 8006398:	f240 82fa 	bls.w	8006990 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	463b      	mov	r3, r7
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80063cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063dc:	b29b      	uxth	r3, r3
 80063de:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063fc:	1d3b      	adds	r3, r7, #4
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 815e 	beq.w	80066d4 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006418:	1d3b      	adds	r3, r7, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d164      	bne.n	80064f2 <USB_EPStartXfer+0x218>
 8006428:	1d3b      	adds	r3, r7, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	4413      	add	r3, r2
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	00da      	lsls	r2, r3, #3
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	4413      	add	r3, r2
 800644c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006450:	62bb      	str	r3, [r7, #40]	; 0x28
 8006452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006456:	2b00      	cmp	r3, #0
 8006458:	d112      	bne.n	8006480 <USB_EPStartXfer+0x1a6>
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006464:	b29a      	uxth	r2, r3
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006478:	b29a      	uxth	r2, r3
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e054      	b.n	800652a <USB_EPStartXfer+0x250>
 8006480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006484:	2b3e      	cmp	r3, #62	; 0x3e
 8006486:	d817      	bhi.n	80064b8 <USB_EPStartXfer+0x1de>
 8006488:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <USB_EPStartXfer+0x1ce>
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a2:	3301      	adds	r3, #1
 80064a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	029b      	lsls	r3, r3, #10
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e038      	b.n	800652a <USB_EPStartXfer+0x250>
 80064b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <USB_EPStartXfer+0x1fe>
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	3b01      	subs	r3, #1
 80064d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	e01b      	b.n	800652a <USB_EPStartXfer+0x250>
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d116      	bne.n	800652a <USB_EPStartXfer+0x250>
 80064fc:	1d3b      	adds	r3, r7, #4
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006504:	b29b      	uxth	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	4413      	add	r3, r2
 800650c:	637b      	str	r3, [r7, #52]	; 0x34
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	00da      	lsls	r2, r3, #3
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006518:	4413      	add	r3, r2
 800651a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800651e:	633b      	str	r3, [r7, #48]	; 0x30
 8006520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006524:	b29a      	uxth	r2, r3
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800652a:	463b      	mov	r3, r7
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	895b      	ldrh	r3, [r3, #10]
 8006530:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006534:	463b      	mov	r3, r7
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6959      	ldr	r1, [r3, #20]
 800653a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800653e:	b29b      	uxth	r3, r3
 8006540:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006544:	1d38      	adds	r0, r7, #4
 8006546:	6800      	ldr	r0, [r0, #0]
 8006548:	f001 f93c 	bl	80077c4 <USB_WritePMA>
            ep->xfer_buff += len;
 800654c:	463b      	mov	r3, r7
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006556:	441a      	add	r2, r3
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a1a      	ldr	r2, [r3, #32]
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	429a      	cmp	r2, r3
 800656c:	d90e      	bls.n	800658c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006582:	1ad2      	subs	r2, r2, r3
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	621a      	str	r2, [r3, #32]
 800658a:	e008      	b.n	800659e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d164      	bne.n	8006672 <USB_EPStartXfer+0x398>
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	00da      	lsls	r2, r3, #3
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d112      	bne.n	8006600 <USB_EPStartXfer+0x326>
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e057      	b.n	80066b0 <USB_EPStartXfer+0x3d6>
 8006600:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006604:	2b3e      	cmp	r3, #62	; 0x3e
 8006606:	d817      	bhi.n	8006638 <USB_EPStartXfer+0x35e>
 8006608:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006612:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <USB_EPStartXfer+0x34e>
 800661e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006622:	3301      	adds	r3, #1
 8006624:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006628:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800662c:	b29b      	uxth	r3, r3
 800662e:	029b      	lsls	r3, r3, #10
 8006630:	b29a      	uxth	r2, r3
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	e03b      	b.n	80066b0 <USB_EPStartXfer+0x3d6>
 8006638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663c:	095b      	lsrs	r3, r3, #5
 800663e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006642:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <USB_EPStartXfer+0x37e>
 800664e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006652:	3b01      	subs	r3, #1
 8006654:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006658:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800665c:	b29b      	uxth	r3, r3
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	b29b      	uxth	r3, r3
 8006662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666a:	b29a      	uxth	r2, r3
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e01e      	b.n	80066b0 <USB_EPStartXfer+0x3d6>
 8006672:	463b      	mov	r3, r7
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d119      	bne.n	80066b0 <USB_EPStartXfer+0x3d6>
 800667c:	1d3b      	adds	r3, r7, #4
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
 8006682:	1d3b      	adds	r3, r7, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	4413      	add	r3, r2
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	463b      	mov	r3, r7
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	00da      	lsls	r2, r3, #3
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	4413      	add	r3, r2
 80066a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066a4:	623b      	str	r3, [r7, #32]
 80066a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066b0:	463b      	mov	r3, r7
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	891b      	ldrh	r3, [r3, #8]
 80066b6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6959      	ldr	r1, [r3, #20]
 80066c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80066ca:	1d38      	adds	r0, r7, #4
 80066cc:	6800      	ldr	r0, [r0, #0]
 80066ce:	f001 f879 	bl	80077c4 <USB_WritePMA>
 80066d2:	e340      	b.n	8006d56 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d164      	bne.n	80067a8 <USB_EPStartXfer+0x4ce>
 80066de:	1d3b      	adds	r3, r7, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	1d3b      	adds	r3, r7, #4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	4413      	add	r3, r2
 80066f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	00da      	lsls	r2, r3, #3
 80066fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006700:	4413      	add	r3, r2
 8006702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006706:	64bb      	str	r3, [r7, #72]	; 0x48
 8006708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670c:	2b00      	cmp	r3, #0
 800670e:	d112      	bne.n	8006736 <USB_EPStartXfer+0x45c>
 8006710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800671a:	b29a      	uxth	r2, r3
 800671c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672e:	b29a      	uxth	r2, r3
 8006730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e057      	b.n	80067e6 <USB_EPStartXfer+0x50c>
 8006736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673a:	2b3e      	cmp	r3, #62	; 0x3e
 800673c:	d817      	bhi.n	800676e <USB_EPStartXfer+0x494>
 800673e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006748:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <USB_EPStartXfer+0x484>
 8006754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006758:	3301      	adds	r3, #1
 800675a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800675e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006762:	b29b      	uxth	r3, r3
 8006764:	029b      	lsls	r3, r3, #10
 8006766:	b29a      	uxth	r2, r3
 8006768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e03b      	b.n	80067e6 <USB_EPStartXfer+0x50c>
 800676e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <USB_EPStartXfer+0x4b4>
 8006784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006788:	3b01      	subs	r3, #1
 800678a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800678e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29b      	uxth	r3, r3
 8006798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e01e      	b.n	80067e6 <USB_EPStartXfer+0x50c>
 80067a8:	463b      	mov	r3, r7
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d119      	bne.n	80067e6 <USB_EPStartXfer+0x50c>
 80067b2:	1d3b      	adds	r3, r7, #4
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	657b      	str	r3, [r7, #84]	; 0x54
 80067b8:	1d3b      	adds	r3, r7, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c6:	4413      	add	r3, r2
 80067c8:	657b      	str	r3, [r7, #84]	; 0x54
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	00da      	lsls	r2, r3, #3
 80067d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d4:	4413      	add	r3, r2
 80067d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067da:	653b      	str	r3, [r7, #80]	; 0x50
 80067dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067e6:	463b      	mov	r3, r7
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	891b      	ldrh	r3, [r3, #8]
 80067ec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6959      	ldr	r1, [r3, #20]
 80067f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006800:	1d38      	adds	r0, r7, #4
 8006802:	6800      	ldr	r0, [r0, #0]
 8006804:	f000 ffde 	bl	80077c4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006808:	463b      	mov	r3, r7
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006812:	441a      	add	r2, r3
 8006814:	463b      	mov	r3, r7
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800681a:	463b      	mov	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	463b      	mov	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d90e      	bls.n	8006848 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800682a:	463b      	mov	r3, r7
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1a      	ldr	r2, [r3, #32]
 800683a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	463b      	mov	r3, r7
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	621a      	str	r2, [r3, #32]
 8006846:	e008      	b.n	800685a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006852:	463b      	mov	r3, r7
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	647b      	str	r3, [r7, #68]	; 0x44
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d164      	bne.n	8006934 <USB_EPStartXfer+0x65a>
 800686a:	1d3b      	adds	r3, r7, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006870:	1d3b      	adds	r3, r7, #4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	4413      	add	r3, r2
 8006880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006882:	463b      	mov	r3, r7
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	00da      	lsls	r2, r3, #3
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	4413      	add	r3, r2
 800688e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006892:	63bb      	str	r3, [r7, #56]	; 0x38
 8006894:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006898:	2b00      	cmp	r3, #0
 800689a:	d112      	bne.n	80068c2 <USB_EPStartXfer+0x5e8>
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e054      	b.n	800696c <USB_EPStartXfer+0x692>
 80068c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c6:	2b3e      	cmp	r3, #62	; 0x3e
 80068c8:	d817      	bhi.n	80068fa <USB_EPStartXfer+0x620>
 80068ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <USB_EPStartXfer+0x610>
 80068e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068e4:	3301      	adds	r3, #1
 80068e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e038      	b.n	800696c <USB_EPStartXfer+0x692>
 80068fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006904:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <USB_EPStartXfer+0x640>
 8006910:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006914:	3b01      	subs	r3, #1
 8006916:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800691a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800691e:	b29b      	uxth	r3, r3
 8006920:	029b      	lsls	r3, r3, #10
 8006922:	b29b      	uxth	r3, r3
 8006924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692c:	b29a      	uxth	r2, r3
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e01b      	b.n	800696c <USB_EPStartXfer+0x692>
 8006934:	463b      	mov	r3, r7
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d116      	bne.n	800696c <USB_EPStartXfer+0x692>
 800693e:	1d3b      	adds	r3, r7, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694c:	4413      	add	r3, r2
 800694e:	647b      	str	r3, [r7, #68]	; 0x44
 8006950:	463b      	mov	r3, r7
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	00da      	lsls	r2, r3, #3
 8006958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695a:	4413      	add	r3, r2
 800695c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006960:	643b      	str	r3, [r7, #64]	; 0x40
 8006962:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006966:	b29a      	uxth	r2, r3
 8006968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	895b      	ldrh	r3, [r3, #10]
 8006972:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006976:	463b      	mov	r3, r7
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6959      	ldr	r1, [r3, #20]
 800697c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006980:	b29b      	uxth	r3, r3
 8006982:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006986:	1d38      	adds	r0, r7, #4
 8006988:	6800      	ldr	r0, [r0, #0]
 800698a:	f000 ff1b 	bl	80077c4 <USB_WritePMA>
 800698e:	e1e2      	b.n	8006d56 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006990:	463b      	mov	r3, r7
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800699a:	1d3b      	adds	r3, r7, #4
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	463b      	mov	r3, r7
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069de:	1d3b      	adds	r3, r7, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	663b      	str	r3, [r7, #96]	; 0x60
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f2:	4413      	add	r3, r2
 80069f4:	663b      	str	r3, [r7, #96]	; 0x60
 80069f6:	463b      	mov	r3, r7
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	00da      	lsls	r2, r3, #3
 80069fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a00:	4413      	add	r3, r2
 8006a02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	891b      	ldrh	r3, [r3, #8]
 8006a18:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6959      	ldr	r1, [r3, #20]
 8006a22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a2c:	1d38      	adds	r0, r7, #4
 8006a2e:	6800      	ldr	r0, [r0, #0]
 8006a30:	f000 fec8 	bl	80077c4 <USB_WritePMA>
 8006a34:	e18f      	b.n	8006d56 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a36:	1d3b      	adds	r3, r7, #4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 808f 	beq.w	8006b70 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a52:	1d3b      	adds	r3, r7, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d164      	bne.n	8006b2c <USB_EPStartXfer+0x852>
 8006a62:	1d3b      	adds	r3, r7, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	673b      	str	r3, [r7, #112]	; 0x70
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a76:	4413      	add	r3, r2
 8006a78:	673b      	str	r3, [r7, #112]	; 0x70
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	00da      	lsls	r2, r3, #3
 8006a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a84:	4413      	add	r3, r2
 8006a86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d112      	bne.n	8006aba <USB_EPStartXfer+0x7e0>
 8006a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e054      	b.n	8006b64 <USB_EPStartXfer+0x88a>
 8006aba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006abe:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac0:	d817      	bhi.n	8006af2 <USB_EPStartXfer+0x818>
 8006ac2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac6:	085b      	lsrs	r3, r3, #1
 8006ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006acc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <USB_EPStartXfer+0x808>
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006adc:	3301      	adds	r3, #1
 8006ade:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	029b      	lsls	r3, r3, #10
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e038      	b.n	8006b64 <USB_EPStartXfer+0x88a>
 8006af2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006afc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b00:	f003 031f 	and.w	r3, r3, #31
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <USB_EPStartXfer+0x838>
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	029b      	lsls	r3, r3, #10
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	e01b      	b.n	8006b64 <USB_EPStartXfer+0x88a>
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d116      	bne.n	8006b64 <USB_EPStartXfer+0x88a>
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b44:	4413      	add	r3, r2
 8006b46:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b48:	463b      	mov	r3, r7
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	00da      	lsls	r2, r3, #3
 8006b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b52:	4413      	add	r3, r2
 8006b54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b58:	677b      	str	r3, [r7, #116]	; 0x74
 8006b5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b64:	463b      	mov	r3, r7
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	895b      	ldrh	r3, [r3, #10]
 8006b6a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b6e:	e097      	b.n	8006ca0 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d168      	bne.n	8006c4c <USB_EPStartXfer+0x972>
 8006b7a:	1d3b      	adds	r3, r7, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b92:	4413      	add	r3, r2
 8006b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b98:	463b      	mov	r3, r7
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	00da      	lsls	r2, r3, #3
 8006ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006baa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d112      	bne.n	8006bda <USB_EPStartXfer+0x900>
 8006bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	e05d      	b.n	8006c96 <USB_EPStartXfer+0x9bc>
 8006bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bde:	2b3e      	cmp	r3, #62	; 0x3e
 8006be0:	d817      	bhi.n	8006c12 <USB_EPStartXfer+0x938>
 8006be2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <USB_EPStartXfer+0x928>
 8006bf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	e041      	b.n	8006c96 <USB_EPStartXfer+0x9bc>
 8006c12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <USB_EPStartXfer+0x958>
 8006c28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	e024      	b.n	8006c96 <USB_EPStartXfer+0x9bc>
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d11f      	bne.n	8006c96 <USB_EPStartXfer+0x9bc>
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c5e:	1d3b      	adds	r3, r7, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c6e:	4413      	add	r3, r2
 8006c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c74:	463b      	mov	r3, r7
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	00da      	lsls	r2, r3, #3
 8006c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c80:	4413      	add	r3, r2
 8006c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c96:	463b      	mov	r3, r7
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	891b      	ldrh	r3, [r3, #8]
 8006c9c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca0:	463b      	mov	r3, r7
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6959      	ldr	r1, [r3, #20]
 8006ca6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006cb0:	1d38      	adds	r0, r7, #4
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	f000 fd86 	bl	80077c4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006cb8:	463b      	mov	r3, r7
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d122      	bne.n	8006d08 <USB_EPStartXfer+0xa2e>
 8006cc2:	1d3b      	adds	r3, r7, #4
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cdc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006ce0:	1d3b      	adds	r3, r7, #4
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
 8006d06:	e026      	b.n	8006d56 <USB_EPStartXfer+0xa7c>
 8006d08:	463b      	mov	r3, r7
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d121      	bne.n	8006d56 <USB_EPStartXfer+0xa7c>
 8006d12:	1d3b      	adds	r3, r7, #4
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	463b      	mov	r3, r7
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d30:	1d3b      	adds	r3, r7, #4
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	463b      	mov	r3, r7
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d56:	1d3b      	adds	r3, r7, #4
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f107 020e 	add.w	r2, r7, #14
 8006d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d74:	8013      	strh	r3, [r2, #0]
 8006d76:	f107 030e 	add.w	r3, r7, #14
 8006d7a:	f107 020e 	add.w	r2, r7, #14
 8006d7e:	8812      	ldrh	r2, [r2, #0]
 8006d80:	f082 0210 	eor.w	r2, r2, #16
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	f107 030e 	add.w	r3, r7, #14
 8006d8a:	f107 020e 	add.w	r2, r7, #14
 8006d8e:	8812      	ldrh	r2, [r2, #0]
 8006d90:	f082 0220 	eor.w	r2, r2, #32
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	f107 030e 	add.w	r3, r7, #14
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	8013      	strh	r3, [r2, #0]
 8006dbe:	e3b5      	b.n	800752c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	7b1b      	ldrb	r3, [r3, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f040 8090 	bne.w	8006eec <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006dcc:	463b      	mov	r3, r7
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d90e      	bls.n	8006dfa <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006ddc:	463b      	mov	r3, r7
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006de6:	463b      	mov	r3, r7
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006df0:	1ad2      	subs	r2, r2, r3
 8006df2:	463b      	mov	r3, r7
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	619a      	str	r2, [r3, #24]
 8006df8:	e008      	b.n	8006e0c <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006e04:	463b      	mov	r3, r7
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e0c:	1d3b      	adds	r3, r7, #4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e14:	1d3b      	adds	r3, r7, #4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e24:	4413      	add	r3, r2
 8006e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	00da      	lsls	r2, r3, #3
 8006e32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e36:	4413      	add	r3, r2
 8006e38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d116      	bne.n	8006e76 <USB_EPStartXfer+0xb9c>
 8006e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e32c      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
 8006e76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7c:	d818      	bhi.n	8006eb0 <USB_EPStartXfer+0xbd6>
 8006e7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <USB_EPStartXfer+0xbc4>
 8006e94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e98:	3301      	adds	r3, #1
 8006e9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e30f      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
 8006eb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d104      	bne.n	8006ed0 <USB_EPStartXfer+0xbf6>
 8006ec6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ed0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	029b      	lsls	r3, r3, #10
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee8:	801a      	strh	r2, [r3, #0]
 8006eea:	e2f1      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006eec:	463b      	mov	r3, r7
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	78db      	ldrb	r3, [r3, #3]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	f040 818f 	bne.w	8007216 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ef8:	463b      	mov	r3, r7
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d175      	bne.n	8006fee <USB_EPStartXfer+0xd14>
 8006f02:	1d3b      	adds	r3, r7, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f0a:	1d3b      	adds	r3, r7, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	00da      	lsls	r2, r3, #3
 8006f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f36:	463b      	mov	r3, r7
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d116      	bne.n	8006f6e <USB_EPStartXfer+0xc94>
 8006f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	e065      	b.n	800703a <USB_EPStartXfer+0xd60>
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b3e      	cmp	r3, #62	; 0x3e
 8006f76:	d81a      	bhi.n	8006fae <USB_EPStartXfer+0xcd4>
 8006f78:	463b      	mov	r3, r7
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f84:	463b      	mov	r3, r7
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <USB_EPStartXfer+0xcc2>
 8006f92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f96:	3301      	adds	r3, #1
 8006f98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	e045      	b.n	800703a <USB_EPStartXfer+0xd60>
 8006fae:	463b      	mov	r3, r7
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fba:	463b      	mov	r3, r7
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USB_EPStartXfer+0xcf8>
 8006fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	e025      	b.n	800703a <USB_EPStartXfer+0xd60>
 8006fee:	463b      	mov	r3, r7
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d120      	bne.n	800703a <USB_EPStartXfer+0xd60>
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007000:	1d3b      	adds	r3, r7, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007010:	4413      	add	r3, r2
 8007012:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007016:	463b      	mov	r3, r7
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	00da      	lsls	r2, r3, #3
 800701e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007022:	4413      	add	r3, r2
 8007024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800702c:	463b      	mov	r3, r7
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	1d3b      	adds	r3, r7, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007042:	463b      	mov	r3, r7
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d175      	bne.n	8007138 <USB_EPStartXfer+0xe5e>
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007054:	1d3b      	adds	r3, r7, #4
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007064:	4413      	add	r3, r2
 8007066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800706a:	463b      	mov	r3, r7
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	00da      	lsls	r2, r3, #3
 8007072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007076:	4413      	add	r3, r2
 8007078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800707c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d116      	bne.n	80070b8 <USB_EPStartXfer+0xdde>
 800708a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	e061      	b.n	800717c <USB_EPStartXfer+0xea2>
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b3e      	cmp	r3, #62	; 0x3e
 80070c0:	d81a      	bhi.n	80070f8 <USB_EPStartXfer+0xe1e>
 80070c2:	463b      	mov	r3, r7
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	085b      	lsrs	r3, r3, #1
 80070ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ce:	463b      	mov	r3, r7
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <USB_EPStartXfer+0xe0c>
 80070dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e0:	3301      	adds	r3, #1
 80070e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	029b      	lsls	r3, r3, #10
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f4:	801a      	strh	r2, [r3, #0]
 80070f6:	e041      	b.n	800717c <USB_EPStartXfer+0xea2>
 80070f8:	463b      	mov	r3, r7
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007104:	463b      	mov	r3, r7
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	2b00      	cmp	r3, #0
 8007110:	d104      	bne.n	800711c <USB_EPStartXfer+0xe42>
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007116:	3b01      	subs	r3, #1
 8007118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007120:	b29b      	uxth	r3, r3
 8007122:	029b      	lsls	r3, r3, #10
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712e:	b29a      	uxth	r2, r3
 8007130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	e021      	b.n	800717c <USB_EPStartXfer+0xea2>
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d11c      	bne.n	800717c <USB_EPStartXfer+0xea2>
 8007142:	1d3b      	adds	r3, r7, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714a:	b29b      	uxth	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007152:	4413      	add	r3, r2
 8007154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007158:	463b      	mov	r3, r7
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	00da      	lsls	r2, r3, #3
 8007160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007164:	4413      	add	r3, r2
 8007166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800716a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800716e:	463b      	mov	r3, r7
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	b29a      	uxth	r2, r3
 8007176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800717a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800717c:	463b      	mov	r3, r7
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 81a4 	beq.w	80074d0 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007188:	1d3b      	adds	r3, r7, #4
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	463b      	mov	r3, r7
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800719c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <USB_EPStartXfer+0xeda>
 80071a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10d      	bne.n	80071d0 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8187 	bne.w	80074d0 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 8180 	bne.w	80074d0 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	463b      	mov	r3, r7
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80071ee:	1d3b      	adds	r3, r7, #4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	463b      	mov	r3, r7
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	441a      	add	r2, r3
 80071fc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007210:	b29b      	uxth	r3, r3
 8007212:	8013      	strh	r3, [r2, #0]
 8007214:	e15c      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007216:	463b      	mov	r3, r7
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	78db      	ldrb	r3, [r3, #3]
 800721c:	2b01      	cmp	r3, #1
 800721e:	f040 8155 	bne.w	80074cc <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007222:	463b      	mov	r3, r7
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	463b      	mov	r3, r7
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	429a      	cmp	r2, r3
 8007230:	d90e      	bls.n	8007250 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007232:	463b      	mov	r3, r7
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	619a      	str	r2, [r3, #24]
 800724e:	e008      	b.n	8007262 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800725a:	463b      	mov	r3, r7
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007262:	463b      	mov	r3, r7
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d16f      	bne.n	800734c <USB_EPStartXfer+0x1072>
 800726c:	1d3b      	adds	r3, r7, #4
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007274:	1d3b      	adds	r3, r7, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727c:	b29b      	uxth	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007284:	4413      	add	r3, r2
 8007286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800728a:	463b      	mov	r3, r7
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	00da      	lsls	r2, r3, #3
 8007292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007296:	4413      	add	r3, r2
 8007298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800729c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d116      	bne.n	80072d6 <USB_EPStartXfer+0xffc>
 80072a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	e05f      	b.n	8007396 <USB_EPStartXfer+0x10bc>
 80072d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072da:	2b3e      	cmp	r3, #62	; 0x3e
 80072dc:	d818      	bhi.n	8007310 <USB_EPStartXfer+0x1036>
 80072de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <USB_EPStartXfer+0x1024>
 80072f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f8:	3301      	adds	r3, #1
 80072fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007302:	b29b      	uxth	r3, r3
 8007304:	029b      	lsls	r3, r3, #10
 8007306:	b29a      	uxth	r2, r3
 8007308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	e042      	b.n	8007396 <USB_EPStartXfer+0x10bc>
 8007310:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800731a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <USB_EPStartXfer+0x1056>
 8007326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800732a:	3b01      	subs	r3, #1
 800732c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	b29b      	uxth	r3, r3
 8007336:	029b      	lsls	r3, r3, #10
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	e024      	b.n	8007396 <USB_EPStartXfer+0x10bc>
 800734c:	463b      	mov	r3, r7
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	785b      	ldrb	r3, [r3, #1]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d11f      	bne.n	8007396 <USB_EPStartXfer+0x10bc>
 8007356:	1d3b      	adds	r3, r7, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007366:	b29b      	uxth	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800736e:	4413      	add	r3, r2
 8007370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007374:	463b      	mov	r3, r7
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	00da      	lsls	r2, r3, #3
 800737c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007380:	4413      	add	r3, r2
 8007382:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800738a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800738e:	b29a      	uxth	r2, r3
 8007390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800739e:	463b      	mov	r3, r7
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d16f      	bne.n	8007488 <USB_EPStartXfer+0x11ae>
 80073a8:	1d3b      	adds	r3, r7, #4
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b0:	1d3b      	adds	r3, r7, #4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073c0:	4413      	add	r3, r2
 80073c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073c6:	463b      	mov	r3, r7
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	00da      	lsls	r2, r3, #3
 80073ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073d2:	4413      	add	r3, r2
 80073d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d116      	bne.n	8007412 <USB_EPStartXfer+0x1138>
 80073e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007408:	b29a      	uxth	r2, r3
 800740a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e05e      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
 8007412:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007416:	2b3e      	cmp	r3, #62	; 0x3e
 8007418:	d818      	bhi.n	800744c <USB_EPStartXfer+0x1172>
 800741a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007424:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <USB_EPStartXfer+0x1160>
 8007430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007434:	3301      	adds	r3, #1
 8007436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800743a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800743e:	b29b      	uxth	r3, r3
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	b29a      	uxth	r2, r3
 8007444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e041      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
 800744c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007456:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800745a:	f003 031f 	and.w	r3, r3, #31
 800745e:	2b00      	cmp	r3, #0
 8007460:	d104      	bne.n	800746c <USB_EPStartXfer+0x1192>
 8007462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007466:	3b01      	subs	r3, #1
 8007468:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007470:	b29b      	uxth	r3, r3
 8007472:	029b      	lsls	r3, r3, #10
 8007474:	b29b      	uxth	r3, r3
 8007476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747e:	b29a      	uxth	r2, r3
 8007480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e023      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d11e      	bne.n	80074d0 <USB_EPStartXfer+0x11f6>
 8007492:	1d3b      	adds	r3, r7, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074a2:	4413      	add	r3, r2
 80074a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074a8:	463b      	mov	r3, r7
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	00da      	lsls	r2, r3, #3
 80074b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074b4:	4413      	add	r3, r2
 80074b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	e001      	b.n	80074d0 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e02e      	b.n	800752e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074d0:	1d3b      	adds	r3, r7, #4
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	463b      	mov	r3, r7
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007502:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	463b      	mov	r3, r7
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	441a      	add	r2, r3
 8007514:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007528:	b29b      	uxth	r3, r3
 800752a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d020      	beq.n	800758c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007560:	81bb      	strh	r3, [r7, #12]
 8007562:	89bb      	ldrh	r3, [r7, #12]
 8007564:	f083 0310 	eor.w	r3, r3, #16
 8007568:	81bb      	strh	r3, [r7, #12]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	89bb      	ldrh	r3, [r7, #12]
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]
 800758a:	e01f      	b.n	80075cc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	81fb      	strh	r3, [r7, #14]
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075aa:	81fb      	strh	r3, [r7, #14]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	441a      	add	r2, r3
 80075b6:	89fb      	ldrh	r3, [r7, #14]
 80075b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075da:	b480      	push	{r7}
 80075dc:	b087      	sub	sp, #28
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	7b1b      	ldrb	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 809d 	bne.w	8007728 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d04c      	beq.n	8007690 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	823b      	strh	r3, [r7, #16]
 8007604:	8a3b      	ldrh	r3, [r7, #16]
 8007606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01b      	beq.n	8007646 <USB_EPClearStall+0x6c>
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	81fb      	strh	r3, [r7, #14]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	89fb      	ldrh	r3, [r7, #14]
 8007632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007642:	b29b      	uxth	r3, r3
 8007644:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	78db      	ldrb	r3, [r3, #3]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d06c      	beq.n	8007728 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007664:	81bb      	strh	r3, [r7, #12]
 8007666:	89bb      	ldrh	r3, [r7, #12]
 8007668:	f083 0320 	eor.w	r3, r3, #32
 800766c:	81bb      	strh	r3, [r7, #12]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	89bb      	ldrh	r3, [r7, #12]
 800767a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	b29b      	uxth	r3, r3
 800768c:	8013      	strh	r3, [r2, #0]
 800768e:	e04b      	b.n	8007728 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	82fb      	strh	r3, [r7, #22]
 800769e:	8afb      	ldrh	r3, [r7, #22]
 80076a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01b      	beq.n	80076e0 <USB_EPClearStall+0x106>
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	82bb      	strh	r3, [r7, #20]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	441a      	add	r2, r3
 80076ca:	8abb      	ldrh	r3, [r7, #20]
 80076cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	b29b      	uxth	r3, r3
 80076de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	827b      	strh	r3, [r7, #18]
 80076f8:	8a7b      	ldrh	r3, [r7, #18]
 80076fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076fe:	827b      	strh	r3, [r7, #18]
 8007700:	8a7b      	ldrh	r3, [r7, #18]
 8007702:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007706:	827b      	strh	r3, [r7, #18]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	8a7b      	ldrh	r3, [r7, #18]
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800776c:	b29b      	uxth	r3, r3
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800779a:	b29b      	uxth	r3, r3
 800779c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800779e:	68fb      	ldr	r3, [r7, #12]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b08d      	sub	sp, #52	; 0x34
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4611      	mov	r1, r2
 80077d0:	461a      	mov	r2, r3
 80077d2:	460b      	mov	r3, r1
 80077d4:	80fb      	strh	r3, [r7, #6]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077da:	88bb      	ldrh	r3, [r7, #4]
 80077dc:	3301      	adds	r3, #1
 80077de:	085b      	lsrs	r3, r3, #1
 80077e0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077f4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077fa:	e01b      	b.n	8007834 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	3301      	adds	r3, #1
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	b29a      	uxth	r2, r3
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	3302      	adds	r3, #2
 8007826:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	3301      	adds	r3, #1
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007830:	3b01      	subs	r3, #1
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e0      	bne.n	80077fc <USB_WritePMA+0x38>
  }
}
 800783a:	bf00      	nop
 800783c:	3734      	adds	r7, #52	; 0x34
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007846:	b480      	push	{r7}
 8007848:	b08b      	sub	sp, #44	; 0x2c
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	4611      	mov	r1, r2
 8007852:	461a      	mov	r2, r3
 8007854:	460b      	mov	r3, r1
 8007856:	80fb      	strh	r3, [r7, #6]
 8007858:	4613      	mov	r3, r2
 800785a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800785c:	88bb      	ldrh	r3, [r7, #4]
 800785e:	085b      	lsrs	r3, r3, #1
 8007860:	b29b      	uxth	r3, r3
 8007862:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800786c:	88fa      	ldrh	r2, [r7, #6]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007876:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
 800787c:	e018      	b.n	80078b0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	3302      	adds	r3, #2
 800788a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	b2da      	uxtb	r2, r3
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	3301      	adds	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	0a1b      	lsrs	r3, r3, #8
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3301      	adds	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	3b01      	subs	r3, #1
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e3      	bne.n	800787e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078b6:	88bb      	ldrh	r3, [r7, #4]
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	701a      	strb	r2, [r3, #0]
  }
}
 80078d2:	bf00      	nop
 80078d4:	372c      	adds	r7, #44	; 0x2c
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078ea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078ee:	f002 f89d 	bl	8009a2c <USBD_static_malloc>
 80078f2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d105      	bne.n	8007906 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007902:	2302      	movs	r3, #2
 8007904:	e066      	b.n	80079d4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7c1b      	ldrb	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d119      	bne.n	800794a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791a:	2202      	movs	r2, #2
 800791c:	2181      	movs	r1, #129	; 0x81
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 ff29 	bl	8009776 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800792a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800792e:	2202      	movs	r2, #2
 8007930:	2101      	movs	r1, #1
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 ff1f 	bl	8009776 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2210      	movs	r2, #16
 8007944:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007948:	e016      	b.n	8007978 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800794a:	2340      	movs	r3, #64	; 0x40
 800794c:	2202      	movs	r2, #2
 800794e:	2181      	movs	r1, #129	; 0x81
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 ff10 	bl	8009776 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	2202      	movs	r2, #2
 8007960:	2101      	movs	r1, #1
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 ff07 	bl	8009776 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2210      	movs	r2, #16
 8007974:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007978:	2308      	movs	r3, #8
 800797a:	2203      	movs	r2, #3
 800797c:	2182      	movs	r1, #130	; 0x82
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fef9 	bl	8009776 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	7c1b      	ldrb	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079b8:	2101      	movs	r1, #1
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 ffcb 	bl	8009956 <USBD_LL_PrepareReceive>
 80079c0:	e007      	b.n	80079d2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079c8:	2340      	movs	r3, #64	; 0x40
 80079ca:	2101      	movs	r1, #1
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 ffc2 	bl	8009956 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079e8:	2181      	movs	r1, #129	; 0x81
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 fee9 	bl	80097c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079f6:	2101      	movs	r1, #1
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fee2 	bl	80097c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a06:	2182      	movs	r1, #130	; 0x82
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 feda 	bl	80097c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00e      	beq.n	8007a46 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 f805 	bl	8009a48 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d03a      	beq.n	8007af0 <USBD_CDC_Setup+0xa0>
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	f040 8097 	bne.w	8007bae <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	88db      	ldrh	r3, [r3, #6]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d029      	beq.n	8007adc <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	b25b      	sxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da11      	bge.n	8007ab6 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007a9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	88d2      	ldrh	r2, [r2, #6]
 8007aa4:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007aa6:	6939      	ldr	r1, [r7, #16]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	88db      	ldrh	r3, [r3, #6]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fa8d 	bl	8008fce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007ab4:	e082      	b.n	8007bbc <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	785a      	ldrb	r2, [r3, #1]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007acc:	6939      	ldr	r1, [r7, #16]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88db      	ldrh	r3, [r3, #6]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 faa6 	bl	8009026 <USBD_CtlPrepareRx>
      break;
 8007ada:	e06f      	b.n	8007bbc <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	7850      	ldrb	r0, [r2, #1]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	4798      	blx	r3
      break;
 8007aee:	e065      	b.n	8007bbc <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b0b      	cmp	r3, #11
 8007af6:	d84f      	bhi.n	8007b98 <USBD_CDC_Setup+0x148>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBD_CDC_Setup+0xb0>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b31 	.word	0x08007b31
 8007b04:	08007ba7 	.word	0x08007ba7
 8007b08:	08007b99 	.word	0x08007b99
 8007b0c:	08007b99 	.word	0x08007b99
 8007b10:	08007b99 	.word	0x08007b99
 8007b14:	08007b99 	.word	0x08007b99
 8007b18:	08007b99 	.word	0x08007b99
 8007b1c:	08007b99 	.word	0x08007b99
 8007b20:	08007b99 	.word	0x08007b99
 8007b24:	08007b99 	.word	0x08007b99
 8007b28:	08007b59 	.word	0x08007b59
 8007b2c:	08007b81 	.word	0x08007b81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d107      	bne.n	8007b4a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b3a:	f107 030c 	add.w	r3, r7, #12
 8007b3e:	2202      	movs	r2, #2
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fa43 	bl	8008fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b48:	e030      	b.n	8007bac <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f9cd 	bl	8008eec <USBD_CtlError>
            ret = USBD_FAIL;
 8007b52:	2303      	movs	r3, #3
 8007b54:	75fb      	strb	r3, [r7, #23]
          break;
 8007b56:	e029      	b.n	8007bac <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d107      	bne.n	8007b72 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b62:	f107 030f 	add.w	r3, r7, #15
 8007b66:	2201      	movs	r2, #1
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 fa2f 	bl	8008fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b70:	e01c      	b.n	8007bac <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f9b9 	bl	8008eec <USBD_CtlError>
            ret = USBD_FAIL;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b7e:	e015      	b.n	8007bac <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d00f      	beq.n	8007baa <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f9ad 	bl	8008eec <USBD_CtlError>
            ret = USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b96:	e008      	b.n	8007baa <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 f9a6 	bl	8008eec <USBD_CtlError>
          ret = USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	75fb      	strb	r3, [r7, #23]
          break;
 8007ba4:	e002      	b.n	8007bac <USBD_CDC_Setup+0x15c>
          break;
 8007ba6:	bf00      	nop
 8007ba8:	e008      	b.n	8007bbc <USBD_CDC_Setup+0x16c>
          break;
 8007baa:	bf00      	nop
      }
      break;
 8007bac:	e006      	b.n	8007bbc <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f99b 	bl	8008eec <USBD_CtlError>
      ret = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bba:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop

08007bc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e04f      	b.n	8007c8a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3318      	adds	r3, #24
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d029      	beq.n	8007c5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c08:	78fa      	ldrb	r2, [r7, #3]
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	3318      	adds	r3, #24
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	78f9      	ldrb	r1, [r7, #3]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	4403      	add	r3, r0
 8007c28:	3338      	adds	r3, #56	; 0x38
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c30:	fb03 f301 	mul.w	r3, r3, r1
 8007c34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d110      	bne.n	8007c5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3318      	adds	r3, #24
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c4e:	78f9      	ldrb	r1, [r7, #3]
 8007c50:	2300      	movs	r3, #0
 8007c52:	2200      	movs	r2, #0
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 fe5d 	bl	8009914 <USBD_LL_Transmit>
 8007c5a:	e015      	b.n	8007c88 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e015      	b.n	8007ce0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 fe6d 	bl	8009998 <USBD_LL_GetRxDataSize>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cda:	4611      	mov	r1, r2
 8007cdc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d015      	beq.n	8007d2e <USBD_CDC_EP0_RxReady+0x46>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d08:	2bff      	cmp	r3, #255	; 0xff
 8007d0a:	d010      	beq.n	8007d2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d22:	b292      	uxth	r2, r2
 8007d24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	22ff      	movs	r2, #255	; 0xff
 8007d2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2243      	movs	r2, #67	; 0x43
 8007d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d46:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	200000a0 	.word	0x200000a0

08007d58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2243      	movs	r2, #67	; 0x43
 8007d64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007d66:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	2000005c 	.word	0x2000005c

08007d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2243      	movs	r2, #67	; 0x43
 8007d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007d86:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	200000e4 	.word	0x200000e4

08007d98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	220a      	movs	r2, #10
 8007da4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007da6:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20000018 	.word	0x20000018

08007db8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e004      	b.n	8007dd6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b087      	sub	sp, #28
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e24:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e01a      	b.n	8007e94 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d114      	bne.n	8007e92 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e86:	2181      	movs	r1, #129	; 0x81
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 fd43 	bl	8009914 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e016      	b.n	8007ee8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	7c1b      	ldrb	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ecc:	2101      	movs	r1, #1
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fd41 	bl	8009956 <USBD_LL_PrepareReceive>
 8007ed4:	e007      	b.n	8007ee6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007edc:	2340      	movs	r3, #64	; 0x40
 8007ede:	2101      	movs	r1, #1
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fd38 	bl	8009956 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e01f      	b.n	8007f48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	79fa      	ldrb	r2, [r7, #7]
 8007f3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f001 fb9f 	bl	8009680 <USBD_LL_Init>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e016      	b.n	8007f96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	f107 020e 	add.w	r2, r7, #14
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4798      	blx	r3
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fbca 	bl	8009740 <USBD_LL_Start>
 8007fac:	4603      	mov	r3, r0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	4611      	mov	r1, r2
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
  }

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 ff16 	bl	8008e78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800805a:	461a      	mov	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2b01      	cmp	r3, #1
 800806e:	d00e      	beq.n	800808e <USBD_LL_SetupStage+0x5a>
 8008070:	2b01      	cmp	r3, #1
 8008072:	d302      	bcc.n	800807a <USBD_LL_SetupStage+0x46>
 8008074:	2b02      	cmp	r3, #2
 8008076:	d014      	beq.n	80080a2 <USBD_LL_SetupStage+0x6e>
 8008078:	e01d      	b.n	80080b6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f9d6 	bl	8008434 <USBD_StdDevReq>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
      break;
 800808c:	e020      	b.n	80080d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa3a 	bl	8008510 <USBD_StdItfReq>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e016      	b.n	80080d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa76 	bl	800859c <USBD_StdEPReq>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	e00c      	b.n	80080d0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 fb9b 	bl	8009800 <USBD_LL_StallEP>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
      break;
 80080ce:	bf00      	nop
  }

  return ret;
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	460b      	mov	r3, r1
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d137      	bne.n	800815e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d14a      	bne.n	8008196 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	429a      	cmp	r2, r3
 800810a:	d913      	bls.n	8008134 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	1ad2      	subs	r2, r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	4293      	cmp	r3, r2
 8008124:	bf28      	it	cs
 8008126:	4613      	movcs	r3, r2
 8008128:	461a      	mov	r2, r3
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 ff97 	bl	8009060 <USBD_CtlContinueRx>
 8008132:	e030      	b.n	8008196 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008146:	2b03      	cmp	r3, #3
 8008148:	d105      	bne.n	8008156 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 ff93 	bl	8009082 <USBD_CtlSendStatus>
 800815c:	e01b      	b.n	8008196 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d013      	beq.n	8008192 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008170:	2b03      	cmp	r3, #3
 8008172:	d10e      	bne.n	8008192 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	7afa      	ldrb	r2, [r7, #11]
 800817e:	4611      	mov	r1, r2
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	4798      	blx	r3
 8008184:	4603      	mov	r3, r0
 8008186:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	e002      	b.n	8008198 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008192:	2303      	movs	r3, #3
 8008194:	e000      	b.n	8008198 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	460b      	mov	r3, r1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081ae:	7afb      	ldrb	r3, [r7, #11]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d16a      	bne.n	800828a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3314      	adds	r3, #20
 80081b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d155      	bne.n	8008270 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d914      	bls.n	80081fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	1ad2      	subs	r2, r2, r3
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	461a      	mov	r2, r3
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 ff0c 	bl	8009004 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ec:	2300      	movs	r3, #0
 80081ee:	2200      	movs	r2, #0
 80081f0:	2100      	movs	r1, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f001 fbaf 	bl	8009956 <USBD_LL_PrepareReceive>
 80081f8:	e03a      	b.n	8008270 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	429a      	cmp	r2, r3
 8008204:	d11c      	bne.n	8008240 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800820e:	429a      	cmp	r2, r3
 8008210:	d316      	bcc.n	8008240 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800821c:	429a      	cmp	r2, r3
 800821e:	d20f      	bcs.n	8008240 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008220:	2200      	movs	r2, #0
 8008222:	2100      	movs	r1, #0
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 feed 	bl	8009004 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	2100      	movs	r1, #0
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f001 fb8c 	bl	8009956 <USBD_LL_PrepareReceive>
 800823e:	e017      	b.n	8008270 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008252:	2b03      	cmp	r3, #3
 8008254:	d105      	bne.n	8008262 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008262:	2180      	movs	r1, #128	; 0x80
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f001 facb 	bl	8009800 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 ff1c 	bl	80090a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008276:	2b01      	cmp	r3, #1
 8008278:	d123      	bne.n	80082c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff fe9b 	bl	8007fb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008288:	e01b      	b.n	80082c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800829c:	2b03      	cmp	r3, #3
 800829e:	d10e      	bne.n	80082be <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	7afa      	ldrb	r2, [r7, #11]
 80082aa:	4611      	mov	r1, r2
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	4798      	blx	r3
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	e002      	b.n	80082c4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	e000      	b.n	80082c4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d009      	beq.n	8008310 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6852      	ldr	r2, [r2, #4]
 8008308:	b2d2      	uxtb	r2, r2
 800830a:	4611      	mov	r1, r2
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	2200      	movs	r2, #0
 8008314:	2100      	movs	r1, #0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fa2d 	bl	8009776 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2240      	movs	r2, #64	; 0x40
 8008328:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800832c:	2340      	movs	r3, #64	; 0x40
 800832e:	2200      	movs	r2, #0
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 fa1f 	bl	8009776 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2240      	movs	r2, #64	; 0x40
 8008342:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2204      	movs	r2, #4
 8008386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d105      	bne.n	80083b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d10b      	bne.n	80083ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d005      	beq.n	80083ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	3301      	adds	r3, #1
 800840e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008416:	8a3b      	ldrh	r3, [r7, #16]
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	b21a      	sxth	r2, r3
 800841c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008420:	4313      	orrs	r3, r2
 8008422:	b21b      	sxth	r3, r3
 8008424:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008426:	89fb      	ldrh	r3, [r7, #14]
}
 8008428:	4618      	mov	r0, r3
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800844a:	2b20      	cmp	r3, #32
 800844c:	d004      	beq.n	8008458 <USBD_StdDevReq+0x24>
 800844e:	2b40      	cmp	r3, #64	; 0x40
 8008450:	d002      	beq.n	8008458 <USBD_StdDevReq+0x24>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <USBD_StdDevReq+0x38>
 8008456:	e050      	b.n	80084fa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]
    break;
 800846a:	e04b      	b.n	8008504 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b09      	cmp	r3, #9
 8008472:	d83c      	bhi.n	80084ee <USBD_StdDevReq+0xba>
 8008474:	a201      	add	r2, pc, #4	; (adr r2, 800847c <USBD_StdDevReq+0x48>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	080084d1 	.word	0x080084d1
 8008480:	080084e5 	.word	0x080084e5
 8008484:	080084ef 	.word	0x080084ef
 8008488:	080084db 	.word	0x080084db
 800848c:	080084ef 	.word	0x080084ef
 8008490:	080084af 	.word	0x080084af
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084ef 	.word	0x080084ef
 800849c:	080084c7 	.word	0x080084c7
 80084a0:	080084b9 	.word	0x080084b9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f9d0 	bl	800884c <USBD_GetDescriptor>
      break;
 80084ac:	e024      	b.n	80084f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fb5f 	bl	8008b74 <USBD_SetAddress>
      break;
 80084b6:	e01f      	b.n	80084f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fb9c 	bl	8008bf8 <USBD_SetConfig>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
      break;
 80084c4:	e018      	b.n	80084f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fc39 	bl	8008d40 <USBD_GetConfig>
      break;
 80084ce:	e013      	b.n	80084f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fc68 	bl	8008da8 <USBD_GetStatus>
      break;
 80084d8:	e00e      	b.n	80084f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc96 	bl	8008e0e <USBD_SetFeature>
      break;
 80084e2:	e009      	b.n	80084f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fca5 	bl	8008e36 <USBD_ClrFeature>
      break;
 80084ec:	e004      	b.n	80084f8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fcfb 	bl	8008eec <USBD_CtlError>
      break;
 80084f6:	bf00      	nop
    }
    break;
 80084f8:	e004      	b.n	8008504 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fcf5 	bl	8008eec <USBD_CtlError>
    break;
 8008502:	bf00      	nop
  }

  return ret;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008526:	2b20      	cmp	r3, #32
 8008528:	d003      	beq.n	8008532 <USBD_StdItfReq+0x22>
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	d001      	beq.n	8008532 <USBD_StdItfReq+0x22>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d12a      	bne.n	8008588 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008538:	3b01      	subs	r3, #1
 800853a:	2b02      	cmp	r3, #2
 800853c:	d81d      	bhi.n	800857a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	889b      	ldrh	r3, [r3, #4]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	d813      	bhi.n	8008570 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	88db      	ldrh	r3, [r3, #6]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d110      	bne.n	8008584 <USBD_StdItfReq+0x74>
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10d      	bne.n	8008584 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fd8a 	bl	8009082 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800856e:	e009      	b.n	8008584 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fcba 	bl	8008eec <USBD_CtlError>
      break;
 8008578:	e004      	b.n	8008584 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fcb5 	bl	8008eec <USBD_CtlError>
      break;
 8008582:	e000      	b.n	8008586 <USBD_StdItfReq+0x76>
      break;
 8008584:	bf00      	nop
    }
    break;
 8008586:	e004      	b.n	8008592 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fcae 	bl	8008eec <USBD_CtlError>
    break;
 8008590:	bf00      	nop
  }

  return ret;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	889b      	ldrh	r3, [r3, #4]
 80085ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d004      	beq.n	80085c6 <USBD_StdEPReq+0x2a>
 80085bc:	2b40      	cmp	r3, #64	; 0x40
 80085be:	d002      	beq.n	80085c6 <USBD_StdEPReq+0x2a>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <USBD_StdEPReq+0x3e>
 80085c4:	e137      	b.n	8008836 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]
    break;
 80085d8:	e132      	b.n	8008840 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d03e      	beq.n	8008660 <USBD_StdEPReq+0xc4>
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d002      	beq.n	80085ec <USBD_StdEPReq+0x50>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d079      	beq.n	80086de <USBD_StdEPReq+0x142>
 80085ea:	e11e      	b.n	800882a <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d002      	beq.n	80085fc <USBD_StdEPReq+0x60>
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d015      	beq.n	8008626 <USBD_StdEPReq+0x8a>
 80085fa:	e02b      	b.n	8008654 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <USBD_StdEPReq+0x80>
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d009      	beq.n	800861c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f8f7 	bl	8009800 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008612:	2180      	movs	r1, #128	; 0x80
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f8f3 	bl	8009800 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800861a:	e020      	b.n	800865e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fc64 	bl	8008eec <USBD_CtlError>
        break;
 8008624:	e01b      	b.n	800865e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	885b      	ldrh	r3, [r3, #2]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10e      	bne.n	800864c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <USBD_StdEPReq+0xb0>
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b80      	cmp	r3, #128	; 0x80
 8008638:	d008      	beq.n	800864c <USBD_StdEPReq+0xb0>
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	88db      	ldrh	r3, [r3, #6]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 f8da 	bl	8009800 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fd18 	bl	8009082 <USBD_CtlSendStatus>

        break;
 8008652:	e004      	b.n	800865e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc48 	bl	8008eec <USBD_CtlError>
        break;
 800865c:	bf00      	nop
      }
      break;
 800865e:	e0e9      	b.n	8008834 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008666:	2b02      	cmp	r3, #2
 8008668:	d002      	beq.n	8008670 <USBD_StdEPReq+0xd4>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d015      	beq.n	800869a <USBD_StdEPReq+0xfe>
 800866e:	e02f      	b.n	80086d0 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <USBD_StdEPReq+0xf4>
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b80      	cmp	r3, #128	; 0x80
 800867a:	d009      	beq.n	8008690 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f8bd 	bl	8009800 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f001 f8b9 	bl	8009800 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800868e:	e025      	b.n	80086dc <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc2a 	bl	8008eec <USBD_CtlError>
        break;
 8008698:	e020      	b.n	80086dc <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	885b      	ldrh	r3, [r3, #2]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d11b      	bne.n	80086da <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086ac:	7bbb      	ldrb	r3, [r7, #14]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 f8c4 	bl	800983e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fce3 	bl	8009082 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ce:	e004      	b.n	80086da <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc0a 	bl	8008eec <USBD_CtlError>
        break;
 80086d8:	e000      	b.n	80086dc <USBD_StdEPReq+0x140>
        break;
 80086da:	bf00      	nop
      }
      break;
 80086dc:	e0aa      	b.n	8008834 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d002      	beq.n	80086ee <USBD_StdEPReq+0x152>
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d032      	beq.n	8008752 <USBD_StdEPReq+0x1b6>
 80086ec:	e097      	b.n	800881e <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <USBD_StdEPReq+0x168>
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b80      	cmp	r3, #128	; 0x80
 80086f8:	d004      	beq.n	8008704 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fbf5 	bl	8008eec <USBD_CtlError>
          break;
 8008702:	e091      	b.n	8008828 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008708:	2b00      	cmp	r3, #0
 800870a:	da0b      	bge.n	8008724 <USBD_StdEPReq+0x188>
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	3310      	adds	r3, #16
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	3304      	adds	r3, #4
 8008722:	e00b      	b.n	800873c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2202      	movs	r2, #2
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fc3f 	bl	8008fce <USBD_CtlSendData>
        break;
 8008750:	e06a      	b.n	8008828 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	da11      	bge.n	800877e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	f003 020f 	and.w	r2, r3, #15
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	3324      	adds	r3, #36	; 0x24
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d117      	bne.n	80087a4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fbb8 	bl	8008eec <USBD_CtlError>
            break;
 800877c:	e054      	b.n	8008828 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	f003 020f 	and.w	r2, r3, #15
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	440b      	add	r3, r1
 8008790:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d104      	bne.n	80087a4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fba5 	bl	8008eec <USBD_CtlError>
            break;
 80087a2:	e041      	b.n	8008828 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da0b      	bge.n	80087c4 <USBD_StdEPReq+0x228>
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	3310      	adds	r3, #16
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	4413      	add	r3, r2
 80087c0:	3304      	adds	r3, #4
 80087c2:	e00b      	b.n	80087dc <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4413      	add	r3, r2
 80087da:	3304      	adds	r3, #4
 80087dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <USBD_StdEPReq+0x24e>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b80      	cmp	r3, #128	; 0x80
 80087e8:	d103      	bne.n	80087f2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e00e      	b.n	8008810 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 f840 	bl	800987c <USBD_LL_IsStallEP>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	e002      	b.n	8008810 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2202      	movs	r2, #2
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fbd9 	bl	8008fce <USBD_CtlSendData>
          break;
 800881c:	e004      	b.n	8008828 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fb63 	bl	8008eec <USBD_CtlError>
        break;
 8008826:	bf00      	nop
      }
      break;
 8008828:	e004      	b.n	8008834 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fb5d 	bl	8008eec <USBD_CtlError>
      break;
 8008832:	bf00      	nop
    }
    break;
 8008834:	e004      	b.n	8008840 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fb57 	bl	8008eec <USBD_CtlError>
    break;
 800883e:	bf00      	nop
  }

  return ret;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	b29b      	uxth	r3, r3
 800886a:	3b01      	subs	r3, #1
 800886c:	2b0e      	cmp	r3, #14
 800886e:	f200 8152 	bhi.w	8008b16 <USBD_GetDescriptor+0x2ca>
 8008872:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <USBD_GetDescriptor+0x2c>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	080088e9 	.word	0x080088e9
 800887c:	08008901 	.word	0x08008901
 8008880:	08008941 	.word	0x08008941
 8008884:	08008b17 	.word	0x08008b17
 8008888:	08008b17 	.word	0x08008b17
 800888c:	08008ab7 	.word	0x08008ab7
 8008890:	08008ae3 	.word	0x08008ae3
 8008894:	08008b17 	.word	0x08008b17
 8008898:	08008b17 	.word	0x08008b17
 800889c:	08008b17 	.word	0x08008b17
 80088a0:	08008b17 	.word	0x08008b17
 80088a4:	08008b17 	.word	0x08008b17
 80088a8:	08008b17 	.word	0x08008b17
 80088ac:	08008b17 	.word	0x08008b17
 80088b0:	080088b5 	.word	0x080088b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	7c12      	ldrb	r2, [r2, #16]
 80088cc:	f107 0108 	add.w	r1, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088d6:	e126      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fb06 	bl	8008eec <USBD_CtlError>
      err++;
 80088e0:	7afb      	ldrb	r3, [r7, #11]
 80088e2:	3301      	adds	r3, #1
 80088e4:	72fb      	strb	r3, [r7, #11]
    break;
 80088e6:	e11e      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	7c12      	ldrb	r2, [r2, #16]
 80088f4:	f107 0108 	add.w	r1, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
    break;
 80088fe:	e112      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7c1b      	ldrb	r3, [r3, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10d      	bne.n	8008924 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008922:	e100      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	f107 0208 	add.w	r2, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3301      	adds	r3, #1
 800893a:	2202      	movs	r2, #2
 800893c:	701a      	strb	r2, [r3, #0]
    break;
 800893e:	e0f2      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	885b      	ldrh	r3, [r3, #2]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b05      	cmp	r3, #5
 8008948:	f200 80ac 	bhi.w	8008aa4 <USBD_GetDescriptor+0x258>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <USBD_GetDescriptor+0x108>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	0800896d 	.word	0x0800896d
 8008958:	080089a1 	.word	0x080089a1
 800895c:	080089d5 	.word	0x080089d5
 8008960:	08008a09 	.word	0x08008a09
 8008964:	08008a3d 	.word	0x08008a3d
 8008968:	08008a71 	.word	0x08008a71
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800898e:	e091      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 faaa 	bl	8008eec <USBD_CtlError>
        err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
      break;
 800899e:	e089      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00b      	beq.n	80089c4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	7c12      	ldrb	r2, [r2, #16]
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089c2:	e077      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa90 	bl	8008eec <USBD_CtlError>
        err++;
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	3301      	adds	r3, #1
 80089d0:	72fb      	strb	r3, [r7, #11]
      break;
 80089d2:	e06f      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7c12      	ldrb	r2, [r2, #16]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089f6:	e05d      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa76 	bl	8008eec <USBD_CtlError>
        err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
      break;
 8008a06:	e055      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a2a:	e043      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa5c 	bl	8008eec <USBD_CtlError>
        err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
      break;
 8008a3a:	e03b      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a5e:	e029      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa42 	bl	8008eec <USBD_CtlError>
        err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a6e:	e021      	b.n	8008ab4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7c12      	ldrb	r2, [r2, #16]
 8008a88:	f107 0108 	add.w	r1, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a92:	e00f      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa28 	bl	8008eec <USBD_CtlError>
        err++;
 8008a9c:	7afb      	ldrb	r3, [r7, #11]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa2:	e007      	b.n	8008ab4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa20 	bl	8008eec <USBD_CtlError>
      err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008ab2:	bf00      	nop
    }
    break;
 8008ab4:	e037      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7c1b      	ldrb	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	f107 0208 	add.w	r2, r7, #8
 8008aca:	4610      	mov	r0, r2
 8008acc:	4798      	blx	r3
 8008ace:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ad0:	e029      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa09 	bl	8008eec <USBD_CtlError>
      err++;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	3301      	adds	r3, #1
 8008ade:	72fb      	strb	r3, [r7, #11]
    break;
 8008ae0:	e021      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7c1b      	ldrb	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10d      	bne.n	8008b06 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af2:	f107 0208 	add.w	r2, r7, #8
 8008af6:	4610      	mov	r0, r2
 8008af8:	4798      	blx	r3
 8008afa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	2207      	movs	r2, #7
 8008b02:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b04:	e00f      	b.n	8008b26 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f9ef 	bl	8008eec <USBD_CtlError>
      err++;
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	3301      	adds	r3, #1
 8008b12:	72fb      	strb	r3, [r7, #11]
    break;
 8008b14:	e007      	b.n	8008b26 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9e7 	bl	8008eec <USBD_CtlError>
    err++;
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	3301      	adds	r3, #1
 8008b22:	72fb      	strb	r3, [r7, #11]
    break;
 8008b24:	bf00      	nop
  }

  if (err != 0U)
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d11e      	bne.n	8008b6a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	88db      	ldrh	r3, [r3, #6]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d016      	beq.n	8008b62 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b34:	893b      	ldrh	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88da      	ldrh	r2, [r3, #6]
 8008b3e:	893b      	ldrh	r3, [r7, #8]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bf28      	it	cs
 8008b44:	4613      	movcs	r3, r2
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b4a:	893b      	ldrh	r3, [r7, #8]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fa3c 	bl	8008fce <USBD_CtlSendData>
 8008b56:	e009      	b.n	8008b6c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f9c6 	bl	8008eec <USBD_CtlError>
 8008b60:	e004      	b.n	8008b6c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa8d 	bl	8009082 <USBD_CtlSendStatus>
 8008b68:	e000      	b.n	8008b6c <USBD_GetDescriptor+0x320>
    return;
 8008b6a:	bf00      	nop
    }
  }
}
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop

08008b74 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	889b      	ldrh	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d130      	bne.n	8008be8 <USBD_SetAddress+0x74>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	88db      	ldrh	r3, [r3, #6]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d12c      	bne.n	8008be8 <USBD_SetAddress+0x74>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	2b7f      	cmp	r3, #127	; 0x7f
 8008b94:	d828      	bhi.n	8008be8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d104      	bne.n	8008bb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f99c 	bl	8008eec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb4:	e01c      	b.n	8008bf0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	7bfa      	ldrb	r2, [r7, #15]
 8008bba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fe87 	bl	80098d6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa5a 	bl	8009082 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bdc:	e008      	b.n	8008bf0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be6:	e003      	b.n	8008bf0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f97e 	bl	8008eec <USBD_CtlError>
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	4b4b      	ldr	r3, [pc, #300]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c10:	4b4a      	ldr	r3, [pc, #296]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d905      	bls.n	8008c24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f966 	bl	8008eec <USBD_CtlError>
    return USBD_FAIL;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e087      	b.n	8008d34 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d002      	beq.n	8008c34 <USBD_SetConfig+0x3c>
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d025      	beq.n	8008c7e <USBD_SetConfig+0x86>
 8008c32:	e071      	b.n	8008d18 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c34:	4b41      	ldr	r3, [pc, #260]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01c      	beq.n	8008c76 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c3c:	4b3f      	ldr	r3, [pc, #252]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	461a      	mov	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c46:	4b3d      	ldr	r3, [pc, #244]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff f9bd 	bl	8007fcc <USBD_SetClassConfig>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f944 	bl	8008eec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c64:	e065      	b.n	8008d32 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa0b 	bl	8009082 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2203      	movs	r2, #3
 8008c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c74:	e05d      	b.n	8008d32 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa03 	bl	8009082 <USBD_CtlSendStatus>
    break;
 8008c7c:	e059      	b.n	8008d32 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c7e:	4b2f      	ldr	r3, [pc, #188]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d112      	bne.n	8008cac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c8e:	4b2b      	ldr	r3, [pc, #172]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c98:	4b28      	ldr	r3, [pc, #160]	; (8008d3c <USBD_SetConfig+0x144>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff f9b0 	bl	8008004 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f9ec 	bl	8009082 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008caa:	e042      	b.n	8008d32 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008cac:	4b23      	ldr	r3, [pc, #140]	; (8008d3c <USBD_SetConfig+0x144>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d02a      	beq.n	8008d10 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff f99e 	bl	8008004 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008cc8:	4b1c      	ldr	r3, [pc, #112]	; (8008d3c <USBD_SetConfig+0x144>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cd2:	4b1a      	ldr	r3, [pc, #104]	; (8008d3c <USBD_SetConfig+0x144>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff f977 	bl	8007fcc <USBD_SetClassConfig>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00f      	beq.n	8008d08 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f8fe 	bl	8008eec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff f983 	bl	8008004 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2202      	movs	r2, #2
 8008d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d06:	e014      	b.n	8008d32 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f9ba 	bl	8009082 <USBD_CtlSendStatus>
    break;
 8008d0e:	e010      	b.n	8008d32 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f9b6 	bl	8009082 <USBD_CtlSendStatus>
    break;
 8008d16:	e00c      	b.n	8008d32 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f8e6 	bl	8008eec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <USBD_SetConfig+0x144>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff f96c 	bl	8008004 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d30:	bf00      	nop
  }

  return ret;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	200001dc 	.word	0x200001dc

08008d40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	88db      	ldrh	r3, [r3, #6]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d004      	beq.n	8008d5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f8c9 	bl	8008eec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d5a:	e021      	b.n	8008da0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	db17      	blt.n	8008d96 <USBD_GetConfig+0x56>
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	dd02      	ble.n	8008d70 <USBD_GetConfig+0x30>
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d00b      	beq.n	8008d86 <USBD_GetConfig+0x46>
 8008d6e:	e012      	b.n	8008d96 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3308      	adds	r3, #8
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f925 	bl	8008fce <USBD_CtlSendData>
      break;
 8008d84:	e00c      	b.n	8008da0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f91d 	bl	8008fce <USBD_CtlSendData>
      break;
 8008d94:	e004      	b.n	8008da0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f8a7 	bl	8008eec <USBD_CtlError>
      break;
 8008d9e:	bf00      	nop
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db8:	3b01      	subs	r3, #1
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d81e      	bhi.n	8008dfc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d004      	beq.n	8008dd0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f88f 	bl	8008eec <USBD_CtlError>
      break;
 8008dce:	e01a      	b.n	8008e06 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f043 0202 	orr.w	r2, r3, #2
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	330c      	adds	r3, #12
 8008df0:	2202      	movs	r2, #2
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f8ea 	bl	8008fce <USBD_CtlSendData>
    break;
 8008dfa:	e004      	b.n	8008e06 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f874 	bl	8008eec <USBD_CtlError>
    break;
 8008e04:	bf00      	nop
  }
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	885b      	ldrh	r3, [r3, #2]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d106      	bne.n	8008e2e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f92a 	bl	8009082 <USBD_CtlSendStatus>
  }
}
 8008e2e:	bf00      	nop
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e46:	3b01      	subs	r3, #1
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d80b      	bhi.n	8008e64 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	885b      	ldrh	r3, [r3, #2]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d10c      	bne.n	8008e6e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f910 	bl	8009082 <USBD_CtlSendStatus>
      }
      break;
 8008e62:	e004      	b.n	8008e6e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f840 	bl	8008eec <USBD_CtlError>
      break;
 8008e6c:	e000      	b.n	8008e70 <USBD_ClrFeature+0x3a>
      break;
 8008e6e:	bf00      	nop
  }
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff faa8 	bl	80083f8 <SWAPBYTE>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fa9b 	bl	80083f8 <SWAPBYTE>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f7ff fa8e 	bl	80083f8 <SWAPBYTE>
 8008edc:	4603      	mov	r3, r0
 8008ede:	461a      	mov	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	80da      	strh	r2, [r3, #6]
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef6:	2180      	movs	r1, #128	; 0x80
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fc81 	bl	8009800 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008efe:	2100      	movs	r1, #0
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fc7d 	bl	8009800 <USBD_LL_StallEP>
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b086      	sub	sp, #24
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d036      	beq.n	8008f92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f28:	6938      	ldr	r0, [r7, #16]
 8008f2a:	f000 f836 	bl	8008f9a <USBD_GetLen>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	3301      	adds	r3, #1
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	7812      	ldrb	r2, [r2, #0]
 8008f46:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	4413      	add	r3, r2
 8008f54:	2203      	movs	r2, #3
 8008f56:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f5e:	e013      	b.n	8008f88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	4413      	add	r3, r2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	7812      	ldrb	r2, [r2, #0]
 8008f6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	613b      	str	r3, [r7, #16]
    idx++;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	3301      	adds	r3, #1
 8008f76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	3301      	adds	r3, #1
 8008f86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e7      	bne.n	8008f60 <USBD_GetString+0x52>
 8008f90:	e000      	b.n	8008f94 <USBD_GetString+0x86>
    return;
 8008f92:	bf00      	nop
  }
}
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b085      	sub	sp, #20
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008faa:	e005      	b.n	8008fb8 <USBD_GetLen+0x1e>
  {
    len++;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f5      	bne.n	8008fac <USBD_GetLen+0x12>
  }

  return len;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fc8d 	bl	8009914 <USBD_LL_Transmit>

  return USBD_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	2100      	movs	r1, #0
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fc7c 	bl	8009914 <USBD_LL_Transmit>

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2203      	movs	r2, #3
 8009036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	2100      	movs	r1, #0
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fc80 	bl	8009956 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	2100      	movs	r1, #0
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 fc6f 	bl	8009956 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2204      	movs	r2, #4
 800908e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009092:	2300      	movs	r3, #0
 8009094:	2200      	movs	r2, #0
 8009096:	2100      	movs	r1, #0
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc3b 	bl	8009914 <USBD_LL_Transmit>

  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2205      	movs	r2, #5
 80090b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090b8:	2300      	movs	r3, #0
 80090ba:	2200      	movs	r2, #0
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc49 	bl	8009956 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80090d4:	2200      	movs	r2, #0
 80090d6:	4912      	ldr	r1, [pc, #72]	; (8009120 <MX_USB_Device_Init+0x50>)
 80090d8:	4812      	ldr	r0, [pc, #72]	; (8009124 <MX_USB_Device_Init+0x54>)
 80090da:	f7fe ff09 	bl	8007ef0 <USBD_Init>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80090e4:	f7f7 ff08 	bl	8000ef8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090e8:	490f      	ldr	r1, [pc, #60]	; (8009128 <MX_USB_Device_Init+0x58>)
 80090ea:	480e      	ldr	r0, [pc, #56]	; (8009124 <MX_USB_Device_Init+0x54>)
 80090ec:	f7fe ff30 	bl	8007f50 <USBD_RegisterClass>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090f6:	f7f7 feff 	bl	8000ef8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090fa:	490c      	ldr	r1, [pc, #48]	; (800912c <MX_USB_Device_Init+0x5c>)
 80090fc:	4809      	ldr	r0, [pc, #36]	; (8009124 <MX_USB_Device_Init+0x54>)
 80090fe:	f7fe fe5b 	bl	8007db8 <USBD_CDC_RegisterInterface>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009108:	f7f7 fef6 	bl	8000ef8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800910c:	4805      	ldr	r0, [pc, #20]	; (8009124 <MX_USB_Device_Init+0x54>)
 800910e:	f7fe ff46 	bl	8007f9e <USBD_Start>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009118:	f7f7 feee 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800911c:	bf00      	nop
 800911e:	bd80      	pop	{r7, pc}
 8009120:	2000013c 	.word	0x2000013c
 8009124:	200006b0 	.word	0x200006b0
 8009128:	20000024 	.word	0x20000024
 800912c:	20000128 	.word	0x20000128

08009130 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009134:	2200      	movs	r2, #0
 8009136:	4905      	ldr	r1, [pc, #20]	; (800914c <CDC_Init_FS+0x1c>)
 8009138:	4805      	ldr	r0, [pc, #20]	; (8009150 <CDC_Init_FS+0x20>)
 800913a:	f7fe fe52 	bl	8007de2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800913e:	4905      	ldr	r1, [pc, #20]	; (8009154 <CDC_Init_FS+0x24>)
 8009140:	4803      	ldr	r0, [pc, #12]	; (8009150 <CDC_Init_FS+0x20>)
 8009142:	f7fe fe67 	bl	8007e14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009146:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009148:	4618      	mov	r0, r3
 800914a:	bd80      	pop	{r7, pc}
 800914c:	20000d68 	.word	0x20000d68
 8009150:	200006b0 	.word	0x200006b0
 8009154:	20000980 	.word	0x20000980

08009158 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800915c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800915e:	4618      	mov	r0, r3
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	6039      	str	r1, [r7, #0]
 8009172:	71fb      	strb	r3, [r7, #7]
 8009174:	4613      	mov	r3, r2
 8009176:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	2b23      	cmp	r3, #35	; 0x23
 800917c:	d84a      	bhi.n	8009214 <CDC_Control_FS+0xac>
 800917e:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <CDC_Control_FS+0x1c>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	08009215 	.word	0x08009215
 8009188:	08009215 	.word	0x08009215
 800918c:	08009215 	.word	0x08009215
 8009190:	08009215 	.word	0x08009215
 8009194:	08009215 	.word	0x08009215
 8009198:	08009215 	.word	0x08009215
 800919c:	08009215 	.word	0x08009215
 80091a0:	08009215 	.word	0x08009215
 80091a4:	08009215 	.word	0x08009215
 80091a8:	08009215 	.word	0x08009215
 80091ac:	08009215 	.word	0x08009215
 80091b0:	08009215 	.word	0x08009215
 80091b4:	08009215 	.word	0x08009215
 80091b8:	08009215 	.word	0x08009215
 80091bc:	08009215 	.word	0x08009215
 80091c0:	08009215 	.word	0x08009215
 80091c4:	08009215 	.word	0x08009215
 80091c8:	08009215 	.word	0x08009215
 80091cc:	08009215 	.word	0x08009215
 80091d0:	08009215 	.word	0x08009215
 80091d4:	08009215 	.word	0x08009215
 80091d8:	08009215 	.word	0x08009215
 80091dc:	08009215 	.word	0x08009215
 80091e0:	08009215 	.word	0x08009215
 80091e4:	08009215 	.word	0x08009215
 80091e8:	08009215 	.word	0x08009215
 80091ec:	08009215 	.word	0x08009215
 80091f0:	08009215 	.word	0x08009215
 80091f4:	08009215 	.word	0x08009215
 80091f8:	08009215 	.word	0x08009215
 80091fc:	08009215 	.word	0x08009215
 8009200:	08009215 	.word	0x08009215
 8009204:	08009215 	.word	0x08009215
 8009208:	08009215 	.word	0x08009215
 800920c:	08009215 	.word	0x08009215
 8009210:	08009215 	.word	0x08009215
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009214:	bf00      	nop
  }

  return (USBD_OK);
 8009216:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7f6 fff1 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4805      	ldr	r0, [pc, #20]	; (8009250 <CDC_Receive_FS+0x2c>)
 800923a:	f7fe fdeb 	bl	8007e14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800923e:	4804      	ldr	r0, [pc, #16]	; (8009250 <CDC_Receive_FS+0x2c>)
 8009240:	f7fe fe2c 	bl	8007e9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009244:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200006b0 	.word	0x200006b0

08009254 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <CDC_Transmit_FS+0x48>)
 8009266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800926a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009276:	2301      	movs	r3, #1
 8009278:	e00b      	b.n	8009292 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800927a:	887b      	ldrh	r3, [r7, #2]
 800927c:	461a      	mov	r2, r3
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4806      	ldr	r0, [pc, #24]	; (800929c <CDC_Transmit_FS+0x48>)
 8009282:	f7fe fdae 	bl	8007de2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009286:	4805      	ldr	r0, [pc, #20]	; (800929c <CDC_Transmit_FS+0x48>)
 8009288:	f7fe fdd8 	bl	8007e3c <USBD_CDC_TransmitPacket>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200006b0 	.word	0x200006b0

080092a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	371c      	adds	r7, #28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
	...

080092c4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2212      	movs	r2, #18
 80092d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80092d6:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	2000015c 	.word	0x2000015c

080092e8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2204      	movs	r2, #4
 80092f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092fa:	4b03      	ldr	r3, [pc, #12]	; (8009308 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	20000170 	.word	0x20000170

0800930c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009318:	79fb      	ldrb	r3, [r7, #7]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4907      	ldr	r1, [pc, #28]	; (8009340 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009322:	4808      	ldr	r0, [pc, #32]	; (8009344 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009324:	f7ff fdf3 	bl	8008f0e <USBD_GetString>
 8009328:	e004      	b.n	8009334 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4904      	ldr	r1, [pc, #16]	; (8009340 <USBD_CDC_ProductStrDescriptor+0x34>)
 800932e:	4805      	ldr	r0, [pc, #20]	; (8009344 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009330:	f7ff fded 	bl	8008f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20001150 	.word	0x20001150
 8009344:	08009b48 	.word	0x08009b48

08009348 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	4904      	ldr	r1, [pc, #16]	; (8009368 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009358:	4804      	ldr	r0, [pc, #16]	; (800936c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800935a:	f7ff fdd8 	bl	8008f0e <USBD_GetString>
  return USBD_StrDesc;
 800935e:	4b02      	ldr	r3, [pc, #8]	; (8009368 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20001150 	.word	0x20001150
 800936c:	08009b60 	.word	0x08009b60

08009370 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	6039      	str	r1, [r7, #0]
 800937a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	221a      	movs	r2, #26
 8009380:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009382:	f000 f843 	bl	800940c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009386:	4b02      	ldr	r3, [pc, #8]	; (8009390 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009388:	4618      	mov	r0, r3
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20000174 	.word	0x20000174

08009394 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d105      	bne.n	80093b2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	4907      	ldr	r1, [pc, #28]	; (80093c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093aa:	4808      	ldr	r0, [pc, #32]	; (80093cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093ac:	f7ff fdaf 	bl	8008f0e <USBD_GetString>
 80093b0:	e004      	b.n	80093bc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	4904      	ldr	r1, [pc, #16]	; (80093c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093b6:	4805      	ldr	r0, [pc, #20]	; (80093cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093b8:	f7ff fda9 	bl	8008f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20001150 	.word	0x20001150
 80093cc:	08009b74 	.word	0x08009b74

080093d0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	6039      	str	r1, [r7, #0]
 80093da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4907      	ldr	r1, [pc, #28]	; (8009404 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093e6:	4808      	ldr	r0, [pc, #32]	; (8009408 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093e8:	f7ff fd91 	bl	8008f0e <USBD_GetString>
 80093ec:	e004      	b.n	80093f8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	4904      	ldr	r1, [pc, #16]	; (8009404 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80093f2:	4805      	ldr	r0, [pc, #20]	; (8009408 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80093f4:	f7ff fd8b 	bl	8008f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20001150 	.word	0x20001150
 8009408:	08009b80 	.word	0x08009b80

0800940c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <Get_SerialNum+0x44>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009418:	4b0e      	ldr	r3, [pc, #56]	; (8009454 <Get_SerialNum+0x48>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800941e:	4b0e      	ldr	r3, [pc, #56]	; (8009458 <Get_SerialNum+0x4c>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4413      	add	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009432:	2208      	movs	r2, #8
 8009434:	4909      	ldr	r1, [pc, #36]	; (800945c <Get_SerialNum+0x50>)
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 f814 	bl	8009464 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800943c:	2204      	movs	r2, #4
 800943e:	4908      	ldr	r1, [pc, #32]	; (8009460 <Get_SerialNum+0x54>)
 8009440:	68b8      	ldr	r0, [r7, #8]
 8009442:	f000 f80f 	bl	8009464 <IntToUnicode>
  }
}
 8009446:	bf00      	nop
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	1fff7590 	.word	0x1fff7590
 8009454:	1fff7594 	.word	0x1fff7594
 8009458:	1fff7598 	.word	0x1fff7598
 800945c:	20000176 	.word	0x20000176
 8009460:	20000186 	.word	0x20000186

08009464 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	4613      	mov	r3, r2
 8009470:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009476:	2300      	movs	r3, #0
 8009478:	75fb      	strb	r3, [r7, #23]
 800947a:	e027      	b.n	80094cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	0f1b      	lsrs	r3, r3, #28
 8009480:	2b09      	cmp	r3, #9
 8009482:	d80b      	bhi.n	800949c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	0f1b      	lsrs	r3, r3, #28
 8009488:	b2da      	uxtb	r2, r3
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	4619      	mov	r1, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	440b      	add	r3, r1
 8009494:	3230      	adds	r2, #48	; 0x30
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	e00a      	b.n	80094b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	0f1b      	lsrs	r3, r3, #28
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	4619      	mov	r1, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	440b      	add	r3, r1
 80094ac:	3237      	adds	r2, #55	; 0x37
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	3301      	adds	r3, #1
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	4413      	add	r3, r2
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	3301      	adds	r3, #1
 80094ca:	75fb      	strb	r3, [r7, #23]
 80094cc:	7dfa      	ldrb	r2, [r7, #23]
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d3d3      	bcc.n	800947c <IntToUnicode+0x18>
  }
}
 80094d4:	bf00      	nop
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a0d      	ldr	r2, [pc, #52]	; (8009524 <HAL_PCD_MspInit+0x44>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d113      	bne.n	800951a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094f2:	4b0d      	ldr	r3, [pc, #52]	; (8009528 <HAL_PCD_MspInit+0x48>)
 80094f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f6:	4a0c      	ldr	r2, [pc, #48]	; (8009528 <HAL_PCD_MspInit+0x48>)
 80094f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094fc:	6593      	str	r3, [r2, #88]	; 0x58
 80094fe:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <HAL_PCD_MspInit+0x48>)
 8009500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800950a:	2200      	movs	r2, #0
 800950c:	2100      	movs	r1, #0
 800950e:	2014      	movs	r0, #20
 8009510:	f7f8 f92b 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009514:	2014      	movs	r0, #20
 8009516:	f7f8 f942 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40005c00 	.word	0x40005c00
 8009528:	40021000 	.word	0x40021000

0800952c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fe fd76 	bl	8008034 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	440b      	add	r3, r1
 8009570:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	4619      	mov	r1, r3
 800957a:	f7fe fdae 	bl	80080da <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009598:	78fa      	ldrb	r2, [r7, #3]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	440b      	add	r3, r1
 80095a6:	333c      	adds	r3, #60	; 0x3c
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	4619      	mov	r1, r3
 80095ae:	f7fe fdf7 	bl	80081a0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fefb 	bl	80083c4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095de:	2301      	movs	r3, #1
 80095e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d001      	beq.n	80095ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ea:	f7f7 fc85 	bl	8000ef8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095f4:	7bfa      	ldrb	r2, [r7, #15]
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fea8 	bl	800834e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fe61 	bl	80082cc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fea3 	bl	800836e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009630:	4b04      	ldr	r3, [pc, #16]	; (8009644 <HAL_PCD_SuspendCallback+0x30>)
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	4a03      	ldr	r2, [pc, #12]	; (8009644 <HAL_PCD_SuspendCallback+0x30>)
 8009636:	f043 0306 	orr.w	r3, r3, #6
 800963a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	e000ed00 	.word	0xe000ed00

08009648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d007      	beq.n	8009668 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009658:	4b08      	ldr	r3, [pc, #32]	; (800967c <HAL_PCD_ResumeCallback+0x34>)
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	4a07      	ldr	r2, [pc, #28]	; (800967c <HAL_PCD_ResumeCallback+0x34>)
 800965e:	f023 0306 	bic.w	r3, r3, #6
 8009662:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009664:	f000 f9fa 	bl	8009a5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fe92 	bl	8008398 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	e000ed00 	.word	0xe000ed00

08009680 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009688:	4a2b      	ldr	r2, [pc, #172]	; (8009738 <USBD_LL_Init+0xb8>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a29      	ldr	r2, [pc, #164]	; (8009738 <USBD_LL_Init+0xb8>)
 8009694:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009698:	4b27      	ldr	r3, [pc, #156]	; (8009738 <USBD_LL_Init+0xb8>)
 800969a:	4a28      	ldr	r2, [pc, #160]	; (800973c <USBD_LL_Init+0xbc>)
 800969c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800969e:	4b26      	ldr	r3, [pc, #152]	; (8009738 <USBD_LL_Init+0xb8>)
 80096a0:	2208      	movs	r2, #8
 80096a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096a4:	4b24      	ldr	r3, [pc, #144]	; (8009738 <USBD_LL_Init+0xb8>)
 80096a6:	2202      	movs	r2, #2
 80096a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096aa:	4b23      	ldr	r3, [pc, #140]	; (8009738 <USBD_LL_Init+0xb8>)
 80096ac:	2202      	movs	r2, #2
 80096ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096b0:	4b21      	ldr	r3, [pc, #132]	; (8009738 <USBD_LL_Init+0xb8>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096b6:	4b20      	ldr	r3, [pc, #128]	; (8009738 <USBD_LL_Init+0xb8>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096bc:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <USBD_LL_Init+0xb8>)
 80096be:	2200      	movs	r2, #0
 80096c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096c2:	4b1d      	ldr	r3, [pc, #116]	; (8009738 <USBD_LL_Init+0xb8>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096c8:	481b      	ldr	r0, [pc, #108]	; (8009738 <USBD_LL_Init+0xb8>)
 80096ca:	f7f8 fa37 	bl	8001b3c <HAL_PCD_Init>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80096d4:	f7f7 fc10 	bl	8000ef8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096de:	2318      	movs	r3, #24
 80096e0:	2200      	movs	r2, #0
 80096e2:	2100      	movs	r1, #0
 80096e4:	f7f9 fd25 	bl	8003132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ee:	2358      	movs	r3, #88	; 0x58
 80096f0:	2200      	movs	r2, #0
 80096f2:	2180      	movs	r1, #128	; 0x80
 80096f4:	f7f9 fd1d 	bl	8003132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096fe:	23c0      	movs	r3, #192	; 0xc0
 8009700:	2200      	movs	r2, #0
 8009702:	2181      	movs	r1, #129	; 0x81
 8009704:	f7f9 fd15 	bl	8003132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800970e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009712:	2200      	movs	r2, #0
 8009714:	2101      	movs	r1, #1
 8009716:	f7f9 fd0c 	bl	8003132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009724:	2200      	movs	r2, #0
 8009726:	2182      	movs	r1, #130	; 0x82
 8009728:	f7f9 fd03 	bl	8003132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20001350 	.word	0x20001350
 800973c:	40005c00 	.word	0x40005c00

08009740 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009756:	4618      	mov	r0, r3
 8009758:	f7f8 fad5 	bl	8001d06 <HAL_PCD_Start>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 f980 	bl	8009a68 <USBD_Get_USB_Status>
 8009768:	4603      	mov	r3, r0
 800976a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976c:	7bbb      	ldrb	r3, [r7, #14]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	4608      	mov	r0, r1
 8009780:	4611      	mov	r1, r2
 8009782:	461a      	mov	r2, r3
 8009784:	4603      	mov	r3, r0
 8009786:	70fb      	strb	r3, [r7, #3]
 8009788:	460b      	mov	r3, r1
 800978a:	70bb      	strb	r3, [r7, #2]
 800978c:	4613      	mov	r3, r2
 800978e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800979e:	78bb      	ldrb	r3, [r7, #2]
 80097a0:	883a      	ldrh	r2, [r7, #0]
 80097a2:	78f9      	ldrb	r1, [r7, #3]
 80097a4:	f7f8 fc44 	bl	8002030 <HAL_PCD_EP_Open>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f95a 	bl	8009a68 <USBD_Get_USB_Status>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7f8 fc8b 	bl	80020fc <HAL_PCD_EP_Close>
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 f93b 	bl	8009a68 <USBD_Get_USB_Status>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	4611      	mov	r1, r2
 800981e:	4618      	mov	r0, r3
 8009820:	f7f8 fd4c 	bl	80022bc <HAL_PCD_EP_SetStall>
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	4618      	mov	r0, r3
 800982c:	f000 f91c 	bl	8009a68 <USBD_Get_USB_Status>
 8009830:	4603      	mov	r3, r0
 8009832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009834:	7bbb      	ldrb	r3, [r7, #14]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b084      	sub	sp, #16
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	460b      	mov	r3, r1
 8009848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	4611      	mov	r1, r2
 800985c:	4618      	mov	r0, r3
 800985e:	f7f8 fd8d 	bl	800237c <HAL_PCD_EP_ClrStall>
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	4618      	mov	r0, r3
 800986a:	f000 f8fd 	bl	8009a68 <USBD_Get_USB_Status>
 800986e:	4603      	mov	r3, r0
 8009870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009872:	7bbb      	ldrb	r3, [r7, #14]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800988e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009894:	2b00      	cmp	r3, #0
 8009896:	da0c      	bge.n	80098b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009898:	78fb      	ldrb	r3, [r7, #3]
 800989a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	440b      	add	r3, r1
 80098ac:	3302      	adds	r3, #2
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	e00b      	b.n	80098ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b8:	68f9      	ldr	r1, [r7, #12]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	00db      	lsls	r3, r3, #3
 80098c2:	440b      	add	r3, r1
 80098c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80098c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7f8 fb76 	bl	8001fe6 <HAL_PCD_SetAddress>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f8b1 	bl	8009a68 <USBD_Get_USB_Status>
 8009906:	4603      	mov	r3, r0
 8009908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990a:	7bbb      	ldrb	r3, [r7, #14]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	607a      	str	r2, [r7, #4]
 800991e:	603b      	str	r3, [r7, #0]
 8009920:	460b      	mov	r3, r1
 8009922:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009932:	7af9      	ldrb	r1, [r7, #11]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	f7f8 fc7d 	bl	8002236 <HAL_PCD_EP_Transmit>
 800993c:	4603      	mov	r3, r0
 800993e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f890 	bl	8009a68 <USBD_Get_USB_Status>
 8009948:	4603      	mov	r3, r0
 800994a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800994c:	7dbb      	ldrb	r3, [r7, #22]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b086      	sub	sp, #24
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
 8009962:	460b      	mov	r3, r1
 8009964:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009974:	7af9      	ldrb	r1, [r7, #11]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	f7f8 fc07 	bl	800218c <HAL_PCD_EP_Receive>
 800997e:	4603      	mov	r3, r0
 8009980:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 f86f 	bl	8009a68 <USBD_Get_USB_Status>
 800998a:	4603      	mov	r3, r0
 800998c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800998e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f8 fc29 	bl	8002206 <HAL_PCD_EP_GetRxCount>
 80099b4:	4603      	mov	r3, r0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_PCDEx_LPM_Callback+0x18>
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d013      	beq.n	80099fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80099d6:	e023      	b.n	8009a20 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d007      	beq.n	80099f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099e0:	f000 f83c 	bl	8009a5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099e4:	4b10      	ldr	r3, [pc, #64]	; (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	4a0f      	ldr	r2, [pc, #60]	; (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 80099ea:	f023 0306 	bic.w	r3, r3, #6
 80099ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fcce 	bl	8008398 <USBD_LL_Resume>
    break;
 80099fc:	e010      	b.n	8009a20 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fcb2 	bl	800836e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d005      	beq.n	8009a1e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	4a04      	ldr	r2, [pc, #16]	; (8009a28 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a18:	f043 0306 	orr.w	r3, r3, #6
 8009a1c:	6113      	str	r3, [r2, #16]
    break;
 8009a1e:	bf00      	nop
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	e000ed00 	.word	0xe000ed00

08009a2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a34:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <USBD_static_malloc+0x18>)
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	200001e0 	.word	0x200001e0

08009a48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a60:	f7f6 fd1c 	bl	800049c <SystemClock_Config>
}
 8009a64:	bf00      	nop
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d817      	bhi.n	8009aac <USBD_Get_USB_Status+0x44>
 8009a7c:	a201      	add	r2, pc, #4	; (adr r2, 8009a84 <USBD_Get_USB_Status+0x1c>)
 8009a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a82:	bf00      	nop
 8009a84:	08009a95 	.word	0x08009a95
 8009a88:	08009a9b 	.word	0x08009a9b
 8009a8c:	08009aa1 	.word	0x08009aa1
 8009a90:	08009aa7 	.word	0x08009aa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
    break;
 8009a98:	e00b      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9e:	e008      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa4:	e005      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aaa:	e002      	b.n	8009ab2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aac:	2303      	movs	r3, #3
 8009aae:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab0:	bf00      	nop
  }
  return usb_status;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <__libc_init_array>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	4e0d      	ldr	r6, [pc, #52]	; (8009af8 <__libc_init_array+0x38>)
 8009ac4:	4c0d      	ldr	r4, [pc, #52]	; (8009afc <__libc_init_array+0x3c>)
 8009ac6:	1ba4      	subs	r4, r4, r6
 8009ac8:	10a4      	asrs	r4, r4, #2
 8009aca:	2500      	movs	r5, #0
 8009acc:	42a5      	cmp	r5, r4
 8009ace:	d109      	bne.n	8009ae4 <__libc_init_array+0x24>
 8009ad0:	4e0b      	ldr	r6, [pc, #44]	; (8009b00 <__libc_init_array+0x40>)
 8009ad2:	4c0c      	ldr	r4, [pc, #48]	; (8009b04 <__libc_init_array+0x44>)
 8009ad4:	f000 f82c 	bl	8009b30 <_init>
 8009ad8:	1ba4      	subs	r4, r4, r6
 8009ada:	10a4      	asrs	r4, r4, #2
 8009adc:	2500      	movs	r5, #0
 8009ade:	42a5      	cmp	r5, r4
 8009ae0:	d105      	bne.n	8009aee <__libc_init_array+0x2e>
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ae8:	4798      	blx	r3
 8009aea:	3501      	adds	r5, #1
 8009aec:	e7ee      	b.n	8009acc <__libc_init_array+0xc>
 8009aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009af2:	4798      	blx	r3
 8009af4:	3501      	adds	r5, #1
 8009af6:	e7f2      	b.n	8009ade <__libc_init_array+0x1e>
 8009af8:	08009ba0 	.word	0x08009ba0
 8009afc:	08009ba0 	.word	0x08009ba0
 8009b00:	08009ba0 	.word	0x08009ba0
 8009b04:	08009ba4 	.word	0x08009ba4

08009b08 <memcpy>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	1e43      	subs	r3, r0, #1
 8009b0c:	440a      	add	r2, r1
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	d100      	bne.n	8009b14 <memcpy+0xc>
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b1c:	e7f7      	b.n	8009b0e <memcpy+0x6>

08009b1e <memset>:
 8009b1e:	4402      	add	r2, r0
 8009b20:	4603      	mov	r3, r0
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d100      	bne.n	8009b28 <memset+0xa>
 8009b26:	4770      	bx	lr
 8009b28:	f803 1b01 	strb.w	r1, [r3], #1
 8009b2c:	e7f9      	b.n	8009b22 <memset+0x4>
	...

08009b30 <_init>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr

08009b3c <_fini>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	bf00      	nop
 8009b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b42:	bc08      	pop	{r3}
 8009b44:	469e      	mov	lr, r3
 8009b46:	4770      	bx	lr
