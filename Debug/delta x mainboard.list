
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009c8c  08009c8c  00019c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce4  08009ce4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009ce4  08009ce4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ce4  08009ce4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce4  08009ce4  00019ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ce8  08009ce8  00019ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c4  20000184  08009e70  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  08009e70  00021648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adc7  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003456  00000000  00000000  0003af7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  0003e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  0003f780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205f4  00000000  00000000  000409b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c39  00000000  00000000  00060fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c44b3  00000000  00000000  00072bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f4  00000000  00000000  0013710c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009c74 	.word	0x08009c74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009c74 	.word	0x08009c74

08000218 <CDC_On_Receive>:
volatile int32_t motor1_target_rpm = 0;
volatile int32_t motor2_target_rpm = 0;
volatile int32_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b1c      	cmp	r3, #28
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	221c      	movs	r2, #28
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fd0c 	bl	8009c4c <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001d8 	.word	0x200001d8

08000258 <Set_Motor_Speed>:

inline void Set_Motor_Speed(volatile uint32_t * channel_a, volatile uint32_t * channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	dd15      	ble.n	8000296 <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b64      	cmp	r3, #100	; 0x64
 800026e:	dc0b      	bgt.n	8000288 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000276:	fb02 f303 	mul.w	r3, r2, r3
 800027a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800027e:	3320      	adds	r3, #32
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	e002      	b.n	800028e <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000294:	e020      	b.n	80002d8 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	da17      	bge.n	80002cc <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002a2:	db0a      	blt.n	80002ba <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <Set_Motor_Speed+0x8c>)
 80002a8:	fb02 f303 	mul.w	r3, r2, r3
 80002ac:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80002b0:	3320      	adds	r3, #32
 80002b2:	461a      	mov	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e004      	b.n	80002c4 <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	425b      	negs	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	e005      	b.n	80002d8 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	fffffe3e 	.word	0xfffffe3e

080002e8 <Set_Thrower_Speed>:

inline void Set_Thrower_Speed(volatile uint32_t * channel_a, int32_t thrower_speed) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	if (thrower_speed > 0) {
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dd0e      	ble.n	8000316 <Set_Thrower_Speed+0x2e>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	dc0f      	bgt.n	800031e <Set_Thrower_Speed+0x36>
			// 0 to 100 compact range
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	4613      	mov	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	1a9b      	subs	r3, r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800030c:	3308      	adds	r3, #8
 800030e:	461a      	mov	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 8000314:	e003      	b.n	800031e <Set_Thrower_Speed+0x36>
		*channel_a = ESC_IDLE_CCR;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t * channel_a, int32_t servo_speed, GPIO_PinState ir_status, int32_t ir_control) {
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	4613      	mov	r3, r2
 800033a:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d005      	beq.n	800034e <Set_Servo_Speed+0x22>
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d02a      	beq.n	800039e <Set_Servo_Speed+0x72>
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d027      	beq.n	800039e <Set_Servo_Speed+0x72>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2b00      	cmp	r3, #0
 8000352:	dd0c      	ble.n	800036e <Set_Servo_Speed+0x42>
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	2b64      	cmp	r3, #100	; 0x64
 8000358:	dc09      	bgt.n	800036e <Set_Servo_Speed+0x42>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <Set_Servo_Speed+0x80>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f5c3 6392 	rsb	r3, r3, #1168	; 0x490
 8000362:	3307      	adds	r3, #7
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	461a      	mov	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	e017      	b.n	800039e <Set_Servo_Speed+0x72>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <Set_Servo_Speed+0x80>)
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	2b00      	cmp	r3, #0
 8000374:	da0f      	bge.n	8000396 <Set_Servo_Speed+0x6a>
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800037c:	db0b      	blt.n	8000396 <Set_Servo_Speed+0x6a>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <Set_Servo_Speed+0x80>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	f2a3 42e2 	subw	r2, r3, #1250	; 0x4e2
 8000386:	4613      	mov	r3, r2
 8000388:	079b      	lsls	r3, r3, #30
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	461a      	mov	r2, r3
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	e003      	b.n	800039e <Set_Servo_Speed+0x72>
		} else {
			*channel_a = 0;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800039c:	e7ff      	b.n	800039e <Set_Servo_Speed+0x72>
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	200001a0 	.word	0x200001a0

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b598      	push	{r3, r4, r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f001 f917 	bl	80015e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f8e4 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f000 fd38 	bl	8000e30 <MX_GPIO_Init>
  MX_TIM4_Init();
 80003c0:	f000 fac0 	bl	8000944 <MX_TIM4_Init>
  MX_TIM8_Init();
 80003c4:	f000 fb4a 	bl	8000a5c <MX_TIM8_Init>
  MX_TIM15_Init();
 80003c8:	f000 fbb8 	bl	8000b3c <MX_TIM15_Init>
  MX_TIM16_Init();
 80003cc:	f000 fc3c 	bl	8000c48 <MX_TIM16_Init>
  MX_TIM1_Init();
 80003d0:	f000 f940 	bl	8000654 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003d4:	f000 f9ee 	bl	80007b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d8:	f000 fa40 	bl	800085c <MX_TIM3_Init>
  MX_TIM7_Init();
 80003dc:	f000 fb08 	bl	80009f0 <MX_TIM7_Init>
  MX_TIM17_Init();
 80003e0:	f000 fcac 	bl	8000d3c <MX_TIM17_Init>
  MX_USB_Device_Init();
 80003e4:	f008 ff16 	bl	8009214 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003e8:	2104      	movs	r1, #4
 80003ea:	484b      	ldr	r0, [pc, #300]	; (8000518 <main+0x168>)
 80003ec:	f004 fa10 	bl	8004810 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003f0:	2104      	movs	r1, #4
 80003f2:	484a      	ldr	r0, [pc, #296]	; (800051c <main+0x16c>)
 80003f4:	f004 fa0c 	bl	8004810 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80003f8:	2104      	movs	r1, #4
 80003fa:	4849      	ldr	r0, [pc, #292]	; (8000520 <main+0x170>)
 80003fc:	f004 fa08 	bl	8004810 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000400:	2100      	movs	r1, #0
 8000402:	4848      	ldr	r0, [pc, #288]	; (8000524 <main+0x174>)
 8000404:	f004 f85e 	bl	80044c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000408:	2104      	movs	r1, #4
 800040a:	4846      	ldr	r0, [pc, #280]	; (8000524 <main+0x174>)
 800040c:	f004 f85a 	bl	80044c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000410:	2108      	movs	r1, #8
 8000412:	4844      	ldr	r0, [pc, #272]	; (8000524 <main+0x174>)
 8000414:	f004 f856 	bl	80044c4 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000418:	4b43      	ldr	r3, [pc, #268]	; (8000528 <main+0x178>)
 800041a:	2200      	movs	r2, #0
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800041e:	4b42      	ldr	r3, [pc, #264]	; (8000528 <main+0x178>)
 8000420:	2200      	movs	r2, #0
 8000422:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000424:	4b40      	ldr	r3, [pc, #256]	; (8000528 <main+0x178>)
 8000426:	2200      	movs	r2, #0
 8000428:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800042a:	2100      	movs	r1, #0
 800042c:	483f      	ldr	r0, [pc, #252]	; (800052c <main+0x17c>)
 800042e:	f004 f849 	bl	80044c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000432:	2104      	movs	r1, #4
 8000434:	483d      	ldr	r0, [pc, #244]	; (800052c <main+0x17c>)
 8000436:	f004 f845 	bl	80044c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800043a:	2108      	movs	r1, #8
 800043c:	483b      	ldr	r0, [pc, #236]	; (800052c <main+0x17c>)
 800043e:	f004 f841 	bl	80044c4 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 8000442:	4b3b      	ldr	r3, [pc, #236]	; (8000530 <main+0x180>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 8000448:	4b39      	ldr	r3, [pc, #228]	; (8000530 <main+0x180>)
 800044a:	2200      	movs	r2, #0
 800044c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 800044e:	4b38      	ldr	r3, [pc, #224]	; (8000530 <main+0x180>)
 8000450:	2200      	movs	r2, #0
 8000452:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000454:	2100      	movs	r1, #0
 8000456:	4837      	ldr	r0, [pc, #220]	; (8000534 <main+0x184>)
 8000458:	f004 f834 	bl	80044c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800045c:	2100      	movs	r1, #0
 800045e:	4836      	ldr	r0, [pc, #216]	; (8000538 <main+0x188>)
 8000460:	f004 f830 	bl	80044c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000464:	2100      	movs	r1, #0
 8000466:	4835      	ldr	r0, [pc, #212]	; (800053c <main+0x18c>)
 8000468:	f004 f82c 	bl	80044c4 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 800046c:	4b34      	ldr	r3, [pc, #208]	; (8000540 <main+0x190>)
 800046e:	2200      	movs	r2, #0
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = ESC_IDLE_CCR;
 8000472:	4b34      	ldr	r3, [pc, #208]	; (8000544 <main+0x194>)
 8000474:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 800047a:	4b33      	ldr	r3, [pc, #204]	; (8000548 <main+0x198>)
 800047c:	2200      	movs	r2, #0
 800047e:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 8000480:	4832      	ldr	r0, [pc, #200]	; (800054c <main+0x19c>)
 8000482:	f003 ff5d 	bl	8004340 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 8000486:	4b32      	ldr	r3, [pc, #200]	; (8000550 <main+0x1a0>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b01      	cmp	r3, #1
 800048e:	d1fa      	bne.n	8000486 <main+0xd6>
		command_received = 0;
 8000490:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <main+0x1a0>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		command_received_ticker = 60;
 8000496:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <main+0x1a4>)
 8000498:	223c      	movs	r2, #60	; 0x3c
 800049a:	701a      	strb	r2, [r3, #0]

		// toggle led
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800049c:	2120      	movs	r1, #32
 800049e:	482e      	ldr	r0, [pc, #184]	; (8000558 <main+0x1a8>)
 80004a0:	f001 fbd4 	bl	8001c4c <HAL_GPIO_TogglePin>

		feedback.thrower = 666;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <main+0x1ac>)
 80004a6:	f240 229a 	movw	r2, #666	; 0x29a
 80004aa:	60da      	str	r2, [r3, #12]
		feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80004ac:	2108      	movs	r1, #8
 80004ae:	482a      	ldr	r0, [pc, #168]	; (8000558 <main+0x1a8>)
 80004b0:	f001 fb9c 	bl	8001bec <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <main+0x1ac>)
 80004ba:	615a      	str	r2, [r3, #20]
//			}
//		} else {
//			Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), command.motor1);
//		}

		Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), command.motor1);
 80004bc:	4b28      	ldr	r3, [pc, #160]	; (8000560 <main+0x1b0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4928      	ldr	r1, [pc, #160]	; (8000564 <main+0x1b4>)
 80004c4:	4828      	ldr	r0, [pc, #160]	; (8000568 <main+0x1b8>)
 80004c6:	f7ff fec7 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), command.motor2);
 80004ca:	4b25      	ldr	r3, [pc, #148]	; (8000560 <main+0x1b0>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4926      	ldr	r1, [pc, #152]	; (800056c <main+0x1bc>)
 80004d2:	4827      	ldr	r0, [pc, #156]	; (8000570 <main+0x1c0>)
 80004d4:	f7ff fec0 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), command.motor3);
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <main+0x1b0>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	461a      	mov	r2, r3
 80004de:	4925      	ldr	r1, [pc, #148]	; (8000574 <main+0x1c4>)
 80004e0:	4825      	ldr	r0, [pc, #148]	; (8000578 <main+0x1c8>)
 80004e2:	f7ff feb9 	bl	8000258 <Set_Motor_Speed>

		Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <main+0x1b0>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	4619      	mov	r1, r3
 80004ec:	4823      	ldr	r0, [pc, #140]	; (800057c <main+0x1cc>)
 80004ee:	f7ff fefb 	bl	80002e8 <Set_Thrower_Speed>

		Set_Servo_Speed(&(TIM17->CCR1), command.servo, HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <main+0x1b0>)
 80004f4:	691c      	ldr	r4, [r3, #16]
 80004f6:	2108      	movs	r1, #8
 80004f8:	4817      	ldr	r0, [pc, #92]	; (8000558 <main+0x1a8>)
 80004fa:	f001 fb77 	bl	8001bec <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0x1b0>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4621      	mov	r1, r4
 8000508:	481d      	ldr	r0, [pc, #116]	; (8000580 <main+0x1d0>)
 800050a:	f7ff ff0f 	bl	800032c <Set_Servo_Speed>

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 800050e:	211c      	movs	r1, #28
 8000510:	4812      	ldr	r0, [pc, #72]	; (800055c <main+0x1ac>)
 8000512:	f008 ff41 	bl	8009398 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000516:	e7b6      	b.n	8000486 <main+0xd6>
 8000518:	200005cc 	.word	0x200005cc
 800051c:	20000450 	.word	0x20000450
 8000520:	20000404 	.word	0x20000404
 8000524:	20000580 	.word	0x20000580
 8000528:	40012c00 	.word	0x40012c00
 800052c:	20000534 	.word	0x20000534
 8000530:	40000400 	.word	0x40000400
 8000534:	2000049c 	.word	0x2000049c
 8000538:	20000618 	.word	0x20000618
 800053c:	200004e8 	.word	0x200004e8
 8000540:	40014000 	.word	0x40014000
 8000544:	40014400 	.word	0x40014400
 8000548:	40014800 	.word	0x40014800
 800054c:	20000664 	.word	0x20000664
 8000550:	200001d8 	.word	0x200001d8
 8000554:	200001d9 	.word	0x200001d9
 8000558:	48000400 	.word	0x48000400
 800055c:	200001bc 	.word	0x200001bc
 8000560:	200001a0 	.word	0x200001a0
 8000564:	40012c3c 	.word	0x40012c3c
 8000568:	40012c38 	.word	0x40012c38
 800056c:	4000043c 	.word	0x4000043c
 8000570:	40012c34 	.word	0x40012c34
 8000574:	40000438 	.word	0x40000438
 8000578:	40000434 	.word	0x40000434
 800057c:	40014434 	.word	0x40014434
 8000580:	40014834 	.word	0x40014834

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a4      	sub	sp, #144	; 0x90
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800058e:	2238      	movs	r2, #56	; 0x38
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f009 fb65 	bl	8009c62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2244      	movs	r2, #68	; 0x44
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f009 fb57 	bl	8009c62 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f002 fecb 	bl	8003350 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005ba:	2322      	movs	r3, #34	; 0x22
 80005bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005d8:	2314      	movs	r3, #20
 80005da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 ff5f 	bl	80034b8 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000600:	f000 fd04 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2303      	movs	r3, #3
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000618:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800061c:	2104      	movs	r1, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fa62 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062a:	f000 fcef 	bl	800100c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800062e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000632:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000634:	2300      	movs	r3, #0
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fc38 	bl	8003eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000646:	f000 fce1 	bl	800100c <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3790      	adds	r7, #144	; 0x90
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b098      	sub	sp, #96	; 0x60
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2234      	movs	r2, #52	; 0x34
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f009 faee 	bl	8009c62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000686:	4b49      	ldr	r3, [pc, #292]	; (80007ac <MX_TIM1_Init+0x158>)
 8000688:	4a49      	ldr	r2, [pc, #292]	; (80007b0 <MX_TIM1_Init+0x15c>)
 800068a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800068c:	4b47      	ldr	r3, [pc, #284]	; (80007ac <MX_TIM1_Init+0x158>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b46      	ldr	r3, [pc, #280]	; (80007ac <MX_TIM1_Init+0x158>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <MX_TIM1_Init+0x158>)
 800069a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b42      	ldr	r3, [pc, #264]	; (80007ac <MX_TIM1_Init+0x158>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a6:	4b41      	ldr	r3, [pc, #260]	; (80007ac <MX_TIM1_Init+0x158>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ac:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <MX_TIM1_Init+0x158>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b2:	483e      	ldr	r0, [pc, #248]	; (80007ac <MX_TIM1_Init+0x158>)
 80006b4:	f003 feae 	bl	8004414 <HAL_TIM_PWM_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fca5 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d2:	4619      	mov	r1, r3
 80006d4:	4835      	ldr	r0, [pc, #212]	; (80007ac <MX_TIM1_Init+0x158>)
 80006d6:	f004 ff8b 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 fc94 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ec:	2300      	movs	r3, #0
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000700:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	4828      	ldr	r0, [pc, #160]	; (80007ac <MX_TIM1_Init+0x158>)
 800070a:	f004 fa8d 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000714:	f000 fc7a 	bl	800100c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800071c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000720:	2204      	movs	r2, #4
 8000722:	4619      	mov	r1, r3
 8000724:	4821      	ldr	r0, [pc, #132]	; (80007ac <MX_TIM1_Init+0x158>)
 8000726:	f004 fa7f 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000730:	f000 fc6c 	bl	800100c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073c:	2208      	movs	r2, #8
 800073e:	4619      	mov	r1, r3
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <MX_TIM1_Init+0x158>)
 8000742:	f004 fa71 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800074c:	f000 fc5e 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <MX_TIM1_Init+0x158>)
 800078e:	f004 ffb1 	bl	80056f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000798:	f000 fc38 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_TIM1_Init+0x158>)
 800079e:	f000 fdb9 	bl	8001314 <HAL_TIM_MspPostInit>

}
 80007a2:	bf00      	nop
 80007a4:	3760      	adds	r7, #96	; 0x60
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000580 	.word	0x20000580
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2224      	movs	r2, #36	; 0x24
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f009 fa4d 	bl	8009c62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM2_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007fa:	2303      	movs	r3, #3
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000812:	2301      	movs	r3, #1
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_TIM2_Init+0xa4>)
 8000826:	f003 ff4d 	bl	80046c4 <HAL_TIM_Encoder_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000830:	f000 fbec 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_TIM2_Init+0xa4>)
 8000842:	f004 fed5 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800084c:	f000 fbde 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200005cc 	.word	0x200005cc

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <MX_TIM3_Init+0xe0>)
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <MX_TIM3_Init+0xe4>)
 8000884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_TIM3_Init+0xe0>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_TIM3_Init+0xe0>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_TIM3_Init+0xe0>)
 8000894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_TIM3_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_TIM3_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a6:	4825      	ldr	r0, [pc, #148]	; (800093c <MX_TIM3_Init+0xe0>)
 80008a8:	f003 fdb4 	bl	8004414 <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008b2:	f000 fbab 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_TIM3_Init+0xe0>)
 80008c6:	f004 fe93 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008d0:	f000 fb9c 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2360      	movs	r3, #96	; 0x60
 80008d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4814      	ldr	r0, [pc, #80]	; (800093c <MX_TIM3_Init+0xe0>)
 80008ec:	f004 f99c 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008f6:	f000 fb89 	bl	800100c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	2204      	movs	r2, #4
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_TIM3_Init+0xe0>)
 8000906:	f004 f98f 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000910:	f000 fb7c 	bl	800100c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2208      	movs	r2, #8
 800091c:	4619      	mov	r1, r3
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <MX_TIM3_Init+0xe0>)
 8000920:	f004 f982 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800092a:	f000 fb6f 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <MX_TIM3_Init+0xe0>)
 8000930:	f000 fcf0 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000534 	.word	0x20000534
 8000940:	40000400 	.word	0x40000400

08000944 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2224      	movs	r2, #36	; 0x24
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f009 f985 	bl	8009c62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <MX_TIM4_Init+0xa8>)
 8000966:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_TIM4_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_TIM4_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM4_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000988:	2303      	movs	r3, #3
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_TIM4_Init+0xa4>)
 80009b4:	f003 fe86 	bl	80046c4 <HAL_TIM_Encoder_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009be:	f000 fb25 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_TIM4_Init+0xa4>)
 80009d0:	f004 fe0e 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009da:	f000 fb17 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000450 	.word	0x20000450
 80009ec:	40000800 	.word	0x40000800

080009f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_TIM7_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a08:	2228      	movs	r2, #40	; 0x28
 8000a0a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a22:	f003 fc35 	bl	8004290 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a2c:	f000 faee 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_TIM7_Init+0x64>)
 8000a3e:	f004 fdd7 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fae0 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000664 	.word	0x20000664
 8000a58:	40001400 	.word	0x40001400

08000a5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09a      	sub	sp, #104	; 0x68
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a66:	2224      	movs	r2, #36	; 0x24
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f009 f8f9 	bl	8009c62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2234      	movs	r2, #52	; 0x34
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 f8ed 	bl	8009c62 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <MX_TIM8_Init+0xdc>)
 8000a8c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000abc:	2301      	movs	r3, #1
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000acc:	2301      	movs	r3, #1
 8000ace:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000ad8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000ae0:	f003 fdf0 	bl	80046c4 <HAL_TIM_Encoder_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000aea:	f000 fa8f 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000b02:	f004 fd75 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000b0c:	f000 fa7e 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM8_Init+0xd8>)
 8000b1e:	f004 fde9 	bl	80056f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000b28:	f000 fa70 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3768      	adds	r7, #104	; 0x68
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000404 	.word	0x20000404
 8000b38:	40013400 	.word	0x40013400

08000b3c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b098      	sub	sp, #96	; 0x60
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2234      	movs	r2, #52	; 0x34
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f009 f87a 	bl	8009c62 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b6e:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b70:	4a34      	ldr	r2, [pc, #208]	; (8000c44 <MX_TIM15_Init+0x108>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b86:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000b9a:	4829      	ldr	r0, [pc, #164]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000b9c:	f003 fc3a 	bl	8004414 <HAL_TIM_PWM_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f000 fa31 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000bba:	f004 fd19 	bl	80055f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 fa22 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc8:	2360      	movs	r3, #96	; 0x60
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be8:	2200      	movs	r2, #0
 8000bea:	4619      	mov	r1, r3
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000bee:	f004 f81b 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000bf8:	f000 fa08 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000c24:	f004 fd66 	bl	80056f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000c2e:	f000 f9ed 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM15_Init+0x104>)
 8000c34:	f000 fb6e 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000c38:	bf00      	nop
 8000c3a:	3760      	adds	r7, #96	; 0x60
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000049c 	.word	0x2000049c
 8000c44:	40014000 	.word	0x40014000

08000c48 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2234      	movs	r2, #52	; 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 fffa 	bl	8009c62 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c70:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <MX_TIM16_Init+0xf0>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c76:	2230      	movs	r2, #48	; 0x30
 8000c78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65300;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c82:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000c86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c9c:	f003 faf8 	bl	8004290 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ca6:	f000 f9b1 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000caa:	4822      	ldr	r0, [pc, #136]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000cac:	f003 fbb2 	bl	8004414 <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000cb6:	f000 f9a9 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4815      	ldr	r0, [pc, #84]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000ce0:	f003 ffa2 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cea:	f000 f98f 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d16:	f004 fced 	bl	80056f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d20:	f000 f974 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d26:	f000 faf5 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000618 	.word	0x20000618
 8000d38:	40014400 	.word	0x40014400

08000d3c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2234      	movs	r2, #52	; 0x34
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 ff80 	bl	8009c62 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d64:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <MX_TIM17_Init+0xf0>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48;
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65300;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d76:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000d7a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d90:	f003 fa7e 	bl	8004290 <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d9a:	f000 f937 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000da0:	f003 fb38 	bl	8004414 <HAL_TIM_PWM_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000daa:	f000 f92f 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	; 0x60
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000dd4:	f003 ff28 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dde:	f000 f915 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e0a:	f004 fc73 	bl	80056f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e14:	f000 f8fa 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e1a:	f000 fa7b 	bl	8001314 <HAL_TIM_MspPostInit>

}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	; 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200004e8 	.word	0x200004e8
 8000e2c:	40014800 	.word	0x40014800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_GPIO_Init+0x8c>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2120      	movs	r1, #32
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <MX_GPIO_Init+0x90>)
 8000e7c:	f000 fece 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e80:	2308      	movs	r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <MX_GPIO_Init+0x90>)
 8000e94:	f000 fd28 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_GPIO_Init+0x90>)
 8000eb0:	f000 fd1a 	bl	80018e8 <HAL_GPIO_Init>

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000ed4:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000eda:	4b3f      	ldr	r3, [pc, #252]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000ee0:	8bfb      	ldrh	r3, [r7, #30]
 8000ee2:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ee4:	8812      	ldrh	r2, [r2, #0]
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000eec:	8bbb      	ldrh	r3, [r7, #28]
 8000eee:	4a3c      	ldr	r2, [pc, #240]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ef0:	8812      	ldrh	r2, [r2, #0]
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000ef8:	8b7b      	ldrh	r3, [r7, #26]
 8000efa:	4a3a      	ldr	r2, [pc, #232]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000efc:	8812      	ldrh	r2, [r2, #0]
 8000efe:	b292      	uxth	r2, r2
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000f04:	4a35      	ldr	r2, [pc, #212]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f06:	8bfb      	ldrh	r3, [r7, #30]
 8000f08:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000f0a:	4a35      	ldr	r2, [pc, #212]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f0c:	8bbb      	ldrh	r3, [r7, #28]
 8000f0e:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000f10:	4a34      	ldr	r2, [pc, #208]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f12:	8b7b      	ldrh	r3, [r7, #26]
 8000f14:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1252      	asrs	r2, r2, #9
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f2e:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	4a2b      	ldr	r2, [pc, #172]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f40:	1252      	asrs	r2, r2, #9
 8000f42:	17db      	asrs	r3, r3, #31
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a29      	ldr	r2, [pc, #164]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f48:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f56:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5a:	1252      	asrs	r2, r2, #9
 8000f5c:	17db      	asrs	r3, r3, #31
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f62:	6093      	str	r3, [r2, #8]
//		//Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), (motor1_target_rpm - 50 - pTerm) / 3);
//	}


	// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 8000f64:	2108      	movs	r1, #8
 8000f66:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000f68:	f000 fe40 	bl	8001bec <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0xbc>
		TIM17->CCR1 = 0;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// timeout
	if (command_received_ticker > 0) {
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0xd6>
		command_received_ticker -= 1;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	3b01      	subs	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000f96:	701a      	strb	r2, [r3, #0]
		TIM16->CCR1 = ESC_IDLE_CCR;

		// stop servo
		TIM17->CCR1 = 0;
	}
}
 8000f98:	e018      	b.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x108>
		TIM1->CCR1 = 0;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000fc0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40000800 	.word	0x40000800
 8000fd8:	40013400 	.word	0x40013400
 8000fdc:	200001da 	.word	0x200001da
 8000fe0:	200001dc 	.word	0x200001dc
 8000fe4:	200001de 	.word	0x200001de
 8000fe8:	6bca1af3 	.word	0x6bca1af3
 8000fec:	200001bc 	.word	0x200001bc
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	200001a0 	.word	0x200001a0
 8000ff8:	40014800 	.word	0x40014800
 8000ffc:	200001d9 	.word	0x200001d9
 8001000:	40012c00 	.word	0x40012c00
 8001004:	40000400 	.word	0x40000400
 8001008:	40014400 	.word	0x40014400

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6613      	str	r3, [r2, #96]	; 0x60
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x44>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6593      	str	r3, [r2, #88]	; 0x58
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x44>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001052:	f002 fa21 	bl	8003498 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_TIM_PWM_MspInit+0x80>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10c      	bne.n	8001090 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 800107c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800108e:	e022      	b.n	80010d6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <HAL_TIM_PWM_MspInit+0x88>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10c      	bne.n	80010b4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6593      	str	r3, [r2, #88]	; 0x58
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
}
 80010b2:	e010      	b.n	80010d6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <HAL_TIM_PWM_MspInit+0x8c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10b      	bne.n	80010d6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_TIM_PWM_MspInit+0x84>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	bf00      	nop
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40014000 	.word	0x40014000

080010f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d129      	bne.n	800116a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b54      	ldr	r3, [pc, #336]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a53      	ldr	r2, [pc, #332]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	623b      	str	r3, [r7, #32]
 800112c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a4d      	ldr	r2, [pc, #308]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001146:	2303      	movs	r3, #3
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001156:	2301      	movs	r3, #1
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f000 fbc0 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001168:	e079      	b.n	800125e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a3f      	ldr	r2, [pc, #252]	; (800126c <HAL_TIM_Encoder_MspInit+0x178>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d128      	bne.n	80011c6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	4a3b      	ldr	r2, [pc, #236]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6593      	str	r3, [r2, #88]	; 0x58
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a35      	ldr	r2, [pc, #212]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a4:	23c0      	movs	r3, #192	; 0xc0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011b4:	2302      	movs	r3, #2
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	482c      	ldr	r0, [pc, #176]	; (8001270 <HAL_TIM_Encoder_MspInit+0x17c>)
 80011c0:	f000 fb92 	bl	80018e8 <HAL_GPIO_Init>
}
 80011c4:	e04b      	b.n	800125e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a2a      	ldr	r2, [pc, #168]	; (8001274 <HAL_TIM_Encoder_MspInit+0x180>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d146      	bne.n	800125e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 80011d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d4:	4a24      	ldr	r2, [pc, #144]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 80011d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011da:	6613      	str	r3, [r2, #96]	; 0x60
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 80011ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_TIM_Encoder_MspInit+0x174>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800122a:	2302      	movs	r3, #2
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f000 fb56 	bl	80018e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800123c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800124e:	230a      	movs	r3, #10
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_TIM_Encoder_MspInit+0x17c>)
 800125a:	f000 fb45 	bl	80018e8 <HAL_GPIO_Init>
}
 800125e:	bf00      	nop
 8001260:	3738      	adds	r7, #56	; 0x38
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40000800 	.word	0x40000800
 8001270:	48000400 	.word	0x48000400
 8001274:	40013400 	.word	0x40013400

08001278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <HAL_TIM_Base_MspInit+0x8c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d114      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 8001290:	f043 0320 	orr.w	r3, r3, #32
 8001294:	6593      	str	r3, [r2, #88]	; 0x58
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2037      	movs	r0, #55	; 0x37
 80012a8:	f000 fae9 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012ac:	2037      	movs	r0, #55	; 0x37
 80012ae:	f000 fb00 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012b2:	e022      	b.n	80012fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_TIM_Base_MspInit+0x94>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d10c      	bne.n	80012d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
}
 80012d6:	e010      	b.n	80012fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_TIM_Base_MspInit+0x98>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10b      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6613      	str	r3, [r2, #96]	; 0x60
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_TIM_Base_MspInit+0x90>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40001400 	.word	0x40001400
 8001308:	40021000 	.word	0x40021000
 800130c:	40014400 	.word	0x40014400
 8001310:	40014800 	.word	0x40014800

08001314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_TIM_MspPostInit+0x1b4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11e      	bne.n	8001374 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b65      	ldr	r3, [pc, #404]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a64      	ldr	r2, [pc, #400]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b62      	ldr	r3, [pc, #392]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800134e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001360:	2306      	movs	r3, #6
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f000 fabb 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001372:	e0a5      	b.n	80014c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <HAL_TIM_MspPostInit+0x1bc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d139      	bne.n	80013f2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a52      	ldr	r2, [pc, #328]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80013ae:	2350      	movs	r3, #80	; 0x50
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013be:	2302      	movs	r3, #2
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fa8c 	bl	80018e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013e0:	2302      	movs	r3, #2
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	483a      	ldr	r0, [pc, #232]	; (80014d4 <HAL_TIM_MspPostInit+0x1c0>)
 80013ec:	f000 fa7c 	bl	80018e8 <HAL_GPIO_Init>
}
 80013f0:	e066      	b.n	80014c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_TIM_MspPostInit+0x1c4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d11d      	bne.n	8001438 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a32      	ldr	r2, [pc, #200]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001414:	2304      	movs	r3, #4
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001424:	2309      	movs	r3, #9
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f000 fa59 	bl	80018e8 <HAL_GPIO_Init>
}
 8001436:	e043      	b.n	80014c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <HAL_TIM_MspPostInit+0x1c8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d11c      	bne.n	800147c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800145a:	2310      	movs	r3, #16
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800146a:	2301      	movs	r3, #1
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <HAL_TIM_MspPostInit+0x1c0>)
 8001476:	f000 fa37 	bl	80018e8 <HAL_GPIO_Init>
}
 800147a:	e021      	b.n	80014c0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_TIM_MspPostInit+0x1cc>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d11c      	bne.n	80014c0 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_TIM_MspPostInit+0x1b8>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80014ae:	2301      	movs	r3, #1
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f000 fa14 	bl	80018e8 <HAL_GPIO_Init>
}
 80014c0:	bf00      	nop
 80014c2:	3738      	adds	r7, #56	; 0x38
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40000400 	.word	0x40000400
 80014d4:	48000400 	.word	0x48000400
 80014d8:	40014000 	.word	0x40014000
 80014dc:	40014400 	.word	0x40014400
 80014e0:	40014800 	.word	0x40014800

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 f8a8 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <USB_LP_IRQHandler+0x10>)
 8001546:	f000 fca2 	bl	8001e8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20001354 	.word	0x20001354

08001554 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM7_IRQHandler+0x10>)
 800155a:	f003 f9e6 	bl	800492a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000664 	.word	0x20000664

08001568 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SystemInit+0x28>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <SystemInit+0x28>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SystemInit+0x28>)
 800157e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001582:	609a      	str	r2, [r3, #8]
#endif
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001596:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490e      	ldr	r1, [pc, #56]	; (80015d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0b      	ldr	r4, [pc, #44]	; (80015e0 <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015be:	f7ff ffd3 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f008 fb1f 	bl	8009c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c6:	f7fe fef3 	bl	80003b0 <main>

080015ca <LoopForever>:

LoopForever:
    b LoopForever
 80015ca:	e7fe      	b.n	80015ca <LoopForever>
  ldr   r0, =_estack
 80015cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80015d8:	08009cec 	.word	0x08009cec
  ldr r2, =_sbss
 80015dc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80015e0:	20001648 	.word	0x20001648

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>

080015e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f939 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f80e 	bl	8001618 <HAL_InitTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	71fb      	strb	r3, [r7, #7]
 8001606:	e001      	b.n	800160c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001608:	f7ff fd08 	bl	800101c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800160c:	79fb      	ldrb	r3, [r7, #7]

}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_InitTick+0x68>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d022      	beq.n	8001672 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_InitTick+0x6c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_InitTick+0x68>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001638:	fbb1 f3f3 	udiv	r3, r1, r3
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f944 	bl	80018ce <HAL_SYSTICK_Config>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10f      	bne.n	800166c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	d809      	bhi.n	8001666 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001652:	2200      	movs	r2, #0
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	f04f 30ff 	mov.w	r0, #4294967295
 800165a:	f000 f910 	bl	800187e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_InitTick+0x70>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e007      	b.n	8001676 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e004      	b.n	8001676 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000008 	.word	0x20000008
 8001684:	20000000 	.word	0x20000000
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x1c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_IncTick+0x20>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4413      	add	r3, r2
 800169a:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_IncTick+0x1c>)
 800169c:	6013      	str	r3, [r2, #0]
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	200006b0 	.word	0x200006b0
 80016ac:	20000008 	.word	0x20000008

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200006b0 	.word	0x200006b0

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff29 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff40 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff90 	bl	80017bc <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5f 	bl	8001768 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff33 	bl	800172c <__NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffa4 	bl	8001824 <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018f6:	e15a      	b.n	8001bae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 814c 	beq.w	8001ba8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d00b      	beq.n	8001930 <HAL_GPIO_Init+0x48>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001924:	2b11      	cmp	r3, #17
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b12      	cmp	r3, #18
 800192e:	d130      	bne.n	8001992 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001966:	2201      	movs	r2, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 0201 	and.w	r2, r3, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0xea>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b12      	cmp	r3, #18
 80019d0:	d123      	bne.n	8001a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	6939      	ldr	r1, [r7, #16]
 8001a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0203 	and.w	r2, r3, #3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a6 	beq.w	8001ba8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5c:	4b5b      	ldr	r3, [pc, #364]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a60:	4a5a      	ldr	r2, [pc, #360]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6613      	str	r3, [r2, #96]	; 0x60
 8001a68:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a74:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a9e:	d01f      	beq.n	8001ae0 <HAL_GPIO_Init+0x1f8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a4c      	ldr	r2, [pc, #304]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d019      	beq.n	8001adc <HAL_GPIO_Init+0x1f4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <HAL_GPIO_Init+0x2f0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_GPIO_Init+0x1f0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a4a      	ldr	r2, [pc, #296]	; (8001bdc <HAL_GPIO_Init+0x2f4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_GPIO_Init+0x1ec>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_GPIO_Init+0x2f8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x2fc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_GPIO_Init+0x1e4>
 8001ac8:	2305      	movs	r3, #5
 8001aca:	e00a      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001acc:	2306      	movs	r3, #6
 8001ace:	e008      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e004      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_GPIO_Init+0x1fa>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	f002 0203 	and.w	r2, r2, #3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4093      	lsls	r3, r2
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af2:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4e:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <HAL_GPIO_Init+0x300>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f47f ae9d 	bne.w	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48001000 	.word	0x48001000
 8001be4:	48001400 	.word	0x48001400
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e001      	b.n	8001c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43d9      	mvns	r1, r3
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	619a      	str	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	af06      	add	r7, sp, #24
 8001c86:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0d7      	b.n	8001e42 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f007 fcbc 	bl	8009624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2203      	movs	r2, #3
 8001cb0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fe18 	bl	80058ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e04c      	b.n	8001d5e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b298      	uxth	r0, r3
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3336      	adds	r3, #54	; 0x36
 8001d02:	4602      	mov	r2, r0
 8001d04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	3303      	adds	r3, #3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3338      	adds	r3, #56	; 0x38
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	333c      	adds	r3, #60	; 0x3c
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3ad      	bcc.n	8001cc4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e044      	b.n	8001df8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	3301      	adds	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3b5      	bcc.n	8001d6e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	687e      	ldr	r6, [r7, #4]
 8001e0a:	466d      	mov	r5, sp
 8001e0c:	f106 0410 	add.w	r4, r6, #16
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	602b      	str	r3, [r5, #0]
 8001e18:	1d33      	adds	r3, r6, #4
 8001e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f003 fd81 	bl	8005924 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f001 fa5e 	bl	80032fc <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_PCD_Start+0x16>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e012      	b.n	8001e86 <HAL_PCD_Start+0x3c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fd27 	bl	80058c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f005 fd13 	bl	80078a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fd18 	bl	80078d0 <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fb5b 	bl	8002568 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 fd0a 	bl	80078d0 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec6:	d112      	bne.n	8001eee <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eda:	b292      	uxth	r2, r2
 8001edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f007 fc1a 	bl	800971a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f91e 	bl	800212a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 fcec 	bl	80078d0 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f02:	d10b      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f005 fcd5 	bl	80078d0 <USB_ReadInterrupts>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f30:	d10b      	bne.n	8001f4a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f005 fcbe 	bl	80078d0 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5e:	d133      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	b292      	uxth	r2, r2
 8001f74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0208 	bic.w	r2, r2, #8
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f007 fdad 	bl	8009b04 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f007 fbee 	bl	800978c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f005 fc7f 	bl	80078d0 <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fdc:	d126      	bne.n	800202c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0208 	orr.w	r2, r2, #8
 8001ff0:	b292      	uxth	r2, r2
 8001ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002008:	b292      	uxth	r2, r2
 800200a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002016:	b29a      	uxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0204 	orr.w	r2, r2, #4
 8002020:	b292      	uxth	r2, r2
 8002022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f007 fb96 	bl	8009758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f005 fc4d 	bl	80078d0 <USB_ReadInterrupts>
 8002036:	4603      	mov	r3, r0
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b80      	cmp	r3, #128	; 0x80
 800203e:	d13f      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002052:	b292      	uxth	r2, r2
 8002054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d12b      	bne.n	80020ba <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0204 	orr.w	r2, r2, #4
 8002074:	b292      	uxth	r2, r2
 8002076:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0208 	orr.w	r2, r2, #8
 800208c:	b292      	uxth	r2, r2
 800208e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020b0:	2101      	movs	r1, #1
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f007 fd26 	bl	8009b04 <HAL_PCDEx_LPM_Callback>
 80020b8:	e002      	b.n	80020c0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f007 fb4c 	bl	8009758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 fc03 	bl	80078d0 <USB_ReadInterrupts>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d10e      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020e8:	b292      	uxth	r2, r2
 80020ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f007 fb05 	bl	80096fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f005 fbe9 	bl	80078d0 <USB_ReadInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002108:	d10b      	bne.n	8002122 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800211c:	b292      	uxth	r2, r2
 800211e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_PCD_SetAddress+0x1a>
 8002140:	2302      	movs	r3, #2
 8002142:	e013      	b.n	800216c <HAL_PCD_SetAddress+0x42>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f005 fb8c 	bl	800787a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4603      	mov	r3, r0
 8002184:	70fb      	strb	r3, [r7, #3]
 8002186:	460b      	mov	r3, r1
 8002188:	803b      	strh	r3, [r7, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	da0e      	bge.n	80021b8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	705a      	strb	r2, [r3, #1]
 80021b6:	e00e      	b.n	80021d6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021e2:	883a      	ldrh	r2, [r7, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	78ba      	ldrb	r2, [r7, #2]
 80021ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002200:	78bb      	ldrb	r3, [r7, #2]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d102      	bne.n	800220c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_EP_Open+0xa6>
 8002216:	2302      	movs	r3, #2
 8002218:	e00e      	b.n	8002238 <HAL_PCD_EP_Open+0xc4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fb9d 	bl	8005968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002236:	7afb      	ldrb	r3, [r7, #11]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800224c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da0e      	bge.n	8002272 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	705a      	strb	r2, [r3, #1]
 8002270:	e00e      	b.n	8002290 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	f003 0207 	and.w	r2, r3, #7
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_EP_Close+0x6a>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e00e      	b.n	80022c8 <HAL_PCD_EP_Close+0x88>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68f9      	ldr	r1, [r7, #12]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fec3 	bl	8006044 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	f003 0207 	and.w	r2, r3, #7
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 f876 	bl	800641e <USB_EPStartXfer>
 8002332:	e005      	b.n	8002340 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	4618      	mov	r0, r3
 800233c:	f004 f86f 	bl	800641e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 0207 	and.w	r2, r3, #7
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800236c:	681b      	ldr	r3, [r3, #0]
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	460b      	mov	r3, r1
 8002388:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238a:	7afb      	ldrb	r3, [r7, #11]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2201      	movs	r2, #1
 80023c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6979      	ldr	r1, [r7, #20]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 f81b 	bl	800641e <USB_EPStartXfer>
 80023e8:	e005      	b.n	80023f6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6979      	ldr	r1, [r7, #20]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 f814 	bl	800641e <USB_EPStartXfer>
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 0207 	and.w	r2, r3, #7
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d901      	bls.n	800241e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e04c      	b.n	80024b8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800241e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da0e      	bge.n	8002444 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	705a      	strb	r2, [r3, #1]
 8002442:	e00c      	b.n	800245e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_SetStall+0x7e>
 800247a:	2302      	movs	r3, #2
 800247c:	e01c      	b.n	80024b8 <HAL_PCD_EP_SetStall+0xb8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f005 f8f5 	bl	800767c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f005 fa21 	bl	80078f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f003 020f 	and.w	r2, r3, #15
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d901      	bls.n	80024de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e040      	b.n	8002560 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da0e      	bge.n	8002504 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	705a      	strb	r2, [r3, #1]
 8002502:	e00e      	b.n	8002522 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 0207 	and.w	r2, r3, #7
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_PCD_EP_ClrStall+0x82>
 800253e:	2302      	movs	r3, #2
 8002540:	e00e      	b.n	8002560 <HAL_PCD_EP_ClrStall+0xa0>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	4618      	mov	r0, r3
 8002552:	f005 f8e4 	bl	800771e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	; 0x38
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002570:	e2d1      	b.n	8002b16 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800257a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800257c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002588:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 8152 	bne.w	8002836 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002592:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d150      	bne.n	800263e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ac:	81fb      	strh	r3, [r7, #14]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	89fb      	ldrh	r3, [r7, #14]
 80025b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025bc:	b29b      	uxth	r3, r3
 80025be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3328      	adds	r3, #40	; 0x28
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	441a      	add	r2, r3
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025fc:	2100      	movs	r1, #0
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f007 f863 	bl	80096ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8282 	beq.w	8002b16 <PCD_EP_ISR_Handler+0x5ae>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 827d 	bne.w	8002b16 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002628:	b2da      	uxtb	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b292      	uxth	r2, r2
 8002630:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800263c:	e26b      	b.n	8002b16 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800264e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002654:	2b00      	cmp	r3, #0
 8002656:	d032      	beq.n	80026be <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4413      	add	r3, r2
 8002672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002692:	b29b      	uxth	r3, r3
 8002694:	f005 f979 	bl	800798a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026a4:	4013      	ands	r3, r2
 80026a6:	823b      	strh	r3, [r7, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	8a3a      	ldrh	r2, [r7, #16]
 80026ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b2:	b292      	uxth	r2, r2
 80026b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f006 ffda 	bl	8009670 <HAL_PCD_SetupStageCallback>
 80026bc:	e22b      	b.n	8002b16 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f280 8227 	bge.w	8002b16 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026d4:	4013      	ands	r3, r2
 80026d6:	83bb      	strh	r3, [r7, #28]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	8bba      	ldrh	r2, [r7, #28]
 80026de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e2:	b292      	uxth	r2, r2
 80026e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <PCD_EP_ISR_Handler+0x1e2>
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	6959      	ldr	r1, [r3, #20]
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800272e:	b29b      	uxth	r3, r3
 8002730:	f005 f92b 	bl	800798a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	441a      	add	r2, r3
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f006 ffa5 	bl	8009694 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d112      	bne.n	8002798 <PCD_EP_ISR_Handler+0x230>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800277c:	b29a      	uxth	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	801a      	strh	r2, [r3, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002790:	b29a      	uxth	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	e02f      	b.n	80027f8 <PCD_EP_ISR_Handler+0x290>
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b3e      	cmp	r3, #62	; 0x3e
 800279e:	d813      	bhi.n	80027c8 <PCD_EP_ISR_Handler+0x260>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <PCD_EP_ISR_Handler+0x252>
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	3301      	adds	r3, #1
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	b29b      	uxth	r3, r3
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	e017      	b.n	80027f8 <PCD_EP_ISR_Handler+0x290>
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	633b      	str	r3, [r7, #48]	; 0x30
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <PCD_EP_ISR_Handler+0x27a>
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	3b01      	subs	r3, #1
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	827b      	strh	r3, [r7, #18]
 800280a:	8a7b      	ldrh	r3, [r7, #18]
 800280c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002810:	827b      	strh	r3, [r7, #18]
 8002812:	8a7b      	ldrh	r3, [r7, #18]
 8002814:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002818:	827b      	strh	r3, [r7, #18]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	8a7b      	ldrh	r3, [r7, #18]
 8002820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	b29b      	uxth	r3, r3
 8002832:	8013      	strh	r3, [r2, #0]
 8002834:	e16f      	b.n	8002b16 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002848:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800284c:	2b00      	cmp	r3, #0
 800284e:	f280 80e4 	bge.w	8002a1a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29a      	uxth	r2, r3
 8002864:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002868:	4013      	ands	r3, r2
 800286a:	853b      	strh	r3, [r7, #40]	; 0x28
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800287c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002880:	b292      	uxth	r2, r2
 8002882:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002884:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	7b1b      	ldrb	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d120      	bne.n	80028e4 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80028c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8083 	beq.w	80029d6 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	6959      	ldr	r1, [r3, #20]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	88da      	ldrh	r2, [r3, #6]
 80028dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028de:	f005 f854 	bl	800798a <USB_ReadPMA>
 80028e2:	e078      	b.n	80029d6 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	78db      	ldrb	r3, [r3, #3]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d108      	bne.n	80028fe <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028ee:	461a      	mov	r2, r3
 80028f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f91d 	bl	8002b32 <HAL_PCD_EP_DB_Receive>
 80028f8:	4603      	mov	r3, r0
 80028fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028fc:	e06b      	b.n	80029d6 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002918:	847b      	strh	r3, [r7, #34]	; 0x22
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	441a      	add	r2, r3
 8002928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800292a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800293a:	b29b      	uxth	r3, r3
 800293c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01f      	beq.n	8002998 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	4413      	add	r3, r2
 8002972:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800297e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002980:	2b00      	cmp	r3, #0
 8002982:	d028      	beq.n	80029d6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	6959      	ldr	r1, [r3, #20]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	891a      	ldrh	r2, [r3, #8]
 8002990:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002992:	f004 fffa 	bl	800798a <USB_ReadPMA>
 8002996:	e01e      	b.n	80029d6 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029bc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	6959      	ldr	r1, [r3, #20]
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	895a      	ldrh	r2, [r3, #10]
 80029d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029d2:	f004 ffda 	bl	800798a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029dc:	441a      	add	r2, r3
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029e8:	441a      	add	r2, r3
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <PCD_EP_ISR_Handler+0x498>
 80029f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d206      	bcs.n	8002a0e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f006 fe44 	bl	8009694 <HAL_PCD_DataOutStageCallback>
 8002a0c:	e005      	b.n	8002a1a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 fd02 	bl	800641e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d078      	beq.n	8002b16 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	843b      	strh	r3, [r7, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	8c3b      	ldrh	r3, [r7, #32]
 8002a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	78db      	ldrb	r3, [r3, #3]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d108      	bne.n	8002a8a <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d144      	bne.n	8002b0a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d13f      	bne.n	8002b0a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aae:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	8bfb      	ldrh	r3, [r7, #30]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d906      	bls.n	8002ac8 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	8bfb      	ldrh	r3, [r7, #30]
 8002ac0:	1ad2      	subs	r2, r2, r3
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	619a      	str	r2, [r3, #24]
 8002ac6:	e002      	b.n	8002ace <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f006 fdf4 	bl	80096ca <HAL_PCD_DataInStageCallback>
 8002ae2:	e018      	b.n	8002b16 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	8bfb      	ldrh	r3, [r7, #30]
 8002aea:	441a      	add	r2, r3
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	8bfb      	ldrh	r3, [r7, #30]
 8002af6:	441a      	add	r2, r3
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 fc8b 	bl	800641e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b08:	e005      	b.n	8002b16 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f917 	bl	8002d44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b21b      	sxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f6ff ad25 	blt.w	8002572 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3738      	adds	r7, #56	; 0x38
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07c      	beq.n	8002c44 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	8b7b      	ldrh	r3, [r7, #26]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d306      	bcc.n	8002b88 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	8b7b      	ldrh	r3, [r7, #26]
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	e002      	b.n	8002b8e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d123      	bne.n	8002bde <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb0:	833b      	strh	r3, [r7, #24]
 8002bb2:	8b3b      	ldrh	r3, [r7, #24]
 8002bb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bb8:	833b      	strh	r3, [r7, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	441a      	add	r2, r3
 8002bc8:	8b3b      	ldrh	r3, [r7, #24]
 8002bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01f      	beq.n	8002c28 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	82fb      	strh	r3, [r7, #22]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	441a      	add	r2, r3
 8002c12:	8afb      	ldrh	r3, [r7, #22]
 8002c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8085 	beq.w	8002d3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	6959      	ldr	r1, [r3, #20]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	891a      	ldrh	r2, [r3, #8]
 8002c3c:	8b7b      	ldrh	r3, [r7, #26]
 8002c3e:	f004 fea4 	bl	800798a <USB_ReadPMA>
 8002c42:	e07a      	b.n	8002d3a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	8b7b      	ldrh	r3, [r7, #26]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d306      	bcc.n	8002c82 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	8b7b      	ldrh	r3, [r7, #26]
 8002c7a:	1ad2      	subs	r2, r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	619a      	str	r2, [r3, #24]
 8002c80:	e002      	b.n	8002c88 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d123      	bne.n	8002cd8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	83fb      	strh	r3, [r7, #30]
 8002cac:	8bfb      	ldrh	r3, [r7, #30]
 8002cae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cb2:	83fb      	strh	r3, [r7, #30]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	8bfb      	ldrh	r3, [r7, #30]
 8002cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11f      	bne.n	8002d22 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfc:	83bb      	strh	r3, [r7, #28]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	441a      	add	r2, r3
 8002d0c:	8bbb      	ldrh	r3, [r7, #28]
 8002d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d22:	8b7b      	ldrh	r3, [r7, #26]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6959      	ldr	r1, [r3, #20]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	895a      	ldrh	r2, [r3, #10]
 8002d34:	8b7b      	ldrh	r3, [r7, #26]
 8002d36:	f004 fe28 	bl	800798a <USB_ReadPMA>
    }
  }

  return count;
 8002d3a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b092      	sub	sp, #72	; 0x48
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8130 	beq.w	8002fbe <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d82:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d906      	bls.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d94:	1ad2      	subs	r2, r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e002      	b.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d12c      	bne.n	8002e04 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f006 fc8a 	bl	80096ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 822d 	beq.w	800321c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ddc:	827b      	strh	r3, [r7, #18]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	441a      	add	r2, r3
 8002dec:	8a7b      	ldrh	r3, [r7, #18]
 8002dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	8013      	strh	r3, [r2, #0]
 8002e02:	e20b      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01f      	beq.n	8002e4e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f040 81e1 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e60:	441a      	add	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	69da      	ldr	r2, [r3, #28]
 8002e6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e6c:	441a      	add	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6a1a      	ldr	r2, [r3, #32]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d309      	bcc.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	1ad2      	subs	r2, r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	621a      	str	r2, [r3, #32]
 8002e90:	e014      	b.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002e9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ea6:	e009      	b.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d155      	bne.n	8002f70 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	00da      	lsls	r2, r3, #3
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d112      	bne.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	e047      	b.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f1c:	d811      	bhi.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	3301      	adds	r3, #1
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	029b      	lsls	r3, r3, #10
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	e032      	b.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_PCD_EP_DB_Transmit+0x214>
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	e01b      	b.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d117      	bne.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	623b      	str	r3, [r7, #32]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	00da      	lsls	r2, r3, #3
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6959      	ldr	r1, [r3, #20]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	891a      	ldrh	r2, [r3, #8]
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f004 fca6 	bl	8007908 <USB_WritePMA>
 8002fbc:	e12e      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d306      	bcc.n	8002ffc <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ff4:	1ad2      	subs	r2, r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	e002      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d12c      	bne.n	8003064 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4619      	mov	r1, r3
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f006 fb5a 	bl	80096ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 80fd 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]
 8003062:	e0db      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11f      	bne.n	80030ae <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003088:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	441a      	add	r2, r3
 8003098:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800309a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 80b1 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030c0:	441a      	add	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030cc:	441a      	add	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d309      	bcc.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6a1a      	ldr	r2, [r3, #32]
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	621a      	str	r2, [r3, #32]
 80030f0:	e014      	b.n	800311c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80030fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003106:	e009      	b.n	800311c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	637b      	str	r3, [r7, #52]	; 0x34
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d155      	bne.n	80031d6 <HAL_PCD_EP_DB_Transmit+0x492>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	647b      	str	r3, [r7, #68]	; 0x44
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313e:	4413      	add	r3, r2
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00da      	lsls	r2, r3, #3
 8003148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314a:	4413      	add	r3, r2
 800314c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003150:	643b      	str	r3, [r7, #64]	; 0x40
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	2b00      	cmp	r3, #0
 8003156:	d112      	bne.n	800317e <HAL_PCD_EP_DB_Transmit+0x43a>
 8003158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003162:	b29a      	uxth	r2, r3
 8003164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003176:	b29a      	uxth	r2, r3
 8003178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	e044      	b.n	8003208 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2b3e      	cmp	r3, #62	; 0x3e
 8003182:	d811      	bhi.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x464>
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_PCD_EP_DB_Transmit+0x456>
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003196:	3301      	adds	r3, #1
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319c:	b29b      	uxth	r3, r3
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	e02f      	b.n	8003208 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <HAL_PCD_EP_DB_Transmit+0x47a>
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	3b01      	subs	r3, #1
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	029b      	lsls	r3, r3, #10
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d2:	801a      	strh	r2, [r3, #0]
 80031d4:	e018      	b.n	8003208 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d114      	bne.n	8003208 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ec:	4413      	add	r3, r2
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	00da      	lsls	r2, r3, #3
 80031f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f8:	4413      	add	r3, r2
 80031fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	b29a      	uxth	r2, r3
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6959      	ldr	r1, [r3, #20]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	895a      	ldrh	r2, [r3, #10]
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	b29b      	uxth	r3, r3
 8003218:	f004 fb76 	bl	8007908 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003236:	823b      	strh	r3, [r7, #16]
 8003238:	8a3b      	ldrh	r3, [r7, #16]
 800323a:	f083 0310 	eor.w	r3, r3, #16
 800323e:	823b      	strh	r3, [r7, #16]
 8003240:	8a3b      	ldrh	r3, [r7, #16]
 8003242:	f083 0320 	eor.w	r3, r3, #32
 8003246:	823b      	strh	r3, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	8a3b      	ldrh	r3, [r7, #16]
 8003258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	b29b      	uxth	r3, r3
 800326a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3748      	adds	r7, #72	; 0x48
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003276:	b480      	push	{r7}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
 8003284:	4613      	mov	r3, r2
 8003286:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003288:	897b      	ldrh	r3, [r7, #10]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e009      	b.n	80032c0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ac:	897a      	ldrh	r2, [r7, #10]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	80da      	strh	r2, [r3, #6]
 80032d4:	e00b      	b.n	80032ee <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2201      	movs	r2, #1
 80032da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003320:	b29b      	uxth	r3, r3
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003334:	b29b      	uxth	r3, r3
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d141      	bne.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800335e:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d131      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800336c:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	4a46      	ldr	r2, [pc, #280]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003384:	4a41      	ldr	r2, [pc, #260]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800338c:	4b40      	ldr	r3, [pc, #256]	; (8003490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2232      	movs	r2, #50	; 0x32
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4a3f      	ldr	r2, [pc, #252]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	0c9b      	lsrs	r3, r3, #18
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a2:	e002      	b.n	80033aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033aa:	4b38      	ldr	r3, [pc, #224]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d102      	bne.n	80033be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f2      	bne.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ca:	d158      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e057      	b.n	8003480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033d0:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d6:	4a2d      	ldr	r2, [pc, #180]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033e0:	e04d      	b.n	800347e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d141      	bne.n	800346e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d131      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	4a23      	ldr	r2, [pc, #140]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003408:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003410:	4a1e      	ldr	r2, [pc, #120]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003416:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2232      	movs	r2, #50	; 0x32
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9b      	lsrs	r3, r3, #18
 800342a:	3301      	adds	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800342e:	e002      	b.n	8003436 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b01      	subs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d102      	bne.n	800344a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f2      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003456:	d112      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e011      	b.n	8003480 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800346c:	e007      	b.n	800347e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800347c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40007000 	.word	0x40007000
 8003490:	20000000 	.word	0x20000000
 8003494:	431bde83 	.word	0x431bde83

08003498 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a6:	6093      	str	r3, [r2, #8]
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40007000 	.word	0x40007000

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e308      	b.n	8003adc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d075      	beq.n	80035c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d6:	4ba3      	ldr	r3, [pc, #652]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e0:	4ba0      	ldr	r3, [pc, #640]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d102      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3e>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_OscConfig+0x44>
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d10b      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	4b99      	ldr	r3, [pc, #612]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05b      	beq.n	80035c0 <HAL_RCC_OscConfig+0x108>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d157      	bne.n	80035c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e2e3      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d106      	bne.n	800352c <HAL_RCC_OscConfig+0x74>
 800351e:	4b91      	ldr	r3, [pc, #580]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a90      	ldr	r2, [pc, #576]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x98>
 8003536:	4b8b      	ldr	r3, [pc, #556]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a8a      	ldr	r2, [pc, #552]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b88      	ldr	r3, [pc, #544]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a87      	ldr	r2, [pc, #540]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 8003550:	4b84      	ldr	r3, [pc, #528]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a83      	ldr	r2, [pc, #524]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b81      	ldr	r3, [pc, #516]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a80      	ldr	r2, [pc, #512]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe f89e 	bl	80016b0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe f89a 	bl	80016b0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e2a8      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358a:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0xc0>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe f88a 	bl	80016b0 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe f886 	bl	80016b0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e294      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b2:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0xe8>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d075      	beq.n	80036ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ce:	4b65      	ldr	r3, [pc, #404]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035d8:	4b62      	ldr	r3, [pc, #392]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d102      	bne.n	80035ee <HAL_RCC_OscConfig+0x136>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d002      	beq.n	80035f4 <HAL_RCC_OscConfig+0x13c>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11f      	bne.n	8003634 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f4:	4b5b      	ldr	r3, [pc, #364]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x154>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e267      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b55      	ldr	r3, [pc, #340]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	061b      	lsls	r3, r3, #24
 800361a:	4952      	ldr	r1, [pc, #328]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003620:	4b51      	ldr	r3, [pc, #324]	; (8003768 <HAL_RCC_OscConfig+0x2b0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fff7 	bl	8001618 <HAL_InitTick>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d043      	beq.n	80036b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e253      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363c:	4b49      	ldr	r3, [pc, #292]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a48      	ldr	r2, [pc, #288]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe f832 	bl	80016b0 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003650:	f7fe f82e 	bl	80016b0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e23c      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	061b      	lsls	r3, r3, #24
 800367c:	4939      	ldr	r1, [pc, #228]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
 8003682:	e01a      	b.n	80036ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003684:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a36      	ldr	r2, [pc, #216]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe f80e 	bl	80016b0 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe f80a 	bl	80016b0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e218      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036aa:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1e0>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d03c      	beq.n	8003740 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01c      	beq.n	8003708 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d4:	4a23      	ldr	r2, [pc, #140]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fd ffe7 	bl	80016b0 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fd ffe3 	bl	80016b0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1f1      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0ef      	beq.n	80036e6 <HAL_RCC_OscConfig+0x22e>
 8003706:	e01b      	b.n	8003740 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370e:	4a15      	ldr	r2, [pc, #84]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd ffca 	bl	80016b0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003720:	f7fd ffc6 	bl	80016b0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1d4      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ef      	bne.n	8003720 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80ab 	beq.w	80038a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_RCC_OscConfig+0x2b4>
 800375e:	2301      	movs	r3, #1
 8003760:	e005      	b.n	800376e <HAL_RCC_OscConfig+0x2b6>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	20000004 	.word	0x20000004
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	4baf      	ldr	r3, [pc, #700]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	4aae      	ldr	r2, [pc, #696]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6593      	str	r3, [r2, #88]	; 0x58
 800377e:	4bac      	ldr	r3, [pc, #688]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378e:	4ba9      	ldr	r3, [pc, #676]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379a:	4ba6      	ldr	r3, [pc, #664]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4aa5      	ldr	r2, [pc, #660]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fd ff83 	bl	80016b0 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd ff7f 	bl	80016b0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e18d      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c0:	4b9c      	ldr	r3, [pc, #624]	; (8003a34 <HAL_RCC_OscConfig+0x57c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d108      	bne.n	80037e6 <HAL_RCC_OscConfig+0x32e>
 80037d4:	4b96      	ldr	r3, [pc, #600]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	4a95      	ldr	r2, [pc, #596]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e4:	e024      	b.n	8003830 <HAL_RCC_OscConfig+0x378>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d110      	bne.n	8003810 <HAL_RCC_OscConfig+0x358>
 80037ee:	4b90      	ldr	r3, [pc, #576]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	4a8e      	ldr	r2, [pc, #568]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037fe:	4b8c      	ldr	r3, [pc, #560]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	4a8a      	ldr	r2, [pc, #552]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380e:	e00f      	b.n	8003830 <HAL_RCC_OscConfig+0x378>
 8003810:	4b87      	ldr	r3, [pc, #540]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	4a86      	ldr	r2, [pc, #536]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003820:	4b83      	ldr	r3, [pc, #524]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	4a82      	ldr	r2, [pc, #520]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d016      	beq.n	8003866 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fd ff3a 	bl	80016b0 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fd ff36 	bl	80016b0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e142      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ed      	beq.n	8003840 <HAL_RCC_OscConfig+0x388>
 8003864:	e015      	b.n	8003892 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fd ff23 	bl	80016b0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd ff1f 	bl	80016b0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e12b      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003884:	4b6a      	ldr	r3, [pc, #424]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ed      	bne.n	800386e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003892:	7ffb      	ldrb	r3, [r7, #31]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03c      	beq.n	800392a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038b8:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038be:	4a5c      	ldr	r2, [pc, #368]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fef2 	bl	80016b0 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038d0:	f7fd feee 	bl	80016b0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0fc      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038e2:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ef      	beq.n	80038d0 <HAL_RCC_OscConfig+0x418>
 80038f0:	e01b      	b.n	800392a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038f2:	4b4f      	ldr	r3, [pc, #316]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f8:	4a4d      	ldr	r2, [pc, #308]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fd fed5 	bl	80016b0 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800390a:	f7fd fed1 	bl	80016b0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0df      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800391c:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800391e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1ef      	bne.n	800390a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80d3 	beq.w	8003ada <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003934:	4b3e      	ldr	r3, [pc, #248]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b0c      	cmp	r3, #12
 800393e:	f000 808d 	beq.w	8003a5c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d15a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a38      	ldr	r2, [pc, #224]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd feab 	bl	80016b0 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395e:	f7fd fea7 	bl	80016b0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0b5      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003970:	4b2f      	ldr	r3, [pc, #188]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <HAL_RCC_OscConfig+0x580>)
 8003982:	4013      	ands	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6a11      	ldr	r1, [r2, #32]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398c:	3a01      	subs	r2, #1
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	4311      	orrs	r1, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003996:	0212      	lsls	r2, r2, #8
 8003998:	4311      	orrs	r1, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800399e:	0852      	lsrs	r2, r2, #1
 80039a0:	3a01      	subs	r2, #1
 80039a2:	0552      	lsls	r2, r2, #21
 80039a4:	4311      	orrs	r1, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039aa:	0852      	lsrs	r2, r2, #1
 80039ac:	3a01      	subs	r2, #1
 80039ae:	0652      	lsls	r2, r2, #25
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039b6:	06d2      	lsls	r2, r2, #27
 80039b8:	430a      	orrs	r2, r1
 80039ba:	491d      	ldr	r1, [pc, #116]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fe6a 	bl	80016b0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fd fe66 	bl	80016b0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e074      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x528>
 80039fe:	e06c      	b.n	8003ada <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003a12:	f023 0303 	bic.w	r3, r3, #3
 8003a16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_RCC_OscConfig+0x578>)
 8003a1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd fe42 	bl	80016b0 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2e:	e00e      	b.n	8003a4e <HAL_RCC_OscConfig+0x596>
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40007000 	.word	0x40007000
 8003a38:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd fe38 	bl	80016b0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e046      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4e:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_RCC_OscConfig+0x62c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x584>
 8003a5a:	e03e      	b.n	8003ada <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e039      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <HAL_RCC_OscConfig+0x62c>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0203 	and.w	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d12c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	3b01      	subs	r3, #1
 8003a88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d123      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11b      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d113      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	3b01      	subs	r3, #1
 8003abc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e11e      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b91      	ldr	r3, [pc, #580]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	498c      	ldr	r1, [pc, #560]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b8a      	ldr	r3, [pc, #552]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e106      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d073      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d129      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	4b81      	ldr	r3, [pc, #516]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0f4      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b54:	f000 f966 	bl	8003e24 <RCC_GetSysClockFreqFromPLLSource>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a7c      	ldr	r2, [pc, #496]	; (8003d50 <HAL_RCC_ClockConfig+0x268>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d93f      	bls.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b62:	4b7a      	ldr	r3, [pc, #488]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d033      	beq.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12f      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b82:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8a:	4a70      	ldr	r2, [pc, #448]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e024      	b.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba0:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0c6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb0:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0be      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bc0:	f000 f8ce 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4a61      	ldr	r2, [pc, #388]	; (8003d50 <HAL_RCC_ClockConfig+0x268>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d909      	bls.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bce:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd6:	4a5d      	ldr	r2, [pc, #372]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b5a      	ldr	r3, [pc, #360]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4957      	ldr	r1, [pc, #348]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fd5c 	bl	80016b0 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fd fd58 	bl	80016b0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e095      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b4e      	ldr	r3, [pc, #312]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c3c:	4b43      	ldr	r3, [pc, #268]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a42      	ldr	r2, [pc, #264]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c54:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c5c:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4936      	ldr	r1, [pc, #216]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	d105      	bne.n	8003c8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c7e:	4b33      	ldr	r3, [pc, #204]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a32      	ldr	r2, [pc, #200]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8a:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d21d      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c98:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 020f 	bic.w	r2, r3, #15
 8003ca0:	4929      	ldr	r1, [pc, #164]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fd02 	bl	80016b0 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fd fcfe 	bl	80016b0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e03b      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1ed      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4917      	ldr	r1, [pc, #92]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	490f      	ldr	r1, [pc, #60]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d12:	f000 f825 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d16:	4601      	mov	r1, r0
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <HAL_RCC_ClockConfig+0x26c>)
 8003d24:	5cd3      	ldrb	r3, [r2, r3]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x270>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x274>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fc6e 	bl	8001618 <HAL_InitTick>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40022000 	.word	0x40022000
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	04c4b400 	.word	0x04c4b400
 8003d54:	08009cd4 	.word	0x08009cd4
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d66:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d102      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e047      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	e03e      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d8a:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d136      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3301      	adds	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d10c      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbe:	68d2      	ldr	r2, [r2, #12]
 8003dc0:	0a12      	lsrs	r2, r2, #8
 8003dc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
      break;
 8003dcc:	e00c      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	4a10      	ldr	r2, [pc, #64]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd8:	68d2      	ldr	r2, [r2, #12]
 8003dda:	0a12      	lsrs	r2, r2, #8
 8003ddc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
      break;
 8003de6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e001      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e08:	693b      	ldr	r3, [r7, #16]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d10c      	bne.n	8003e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e52:	68d2      	ldr	r2, [r2, #12]
 8003e54:	0a12      	lsrs	r2, r2, #8
 8003e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	617b      	str	r3, [r7, #20]
    break;
 8003e60:	e00c      	b.n	8003e7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e6c:	68d2      	ldr	r2, [r2, #12]
 8003e6e:	0a12      	lsrs	r2, r2, #8
 8003e70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
    break;
 8003e7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0e5b      	lsrs	r3, r3, #25
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e96:	687b      	ldr	r3, [r7, #4]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	007a1200 	.word	0x007a1200
 8003eac:	00f42400 	.word	0x00f42400

08003eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eb8:	2300      	movs	r3, #0
 8003eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8098 	beq.w	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed2:	4b43      	ldr	r3, [pc, #268]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10d      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	4b40      	ldr	r3, [pc, #256]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4a3f      	ldr	r2, [pc, #252]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eea:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efa:	4b3a      	ldr	r3, [pc, #232]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a39      	ldr	r2, [pc, #228]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f06:	f7fd fbd3 	bl	80016b0 <HAL_GetTick>
 8003f0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0c:	e009      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fd fbcf 	bl	80016b0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d902      	bls.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f20:	e005      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ef      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d159      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f34:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f7c:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fb8f 	bl	80016b0 <HAL_GetTick>
 8003f92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f94:	e00b      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fd fb8b 	bl	80016b0 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d902      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	74fb      	strb	r3, [r7, #19]
            break;
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ec      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4903      	ldr	r1, [pc, #12]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd8:	e008      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	74bb      	strb	r3, [r7, #18]
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fec:	7c7b      	ldrb	r3, [r7, #17]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4ba6      	ldr	r3, [pc, #664]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	4aa5      	ldr	r2, [pc, #660]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400a:	4ba0      	ldr	r3, [pc, #640]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f023 0203 	bic.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	499c      	ldr	r1, [pc, #624]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402c:	4b97      	ldr	r3, [pc, #604]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f023 020c 	bic.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4994      	ldr	r1, [pc, #592]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404e:	4b8f      	ldr	r3, [pc, #572]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	498b      	ldr	r1, [pc, #556]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004070:	4b86      	ldr	r3, [pc, #536]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4983      	ldr	r1, [pc, #524]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004092:	4b7e      	ldr	r3, [pc, #504]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	497a      	ldr	r1, [pc, #488]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b4:	4b75      	ldr	r3, [pc, #468]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	4972      	ldr	r1, [pc, #456]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040d6:	4b6d      	ldr	r3, [pc, #436]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	4969      	ldr	r1, [pc, #420]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f8:	4b64      	ldr	r3, [pc, #400]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4961      	ldr	r1, [pc, #388]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411a:	4b5c      	ldr	r3, [pc, #368]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	4958      	ldr	r1, [pc, #352]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d015      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	4950      	ldr	r1, [pc, #320]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a4a      	ldr	r2, [pc, #296]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004166:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004174:	4b45      	ldr	r3, [pc, #276]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4942      	ldr	r1, [pc, #264]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a3c      	ldr	r2, [pc, #240]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ca:	d105      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a2e      	ldr	r2, [pc, #184]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e4:	4b29      	ldr	r3, [pc, #164]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	4926      	ldr	r1, [pc, #152]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004202:	d105      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004204:	4b21      	ldr	r3, [pc, #132]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	4918      	ldr	r1, [pc, #96]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423a:	d105      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	490a      	ldr	r1, [pc, #40]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a04      	ldr	r2, [pc, #16]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004280:	7cbb      	ldrb	r3, [r7, #18]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000

08004290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e049      	b.n	8004336 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc ffde 	bl	8001278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f000 fde2 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e04a      	b.n	80043ee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a21      	ldr	r2, [pc, #132]	; (80043fc <HAL_TIM_Base_Start_IT+0xbc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004382:	d013      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_TIM_Base_Start_IT+0xc0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_TIM_Base_Start_IT+0xc4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <HAL_TIM_Base_Start_IT+0xc8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_TIM_Base_Start_IT+0xcc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d115      	bne.n	80043d8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_TIM_Base_Start_IT+0xd0>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d015      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0xaa>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d011      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	e008      	b.n	80043ea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e000      	b.n	80043ec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40013400 	.word	0x40013400
 800440c:	40014000 	.word	0x40014000
 8004410:	00010007 	.word	0x00010007

08004414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e049      	b.n	80044ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fe12 	bl	8001064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f000 fd20 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_TIM_PWM_Start+0x24>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e03c      	b.n	8004562 <HAL_TIM_PWM_Start+0x9e>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d109      	bne.n	8004502 <HAL_TIM_PWM_Start+0x3e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e02f      	b.n	8004562 <HAL_TIM_PWM_Start+0x9e>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d109      	bne.n	800451c <HAL_TIM_PWM_Start+0x58>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	e022      	b.n	8004562 <HAL_TIM_PWM_Start+0x9e>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d109      	bne.n	8004536 <HAL_TIM_PWM_Start+0x72>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	bf14      	ite	ne
 800452e:	2301      	movne	r3, #1
 8004530:	2300      	moveq	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	e015      	b.n	8004562 <HAL_TIM_PWM_Start+0x9e>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b10      	cmp	r3, #16
 800453a:	d109      	bne.n	8004550 <HAL_TIM_PWM_Start+0x8c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	bf14      	ite	ne
 8004548:	2301      	movne	r3, #1
 800454a:	2300      	moveq	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e008      	b.n	8004562 <HAL_TIM_PWM_Start+0x9e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e097      	b.n	800469a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d104      	bne.n	800457a <HAL_TIM_PWM_Start+0xb6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004578:	e023      	b.n	80045c2 <HAL_TIM_PWM_Start+0xfe>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d104      	bne.n	800458a <HAL_TIM_PWM_Start+0xc6>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004588:	e01b      	b.n	80045c2 <HAL_TIM_PWM_Start+0xfe>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d104      	bne.n	800459a <HAL_TIM_PWM_Start+0xd6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	e013      	b.n	80045c2 <HAL_TIM_PWM_Start+0xfe>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d104      	bne.n	80045aa <HAL_TIM_PWM_Start+0xe6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045a8:	e00b      	b.n	80045c2 <HAL_TIM_PWM_Start+0xfe>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_PWM_Start+0xf6>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b8:	e003      	b.n	80045c2 <HAL_TIM_PWM_Start+0xfe>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	6839      	ldr	r1, [r7, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 ffea 	bl	80055a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a33      	ldr	r2, [pc, #204]	; (80046a4 <HAL_TIM_PWM_Start+0x1e0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_TIM_PWM_Start+0x13e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a32      	ldr	r2, [pc, #200]	; (80046a8 <HAL_TIM_PWM_Start+0x1e4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIM_PWM_Start+0x13e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a30      	ldr	r2, [pc, #192]	; (80046ac <HAL_TIM_PWM_Start+0x1e8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIM_PWM_Start+0x13e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <HAL_TIM_PWM_Start+0x1ec>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIM_PWM_Start+0x13e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <HAL_TIM_PWM_Start+0x1f0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_TIM_PWM_Start+0x142>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <HAL_TIM_PWM_Start+0x144>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800461a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a20      	ldr	r2, [pc, #128]	; (80046a4 <HAL_TIM_PWM_Start+0x1e0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_TIM_PWM_Start+0x194>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462e:	d013      	beq.n	8004658 <HAL_TIM_PWM_Start+0x194>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <HAL_TIM_PWM_Start+0x1f4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <HAL_TIM_PWM_Start+0x194>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_TIM_PWM_Start+0x1f8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_TIM_PWM_Start+0x194>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <HAL_TIM_PWM_Start+0x1e4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_TIM_PWM_Start+0x194>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a16      	ldr	r2, [pc, #88]	; (80046ac <HAL_TIM_PWM_Start+0x1e8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d115      	bne.n	8004684 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <HAL_TIM_PWM_Start+0x1fc>)
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b06      	cmp	r3, #6
 8004668:	d015      	beq.n	8004696 <HAL_TIM_PWM_Start+0x1d2>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d011      	beq.n	8004696 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	e008      	b.n	8004696 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e000      	b.n	8004698 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	00010007 	.word	0x00010007

080046c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e097      	b.n	8004808 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fc fd01 	bl	80010f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 fbbd 	bl	8004e98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	4313      	orrs	r3, r2
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004764:	f023 030c 	bic.w	r3, r3, #12
 8004768:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	4313      	orrs	r3, r2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	011a      	lsls	r2, r3, #4
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	031b      	lsls	r3, r3, #12
 8004794:	4313      	orrs	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	4313      	orrs	r3, r2
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004820:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004828:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004830:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004838:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d110      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d102      	bne.n	800484c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004846:	7b7b      	ldrb	r3, [r7, #13]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e068      	b.n	8004922 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004860:	e031      	b.n	80048c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d110      	bne.n	800488a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004868:	7bbb      	ldrb	r3, [r7, #14]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d102      	bne.n	8004874 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800486e:	7b3b      	ldrb	r3, [r7, #12]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e054      	b.n	8004922 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004888:	e01d      	b.n	80048c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d108      	bne.n	80048a2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004890:	7bbb      	ldrb	r3, [r7, #14]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d105      	bne.n	80048a2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004896:	7b7b      	ldrb	r3, [r7, #13]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d102      	bne.n	80048a2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800489c:	7b3b      	ldrb	r3, [r7, #12]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e03d      	b.n	8004922 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_TIM_Encoder_Start+0xc2>
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d008      	beq.n	80048e2 <HAL_TIM_Encoder_Start+0xd2>
 80048d0:	e00f      	b.n	80048f2 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fe62 	bl	80055a4 <TIM_CCxChannelCmd>
      break;
 80048e0:	e016      	b.n	8004910 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2201      	movs	r2, #1
 80048e8:	2104      	movs	r1, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fe5a 	bl	80055a4 <TIM_CCxChannelCmd>
      break;
 80048f0:	e00e      	b.n	8004910 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fe52 	bl	80055a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	2104      	movs	r1, #4
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe4b 	bl	80055a4 <TIM_CCxChannelCmd>
      break;
 800490e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d122      	bne.n	8004986 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d11b      	bne.n	8004986 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0202 	mvn.w	r2, #2
 8004956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa75 	bl	8004e5c <HAL_TIM_IC_CaptureCallback>
 8004972:	e005      	b.n	8004980 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fa67 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa78 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b04      	cmp	r3, #4
 8004992:	d122      	bne.n	80049da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0204 	mvn.w	r2, #4
 80049aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fa4b 	bl	8004e5c <HAL_TIM_IC_CaptureCallback>
 80049c6:	e005      	b.n	80049d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fa3d 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa4e 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d122      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11b      	bne.n	8004a2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0208 	mvn.w	r2, #8
 80049fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fa21 	bl	8004e5c <HAL_TIM_IC_CaptureCallback>
 8004a1a:	e005      	b.n	8004a28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fa13 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fa24 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d122      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d11b      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0210 	mvn.w	r2, #16
 8004a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2208      	movs	r2, #8
 8004a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f9f7 	bl	8004e5c <HAL_TIM_IC_CaptureCallback>
 8004a6e:	e005      	b.n	8004a7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f9e9 	bl	8004e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f9fa 	bl	8004e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10e      	bne.n	8004aae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0201 	mvn.w	r2, #1
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fc fa0b 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d10e      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 feb7 	bl	8005848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae8:	d10e      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d107      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 feaa 	bl	800585c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9a8 	bl	8004e84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d10e      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d107      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0220 	mvn.w	r2, #32
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fe6a 	bl	8005834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b6e:	d10f      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fe70 	bl	8005870 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b9e:	d10f      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fe62 	bl	8005884 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bce:	d10f      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fe54 	bl	8005898 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bfe:	d10f      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fe46 	bl	80058ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e0fd      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b14      	cmp	r3, #20
 8004c4e:	f200 80f0 	bhi.w	8004e32 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004cad 	.word	0x08004cad
 8004c5c:	08004e33 	.word	0x08004e33
 8004c60:	08004e33 	.word	0x08004e33
 8004c64:	08004e33 	.word	0x08004e33
 8004c68:	08004ced 	.word	0x08004ced
 8004c6c:	08004e33 	.word	0x08004e33
 8004c70:	08004e33 	.word	0x08004e33
 8004c74:	08004e33 	.word	0x08004e33
 8004c78:	08004d2f 	.word	0x08004d2f
 8004c7c:	08004e33 	.word	0x08004e33
 8004c80:	08004e33 	.word	0x08004e33
 8004c84:	08004e33 	.word	0x08004e33
 8004c88:	08004d6f 	.word	0x08004d6f
 8004c8c:	08004e33 	.word	0x08004e33
 8004c90:	08004e33 	.word	0x08004e33
 8004c94:	08004e33 	.word	0x08004e33
 8004c98:	08004db1 	.word	0x08004db1
 8004c9c:	08004e33 	.word	0x08004e33
 8004ca0:	08004e33 	.word	0x08004e33
 8004ca4:	08004e33 	.word	0x08004e33
 8004ca8:	08004df1 	.word	0x08004df1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f980 	bl	8004fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0208 	orr.w	r2, r2, #8
 8004cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0204 	bic.w	r2, r2, #4
 8004cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	619a      	str	r2, [r3, #24]
      break;
 8004cea:	e0a3      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f9f0 	bl	80050d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	021a      	lsls	r2, r3, #8
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	619a      	str	r2, [r3, #24]
      break;
 8004d2c:	e082      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fa59 	bl	80051ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0208 	orr.w	r2, r2, #8
 8004d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0204 	bic.w	r2, r2, #4
 8004d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69d9      	ldr	r1, [r3, #28]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	61da      	str	r2, [r3, #28]
      break;
 8004d6c:	e062      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fac1 	bl	80052fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	021a      	lsls	r2, r3, #8
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	61da      	str	r2, [r3, #28]
      break;
 8004dae:	e041      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fb2a 	bl	8005410 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0204 	bic.w	r2, r2, #4
 8004dda:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004dee:	e021      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fb6e 	bl	80054d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e30:	e000      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop

08004e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3c      	ldr	r2, [pc, #240]	; (8004f9c <TIM_Base_SetConfig+0x104>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00f      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a39      	ldr	r2, [pc, #228]	; (8004fa0 <TIM_Base_SetConfig+0x108>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a38      	ldr	r2, [pc, #224]	; (8004fa4 <TIM_Base_SetConfig+0x10c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0x38>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a37      	ldr	r2, [pc, #220]	; (8004fa8 <TIM_Base_SetConfig+0x110>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <TIM_Base_SetConfig+0x104>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01b      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d017      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <TIM_Base_SetConfig+0x108>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a29      	ldr	r2, [pc, #164]	; (8004fa4 <TIM_Base_SetConfig+0x10c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00f      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a28      	ldr	r2, [pc, #160]	; (8004fa8 <TIM_Base_SetConfig+0x110>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a27      	ldr	r2, [pc, #156]	; (8004fac <TIM_Base_SetConfig+0x114>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <TIM_Base_SetConfig+0x118>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_Base_SetConfig+0x8a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a25      	ldr	r2, [pc, #148]	; (8004fb4 <TIM_Base_SetConfig+0x11c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d108      	bne.n	8004f34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <TIM_Base_SetConfig+0x104>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00f      	beq.n	8004f80 <TIM_Base_SetConfig+0xe8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a11      	ldr	r2, [pc, #68]	; (8004fa8 <TIM_Base_SetConfig+0x110>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <TIM_Base_SetConfig+0xe8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a10      	ldr	r2, [pc, #64]	; (8004fac <TIM_Base_SetConfig+0x114>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_Base_SetConfig+0xe8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a0f      	ldr	r2, [pc, #60]	; (8004fb0 <TIM_Base_SetConfig+0x118>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_Base_SetConfig+0xe8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	; (8004fb4 <TIM_Base_SetConfig+0x11c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d103      	bne.n	8004f88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	615a      	str	r2, [r3, #20]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40013400 	.word	0x40013400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800

08004fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0302 	bic.w	r3, r3, #2
 8005004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <TIM_OC1_SetConfig+0x10c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00f      	beq.n	8005038 <TIM_OC1_SetConfig+0x80>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a2b      	ldr	r2, [pc, #172]	; (80050c8 <TIM_OC1_SetConfig+0x110>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00b      	beq.n	8005038 <TIM_OC1_SetConfig+0x80>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a2a      	ldr	r2, [pc, #168]	; (80050cc <TIM_OC1_SetConfig+0x114>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d007      	beq.n	8005038 <TIM_OC1_SetConfig+0x80>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <TIM_OC1_SetConfig+0x118>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_OC1_SetConfig+0x80>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <TIM_OC1_SetConfig+0x11c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10c      	bne.n	8005052 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0308 	bic.w	r3, r3, #8
 800503e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 0304 	bic.w	r3, r3, #4
 8005050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <TIM_OC1_SetConfig+0x10c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00f      	beq.n	800507a <TIM_OC1_SetConfig+0xc2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <TIM_OC1_SetConfig+0x110>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00b      	beq.n	800507a <TIM_OC1_SetConfig+0xc2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <TIM_OC1_SetConfig+0x114>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <TIM_OC1_SetConfig+0xc2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <TIM_OC1_SetConfig+0x118>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_OC1_SetConfig+0xc2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <TIM_OC1_SetConfig+0x11c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d111      	bne.n	800509e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	621a      	str	r2, [r3, #32]
}
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40013400 	.word	0x40013400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800

080050d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f023 0210 	bic.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0320 	bic.w	r3, r3, #32
 8005126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a28      	ldr	r2, [pc, #160]	; (80051d8 <TIM_OC2_SetConfig+0x100>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC2_SetConfig+0x6c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a27      	ldr	r2, [pc, #156]	; (80051dc <TIM_OC2_SetConfig+0x104>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d10d      	bne.n	8005160 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <TIM_OC2_SetConfig+0x100>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00f      	beq.n	8005188 <TIM_OC2_SetConfig+0xb0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <TIM_OC2_SetConfig+0x104>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_OC2_SetConfig+0xb0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <TIM_OC2_SetConfig+0x108>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_OC2_SetConfig+0xb0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <TIM_OC2_SetConfig+0x10c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_OC2_SetConfig+0xb0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <TIM_OC2_SetConfig+0x110>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d113      	bne.n	80051b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800518e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40013400 	.word	0x40013400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <TIM_OC3_SetConfig+0xfc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC3_SetConfig+0x6a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <TIM_OC3_SetConfig+0x100>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10d      	bne.n	8005272 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <TIM_OC3_SetConfig+0xfc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00f      	beq.n	800529a <TIM_OC3_SetConfig+0xae>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <TIM_OC3_SetConfig+0x100>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00b      	beq.n	800529a <TIM_OC3_SetConfig+0xae>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <TIM_OC3_SetConfig+0x104>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <TIM_OC3_SetConfig+0xae>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <TIM_OC3_SetConfig+0x108>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_OC3_SetConfig+0xae>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <TIM_OC3_SetConfig+0x10c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d113      	bne.n	80052c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40013400 	.word	0x40013400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800

080052fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800532a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800534a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a28      	ldr	r2, [pc, #160]	; (80053fc <TIM_OC4_SetConfig+0x100>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC4_SetConfig+0x6c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a27      	ldr	r2, [pc, #156]	; (8005400 <TIM_OC4_SetConfig+0x104>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d10d      	bne.n	8005384 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800536e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005382:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <TIM_OC4_SetConfig+0x100>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00f      	beq.n	80053ac <TIM_OC4_SetConfig+0xb0>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <TIM_OC4_SetConfig+0x104>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_OC4_SetConfig+0xb0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <TIM_OC4_SetConfig+0x108>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_OC4_SetConfig+0xb0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <TIM_OC4_SetConfig+0x10c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC4_SetConfig+0xb0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a19      	ldr	r2, [pc, #100]	; (800540c <TIM_OC4_SetConfig+0x110>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d113      	bne.n	80053d4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40013400 	.word	0x40013400
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a17      	ldr	r2, [pc, #92]	; (80054c4 <TIM_OC5_SetConfig+0xb4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <TIM_OC5_SetConfig+0x7a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a16      	ldr	r2, [pc, #88]	; (80054c8 <TIM_OC5_SetConfig+0xb8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00b      	beq.n	800548a <TIM_OC5_SetConfig+0x7a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <TIM_OC5_SetConfig+0xbc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <TIM_OC5_SetConfig+0x7a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <TIM_OC5_SetConfig+0xc0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC5_SetConfig+0x7a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <TIM_OC5_SetConfig+0xc4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d109      	bne.n	800549e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40013400 	.word	0x40013400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800

080054d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800551e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	051b      	lsls	r3, r3, #20
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <TIM_OC6_SetConfig+0xb8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00f      	beq.n	8005554 <TIM_OC6_SetConfig+0x7c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a17      	ldr	r2, [pc, #92]	; (8005594 <TIM_OC6_SetConfig+0xbc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_OC6_SetConfig+0x7c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <TIM_OC6_SetConfig+0xc0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d007      	beq.n	8005554 <TIM_OC6_SetConfig+0x7c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <TIM_OC6_SetConfig+0xc4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_OC6_SetConfig+0x7c>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <TIM_OC6_SetConfig+0xc8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d109      	bne.n	8005568 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	029b      	lsls	r3, r3, #10
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40013400 	.word	0x40013400
 8005598:	40014000 	.word	0x40014000
 800559c:	40014400 	.word	0x40014400
 80055a0:	40014800 	.word	0x40014800

080055a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	2201      	movs	r2, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1a      	ldr	r2, [r3, #32]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	43db      	mvns	r3, r3
 80055c6:	401a      	ands	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	fa01 f303 	lsl.w	r3, r1, r3
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005604:	2302      	movs	r3, #2
 8005606:	e065      	b.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d108      	bne.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d018      	beq.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d013      	beq.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00e      	beq.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a17      	ldr	r2, [pc, #92]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d009      	beq.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10c      	bne.n	80056c2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40014000 	.word	0x40014000

080056f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800570c:	2302      	movs	r3, #2
 800570e:	e087      	b.n	8005820 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d106      	bne.n	80057ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1e      	ldr	r2, [pc, #120]	; (800582c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d126      	bne.n	800580e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	051b      	lsls	r3, r3, #20
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0e      	ldr	r2, [pc, #56]	; (800582c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a0d      	ldr	r2, [pc, #52]	; (8005830 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d106      	bne.n	800580e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	40012c00 	.word	0x40012c00
 8005830:	40013400 	.word	0x40013400

08005834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80058d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80058fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	b29b      	uxth	r3, r3
 8005908:	43db      	mvns	r3, r3
 800590a:	b29b      	uxth	r3, r3
 800590c:	4013      	ands	r3, r2
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005924:	b084      	sub	sp, #16
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	f107 0014 	add.w	r0, r7, #20
 8005932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	b004      	add	sp, #16
 8005964:	4770      	bx	lr
	...

08005968 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005968:	b480      	push	{r7}
 800596a:	b09b      	sub	sp, #108	; 0x6c
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	78db      	ldrb	r3, [r3, #3]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d81f      	bhi.n	80059da <USB_ActivateEndpoint+0x72>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <USB_ActivateEndpoint+0x38>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059e3 	.word	0x080059e3
 80059ac:	080059bf 	.word	0x080059bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059bc:	e012      	b.n	80059e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059ca:	e00b      	b.n	80059e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059d8:	e004      	b.n	80059e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80059e0:	e000      	b.n	80059e4 <USB_ActivateEndpoint+0x7c>
      break;
 80059e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	b21a      	sxth	r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b21b      	sxth	r3, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b21b      	sxth	r3, r3
 8005a2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	7b1b      	ldrb	r3, [r3, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f040 8149 	bne.w	8005cec <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8084 	beq.w	8005b6c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	00da      	lsls	r2, r3, #3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	88db      	ldrh	r3, [r3, #6]
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	81fb      	strh	r3, [r7, #14]
 8005aa6:	89fb      	ldrh	r3, [r7, #14]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <USB_ActivateEndpoint+0x180>
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	81bb      	strh	r3, [r7, #12]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	441a      	add	r2, r3
 8005ad2:	89bb      	ldrh	r3, [r7, #12]
 8005ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	78db      	ldrb	r3, [r3, #3]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d020      	beq.n	8005b32 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b06:	813b      	strh	r3, [r7, #8]
 8005b08:	893b      	ldrh	r3, [r7, #8]
 8005b0a:	f083 0320 	eor.w	r3, r3, #32
 8005b0e:	813b      	strh	r3, [r7, #8]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	893b      	ldrh	r3, [r7, #8]
 8005b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]
 8005b30:	e27f      	b.n	8006032 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b48:	817b      	strh	r3, [r7, #10]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	441a      	add	r2, r3
 8005b54:	897b      	ldrh	r3, [r7, #10]
 8005b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]
 8005b6a:	e262      	b.n	8006032 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	4413      	add	r3, r2
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00da      	lsls	r2, r3, #3
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	88db      	ldrh	r3, [r3, #6]
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	4413      	add	r3, r2
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00da      	lsls	r2, r3, #3
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bc2:	623b      	str	r3, [r7, #32]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d112      	bne.n	8005bf2 <USB_ActivateEndpoint+0x28a>
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e02f      	b.n	8005c52 <USB_ActivateEndpoint+0x2ea>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf8:	d813      	bhi.n	8005c22 <USB_ActivateEndpoint+0x2ba>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	663b      	str	r3, [r7, #96]	; 0x60
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <USB_ActivateEndpoint+0x2ac>
 8005c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c10:	3301      	adds	r3, #1
 8005c12:	663b      	str	r3, [r7, #96]	; 0x60
 8005c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	e017      	b.n	8005c52 <USB_ActivateEndpoint+0x2ea>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	663b      	str	r3, [r7, #96]	; 0x60
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <USB_ActivateEndpoint+0x2d4>
 8005c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	83fb      	strh	r3, [r7, #30]
 8005c60:	8bfb      	ldrh	r3, [r7, #30]
 8005c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01b      	beq.n	8005ca2 <USB_ActivateEndpoint+0x33a>
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c80:	83bb      	strh	r3, [r7, #28]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	441a      	add	r2, r3
 8005c8c:	8bbb      	ldrh	r3, [r7, #28]
 8005c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb8:	837b      	strh	r3, [r7, #26]
 8005cba:	8b7b      	ldrh	r3, [r7, #26]
 8005cbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cc0:	837b      	strh	r3, [r7, #26]
 8005cc2:	8b7b      	ldrh	r3, [r7, #26]
 8005cc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cc8:	837b      	strh	r3, [r7, #26]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	8b7b      	ldrh	r3, [r7, #26]
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]
 8005cea:	e1a2      	b.n	8006032 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d38:	4413      	add	r3, r2
 8005d3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	891b      	ldrh	r3, [r3, #8]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6c:	4413      	add	r3, r2
 8005d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00da      	lsls	r2, r3, #3
 8005d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	895b      	ldrh	r3, [r3, #10]
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f040 8091 	bne.w	8005ebc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005da8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01b      	beq.n	8005dea <USB_ActivateEndpoint+0x482>
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005df8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01b      	beq.n	8005e3a <USB_ActivateEndpoint+0x4d2>
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e98:	867b      	strh	r3, [r7, #50]	; 0x32
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	8013      	strh	r3, [r2, #0]
 8005eba:	e0ba      	b.n	8006032 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ecc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01d      	beq.n	8005f14 <USB_ActivateEndpoint+0x5ac>
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01d      	beq.n	8005f6c <USB_ActivateEndpoint+0x604>
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	441a      	add	r2, r3
 8005f54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	78db      	ldrb	r3, [r3, #3]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d024      	beq.n	8005fbe <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f92:	f083 0320 	eor.w	r3, r3, #32
 8005f96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]
 8005fbc:	e01d      	b.n	8005ffa <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800600c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006010:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006036:	4618      	mov	r0, r3
 8006038:	376c      	adds	r7, #108	; 0x6c
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop

08006044 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006044:	b480      	push	{r7}
 8006046:	b08d      	sub	sp, #52	; 0x34
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	7b1b      	ldrb	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 808e 	bne.w	8006174 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d044      	beq.n	80060ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	81bb      	strh	r3, [r7, #12]
 800606e:	89bb      	ldrh	r3, [r7, #12]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <USB_DeactivateEndpoint+0x6c>
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	817b      	strh	r3, [r7, #10]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	897b      	ldrh	r3, [r7, #10]
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	813b      	strh	r3, [r7, #8]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	893b      	ldrh	r3, [r7, #8]
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
 80060e8:	e192      	b.n	8006410 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	827b      	strh	r3, [r7, #18]
 80060f8:	8a7b      	ldrh	r3, [r7, #18]
 80060fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01b      	beq.n	800613a <USB_DeactivateEndpoint+0xf6>
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	823b      	strh	r3, [r7, #16]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	8a3b      	ldrh	r3, [r7, #16]
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	81fb      	strh	r3, [r7, #14]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	441a      	add	r2, r3
 800615c:	89fb      	ldrh	r3, [r7, #14]
 800615e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	b29b      	uxth	r3, r3
 8006170:	8013      	strh	r3, [r2, #0]
 8006172:	e14d      	b.n	8006410 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 80a5 	bne.w	80062c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	843b      	strh	r3, [r7, #32]
 800618c:	8c3b      	ldrh	r3, [r7, #32]
 800618e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01b      	beq.n	80061ce <USB_DeactivateEndpoint+0x18a>
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ac:	83fb      	strh	r3, [r7, #30]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	8bfb      	ldrh	r3, [r7, #30]
 80061ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	83bb      	strh	r3, [r7, #28]
 80061dc:	8bbb      	ldrh	r3, [r7, #28]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01b      	beq.n	800621e <USB_DeactivateEndpoint+0x1da>
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	837b      	strh	r3, [r7, #26]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	8b7b      	ldrh	r3, [r7, #26]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	833b      	strh	r3, [r7, #24]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8b3b      	ldrh	r3, [r7, #24]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	82fb      	strh	r3, [r7, #22]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	8afb      	ldrh	r3, [r7, #22]
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a4:	82bb      	strh	r3, [r7, #20]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	8abb      	ldrh	r3, [r7, #20]
 80062b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
 80062c6:	e0a3      	b.n	8006410 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <USB_DeactivateEndpoint+0x2d4>
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006314:	b29b      	uxth	r3, r3
 8006316:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006326:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <USB_DeactivateEndpoint+0x324>
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	853b      	strh	r3, [r7, #40]	; 0x28
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640c:	b29b      	uxth	r3, r3
 800640e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3734      	adds	r7, #52	; 0x34
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b0c4      	sub	sp, #272	; 0x110
 8006422:	af00      	add	r7, sp, #0
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	6018      	str	r0, [r3, #0]
 8006428:	463b      	mov	r3, r7
 800642a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b01      	cmp	r3, #1
 8006434:	f040 8566 	bne.w	8006f04 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	429a      	cmp	r2, r3
 8006446:	d905      	bls.n	8006454 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006452:	e004      	b.n	800645e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	7b1b      	ldrb	r3, [r3, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d12c      	bne.n	80064c2 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6959      	ldr	r1, [r3, #20]
 800646e:	463b      	mov	r3, r7
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	88da      	ldrh	r2, [r3, #6]
 8006474:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006478:	b29b      	uxth	r3, r3
 800647a:	1d38      	adds	r0, r7, #4
 800647c:	6800      	ldr	r0, [r0, #0]
 800647e:	f001 fa43 	bl	8007908 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	1d3b      	adds	r3, r7, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006490:	b29b      	uxth	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4413      	add	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	00da      	lsls	r2, r3, #3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80064aa:	f107 0310 	add.w	r3, r7, #16
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f107 0310 	add.w	r3, r7, #16
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	f000 bcec 	b.w	8006e9a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	f040 8356 	bne.w	8006b7a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	463b      	mov	r3, r7
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	f240 82fa 	bls.w	8006ad4 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80064e0:	1d3b      	adds	r3, r7, #4
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	463b      	mov	r3, r7
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800651c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006524:	463b      	mov	r3, r7
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800652e:	463b      	mov	r3, r7
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 815e 	beq.w	8006818 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800655c:	1d3b      	adds	r3, r7, #4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
 8006562:	463b      	mov	r3, r7
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d164      	bne.n	8006636 <USB_EPStartXfer+0x218>
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006572:	1d3b      	adds	r3, r7, #4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657a:	b29b      	uxth	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	4413      	add	r3, r2
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	00da      	lsls	r2, r3, #3
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	4413      	add	r3, r2
 8006590:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
 8006596:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800659a:	2b00      	cmp	r3, #0
 800659c:	d112      	bne.n	80065c4 <USB_EPStartXfer+0x1a6>
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065bc:	b29a      	uxth	r2, r3
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	e054      	b.n	800666e <USB_EPStartXfer+0x250>
 80065c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c8:	2b3e      	cmp	r3, #62	; 0x3e
 80065ca:	d817      	bhi.n	80065fc <USB_EPStartXfer+0x1de>
 80065cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <USB_EPStartXfer+0x1ce>
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e6:	3301      	adds	r3, #1
 80065e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e038      	b.n	800666e <USB_EPStartXfer+0x250>
 80065fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006606:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800660a:	f003 031f 	and.w	r3, r3, #31
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <USB_EPStartXfer+0x1fe>
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	3b01      	subs	r3, #1
 8006618:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29b      	uxth	r3, r3
 8006626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662e:	b29a      	uxth	r2, r3
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	e01b      	b.n	800666e <USB_EPStartXfer+0x250>
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d116      	bne.n	800666e <USB_EPStartXfer+0x250>
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	4413      	add	r3, r2
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	00da      	lsls	r2, r3, #3
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	4413      	add	r3, r2
 800665e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006662:	633b      	str	r3, [r7, #48]	; 0x30
 8006664:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006668:	b29a      	uxth	r2, r3
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800666e:	463b      	mov	r3, r7
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	895b      	ldrh	r3, [r3, #10]
 8006674:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6959      	ldr	r1, [r3, #20]
 800667e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006682:	b29b      	uxth	r3, r3
 8006684:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006688:	1d38      	adds	r0, r7, #4
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	f001 f93c 	bl	8007908 <USB_WritePMA>
            ep->xfer_buff += len;
 8006690:	463b      	mov	r3, r7
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800669a:	441a      	add	r2, r3
 800669c:	463b      	mov	r3, r7
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a1a      	ldr	r2, [r3, #32]
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d90e      	bls.n	80066d0 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80066bc:	463b      	mov	r3, r7
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	621a      	str	r2, [r3, #32]
 80066ce:	e008      	b.n	80066e2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d164      	bne.n	80067b6 <USB_EPStartXfer+0x398>
 80066ec:	1d3b      	adds	r3, r7, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	00da      	lsls	r2, r3, #3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800671a:	2b00      	cmp	r3, #0
 800671c:	d112      	bne.n	8006744 <USB_EPStartXfer+0x326>
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006728:	b29a      	uxth	r2, r3
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673c:	b29a      	uxth	r2, r3
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	e057      	b.n	80067f4 <USB_EPStartXfer+0x3d6>
 8006744:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006748:	2b3e      	cmp	r3, #62	; 0x3e
 800674a:	d817      	bhi.n	800677c <USB_EPStartXfer+0x35e>
 800674c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006750:	085b      	lsrs	r3, r3, #1
 8006752:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006756:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <USB_EPStartXfer+0x34e>
 8006762:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006766:	3301      	adds	r3, #1
 8006768:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800676c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006770:	b29b      	uxth	r3, r3
 8006772:	029b      	lsls	r3, r3, #10
 8006774:	b29a      	uxth	r2, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e03b      	b.n	80067f4 <USB_EPStartXfer+0x3d6>
 800677c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006786:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <USB_EPStartXfer+0x37e>
 8006792:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006796:	3b01      	subs	r3, #1
 8006798:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800679c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	029b      	lsls	r3, r3, #10
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e01e      	b.n	80067f4 <USB_EPStartXfer+0x3d6>
 80067b6:	463b      	mov	r3, r7
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d119      	bne.n	80067f4 <USB_EPStartXfer+0x3d6>
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	4413      	add	r3, r2
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
 80067d8:	463b      	mov	r3, r7
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	00da      	lsls	r2, r3, #3
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	4413      	add	r3, r2
 80067e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	891b      	ldrh	r3, [r3, #8]
 80067fa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067fe:	463b      	mov	r3, r7
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6959      	ldr	r1, [r3, #20]
 8006804:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006808:	b29b      	uxth	r3, r3
 800680a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800680e:	1d38      	adds	r0, r7, #4
 8006810:	6800      	ldr	r0, [r0, #0]
 8006812:	f001 f879 	bl	8007908 <USB_WritePMA>
 8006816:	e340      	b.n	8006e9a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d164      	bne.n	80068ec <USB_EPStartXfer+0x4ce>
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006836:	4413      	add	r3, r2
 8006838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683a:	463b      	mov	r3, r7
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00da      	lsls	r2, r3, #3
 8006842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006844:	4413      	add	r3, r2
 8006846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800684a:	64bb      	str	r3, [r7, #72]	; 0x48
 800684c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006850:	2b00      	cmp	r3, #0
 8006852:	d112      	bne.n	800687a <USB_EPStartXfer+0x45c>
 8006854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800685e:	b29a      	uxth	r2, r3
 8006860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006862:	801a      	strh	r2, [r3, #0]
 8006864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e057      	b.n	800692a <USB_EPStartXfer+0x50c>
 800687a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687e:	2b3e      	cmp	r3, #62	; 0x3e
 8006880:	d817      	bhi.n	80068b2 <USB_EPStartXfer+0x494>
 8006882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800688c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <USB_EPStartXfer+0x484>
 8006898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800689c:	3301      	adds	r3, #1
 800689e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	029b      	lsls	r3, r3, #10
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e03b      	b.n	800692a <USB_EPStartXfer+0x50c>
 80068b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <USB_EPStartXfer+0x4b4>
 80068c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068cc:	3b01      	subs	r3, #1
 80068ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	029b      	lsls	r3, r3, #10
 80068da:	b29b      	uxth	r3, r3
 80068dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	e01e      	b.n	800692a <USB_EPStartXfer+0x50c>
 80068ec:	463b      	mov	r3, r7
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d119      	bne.n	800692a <USB_EPStartXfer+0x50c>
 80068f6:	1d3b      	adds	r3, r7, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	657b      	str	r3, [r7, #84]	; 0x54
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006904:	b29b      	uxth	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690a:	4413      	add	r3, r2
 800690c:	657b      	str	r3, [r7, #84]	; 0x54
 800690e:	463b      	mov	r3, r7
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	00da      	lsls	r2, r3, #3
 8006916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006918:	4413      	add	r3, r2
 800691a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800691e:	653b      	str	r3, [r7, #80]	; 0x50
 8006920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006924:	b29a      	uxth	r2, r3
 8006926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006928:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800692a:	463b      	mov	r3, r7
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	891b      	ldrh	r3, [r3, #8]
 8006930:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006934:	463b      	mov	r3, r7
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6959      	ldr	r1, [r3, #20]
 800693a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800693e:	b29b      	uxth	r3, r3
 8006940:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006944:	1d38      	adds	r0, r7, #4
 8006946:	6800      	ldr	r0, [r0, #0]
 8006948:	f000 ffde 	bl	8007908 <USB_WritePMA>
            ep->xfer_buff += len;
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006956:	441a      	add	r2, r3
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800695e:	463b      	mov	r3, r7
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	429a      	cmp	r2, r3
 800696c:	d90e      	bls.n	800698c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800696e:	463b      	mov	r3, r7
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006978:	463b      	mov	r3, r7
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6a1a      	ldr	r2, [r3, #32]
 800697e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006982:	1ad2      	subs	r2, r2, r3
 8006984:	463b      	mov	r3, r7
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	621a      	str	r2, [r3, #32]
 800698a:	e008      	b.n	800699e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800698c:	463b      	mov	r3, r7
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006996:	463b      	mov	r3, r7
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800699e:	1d3b      	adds	r3, r7, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	647b      	str	r3, [r7, #68]	; 0x44
 80069a4:	463b      	mov	r3, r7
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d164      	bne.n	8006a78 <USB_EPStartXfer+0x65a>
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b4:	1d3b      	adds	r3, r7, #4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069bc:	b29b      	uxth	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	4413      	add	r3, r2
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c6:	463b      	mov	r3, r7
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	00da      	lsls	r2, r3, #3
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	4413      	add	r3, r2
 80069d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d112      	bne.n	8006a06 <USB_EPStartXfer+0x5e8>
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	e054      	b.n	8006ab0 <USB_EPStartXfer+0x692>
 8006a06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a0c:	d817      	bhi.n	8006a3e <USB_EPStartXfer+0x620>
 8006a0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <USB_EPStartXfer+0x610>
 8006a24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a28:	3301      	adds	r3, #1
 8006a2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	029b      	lsls	r3, r3, #10
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e038      	b.n	8006ab0 <USB_EPStartXfer+0x692>
 8006a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <USB_EPStartXfer+0x640>
 8006a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e01b      	b.n	8006ab0 <USB_EPStartXfer+0x692>
 8006a78:	463b      	mov	r3, r7
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d116      	bne.n	8006ab0 <USB_EPStartXfer+0x692>
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a90:	4413      	add	r3, r2
 8006a92:	647b      	str	r3, [r7, #68]	; 0x44
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	00da      	lsls	r2, r3, #3
 8006a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	895b      	ldrh	r3, [r3, #10]
 8006ab6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6959      	ldr	r1, [r3, #20]
 8006ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006aca:	1d38      	adds	r0, r7, #4
 8006acc:	6800      	ldr	r0, [r0, #0]
 8006ace:	f000 ff1b 	bl	8007908 <USB_WritePMA>
 8006ad2:	e1e2      	b.n	8006e9a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ade:	1d3b      	adds	r3, r7, #4
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006afc:	1d3b      	adds	r3, r7, #4
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	463b      	mov	r3, r7
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b22:	1d3b      	adds	r3, r7, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	663b      	str	r3, [r7, #96]	; 0x60
 8006b28:	1d3b      	adds	r3, r7, #4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b36:	4413      	add	r3, r2
 8006b38:	663b      	str	r3, [r7, #96]	; 0x60
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	00da      	lsls	r2, r3, #3
 8006b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b56:	463b      	mov	r3, r7
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	891b      	ldrh	r3, [r3, #8]
 8006b5c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b60:	463b      	mov	r3, r7
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6959      	ldr	r1, [r3, #20]
 8006b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006b70:	1d38      	adds	r0, r7, #4
 8006b72:	6800      	ldr	r0, [r0, #0]
 8006b74:	f000 fec8 	bl	8007908 <USB_WritePMA>
 8006b78:	e18f      	b.n	8006e9a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b7a:	1d3b      	adds	r3, r7, #4
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	463b      	mov	r3, r7
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 808f 	beq.w	8006cb4 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d164      	bne.n	8006c70 <USB_EPStartXfer+0x852>
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	673b      	str	r3, [r7, #112]	; 0x70
 8006bac:	1d3b      	adds	r3, r7, #4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bba:	4413      	add	r3, r2
 8006bbc:	673b      	str	r3, [r7, #112]	; 0x70
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	00da      	lsls	r2, r3, #3
 8006bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d112      	bne.n	8006bfe <USB_EPStartXfer+0x7e0>
 8006bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	e054      	b.n	8006ca8 <USB_EPStartXfer+0x88a>
 8006bfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c02:	2b3e      	cmp	r3, #62	; 0x3e
 8006c04:	d817      	bhi.n	8006c36 <USB_EPStartXfer+0x818>
 8006c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <USB_EPStartXfer+0x808>
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	3301      	adds	r3, #1
 8006c22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	029b      	lsls	r3, r3, #10
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	e038      	b.n	8006ca8 <USB_EPStartXfer+0x88a>
 8006c36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c44:	f003 031f 	and.w	r3, r3, #31
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <USB_EPStartXfer+0x838>
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	3b01      	subs	r3, #1
 8006c52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	029b      	lsls	r3, r3, #10
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6c:	801a      	strh	r2, [r3, #0]
 8006c6e:	e01b      	b.n	8006ca8 <USB_EPStartXfer+0x88a>
 8006c70:	463b      	mov	r3, r7
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d116      	bne.n	8006ca8 <USB_EPStartXfer+0x88a>
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c88:	4413      	add	r3, r2
 8006c8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	00da      	lsls	r2, r3, #3
 8006c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c9c:	677b      	str	r3, [r7, #116]	; 0x74
 8006c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ca8:	463b      	mov	r3, r7
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	895b      	ldrh	r3, [r3, #10]
 8006cae:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006cb2:	e097      	b.n	8006de4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d168      	bne.n	8006d90 <USB_EPStartXfer+0x972>
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc6:	1d3b      	adds	r3, r7, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	00da      	lsls	r2, r3, #3
 8006ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ce8:	4413      	add	r3, r2
 8006cea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d112      	bne.n	8006d1e <USB_EPStartXfer+0x900>
 8006cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e05d      	b.n	8006dda <USB_EPStartXfer+0x9bc>
 8006d1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d22:	2b3e      	cmp	r3, #62	; 0x3e
 8006d24:	d817      	bhi.n	8006d56 <USB_EPStartXfer+0x938>
 8006d26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <USB_EPStartXfer+0x928>
 8006d3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d40:	3301      	adds	r3, #1
 8006d42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e041      	b.n	8006dda <USB_EPStartXfer+0x9bc>
 8006d56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <USB_EPStartXfer+0x958>
 8006d6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d70:	3b01      	subs	r3, #1
 8006d72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	029b      	lsls	r3, r3, #10
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	e024      	b.n	8006dda <USB_EPStartXfer+0x9bc>
 8006d90:	463b      	mov	r3, r7
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d11f      	bne.n	8006dda <USB_EPStartXfer+0x9bc>
 8006d9a:	1d3b      	adds	r3, r7, #4
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006db2:	4413      	add	r3, r2
 8006db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006db8:	463b      	mov	r3, r7
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	00da      	lsls	r2, r3, #3
 8006dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	891b      	ldrh	r3, [r3, #8]
 8006de0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6959      	ldr	r1, [r3, #20]
 8006dea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006df4:	1d38      	adds	r0, r7, #4
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	f000 fd86 	bl	8007908 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006dfc:	463b      	mov	r3, r7
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d122      	bne.n	8006e4c <USB_EPStartXfer+0xa2e>
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e20:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006e24:	1d3b      	adds	r3, r7, #4
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	463b      	mov	r3, r7
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	441a      	add	r2, r3
 8006e32:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]
 8006e4a:	e026      	b.n	8006e9a <USB_EPStartXfer+0xa7c>
 8006e4c:	463b      	mov	r3, r7
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d121      	bne.n	8006e9a <USB_EPStartXfer+0xa7c>
 8006e56:	1d3b      	adds	r3, r7, #4
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e70:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006e74:	1d3b      	adds	r3, r7, #4
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	463b      	mov	r3, r7
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	441a      	add	r2, r3
 8006e82:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f107 020e 	add.w	r2, r7, #14
 8006eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb8:	8013      	strh	r3, [r2, #0]
 8006eba:	f107 030e 	add.w	r3, r7, #14
 8006ebe:	f107 020e 	add.w	r2, r7, #14
 8006ec2:	8812      	ldrh	r2, [r2, #0]
 8006ec4:	f082 0210 	eor.w	r2, r2, #16
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	f107 030e 	add.w	r3, r7, #14
 8006ece:	f107 020e 	add.w	r2, r7, #14
 8006ed2:	8812      	ldrh	r2, [r2, #0]
 8006ed4:	f082 0220 	eor.w	r2, r2, #32
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	1d3b      	adds	r3, r7, #4
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	463b      	mov	r3, r7
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	f107 030e 	add.w	r3, r7, #14
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
 8006f02:	e3b5      	b.n	8007670 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f04:	463b      	mov	r3, r7
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	7b1b      	ldrb	r3, [r3, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 8090 	bne.w	8007030 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006f10:	463b      	mov	r3, r7
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d90e      	bls.n	8006f3e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699a      	ldr	r2, [r3, #24]
 8006f30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	463b      	mov	r3, r7
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	619a      	str	r2, [r3, #24]
 8006f3c:	e008      	b.n	8006f50 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006f48:	463b      	mov	r3, r7
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f50:	1d3b      	adds	r3, r7, #4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f58:	1d3b      	adds	r3, r7, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f68:	4413      	add	r3, r2
 8006f6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f6e:	463b      	mov	r3, r7
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00da      	lsls	r2, r3, #3
 8006f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d116      	bne.n	8006fba <USB_EPStartXfer+0xb9c>
 8006f8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e32c      	b.n	8007614 <USB_EPStartXfer+0x11f6>
 8006fba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8006fc0:	d818      	bhi.n	8006ff4 <USB_EPStartXfer+0xbd6>
 8006fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <USB_EPStartXfer+0xbc4>
 8006fd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fe2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	029b      	lsls	r3, r3, #10
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e30f      	b.n	8007614 <USB_EPStartXfer+0x11f6>
 8006ff4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ffe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2b00      	cmp	r3, #0
 8007008:	d104      	bne.n	8007014 <USB_EPStartXfer+0xbf6>
 800700a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800700e:	3b01      	subs	r3, #1
 8007010:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007014:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007018:	b29b      	uxth	r3, r3
 800701a:	029b      	lsls	r3, r3, #10
 800701c:	b29b      	uxth	r3, r3
 800701e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007026:	b29a      	uxth	r2, r3
 8007028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e2f1      	b.n	8007614 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007030:	463b      	mov	r3, r7
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	78db      	ldrb	r3, [r3, #3]
 8007036:	2b02      	cmp	r3, #2
 8007038:	f040 818f 	bne.w	800735a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d175      	bne.n	8007132 <USB_EPStartXfer+0xd14>
 8007046:	1d3b      	adds	r3, r7, #4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800704e:	1d3b      	adds	r3, r7, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007056:	b29b      	uxth	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800705e:	4413      	add	r3, r2
 8007060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007064:	463b      	mov	r3, r7
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007070:	4413      	add	r3, r2
 8007072:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800707a:	463b      	mov	r3, r7
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d116      	bne.n	80070b2 <USB_EPStartXfer+0xc94>
 8007084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007090:	b29a      	uxth	r2, r3
 8007092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e065      	b.n	800717e <USB_EPStartXfer+0xd60>
 80070b2:	463b      	mov	r3, r7
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b3e      	cmp	r3, #62	; 0x3e
 80070ba:	d81a      	bhi.n	80070f2 <USB_EPStartXfer+0xcd4>
 80070bc:	463b      	mov	r3, r7
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <USB_EPStartXfer+0xcc2>
 80070d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070da:	3301      	adds	r3, #1
 80070dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	029b      	lsls	r3, r3, #10
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ee:	801a      	strh	r2, [r3, #0]
 80070f0:	e045      	b.n	800717e <USB_EPStartXfer+0xd60>
 80070f2:	463b      	mov	r3, r7
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	095b      	lsrs	r3, r3, #5
 80070fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070fe:	463b      	mov	r3, r7
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f003 031f 	and.w	r3, r3, #31
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <USB_EPStartXfer+0xcf8>
 800710c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007110:	3b01      	subs	r3, #1
 8007112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007116:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800711a:	b29b      	uxth	r3, r3
 800711c:	029b      	lsls	r3, r3, #10
 800711e:	b29b      	uxth	r3, r3
 8007120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007128:	b29a      	uxth	r2, r3
 800712a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e025      	b.n	800717e <USB_EPStartXfer+0xd60>
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d120      	bne.n	800717e <USB_EPStartXfer+0xd60>
 800713c:	1d3b      	adds	r3, r7, #4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714c:	b29b      	uxth	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007154:	4413      	add	r3, r2
 8007156:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800715a:	463b      	mov	r3, r7
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00da      	lsls	r2, r3, #3
 8007162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007166:	4413      	add	r3, r2
 8007168:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800716c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007170:	463b      	mov	r3, r7
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	b29a      	uxth	r2, r3
 8007178:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	1d3b      	adds	r3, r7, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007186:	463b      	mov	r3, r7
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d175      	bne.n	800727c <USB_EPStartXfer+0xe5e>
 8007190:	1d3b      	adds	r3, r7, #4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007198:	1d3b      	adds	r3, r7, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071a8:	4413      	add	r3, r2
 80071aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071ae:	463b      	mov	r3, r7
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	00da      	lsls	r2, r3, #3
 80071b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071ba:	4413      	add	r3, r2
 80071bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d116      	bne.n	80071fc <USB_EPStartXfer+0xdde>
 80071ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071da:	b29a      	uxth	r2, r3
 80071dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e061      	b.n	80072c0 <USB_EPStartXfer+0xea2>
 80071fc:	463b      	mov	r3, r7
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b3e      	cmp	r3, #62	; 0x3e
 8007204:	d81a      	bhi.n	800723c <USB_EPStartXfer+0xe1e>
 8007206:	463b      	mov	r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	085b      	lsrs	r3, r3, #1
 800720e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <USB_EPStartXfer+0xe0c>
 8007220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007224:	3301      	adds	r3, #1
 8007226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29a      	uxth	r2, r3
 8007234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	e041      	b.n	80072c0 <USB_EPStartXfer+0xea2>
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <USB_EPStartXfer+0xe42>
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725a:	3b01      	subs	r3, #1
 800725c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007264:	b29b      	uxth	r3, r3
 8007266:	029b      	lsls	r3, r3, #10
 8007268:	b29b      	uxth	r3, r3
 800726a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	e021      	b.n	80072c0 <USB_EPStartXfer+0xea2>
 800727c:	463b      	mov	r3, r7
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d11c      	bne.n	80072c0 <USB_EPStartXfer+0xea2>
 8007286:	1d3b      	adds	r3, r7, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728e:	b29b      	uxth	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007296:	4413      	add	r3, r2
 8007298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800729c:	463b      	mov	r3, r7
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	00da      	lsls	r2, r3, #3
 80072a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80072b2:	463b      	mov	r3, r7
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072be:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80072c0:	463b      	mov	r3, r7
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 81a4 	beq.w	8007614 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80072cc:	1d3b      	adds	r3, r7, #4
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	463b      	mov	r3, r7
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <USB_EPStartXfer+0xeda>
 80072ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10d      	bne.n	8007314 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072f8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 8187 	bne.w	8007614 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007306:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800730a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 8180 	bne.w	8007614 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	463b      	mov	r3, r7
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007332:	1d3b      	adds	r3, r7, #4
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	463b      	mov	r3, r7
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	441a      	add	r2, r3
 8007340:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800734c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007350:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007354:	b29b      	uxth	r3, r3
 8007356:	8013      	strh	r3, [r2, #0]
 8007358:	e15c      	b.n	8007614 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800735a:	463b      	mov	r3, r7
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	2b01      	cmp	r3, #1
 8007362:	f040 8155 	bne.w	8007610 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	463b      	mov	r3, r7
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	429a      	cmp	r2, r3
 8007374:	d90e      	bls.n	8007394 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007376:	463b      	mov	r3, r7
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007380:	463b      	mov	r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699a      	ldr	r2, [r3, #24]
 8007386:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800738a:	1ad2      	subs	r2, r2, r3
 800738c:	463b      	mov	r3, r7
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	619a      	str	r2, [r3, #24]
 8007392:	e008      	b.n	80073a6 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007394:	463b      	mov	r3, r7
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800739e:	463b      	mov	r3, r7
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073a6:	463b      	mov	r3, r7
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d16f      	bne.n	8007490 <USB_EPStartXfer+0x1072>
 80073b0:	1d3b      	adds	r3, r7, #4
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b8:	1d3b      	adds	r3, r7, #4
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073c8:	4413      	add	r3, r2
 80073ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073ce:	463b      	mov	r3, r7
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	00da      	lsls	r2, r3, #3
 80073d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073da:	4413      	add	r3, r2
 80073dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d116      	bne.n	800741a <USB_EPStartXfer+0xffc>
 80073ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007410:	b29a      	uxth	r2, r3
 8007412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	e05f      	b.n	80074da <USB_EPStartXfer+0x10bc>
 800741a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800741e:	2b3e      	cmp	r3, #62	; 0x3e
 8007420:	d818      	bhi.n	8007454 <USB_EPStartXfer+0x1036>
 8007422:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800742c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <USB_EPStartXfer+0x1024>
 8007438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743c:	3301      	adds	r3, #1
 800743e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007446:	b29b      	uxth	r3, r3
 8007448:	029b      	lsls	r3, r3, #10
 800744a:	b29a      	uxth	r2, r3
 800744c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	e042      	b.n	80074da <USB_EPStartXfer+0x10bc>
 8007454:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007458:	095b      	lsrs	r3, r3, #5
 800745a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800745e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	2b00      	cmp	r3, #0
 8007468:	d104      	bne.n	8007474 <USB_EPStartXfer+0x1056>
 800746a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746e:	3b01      	subs	r3, #1
 8007470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007478:	b29b      	uxth	r3, r3
 800747a:	029b      	lsls	r3, r3, #10
 800747c:	b29b      	uxth	r3, r3
 800747e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007486:	b29a      	uxth	r2, r3
 8007488:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	e024      	b.n	80074da <USB_EPStartXfer+0x10bc>
 8007490:	463b      	mov	r3, r7
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d11f      	bne.n	80074da <USB_EPStartXfer+0x10bc>
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074b2:	4413      	add	r3, r2
 80074b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074b8:	463b      	mov	r3, r7
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	00da      	lsls	r2, r3, #3
 80074c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074c4:	4413      	add	r3, r2
 80074c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80074ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e2:	463b      	mov	r3, r7
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d16f      	bne.n	80075cc <USB_EPStartXfer+0x11ae>
 80074ec:	1d3b      	adds	r3, r7, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074f4:	1d3b      	adds	r3, r7, #4
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007504:	4413      	add	r3, r2
 8007506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800750a:	463b      	mov	r3, r7
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	00da      	lsls	r2, r3, #3
 8007512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007516:	4413      	add	r3, r2
 8007518:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800751c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007524:	2b00      	cmp	r3, #0
 8007526:	d116      	bne.n	8007556 <USB_EPStartXfer+0x1138>
 8007528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007534:	b29a      	uxth	r2, r3
 8007536:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754c:	b29a      	uxth	r2, r3
 800754e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e05e      	b.n	8007614 <USB_EPStartXfer+0x11f6>
 8007556:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800755a:	2b3e      	cmp	r3, #62	; 0x3e
 800755c:	d818      	bhi.n	8007590 <USB_EPStartXfer+0x1172>
 800755e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <USB_EPStartXfer+0x1160>
 8007574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007578:	3301      	adds	r3, #1
 800757a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800757e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007582:	b29b      	uxth	r3, r3
 8007584:	029b      	lsls	r3, r3, #10
 8007586:	b29a      	uxth	r2, r3
 8007588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e041      	b.n	8007614 <USB_EPStartXfer+0x11f6>
 8007590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800759a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800759e:	f003 031f 	and.w	r3, r3, #31
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <USB_EPStartXfer+0x1192>
 80075a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075aa:	3b01      	subs	r3, #1
 80075ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	029b      	lsls	r3, r3, #10
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	e023      	b.n	8007614 <USB_EPStartXfer+0x11f6>
 80075cc:	463b      	mov	r3, r7
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	785b      	ldrb	r3, [r3, #1]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d11e      	bne.n	8007614 <USB_EPStartXfer+0x11f6>
 80075d6:	1d3b      	adds	r3, r7, #4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e6:	4413      	add	r3, r2
 80075e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	00da      	lsls	r2, r3, #3
 80075f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075f8:	4413      	add	r3, r2
 80075fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007602:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007606:	b29a      	uxth	r2, r3
 8007608:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800760c:	801a      	strh	r2, [r3, #0]
 800760e:	e001      	b.n	8007614 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e02e      	b.n	8007672 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007614:	1d3b      	adds	r3, r7, #4
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	463b      	mov	r3, r7
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007632:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007636:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800763a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800763e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007642:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007646:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800764a:	1d3b      	adds	r3, r7, #4
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	463b      	mov	r3, r7
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	441a      	add	r2, r3
 8007658:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800765c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766c:	b29b      	uxth	r3, r3
 800766e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d020      	beq.n	80076d0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a4:	81bb      	strh	r3, [r7, #12]
 80076a6:	89bb      	ldrh	r3, [r7, #12]
 80076a8:	f083 0310 	eor.w	r3, r3, #16
 80076ac:	81bb      	strh	r3, [r7, #12]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	441a      	add	r2, r3
 80076b8:	89bb      	ldrh	r3, [r7, #12]
 80076ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	8013      	strh	r3, [r2, #0]
 80076ce:	e01f      	b.n	8007710 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e6:	81fb      	strh	r3, [r7, #14]
 80076e8:	89fb      	ldrh	r3, [r7, #14]
 80076ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076ee:	81fb      	strh	r3, [r7, #14]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	441a      	add	r2, r3
 80076fa:	89fb      	ldrh	r3, [r7, #14]
 80076fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770c:	b29b      	uxth	r3, r3
 800770e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	7b1b      	ldrb	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 809d 	bne.w	800786c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d04c      	beq.n	80077d4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	823b      	strh	r3, [r7, #16]
 8007748:	8a3b      	ldrh	r3, [r7, #16]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01b      	beq.n	800778a <USB_EPClearStall+0x6c>
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007768:	81fb      	strh	r3, [r7, #14]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	89fb      	ldrh	r3, [r7, #14]
 8007776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800777a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800777e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007782:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007786:	b29b      	uxth	r3, r3
 8007788:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	78db      	ldrb	r3, [r3, #3]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d06c      	beq.n	800786c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a8:	81bb      	strh	r3, [r7, #12]
 80077aa:	89bb      	ldrh	r3, [r7, #12]
 80077ac:	f083 0320 	eor.w	r3, r3, #32
 80077b0:	81bb      	strh	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	89bb      	ldrh	r3, [r7, #12]
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]
 80077d2:	e04b      	b.n	800786c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	82fb      	strh	r3, [r7, #22]
 80077e2:	8afb      	ldrh	r3, [r7, #22]
 80077e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01b      	beq.n	8007824 <USB_EPClearStall+0x106>
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	82bb      	strh	r3, [r7, #20]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	441a      	add	r2, r3
 800780e:	8abb      	ldrh	r3, [r7, #20]
 8007810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800781c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007820:	b29b      	uxth	r3, r3
 8007822:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783a:	827b      	strh	r3, [r7, #18]
 800783c:	8a7b      	ldrh	r3, [r7, #18]
 800783e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007842:	827b      	strh	r3, [r7, #18]
 8007844:	8a7b      	ldrh	r3, [r7, #18]
 8007846:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800784a:	827b      	strh	r3, [r7, #18]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	441a      	add	r2, r3
 8007856:	8a7b      	ldrh	r3, [r7, #18]
 8007858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800785c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007868:	b29b      	uxth	r3, r3
 800786a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2280      	movs	r2, #128	; 0x80
 8007890:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078de:	b29b      	uxth	r3, r3
 80078e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007908:	b480      	push	{r7}
 800790a:	b08d      	sub	sp, #52	; 0x34
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4611      	mov	r1, r2
 8007914:	461a      	mov	r2, r3
 8007916:	460b      	mov	r3, r1
 8007918:	80fb      	strh	r3, [r7, #6]
 800791a:	4613      	mov	r3, r2
 800791c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800791e:	88bb      	ldrh	r3, [r7, #4]
 8007920:	3301      	adds	r3, #1
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800792e:	88fa      	ldrh	r2, [r7, #6]
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007938:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800793e:	e01b      	b.n	8007978 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	3301      	adds	r3, #1
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	b29b      	uxth	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	b29a      	uxth	r2, r3
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	3302      	adds	r3, #2
 800796a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	3301      	adds	r3, #1
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	3b01      	subs	r3, #1
 8007976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e0      	bne.n	8007940 <USB_WritePMA+0x38>
  }
}
 800797e:	bf00      	nop
 8007980:	3734      	adds	r7, #52	; 0x34
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800798a:	b480      	push	{r7}
 800798c:	b08b      	sub	sp, #44	; 0x2c
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4611      	mov	r1, r2
 8007996:	461a      	mov	r2, r3
 8007998:	460b      	mov	r3, r1
 800799a:	80fb      	strh	r3, [r7, #6]
 800799c:	4613      	mov	r3, r2
 800799e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80079a0:	88bb      	ldrh	r3, [r7, #4]
 80079a2:	085b      	lsrs	r3, r3, #1
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079ba:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
 80079c0:	e018      	b.n	80079f4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	3302      	adds	r3, #2
 80079ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	3301      	adds	r3, #1
 80079dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	0a1b      	lsrs	r3, r3, #8
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	3301      	adds	r3, #1
 80079ec:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	3b01      	subs	r3, #1
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e3      	bne.n	80079c2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80079fa:	88bb      	ldrh	r3, [r7, #4]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	701a      	strb	r2, [r3, #0]
  }
}
 8007a16:	bf00      	nop
 8007a18:	372c      	adds	r7, #44	; 0x2c
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a2e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a32:	f002 f89d 	bl	8009b70 <USBD_static_malloc>
 8007a36:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a46:	2302      	movs	r3, #2
 8007a48:	e066      	b.n	8007b18 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7c1b      	ldrb	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d119      	bne.n	8007a8e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a5e:	2202      	movs	r2, #2
 8007a60:	2181      	movs	r1, #129	; 0x81
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 ff29 	bl	80098ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a72:	2202      	movs	r2, #2
 8007a74:	2101      	movs	r1, #1
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 ff1f 	bl	80098ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2210      	movs	r2, #16
 8007a88:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007a8c:	e016      	b.n	8007abc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a8e:	2340      	movs	r3, #64	; 0x40
 8007a90:	2202      	movs	r2, #2
 8007a92:	2181      	movs	r1, #129	; 0x81
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 ff10 	bl	80098ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007aa0:	2340      	movs	r3, #64	; 0x40
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 ff07 	bl	80098ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007abc:	2308      	movs	r3, #8
 8007abe:	2203      	movs	r2, #3
 8007ac0:	2182      	movs	r1, #130	; 0x82
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 fef9 	bl	80098ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7c1b      	ldrb	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007afc:	2101      	movs	r1, #1
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 ffcb 	bl	8009a9a <USBD_LL_PrepareReceive>
 8007b04:	e007      	b.n	8007b16 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b0c:	2340      	movs	r3, #64	; 0x40
 8007b0e:	2101      	movs	r1, #1
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 ffc2 	bl	8009a9a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b2c:	2181      	movs	r1, #129	; 0x81
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fee9 	bl	8009906 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fee2 	bl	8009906 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b4a:	2182      	movs	r1, #130	; 0x82
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 feda 	bl	8009906 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00e      	beq.n	8007b8a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f002 f805 	bl	8009b8c <USBD_static_free>
    pdev->pClassData = NULL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d03a      	beq.n	8007c34 <USBD_CDC_Setup+0xa0>
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	f040 8097 	bne.w	8007cf2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	88db      	ldrh	r3, [r3, #6]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d029      	beq.n	8007c20 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	b25b      	sxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da11      	bge.n	8007bfa <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007be2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	88d2      	ldrh	r2, [r2, #6]
 8007be8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007bea:	6939      	ldr	r1, [r7, #16]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	88db      	ldrh	r3, [r3, #6]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fa8d 	bl	8009112 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007bf8:	e082      	b.n	8007d00 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	785a      	ldrb	r2, [r3, #1]
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	88db      	ldrh	r3, [r3, #6]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007c10:	6939      	ldr	r1, [r7, #16]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	88db      	ldrh	r3, [r3, #6]
 8007c16:	461a      	mov	r2, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 faa6 	bl	800916a <USBD_CtlPrepareRx>
      break;
 8007c1e:	e06f      	b.n	8007d00 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	7850      	ldrb	r0, [r2, #1]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	4798      	blx	r3
      break;
 8007c32:	e065      	b.n	8007d00 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b0b      	cmp	r3, #11
 8007c3a:	d84f      	bhi.n	8007cdc <USBD_CDC_Setup+0x148>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <USBD_CDC_Setup+0xb0>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c75 	.word	0x08007c75
 8007c48:	08007ceb 	.word	0x08007ceb
 8007c4c:	08007cdd 	.word	0x08007cdd
 8007c50:	08007cdd 	.word	0x08007cdd
 8007c54:	08007cdd 	.word	0x08007cdd
 8007c58:	08007cdd 	.word	0x08007cdd
 8007c5c:	08007cdd 	.word	0x08007cdd
 8007c60:	08007cdd 	.word	0x08007cdd
 8007c64:	08007cdd 	.word	0x08007cdd
 8007c68:	08007cdd 	.word	0x08007cdd
 8007c6c:	08007c9d 	.word	0x08007c9d
 8007c70:	08007cc5 	.word	0x08007cc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d107      	bne.n	8007c8e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c7e:	f107 030c 	add.w	r3, r7, #12
 8007c82:	2202      	movs	r2, #2
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fa43 	bl	8009112 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c8c:	e030      	b.n	8007cf0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f9cd 	bl	8009030 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	75fb      	strb	r3, [r7, #23]
          break;
 8007c9a:	e029      	b.n	8007cf0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d107      	bne.n	8007cb6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ca6:	f107 030f 	add.w	r3, r7, #15
 8007caa:	2201      	movs	r2, #1
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 fa2f 	bl	8009112 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cb4:	e01c      	b.n	8007cf0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f9b9 	bl	8009030 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cc2:	e015      	b.n	8007cf0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d00f      	beq.n	8007cee <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 f9ad 	bl	8009030 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007cda:	e008      	b.n	8007cee <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 f9a6 	bl	8009030 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ce8:	e002      	b.n	8007cf0 <USBD_CDC_Setup+0x15c>
          break;
 8007cea:	bf00      	nop
 8007cec:	e008      	b.n	8007d00 <USBD_CDC_Setup+0x16c>
          break;
 8007cee:	bf00      	nop
      }
      break;
 8007cf0:	e006      	b.n	8007d00 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f99b 	bl	8009030 <USBD_CtlError>
      ret = USBD_FAIL;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfe:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop

08007d0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e04f      	b.n	8007dce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	440b      	add	r3, r1
 8007d44:	3318      	adds	r3, #24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d029      	beq.n	8007da0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	78f9      	ldrb	r1, [r7, #3]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	460b      	mov	r3, r1
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	4403      	add	r3, r0
 8007d6c:	3338      	adds	r3, #56	; 0x38
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d74:	fb03 f301 	mul.w	r3, r3, r1
 8007d78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d110      	bne.n	8007da0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3318      	adds	r3, #24
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d92:	78f9      	ldrb	r1, [r7, #3]
 8007d94:	2300      	movs	r3, #0
 8007d96:	2200      	movs	r2, #0
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 fe5d 	bl	8009a58 <USBD_LL_Transmit>
 8007d9e:	e015      	b.n	8007dcc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e015      	b.n	8007e24 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fe6d 	bl	8009adc <USBD_LL_GetRxDataSize>
 8007e02:	4602      	mov	r2, r0
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e3a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d015      	beq.n	8007e72 <USBD_CDC_EP0_RxReady+0x46>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e4c:	2bff      	cmp	r3, #255	; 0xff
 8007e4e:	d010      	beq.n	8007e72 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007e5e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e66:	b292      	uxth	r2, r2
 8007e68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	22ff      	movs	r2, #255	; 0xff
 8007e6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2243      	movs	r2, #67	; 0x43
 8007e88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007e8a:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	20000094 	.word	0x20000094

08007e9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2243      	movs	r2, #67	; 0x43
 8007ea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007eaa:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20000050 	.word	0x20000050

08007ebc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2243      	movs	r2, #67	; 0x43
 8007ec8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007eca:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	200000d8 	.word	0x200000d8

08007edc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	220a      	movs	r2, #10
 8007ee8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007eea:	4b03      	ldr	r3, [pc, #12]	; (8007ef8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	2000000c 	.word	0x2000000c

08007efc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e004      	b.n	8007f1a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b087      	sub	sp, #28
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f38:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f68:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f8e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e01a      	b.n	8007fd8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d114      	bne.n	8007fd6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fca:	2181      	movs	r1, #129	; 0x81
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fd43 	bl	8009a58 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e016      	b.n	800802c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7c1b      	ldrb	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800800c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fd41 	bl	8009a9a <USBD_LL_PrepareReceive>
 8008018:	e007      	b.n	800802a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008020:	2340      	movs	r3, #64	; 0x40
 8008022:	2101      	movs	r1, #1
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 fd38 	bl	8009a9a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008048:	2303      	movs	r3, #3
 800804a:	e01f      	b.n	800808c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	79fa      	ldrb	r2, [r7, #7]
 800807e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f001 fb9f 	bl	80097c4 <USBD_LL_Init>
 8008086:	4603      	mov	r3, r0
 8008088:	75fb      	strb	r3, [r7, #23]

  return ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e016      	b.n	80080da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f107 020e 	add.w	r2, r7, #14
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	4602      	mov	r2, r0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fbca 	bl	8009884 <USBD_LL_Start>
 80080f0:	4603      	mov	r3, r0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	4611      	mov	r1, r2
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4611      	mov	r1, r2
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
  }

  return USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 ff16 	bl	8008fbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081ac:	f003 031f 	and.w	r3, r3, #31
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d00e      	beq.n	80081d2 <USBD_LL_SetupStage+0x5a>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d302      	bcc.n	80081be <USBD_LL_SetupStage+0x46>
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d014      	beq.n	80081e6 <USBD_LL_SetupStage+0x6e>
 80081bc:	e01d      	b.n	80081fa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9d6 	bl	8008578 <USBD_StdDevReq>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
      break;
 80081d0:	e020      	b.n	8008214 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa3a 	bl	8008654 <USBD_StdItfReq>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]
      break;
 80081e4:	e016      	b.n	8008214 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa76 	bl	80086e0 <USBD_StdEPReq>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
      break;
 80081f8:	e00c      	b.n	8008214 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008200:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008204:	b2db      	uxtb	r3, r3
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 fb9b 	bl	8009944 <USBD_LL_StallEP>
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]
      break;
 8008212:	bf00      	nop
  }

  return ret;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b086      	sub	sp, #24
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	460b      	mov	r3, r1
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d137      	bne.n	80082a2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008238:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008240:	2b03      	cmp	r3, #3
 8008242:	d14a      	bne.n	80082da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	429a      	cmp	r2, r3
 800824e:	d913      	bls.n	8008278 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	1ad2      	subs	r2, r2, r3
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	4293      	cmp	r3, r2
 8008268:	bf28      	it	cs
 800826a:	4613      	movcs	r3, r2
 800826c:	461a      	mov	r2, r3
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 ff97 	bl	80091a4 <USBD_CtlContinueRx>
 8008276:	e030      	b.n	80082da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800828a:	2b03      	cmp	r3, #3
 800828c:	d105      	bne.n	800829a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 ff93 	bl	80091c6 <USBD_CtlSendStatus>
 80082a0:	e01b      	b.n	80082da <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d013      	beq.n	80082d6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d10e      	bne.n	80082d6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	7afa      	ldrb	r2, [r7, #11]
 80082c2:	4611      	mov	r1, r2
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	4798      	blx	r3
 80082c8:	4603      	mov	r3, r0
 80082ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	e002      	b.n	80082dc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e000      	b.n	80082dc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	460b      	mov	r3, r1
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082f2:	7afb      	ldrb	r3, [r7, #11]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d16a      	bne.n	80083ce <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3314      	adds	r3, #20
 80082fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008304:	2b02      	cmp	r3, #2
 8008306:	d155      	bne.n	80083b4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	429a      	cmp	r2, r3
 8008312:	d914      	bls.n	800833e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	1ad2      	subs	r2, r2, r3
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	461a      	mov	r2, r3
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 ff0c 	bl	8009148 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008330:	2300      	movs	r3, #0
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f001 fbaf 	bl	8009a9a <USBD_LL_PrepareReceive>
 800833c:	e03a      	b.n	80083b4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	d11c      	bne.n	8008384 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008352:	429a      	cmp	r2, r3
 8008354:	d316      	bcc.n	8008384 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008360:	429a      	cmp	r2, r3
 8008362:	d20f      	bcs.n	8008384 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008364:	2200      	movs	r2, #0
 8008366:	2100      	movs	r1, #0
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 feed 	bl	8009148 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008376:	2300      	movs	r3, #0
 8008378:	2200      	movs	r2, #0
 800837a:	2100      	movs	r1, #0
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f001 fb8c 	bl	8009a9a <USBD_LL_PrepareReceive>
 8008382:	e017      	b.n	80083b4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008396:	2b03      	cmp	r3, #3
 8008398:	d105      	bne.n	80083a6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f001 facb 	bl	8009944 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 ff1c 	bl	80091ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d123      	bne.n	8008406 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff fe9b 	bl	80080fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083cc:	e01b      	b.n	8008406 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d013      	beq.n	8008402 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d10e      	bne.n	8008402 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	7afa      	ldrb	r2, [r7, #11]
 80083ee:	4611      	mov	r1, r2
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	4798      	blx	r3
 80083f4:	4603      	mov	r3, r0
 80083f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	e002      	b.n	8008408 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008402:	2303      	movs	r3, #3
 8008404:	e000      	b.n	8008408 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800843c:	2b00      	cmp	r3, #0
 800843e:	d009      	beq.n	8008454 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6852      	ldr	r2, [r2, #4]
 800844c:	b2d2      	uxtb	r2, r2
 800844e:	4611      	mov	r1, r2
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008454:	2340      	movs	r3, #64	; 0x40
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f001 fa2d 	bl	80098ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2240      	movs	r2, #64	; 0x40
 800846c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008470:	2340      	movs	r3, #64	; 0x40
 8008472:	2200      	movs	r2, #0
 8008474:	2180      	movs	r1, #128	; 0x80
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fa1f 	bl	80098ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2240      	movs	r2, #64	; 0x40
 8008486:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2204      	movs	r2, #4
 80084ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d105      	bne.n	80084fa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008516:	2b03      	cmp	r3, #3
 8008518:	d10b      	bne.n	8008532 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	3301      	adds	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800855a:	8a3b      	ldrh	r3, [r7, #16]
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	b21a      	sxth	r2, r3
 8008560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008564:	4313      	orrs	r3, r2
 8008566:	b21b      	sxth	r3, r3
 8008568:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800856a:	89fb      	ldrh	r3, [r7, #14]
}
 800856c:	4618      	mov	r0, r3
 800856e:	371c      	adds	r7, #28
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800858e:	2b20      	cmp	r3, #32
 8008590:	d004      	beq.n	800859c <USBD_StdDevReq+0x24>
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d002      	beq.n	800859c <USBD_StdDevReq+0x24>
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <USBD_StdDevReq+0x38>
 800859a:	e050      	b.n	800863e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
    break;
 80085ae:	e04b      	b.n	8008648 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	785b      	ldrb	r3, [r3, #1]
 80085b4:	2b09      	cmp	r3, #9
 80085b6:	d83c      	bhi.n	8008632 <USBD_StdDevReq+0xba>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <USBD_StdDevReq+0x48>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008629 	.word	0x08008629
 80085c8:	08008633 	.word	0x08008633
 80085cc:	0800861f 	.word	0x0800861f
 80085d0:	08008633 	.word	0x08008633
 80085d4:	080085f3 	.word	0x080085f3
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	08008633 	.word	0x08008633
 80085e0:	0800860b 	.word	0x0800860b
 80085e4:	080085fd 	.word	0x080085fd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f9d0 	bl	8008990 <USBD_GetDescriptor>
      break;
 80085f0:	e024      	b.n	800863c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fb5f 	bl	8008cb8 <USBD_SetAddress>
      break;
 80085fa:	e01f      	b.n	800863c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fb9c 	bl	8008d3c <USBD_SetConfig>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
      break;
 8008608:	e018      	b.n	800863c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fc39 	bl	8008e84 <USBD_GetConfig>
      break;
 8008612:	e013      	b.n	800863c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fc68 	bl	8008eec <USBD_GetStatus>
      break;
 800861c:	e00e      	b.n	800863c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc96 	bl	8008f52 <USBD_SetFeature>
      break;
 8008626:	e009      	b.n	800863c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fca5 	bl	8008f7a <USBD_ClrFeature>
      break;
 8008630:	e004      	b.n	800863c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fcfb 	bl	8009030 <USBD_CtlError>
      break;
 800863a:	bf00      	nop
    }
    break;
 800863c:	e004      	b.n	8008648 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fcf5 	bl	8009030 <USBD_CtlError>
    break;
 8008646:	bf00      	nop
  }

  return ret;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop

08008654 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800866a:	2b20      	cmp	r3, #32
 800866c:	d003      	beq.n	8008676 <USBD_StdItfReq+0x22>
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d001      	beq.n	8008676 <USBD_StdItfReq+0x22>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d12a      	bne.n	80086cc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867c:	3b01      	subs	r3, #1
 800867e:	2b02      	cmp	r3, #2
 8008680:	d81d      	bhi.n	80086be <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	889b      	ldrh	r3, [r3, #4]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b01      	cmp	r3, #1
 800868a:	d813      	bhi.n	80086b4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d110      	bne.n	80086c8 <USBD_StdItfReq+0x74>
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10d      	bne.n	80086c8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fd8a 	bl	80091c6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80086b2:	e009      	b.n	80086c8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fcba 	bl	8009030 <USBD_CtlError>
      break;
 80086bc:	e004      	b.n	80086c8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fcb5 	bl	8009030 <USBD_CtlError>
      break;
 80086c6:	e000      	b.n	80086ca <USBD_StdItfReq+0x76>
      break;
 80086c8:	bf00      	nop
    }
    break;
 80086ca:	e004      	b.n	80086d6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fcae 	bl	8009030 <USBD_CtlError>
    break;
 80086d4:	bf00      	nop
  }

  return ret;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	889b      	ldrh	r3, [r3, #4]
 80086f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d004      	beq.n	800870a <USBD_StdEPReq+0x2a>
 8008700:	2b40      	cmp	r3, #64	; 0x40
 8008702:	d002      	beq.n	800870a <USBD_StdEPReq+0x2a>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <USBD_StdEPReq+0x3e>
 8008708:	e137      	b.n	800897a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]
    break;
 800871c:	e132      	b.n	8008984 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d03e      	beq.n	80087a4 <USBD_StdEPReq+0xc4>
 8008726:	2b03      	cmp	r3, #3
 8008728:	d002      	beq.n	8008730 <USBD_StdEPReq+0x50>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d079      	beq.n	8008822 <USBD_StdEPReq+0x142>
 800872e:	e11e      	b.n	800896e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008736:	2b02      	cmp	r3, #2
 8008738:	d002      	beq.n	8008740 <USBD_StdEPReq+0x60>
 800873a:	2b03      	cmp	r3, #3
 800873c:	d015      	beq.n	800876a <USBD_StdEPReq+0x8a>
 800873e:	e02b      	b.n	8008798 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00c      	beq.n	8008760 <USBD_StdEPReq+0x80>
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b80      	cmp	r3, #128	; 0x80
 800874a:	d009      	beq.n	8008760 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 f8f7 	bl	8009944 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008756:	2180      	movs	r1, #128	; 0x80
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 f8f3 	bl	8009944 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800875e:	e020      	b.n	80087a2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fc64 	bl	8009030 <USBD_CtlError>
        break;
 8008768:	e01b      	b.n	80087a2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10e      	bne.n	8008790 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008772:	7bbb      	ldrb	r3, [r7, #14]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <USBD_StdEPReq+0xb0>
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	2b80      	cmp	r3, #128	; 0x80
 800877c:	d008      	beq.n	8008790 <USBD_StdEPReq+0xb0>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	88db      	ldrh	r3, [r3, #6]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 f8da 	bl	8009944 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fd18 	bl	80091c6 <USBD_CtlSendStatus>

        break;
 8008796:	e004      	b.n	80087a2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc48 	bl	8009030 <USBD_CtlError>
        break;
 80087a0:	bf00      	nop
      }
      break;
 80087a2:	e0e9      	b.n	8008978 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d002      	beq.n	80087b4 <USBD_StdEPReq+0xd4>
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d015      	beq.n	80087de <USBD_StdEPReq+0xfe>
 80087b2:	e02f      	b.n	8008814 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00c      	beq.n	80087d4 <USBD_StdEPReq+0xf4>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b80      	cmp	r3, #128	; 0x80
 80087be:	d009      	beq.n	80087d4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f8bd 	bl	8009944 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ca:	2180      	movs	r1, #128	; 0x80
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f8b9 	bl	8009944 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80087d2:	e025      	b.n	8008820 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fc2a 	bl	8009030 <USBD_CtlError>
        break;
 80087dc:	e020      	b.n	8008820 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d11b      	bne.n	800881e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d004      	beq.n	80087fa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 f8c4 	bl	8009982 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fce3 	bl	80091c6 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4798      	blx	r3
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008812:	e004      	b.n	800881e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fc0a 	bl	8009030 <USBD_CtlError>
        break;
 800881c:	e000      	b.n	8008820 <USBD_StdEPReq+0x140>
        break;
 800881e:	bf00      	nop
      }
      break;
 8008820:	e0aa      	b.n	8008978 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	2b02      	cmp	r3, #2
 800882a:	d002      	beq.n	8008832 <USBD_StdEPReq+0x152>
 800882c:	2b03      	cmp	r3, #3
 800882e:	d032      	beq.n	8008896 <USBD_StdEPReq+0x1b6>
 8008830:	e097      	b.n	8008962 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <USBD_StdEPReq+0x168>
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b80      	cmp	r3, #128	; 0x80
 800883c:	d004      	beq.n	8008848 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fbf5 	bl	8009030 <USBD_CtlError>
          break;
 8008846:	e091      	b.n	800896c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800884c:	2b00      	cmp	r3, #0
 800884e:	da0b      	bge.n	8008868 <USBD_StdEPReq+0x188>
 8008850:	7bbb      	ldrb	r3, [r7, #14]
 8008852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	3310      	adds	r3, #16
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	4413      	add	r3, r2
 8008864:	3304      	adds	r3, #4
 8008866:	e00b      	b.n	8008880 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	3304      	adds	r3, #4
 8008880:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2202      	movs	r2, #2
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fc3f 	bl	8009112 <USBD_CtlSendData>
        break;
 8008894:	e06a      	b.n	800896c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800889a:	2b00      	cmp	r3, #0
 800889c:	da11      	bge.n	80088c2 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	f003 020f 	and.w	r2, r3, #15
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	440b      	add	r3, r1
 80088b0:	3324      	adds	r3, #36	; 0x24
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d117      	bne.n	80088e8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fbb8 	bl	8009030 <USBD_CtlError>
            break;
 80088c0:	e054      	b.n	800896c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	f003 020f 	and.w	r2, r3, #15
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fba5 	bl	8009030 <USBD_CtlError>
            break;
 80088e6:	e041      	b.n	800896c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	da0b      	bge.n	8008908 <USBD_StdEPReq+0x228>
 80088f0:	7bbb      	ldrb	r3, [r7, #14]
 80088f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088f6:	4613      	mov	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	3310      	adds	r3, #16
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	4413      	add	r3, r2
 8008904:	3304      	adds	r3, #4
 8008906:	e00b      	b.n	8008920 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	3304      	adds	r3, #4
 8008920:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <USBD_StdEPReq+0x24e>
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	2b80      	cmp	r3, #128	; 0x80
 800892c:	d103      	bne.n	8008936 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e00e      	b.n	8008954 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f840 	bl	80099c0 <USBD_LL_IsStallEP>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2201      	movs	r2, #1
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e002      	b.n	8008954 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2202      	movs	r2, #2
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fbd9 	bl	8009112 <USBD_CtlSendData>
          break;
 8008960:	e004      	b.n	800896c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fb63 	bl	8009030 <USBD_CtlError>
        break;
 800896a:	bf00      	nop
      }
      break;
 800896c:	e004      	b.n	8008978 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fb5d 	bl	8009030 <USBD_CtlError>
      break;
 8008976:	bf00      	nop
    }
    break;
 8008978:	e004      	b.n	8008984 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fb57 	bl	8009030 <USBD_CtlError>
    break;
 8008982:	bf00      	nop
  }

  return ret;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	885b      	ldrh	r3, [r3, #2]
 80089aa:	0a1b      	lsrs	r3, r3, #8
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	3b01      	subs	r3, #1
 80089b0:	2b0e      	cmp	r3, #14
 80089b2:	f200 8152 	bhi.w	8008c5a <USBD_GetDescriptor+0x2ca>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <USBD_GetDescriptor+0x2c>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	08008a2d 	.word	0x08008a2d
 80089c0:	08008a45 	.word	0x08008a45
 80089c4:	08008a85 	.word	0x08008a85
 80089c8:	08008c5b 	.word	0x08008c5b
 80089cc:	08008c5b 	.word	0x08008c5b
 80089d0:	08008bfb 	.word	0x08008bfb
 80089d4:	08008c27 	.word	0x08008c27
 80089d8:	08008c5b 	.word	0x08008c5b
 80089dc:	08008c5b 	.word	0x08008c5b
 80089e0:	08008c5b 	.word	0x08008c5b
 80089e4:	08008c5b 	.word	0x08008c5b
 80089e8:	08008c5b 	.word	0x08008c5b
 80089ec:	08008c5b 	.word	0x08008c5b
 80089f0:	08008c5b 	.word	0x08008c5b
 80089f4:	080089f9 	.word	0x080089f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a1a:	e126      	b.n	8008c6a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fb06 	bl	8009030 <USBD_CtlError>
      err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
    break;
 8008a2a:	e11e      	b.n	8008c6a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
    break;
 8008a42:	e112      	b.n	8008c6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7c1b      	ldrb	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10d      	bne.n	8008a68 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	f107 0208 	add.w	r2, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3301      	adds	r3, #1
 8008a62:	2202      	movs	r2, #2
 8008a64:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008a66:	e100      	b.n	8008c6a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	f107 0208 	add.w	r2, r7, #8
 8008a74:	4610      	mov	r0, r2
 8008a76:	4798      	blx	r3
 8008a78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	2202      	movs	r2, #2
 8008a80:	701a      	strb	r2, [r3, #0]
    break;
 8008a82:	e0f2      	b.n	8008c6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	885b      	ldrh	r3, [r3, #2]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	f200 80ac 	bhi.w	8008be8 <USBD_GetDescriptor+0x258>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <USBD_GetDescriptor+0x108>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008ab1 	.word	0x08008ab1
 8008a9c:	08008ae5 	.word	0x08008ae5
 8008aa0:	08008b19 	.word	0x08008b19
 8008aa4:	08008b4d 	.word	0x08008b4d
 8008aa8:	08008b81 	.word	0x08008b81
 8008aac:	08008bb5 	.word	0x08008bb5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad2:	e091      	b.n	8008bf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 faaa 	bl	8009030 <USBD_CtlError>
        err++;
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae2:	e089      	b.n	8008bf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7c12      	ldrb	r2, [r2, #16]
 8008afc:	f107 0108 	add.w	r1, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b06:	e077      	b.n	8008bf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa90 	bl	8009030 <USBD_CtlError>
        err++;
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	3301      	adds	r3, #1
 8008b14:	72fb      	strb	r3, [r7, #11]
      break;
 8008b16:	e06f      	b.n	8008bf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00b      	beq.n	8008b3c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	7c12      	ldrb	r2, [r2, #16]
 8008b30:	f107 0108 	add.w	r1, r7, #8
 8008b34:	4610      	mov	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b3a:	e05d      	b.n	8008bf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa76 	bl	8009030 <USBD_CtlError>
        err++;
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	3301      	adds	r3, #1
 8008b48:	72fb      	strb	r3, [r7, #11]
      break;
 8008b4a:	e055      	b.n	8008bf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00b      	beq.n	8008b70 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	7c12      	ldrb	r2, [r2, #16]
 8008b64:	f107 0108 	add.w	r1, r7, #8
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
 8008b6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b6e:	e043      	b.n	8008bf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa5c 	bl	8009030 <USBD_CtlError>
        err++;
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	72fb      	strb	r3, [r7, #11]
      break;
 8008b7e:	e03b      	b.n	8008bf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00b      	beq.n	8008ba4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	7c12      	ldrb	r2, [r2, #16]
 8008b98:	f107 0108 	add.w	r1, r7, #8
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	4798      	blx	r3
 8008ba0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ba2:	e029      	b.n	8008bf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa42 	bl	8009030 <USBD_CtlError>
        err++;
 8008bac:	7afb      	ldrb	r3, [r7, #11]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	72fb      	strb	r3, [r7, #11]
      break;
 8008bb2:	e021      	b.n	8008bf8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7c12      	ldrb	r2, [r2, #16]
 8008bcc:	f107 0108 	add.w	r1, r7, #8
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3
 8008bd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bd6:	e00f      	b.n	8008bf8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa28 	bl	8009030 <USBD_CtlError>
        err++;
 8008be0:	7afb      	ldrb	r3, [r7, #11]
 8008be2:	3301      	adds	r3, #1
 8008be4:	72fb      	strb	r3, [r7, #11]
      break;
 8008be6:	e007      	b.n	8008bf8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa20 	bl	8009030 <USBD_CtlError>
      err++;
 8008bf0:	7afb      	ldrb	r3, [r7, #11]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008bf6:	bf00      	nop
    }
    break;
 8008bf8:	e037      	b.n	8008c6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	7c1b      	ldrb	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	f107 0208 	add.w	r2, r7, #8
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4798      	blx	r3
 8008c12:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c14:	e029      	b.n	8008c6a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa09 	bl	8009030 <USBD_CtlError>
      err++;
 8008c1e:	7afb      	ldrb	r3, [r7, #11]
 8008c20:	3301      	adds	r3, #1
 8008c22:	72fb      	strb	r3, [r7, #11]
    break;
 8008c24:	e021      	b.n	8008c6a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	7c1b      	ldrb	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10d      	bne.n	8008c4a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	f107 0208 	add.w	r2, r7, #8
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4798      	blx	r3
 8008c3e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	2207      	movs	r2, #7
 8008c46:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c48:	e00f      	b.n	8008c6a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f9ef 	bl	8009030 <USBD_CtlError>
      err++;
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	3301      	adds	r3, #1
 8008c56:	72fb      	strb	r3, [r7, #11]
    break;
 8008c58:	e007      	b.n	8008c6a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9e7 	bl	8009030 <USBD_CtlError>
    err++;
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	3301      	adds	r3, #1
 8008c66:	72fb      	strb	r3, [r7, #11]
    break;
 8008c68:	bf00      	nop
  }

  if (err != 0U)
 8008c6a:	7afb      	ldrb	r3, [r7, #11]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d11e      	bne.n	8008cae <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	88db      	ldrh	r3, [r3, #6]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d016      	beq.n	8008ca6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008c78:	893b      	ldrh	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00e      	beq.n	8008c9c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	88da      	ldrh	r2, [r3, #6]
 8008c82:	893b      	ldrh	r3, [r7, #8]
 8008c84:	4293      	cmp	r3, r2
 8008c86:	bf28      	it	cs
 8008c88:	4613      	movcs	r3, r2
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c8e:	893b      	ldrh	r3, [r7, #8]
 8008c90:	461a      	mov	r2, r3
 8008c92:	68f9      	ldr	r1, [r7, #12]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa3c 	bl	8009112 <USBD_CtlSendData>
 8008c9a:	e009      	b.n	8008cb0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f9c6 	bl	8009030 <USBD_CtlError>
 8008ca4:	e004      	b.n	8008cb0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa8d 	bl	80091c6 <USBD_CtlSendStatus>
 8008cac:	e000      	b.n	8008cb0 <USBD_GetDescriptor+0x320>
    return;
 8008cae:	bf00      	nop
    }
  }
}
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop

08008cb8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	889b      	ldrh	r3, [r3, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d130      	bne.n	8008d2c <USBD_SetAddress+0x74>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	88db      	ldrh	r3, [r3, #6]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d12c      	bne.n	8008d2c <USBD_SetAddress+0x74>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	885b      	ldrh	r3, [r3, #2]
 8008cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8008cd8:	d828      	bhi.n	8008d2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	885b      	ldrh	r3, [r3, #2]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d104      	bne.n	8008cfa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f99c 	bl	8009030 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf8:	e01c      	b.n	8008d34 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7bfa      	ldrb	r2, [r7, #15]
 8008cfe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fe87 	bl	8009a1a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fa5a 	bl	80091c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d004      	beq.n	8008d22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d20:	e008      	b.n	8008d34 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2a:	e003      	b.n	8008d34 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f97e 	bl	8009030 <USBD_CtlError>
  }
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	885b      	ldrh	r3, [r3, #2]
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	4b4b      	ldr	r3, [pc, #300]	; (8008e80 <USBD_SetConfig+0x144>)
 8008d52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d54:	4b4a      	ldr	r3, [pc, #296]	; (8008e80 <USBD_SetConfig+0x144>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d905      	bls.n	8008d68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f966 	bl	8009030 <USBD_CtlError>
    return USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e087      	b.n	8008e78 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d002      	beq.n	8008d78 <USBD_SetConfig+0x3c>
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d025      	beq.n	8008dc2 <USBD_SetConfig+0x86>
 8008d76:	e071      	b.n	8008e5c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008d78:	4b41      	ldr	r3, [pc, #260]	; (8008e80 <USBD_SetConfig+0x144>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01c      	beq.n	8008dba <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008d80:	4b3f      	ldr	r3, [pc, #252]	; (8008e80 <USBD_SetConfig+0x144>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d8a:	4b3d      	ldr	r3, [pc, #244]	; (8008e80 <USBD_SetConfig+0x144>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff f9bd 	bl	8008110 <USBD_SetClassConfig>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d004      	beq.n	8008daa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f944 	bl	8009030 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008da8:	e065      	b.n	8008e76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa0b 	bl	80091c6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2203      	movs	r2, #3
 8008db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008db8:	e05d      	b.n	8008e76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa03 	bl	80091c6 <USBD_CtlSendStatus>
    break;
 8008dc0:	e059      	b.n	8008e76 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008dc2:	4b2f      	ldr	r3, [pc, #188]	; (8008e80 <USBD_SetConfig+0x144>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d112      	bne.n	8008df0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008dd2:	4b2b      	ldr	r3, [pc, #172]	; (8008e80 <USBD_SetConfig+0x144>)
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ddc:	4b28      	ldr	r3, [pc, #160]	; (8008e80 <USBD_SetConfig+0x144>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff f9b0 	bl	8008148 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9ec 	bl	80091c6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008dee:	e042      	b.n	8008e76 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008df0:	4b23      	ldr	r3, [pc, #140]	; (8008e80 <USBD_SetConfig+0x144>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d02a      	beq.n	8008e54 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff f99e 	bl	8008148 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008e0c:	4b1c      	ldr	r3, [pc, #112]	; (8008e80 <USBD_SetConfig+0x144>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e16:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <USBD_SetConfig+0x144>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff f977 	bl	8008110 <USBD_SetClassConfig>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00f      	beq.n	8008e4c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f8fe 	bl	8009030 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff f983 	bl	8008148 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2202      	movs	r2, #2
 8008e46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e4a:	e014      	b.n	8008e76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f9ba 	bl	80091c6 <USBD_CtlSendStatus>
    break;
 8008e52:	e010      	b.n	8008e76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f9b6 	bl	80091c6 <USBD_CtlSendStatus>
    break;
 8008e5a:	e00c      	b.n	8008e76 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f8e6 	bl	8009030 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e64:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <USBD_SetConfig+0x144>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff f96c 	bl	8008148 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	73fb      	strb	r3, [r7, #15]
    break;
 8008e74:	bf00      	nop
  }

  return ret;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	200001e0 	.word	0x200001e0

08008e84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d004      	beq.n	8008ea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f8c9 	bl	8009030 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008e9e:	e021      	b.n	8008ee4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	db17      	blt.n	8008eda <USBD_GetConfig+0x56>
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	dd02      	ble.n	8008eb4 <USBD_GetConfig+0x30>
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d00b      	beq.n	8008eca <USBD_GetConfig+0x46>
 8008eb2:	e012      	b.n	8008eda <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f925 	bl	8009112 <USBD_CtlSendData>
      break;
 8008ec8:	e00c      	b.n	8008ee4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	2201      	movs	r2, #1
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f91d 	bl	8009112 <USBD_CtlSendData>
      break;
 8008ed8:	e004      	b.n	8008ee4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f8a7 	bl	8009030 <USBD_CtlError>
      break;
 8008ee2:	bf00      	nop
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	3b01      	subs	r3, #1
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d81e      	bhi.n	8008f40 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	88db      	ldrh	r3, [r3, #6]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d004      	beq.n	8008f14 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f88f 	bl	8009030 <USBD_CtlError>
      break;
 8008f12:	e01a      	b.n	8008f4a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f043 0202 	orr.w	r2, r3, #2
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	330c      	adds	r3, #12
 8008f34:	2202      	movs	r2, #2
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8ea 	bl	8009112 <USBD_CtlSendData>
    break;
 8008f3e:	e004      	b.n	8008f4a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f874 	bl	8009030 <USBD_CtlError>
    break;
 8008f48:	bf00      	nop
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d106      	bne.n	8008f72 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f92a 	bl	80091c6 <USBD_CtlSendStatus>
  }
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d80b      	bhi.n	8008fa8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	885b      	ldrh	r3, [r3, #2]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d10c      	bne.n	8008fb2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f910 	bl	80091c6 <USBD_CtlSendStatus>
      }
      break;
 8008fa6:	e004      	b.n	8008fb2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f840 	bl	8009030 <USBD_CtlError>
      break;
 8008fb0:	e000      	b.n	8008fb4 <USBD_ClrFeature+0x3a>
      break;
 8008fb2:	bf00      	nop
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	781a      	ldrb	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff faa8 	bl	800853c <SWAPBYTE>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff fa9b 	bl	800853c <SWAPBYTE>
 8009006:	4603      	mov	r3, r0
 8009008:	461a      	mov	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3301      	adds	r3, #1
 8009012:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff fa8e 	bl	800853c <SWAPBYTE>
 8009020:	4603      	mov	r3, r0
 8009022:	461a      	mov	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	80da      	strh	r2, [r3, #6]
}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800903a:	2180      	movs	r1, #128	; 0x80
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fc81 	bl	8009944 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fc7d 	bl	8009944 <USBD_LL_StallEP>
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b086      	sub	sp, #24
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d036      	beq.n	80090d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800906c:	6938      	ldr	r0, [r7, #16]
 800906e:	f000 f836 	bl	80090de <USBD_GetLen>
 8009072:	4603      	mov	r3, r0
 8009074:	3301      	adds	r3, #1
 8009076:	b29b      	uxth	r3, r3
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	4413      	add	r3, r2
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	7812      	ldrb	r2, [r2, #0]
 800908a:	701a      	strb	r2, [r3, #0]
  idx++;
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	3301      	adds	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	4413      	add	r3, r2
 8009098:	2203      	movs	r2, #3
 800909a:	701a      	strb	r2, [r3, #0]
  idx++;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	3301      	adds	r3, #1
 80090a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80090a2:	e013      	b.n	80090cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	4413      	add	r3, r2
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	7812      	ldrb	r2, [r2, #0]
 80090ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	3301      	adds	r3, #1
 80090b4:	613b      	str	r3, [r7, #16]
    idx++;
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
 80090b8:	3301      	adds	r3, #1
 80090ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4413      	add	r3, r2
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
    idx++;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	3301      	adds	r3, #1
 80090ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e7      	bne.n	80090a4 <USBD_GetString+0x52>
 80090d4:	e000      	b.n	80090d8 <USBD_GetString+0x86>
    return;
 80090d6:	bf00      	nop
  }
}
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090ee:	e005      	b.n	80090fc <USBD_GetLen+0x1e>
  {
    len++;
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	3301      	adds	r3, #1
 80090f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	3301      	adds	r3, #1
 80090fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1f5      	bne.n	80090f0 <USBD_GetLen+0x12>
  }

  return len;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2202      	movs	r2, #2
 8009122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	2100      	movs	r1, #0
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 fc8d 	bl	8009a58 <USBD_LL_Transmit>

  return USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	2100      	movs	r1, #0
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 fc7c 	bl	8009a58 <USBD_LL_Transmit>

  return USBD_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2203      	movs	r2, #3
 800917a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	2100      	movs	r1, #0
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 fc80 	bl	8009a9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	2100      	movs	r1, #0
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fc6f 	bl	8009a9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2204      	movs	r2, #4
 80091d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091d6:	2300      	movs	r3, #0
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fc3b 	bl	8009a58 <USBD_LL_Transmit>

  return USBD_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2205      	movs	r2, #5
 80091f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091fc:	2300      	movs	r3, #0
 80091fe:	2200      	movs	r2, #0
 8009200:	2100      	movs	r1, #0
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fc49 	bl	8009a9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009218:	2200      	movs	r2, #0
 800921a:	4912      	ldr	r1, [pc, #72]	; (8009264 <MX_USB_Device_Init+0x50>)
 800921c:	4812      	ldr	r0, [pc, #72]	; (8009268 <MX_USB_Device_Init+0x54>)
 800921e:	f7fe ff09 	bl	8008034 <USBD_Init>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009228:	f7f7 fef0 	bl	800100c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800922c:	490f      	ldr	r1, [pc, #60]	; (800926c <MX_USB_Device_Init+0x58>)
 800922e:	480e      	ldr	r0, [pc, #56]	; (8009268 <MX_USB_Device_Init+0x54>)
 8009230:	f7fe ff30 	bl	8008094 <USBD_RegisterClass>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800923a:	f7f7 fee7 	bl	800100c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800923e:	490c      	ldr	r1, [pc, #48]	; (8009270 <MX_USB_Device_Init+0x5c>)
 8009240:	4809      	ldr	r0, [pc, #36]	; (8009268 <MX_USB_Device_Init+0x54>)
 8009242:	f7fe fe5b 	bl	8007efc <USBD_CDC_RegisterInterface>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800924c:	f7f7 fede 	bl	800100c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009250:	4805      	ldr	r0, [pc, #20]	; (8009268 <MX_USB_Device_Init+0x54>)
 8009252:	f7fe ff46 	bl	80080e2 <USBD_Start>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800925c:	f7f7 fed6 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009260:	bf00      	nop
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000130 	.word	0x20000130
 8009268:	200006b4 	.word	0x200006b4
 800926c:	20000018 	.word	0x20000018
 8009270:	2000011c 	.word	0x2000011c

08009274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009278:	2200      	movs	r2, #0
 800927a:	4905      	ldr	r1, [pc, #20]	; (8009290 <CDC_Init_FS+0x1c>)
 800927c:	4805      	ldr	r0, [pc, #20]	; (8009294 <CDC_Init_FS+0x20>)
 800927e:	f7fe fe52 	bl	8007f26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009282:	4905      	ldr	r1, [pc, #20]	; (8009298 <CDC_Init_FS+0x24>)
 8009284:	4803      	ldr	r0, [pc, #12]	; (8009294 <CDC_Init_FS+0x20>)
 8009286:	f7fe fe67 	bl	8007f58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800928a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800928c:	4618      	mov	r0, r3
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20000d6c 	.word	0x20000d6c
 8009294:	200006b4 	.word	0x200006b4
 8009298:	20000984 	.word	0x20000984

0800929c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
 80092b8:	4613      	mov	r3, r2
 80092ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b23      	cmp	r3, #35	; 0x23
 80092c0:	d84a      	bhi.n	8009358 <CDC_Control_FS+0xac>
 80092c2:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <CDC_Control_FS+0x1c>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	08009359 	.word	0x08009359
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009359 	.word	0x08009359
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009359 	.word	0x08009359
 80092dc:	08009359 	.word	0x08009359
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009359 	.word	0x08009359
 80092e8:	08009359 	.word	0x08009359
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009359 	.word	0x08009359
 80092f4:	08009359 	.word	0x08009359
 80092f8:	08009359 	.word	0x08009359
 80092fc:	08009359 	.word	0x08009359
 8009300:	08009359 	.word	0x08009359
 8009304:	08009359 	.word	0x08009359
 8009308:	08009359 	.word	0x08009359
 800930c:	08009359 	.word	0x08009359
 8009310:	08009359 	.word	0x08009359
 8009314:	08009359 	.word	0x08009359
 8009318:	08009359 	.word	0x08009359
 800931c:	08009359 	.word	0x08009359
 8009320:	08009359 	.word	0x08009359
 8009324:	08009359 	.word	0x08009359
 8009328:	08009359 	.word	0x08009359
 800932c:	08009359 	.word	0x08009359
 8009330:	08009359 	.word	0x08009359
 8009334:	08009359 	.word	0x08009359
 8009338:	08009359 	.word	0x08009359
 800933c:	08009359 	.word	0x08009359
 8009340:	08009359 	.word	0x08009359
 8009344:	08009359 	.word	0x08009359
 8009348:	08009359 	.word	0x08009359
 800934c:	08009359 	.word	0x08009359
 8009350:	08009359 	.word	0x08009359
 8009354:	08009359 	.word	0x08009359
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009358:	bf00      	nop
  }

  return (USBD_OK);
 800935a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7f6 ff4f 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4805      	ldr	r0, [pc, #20]	; (8009394 <CDC_Receive_FS+0x2c>)
 800937e:	f7fe fdeb 	bl	8007f58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009382:	4804      	ldr	r0, [pc, #16]	; (8009394 <CDC_Receive_FS+0x2c>)
 8009384:	f7fe fe2c 	bl	8007fe0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009388:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	200006b4 	.word	0x200006b4

08009398 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80093a8:	4b0d      	ldr	r3, [pc, #52]	; (80093e0 <CDC_Transmit_FS+0x48>)
 80093aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e00b      	b.n	80093d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80093be:	887b      	ldrh	r3, [r7, #2]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4806      	ldr	r0, [pc, #24]	; (80093e0 <CDC_Transmit_FS+0x48>)
 80093c6:	f7fe fdae 	bl	8007f26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093ca:	4805      	ldr	r0, [pc, #20]	; (80093e0 <CDC_Transmit_FS+0x48>)
 80093cc:	f7fe fdd8 	bl	8007f80 <USBD_CDC_TransmitPacket>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200006b4 	.word	0x200006b4

080093e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	371c      	adds	r7, #28
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2212      	movs	r2, #18
 8009418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800941a:	4b03      	ldr	r3, [pc, #12]	; (8009428 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20000150 	.word	0x20000150

0800942c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2204      	movs	r2, #4
 800943c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20000164 	.word	0x20000164

08009450 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	6039      	str	r1, [r7, #0]
 800945a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d105      	bne.n	800946e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4907      	ldr	r1, [pc, #28]	; (8009484 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009466:	4808      	ldr	r0, [pc, #32]	; (8009488 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009468:	f7ff fdf3 	bl	8009052 <USBD_GetString>
 800946c:	e004      	b.n	8009478 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	4904      	ldr	r1, [pc, #16]	; (8009484 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009472:	4805      	ldr	r0, [pc, #20]	; (8009488 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009474:	f7ff fded 	bl	8009052 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009478:	4b02      	ldr	r3, [pc, #8]	; (8009484 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20001154 	.word	0x20001154
 8009488:	08009c8c 	.word	0x08009c8c

0800948c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	4904      	ldr	r1, [pc, #16]	; (80094ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800949c:	4804      	ldr	r0, [pc, #16]	; (80094b0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800949e:	f7ff fdd8 	bl	8009052 <USBD_GetString>
  return USBD_StrDesc;
 80094a2:	4b02      	ldr	r3, [pc, #8]	; (80094ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20001154 	.word	0x20001154
 80094b0:	08009ca4 	.word	0x08009ca4

080094b4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4603      	mov	r3, r0
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	221a      	movs	r2, #26
 80094c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094c6:	f000 f843 	bl	8009550 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80094ca:	4b02      	ldr	r3, [pc, #8]	; (80094d4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20000168 	.word	0x20000168

080094d8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	6039      	str	r1, [r7, #0]
 80094e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094e4:	79fb      	ldrb	r3, [r7, #7]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d105      	bne.n	80094f6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	4907      	ldr	r1, [pc, #28]	; (800950c <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094ee:	4808      	ldr	r0, [pc, #32]	; (8009510 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094f0:	f7ff fdaf 	bl	8009052 <USBD_GetString>
 80094f4:	e004      	b.n	8009500 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4904      	ldr	r1, [pc, #16]	; (800950c <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094fa:	4805      	ldr	r0, [pc, #20]	; (8009510 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094fc:	f7ff fda9 	bl	8009052 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009500:	4b02      	ldr	r3, [pc, #8]	; (800950c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20001154 	.word	0x20001154
 8009510:	08009cb8 	.word	0x08009cb8

08009514 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d105      	bne.n	8009532 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	4907      	ldr	r1, [pc, #28]	; (8009548 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800952a:	4808      	ldr	r0, [pc, #32]	; (800954c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800952c:	f7ff fd91 	bl	8009052 <USBD_GetString>
 8009530:	e004      	b.n	800953c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	4904      	ldr	r1, [pc, #16]	; (8009548 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009536:	4805      	ldr	r0, [pc, #20]	; (800954c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009538:	f7ff fd8b 	bl	8009052 <USBD_GetString>
  }
  return USBD_StrDesc;
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20001154 	.word	0x20001154
 800954c:	08009cc4 	.word	0x08009cc4

08009550 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009556:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <Get_SerialNum+0x44>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800955c:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <Get_SerialNum+0x48>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009562:	4b0e      	ldr	r3, [pc, #56]	; (800959c <Get_SerialNum+0x4c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4413      	add	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009576:	2208      	movs	r2, #8
 8009578:	4909      	ldr	r1, [pc, #36]	; (80095a0 <Get_SerialNum+0x50>)
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f814 	bl	80095a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009580:	2204      	movs	r2, #4
 8009582:	4908      	ldr	r1, [pc, #32]	; (80095a4 <Get_SerialNum+0x54>)
 8009584:	68b8      	ldr	r0, [r7, #8]
 8009586:	f000 f80f 	bl	80095a8 <IntToUnicode>
  }
}
 800958a:	bf00      	nop
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	1fff7590 	.word	0x1fff7590
 8009598:	1fff7594 	.word	0x1fff7594
 800959c:	1fff7598 	.word	0x1fff7598
 80095a0:	2000016a 	.word	0x2000016a
 80095a4:	2000017a 	.word	0x2000017a

080095a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095ba:	2300      	movs	r3, #0
 80095bc:	75fb      	strb	r3, [r7, #23]
 80095be:	e027      	b.n	8009610 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	0f1b      	lsrs	r3, r3, #28
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	d80b      	bhi.n	80095e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	0f1b      	lsrs	r3, r3, #28
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	4619      	mov	r1, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	440b      	add	r3, r1
 80095d8:	3230      	adds	r2, #48	; 0x30
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e00a      	b.n	80095f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	0f1b      	lsrs	r3, r3, #28
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4619      	mov	r1, r3
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	440b      	add	r3, r1
 80095f0:	3237      	adds	r2, #55	; 0x37
 80095f2:	b2d2      	uxtb	r2, r2
 80095f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	011b      	lsls	r3, r3, #4
 80095fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	3301      	adds	r3, #1
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4413      	add	r3, r2
 8009606:	2200      	movs	r2, #0
 8009608:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	3301      	adds	r3, #1
 800960e:	75fb      	strb	r3, [r7, #23]
 8009610:	7dfa      	ldrb	r2, [r7, #23]
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	429a      	cmp	r2, r3
 8009616:	d3d3      	bcc.n	80095c0 <IntToUnicode+0x18>
  }
}
 8009618:	bf00      	nop
 800961a:	371c      	adds	r7, #28
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a0d      	ldr	r2, [pc, #52]	; (8009668 <HAL_PCD_MspInit+0x44>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d113      	bne.n	800965e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009636:	4b0d      	ldr	r3, [pc, #52]	; (800966c <HAL_PCD_MspInit+0x48>)
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	4a0c      	ldr	r2, [pc, #48]	; (800966c <HAL_PCD_MspInit+0x48>)
 800963c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009640:	6593      	str	r3, [r2, #88]	; 0x58
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <HAL_PCD_MspInit+0x48>)
 8009644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800964e:	2200      	movs	r2, #0
 8009650:	2100      	movs	r1, #0
 8009652:	2014      	movs	r0, #20
 8009654:	f7f8 f913 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009658:	2014      	movs	r0, #20
 800965a:	f7f8 f92a 	bl	80018b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	40005c00 	.word	0x40005c00
 800966c:	40021000 	.word	0x40021000

08009670 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009684:	4619      	mov	r1, r3
 8009686:	4610      	mov	r0, r2
 8009688:	f7fe fd76 	bl	8008178 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096a6:	78fa      	ldrb	r2, [r7, #3]
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	440b      	add	r3, r1
 80096b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	4619      	mov	r1, r3
 80096be:	f7fe fdae 	bl	800821e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096dc:	78fa      	ldrb	r2, [r7, #3]
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	440b      	add	r3, r1
 80096ea:	333c      	adds	r3, #60	; 0x3c
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	4619      	mov	r1, r3
 80096f2:	f7fe fdf7 	bl	80082e4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b082      	sub	sp, #8
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe fefb 	bl	8008508 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009722:	2301      	movs	r3, #1
 8009724:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	2b02      	cmp	r3, #2
 800972c:	d001      	beq.n	8009732 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800972e:	f7f7 fc6d 	bl	800100c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009738:	7bfa      	ldrb	r2, [r7, #15]
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe fea8 	bl	8008492 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe fe61 	bl	8008410 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fea3 	bl	80084b2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009774:	4b04      	ldr	r3, [pc, #16]	; (8009788 <HAL_PCD_SuspendCallback+0x30>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4a03      	ldr	r2, [pc, #12]	; (8009788 <HAL_PCD_SuspendCallback+0x30>)
 800977a:	f043 0306 	orr.w	r3, r3, #6
 800977e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	e000ed00 	.word	0xe000ed00

0800978c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800979c:	4b08      	ldr	r3, [pc, #32]	; (80097c0 <HAL_PCD_ResumeCallback+0x34>)
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	4a07      	ldr	r2, [pc, #28]	; (80097c0 <HAL_PCD_ResumeCallback+0x34>)
 80097a2:	f023 0306 	bic.w	r3, r3, #6
 80097a6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80097a8:	f000 f9fa 	bl	8009ba0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fe92 	bl	80084dc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	e000ed00 	.word	0xe000ed00

080097c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80097cc:	4a2b      	ldr	r2, [pc, #172]	; (800987c <USBD_LL_Init+0xb8>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a29      	ldr	r2, [pc, #164]	; (800987c <USBD_LL_Init+0xb8>)
 80097d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80097dc:	4b27      	ldr	r3, [pc, #156]	; (800987c <USBD_LL_Init+0xb8>)
 80097de:	4a28      	ldr	r2, [pc, #160]	; (8009880 <USBD_LL_Init+0xbc>)
 80097e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097e2:	4b26      	ldr	r3, [pc, #152]	; (800987c <USBD_LL_Init+0xb8>)
 80097e4:	2208      	movs	r2, #8
 80097e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097e8:	4b24      	ldr	r3, [pc, #144]	; (800987c <USBD_LL_Init+0xb8>)
 80097ea:	2202      	movs	r2, #2
 80097ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097ee:	4b23      	ldr	r3, [pc, #140]	; (800987c <USBD_LL_Init+0xb8>)
 80097f0:	2202      	movs	r2, #2
 80097f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80097f4:	4b21      	ldr	r3, [pc, #132]	; (800987c <USBD_LL_Init+0xb8>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097fa:	4b20      	ldr	r3, [pc, #128]	; (800987c <USBD_LL_Init+0xb8>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009800:	4b1e      	ldr	r3, [pc, #120]	; (800987c <USBD_LL_Init+0xb8>)
 8009802:	2200      	movs	r2, #0
 8009804:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009806:	4b1d      	ldr	r3, [pc, #116]	; (800987c <USBD_LL_Init+0xb8>)
 8009808:	2200      	movs	r2, #0
 800980a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800980c:	481b      	ldr	r0, [pc, #108]	; (800987c <USBD_LL_Init+0xb8>)
 800980e:	f7f8 fa37 	bl	8001c80 <HAL_PCD_Init>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009818:	f7f7 fbf8 	bl	800100c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009822:	2318      	movs	r3, #24
 8009824:	2200      	movs	r2, #0
 8009826:	2100      	movs	r1, #0
 8009828:	f7f9 fd25 	bl	8003276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009832:	2358      	movs	r3, #88	; 0x58
 8009834:	2200      	movs	r2, #0
 8009836:	2180      	movs	r1, #128	; 0x80
 8009838:	f7f9 fd1d 	bl	8003276 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009842:	23c0      	movs	r3, #192	; 0xc0
 8009844:	2200      	movs	r2, #0
 8009846:	2181      	movs	r1, #129	; 0x81
 8009848:	f7f9 fd15 	bl	8003276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009852:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009856:	2200      	movs	r2, #0
 8009858:	2101      	movs	r1, #1
 800985a:	f7f9 fd0c 	bl	8003276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009868:	2200      	movs	r2, #0
 800986a:	2182      	movs	r1, #130	; 0x82
 800986c:	f7f9 fd03 	bl	8003276 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20001354 	.word	0x20001354
 8009880:	40005c00 	.word	0x40005c00

08009884 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800989a:	4618      	mov	r0, r3
 800989c:	f7f8 fad5 	bl	8001e4a <HAL_PCD_Start>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f980 	bl	8009bac <USBD_Get_USB_Status>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	4608      	mov	r0, r1
 80098c4:	4611      	mov	r1, r2
 80098c6:	461a      	mov	r2, r3
 80098c8:	4603      	mov	r3, r0
 80098ca:	70fb      	strb	r3, [r7, #3]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70bb      	strb	r3, [r7, #2]
 80098d0:	4613      	mov	r3, r2
 80098d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098e2:	78bb      	ldrb	r3, [r7, #2]
 80098e4:	883a      	ldrh	r2, [r7, #0]
 80098e6:	78f9      	ldrb	r1, [r7, #3]
 80098e8:	f7f8 fc44 	bl	8002174 <HAL_PCD_EP_Open>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 f95a 	bl	8009bac <USBD_Get_USB_Status>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009920:	78fa      	ldrb	r2, [r7, #3]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7f8 fc8b 	bl	8002240 <HAL_PCD_EP_Close>
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	4618      	mov	r0, r3
 8009932:	f000 f93b 	bl	8009bac <USBD_Get_USB_Status>
 8009936:	4603      	mov	r3, r0
 8009938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800993a:	7bbb      	ldrb	r3, [r7, #14]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f7f8 fd4c 	bl	8002400 <HAL_PCD_EP_SetStall>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f91c 	bl	8009bac <USBD_Get_USB_Status>
 8009974:	4603      	mov	r3, r0
 8009976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009978:	7bbb      	ldrb	r3, [r7, #14]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	460b      	mov	r3, r1
 800998c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800999c:	78fa      	ldrb	r2, [r7, #3]
 800999e:	4611      	mov	r1, r2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7f8 fd8d 	bl	80024c0 <HAL_PCD_EP_ClrStall>
 80099a6:	4603      	mov	r3, r0
 80099a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 f8fd 	bl	8009bac <USBD_Get_USB_Status>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	da0c      	bge.n	80099f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e2:	68f9      	ldr	r1, [r7, #12]
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	00db      	lsls	r3, r3, #3
 80099ee:	440b      	add	r3, r1
 80099f0:	3302      	adds	r3, #2
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	e00b      	b.n	8009a0e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099fc:	68f9      	ldr	r1, [r7, #12]
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	440b      	add	r3, r1
 8009a08:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009a0c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7f8 fb76 	bl	800212a <HAL_PCD_SetAddress>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 f8b1 	bl	8009bac <USBD_Get_USB_Status>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	607a      	str	r2, [r7, #4]
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	460b      	mov	r3, r1
 8009a66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a76:	7af9      	ldrb	r1, [r7, #11]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	f7f8 fc7d 	bl	800237a <HAL_PCD_EP_Transmit>
 8009a80:	4603      	mov	r3, r0
 8009a82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 f890 	bl	8009bac <USBD_Get_USB_Status>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a90:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b086      	sub	sp, #24
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ab8:	7af9      	ldrb	r1, [r7, #11]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	f7f8 fc07 	bl	80022d0 <HAL_PCD_EP_Receive>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 f86f 	bl	8009bac <USBD_Get_USB_Status>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aee:	78fa      	ldrb	r2, [r7, #3]
 8009af0:	4611      	mov	r1, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f8 fc29 	bl	800234a <HAL_PCD_EP_GetRxCount>
 8009af8:	4603      	mov	r3, r0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <HAL_PCDEx_LPM_Callback+0x18>
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d013      	beq.n	8009b42 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009b1a:	e023      	b.n	8009b64 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009b24:	f000 f83c 	bl	8009ba0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b28:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	4a0f      	ldr	r2, [pc, #60]	; (8009b6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b2e:	f023 0306 	bic.w	r3, r3, #6
 8009b32:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe fcce 	bl	80084dc <USBD_LL_Resume>
    break;
 8009b40:	e010      	b.n	8009b64 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe fcb2 	bl	80084b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b5c:	f043 0306 	orr.w	r3, r3, #6
 8009b60:	6113      	str	r3, [r2, #16]
    break;
 8009b62:	bf00      	nop
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	e000ed00 	.word	0xe000ed00

08009b70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b78:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <USBD_static_malloc+0x18>)
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	200001e4 	.word	0x200001e4

08009b8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]

}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009ba4:	f7f6 fcee 	bl	8000584 <SystemClock_Config>
}
 8009ba8:	bf00      	nop
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d817      	bhi.n	8009bf0 <USBD_Get_USB_Status+0x44>
 8009bc0:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <USBD_Get_USB_Status+0x1c>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009bd9 	.word	0x08009bd9
 8009bcc:	08009bdf 	.word	0x08009bdf
 8009bd0:	08009be5 	.word	0x08009be5
 8009bd4:	08009beb 	.word	0x08009beb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
    break;
 8009bdc:	e00b      	b.n	8009bf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bde:	2303      	movs	r3, #3
 8009be0:	73fb      	strb	r3, [r7, #15]
    break;
 8009be2:	e008      	b.n	8009bf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009be4:	2301      	movs	r3, #1
 8009be6:	73fb      	strb	r3, [r7, #15]
    break;
 8009be8:	e005      	b.n	8009bf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bea:	2303      	movs	r3, #3
 8009bec:	73fb      	strb	r3, [r7, #15]
    break;
 8009bee:	e002      	b.n	8009bf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf4:	bf00      	nop
  }
  return usb_status;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <__libc_init_array>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	4e0d      	ldr	r6, [pc, #52]	; (8009c3c <__libc_init_array+0x38>)
 8009c08:	4c0d      	ldr	r4, [pc, #52]	; (8009c40 <__libc_init_array+0x3c>)
 8009c0a:	1ba4      	subs	r4, r4, r6
 8009c0c:	10a4      	asrs	r4, r4, #2
 8009c0e:	2500      	movs	r5, #0
 8009c10:	42a5      	cmp	r5, r4
 8009c12:	d109      	bne.n	8009c28 <__libc_init_array+0x24>
 8009c14:	4e0b      	ldr	r6, [pc, #44]	; (8009c44 <__libc_init_array+0x40>)
 8009c16:	4c0c      	ldr	r4, [pc, #48]	; (8009c48 <__libc_init_array+0x44>)
 8009c18:	f000 f82c 	bl	8009c74 <_init>
 8009c1c:	1ba4      	subs	r4, r4, r6
 8009c1e:	10a4      	asrs	r4, r4, #2
 8009c20:	2500      	movs	r5, #0
 8009c22:	42a5      	cmp	r5, r4
 8009c24:	d105      	bne.n	8009c32 <__libc_init_array+0x2e>
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c2c:	4798      	blx	r3
 8009c2e:	3501      	adds	r5, #1
 8009c30:	e7ee      	b.n	8009c10 <__libc_init_array+0xc>
 8009c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c36:	4798      	blx	r3
 8009c38:	3501      	adds	r5, #1
 8009c3a:	e7f2      	b.n	8009c22 <__libc_init_array+0x1e>
 8009c3c:	08009ce4 	.word	0x08009ce4
 8009c40:	08009ce4 	.word	0x08009ce4
 8009c44:	08009ce4 	.word	0x08009ce4
 8009c48:	08009ce8 	.word	0x08009ce8

08009c4c <memcpy>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	1e43      	subs	r3, r0, #1
 8009c50:	440a      	add	r2, r1
 8009c52:	4291      	cmp	r1, r2
 8009c54:	d100      	bne.n	8009c58 <memcpy+0xc>
 8009c56:	bd10      	pop	{r4, pc}
 8009c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c60:	e7f7      	b.n	8009c52 <memcpy+0x6>

08009c62 <memset>:
 8009c62:	4402      	add	r2, r0
 8009c64:	4603      	mov	r3, r0
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d100      	bne.n	8009c6c <memset+0xa>
 8009c6a:	4770      	bx	lr
 8009c6c:	f803 1b01 	strb.w	r1, [r3], #1
 8009c70:	e7f9      	b.n	8009c66 <memset+0x4>
	...

08009c74 <_init>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	bf00      	nop
 8009c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7a:	bc08      	pop	{r3}
 8009c7c:	469e      	mov	lr, r3
 8009c7e:	4770      	bx	lr

08009c80 <_fini>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	bf00      	nop
 8009c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c86:	bc08      	pop	{r3}
 8009c88:	469e      	mov	lr, r3
 8009c8a:	4770      	bx	lr
