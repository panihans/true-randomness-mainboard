
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009be0  08009be0  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009be0  08009be0  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009be0  08009be0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009be0  08009be0  00019be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009be4  08009be4  00019be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000184  08009d6c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  08009d6c  00021638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad55  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003456  00000000  00000000  0003af09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  0003e360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003f700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205dc  00000000  00000000  00040928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bf9  00000000  00000000  00060f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c441c  00000000  00000000  00072afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136f19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051cc  00000000  00000000  00136f94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009b70 	.word	0x08009b70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009b70 	.word	0x08009b70

08000218 <CDC_On_Receive>:
volatile uint8_t motor1_target_rpm = 0;
volatile uint8_t motor2_target_rpm = 0;
volatile uint8_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b14      	cmp	r3, #20
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2214      	movs	r2, #20
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fc8a 	bl	8009b48 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001a0 	.word	0x200001a0
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001c8 	.word	0x200001c8

08000258 <Set_Motor_Speed>:

inline void Set_Motor_Speed(volatile uint32_t * channel_a, volatile uint32_t * channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b00      	cmp	r3, #0
 8000268:	dd15      	ble.n	8000296 <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b64      	cmp	r3, #100	; 0x64
 800026e:	dc0b      	bgt.n	8000288 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000276:	fb02 f303 	mul.w	r3, r2, r3
 800027a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800027e:	3320      	adds	r3, #32
 8000280:	461a      	mov	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	e002      	b.n	800028e <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 8000294:	e020      	b.n	80002d8 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	da17      	bge.n	80002cc <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002a2:	db0a      	blt.n	80002ba <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <Set_Motor_Speed+0x8c>)
 80002a8:	fb02 f303 	mul.w	r3, r2, r3
 80002ac:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80002b0:	3320      	adds	r3, #32
 80002b2:	461a      	mov	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e004      	b.n	80002c4 <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	425b      	negs	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
}
 80002ca:	e005      	b.n	80002d8 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	fffffe3e 	.word	0xfffffe3e

080002e8 <Set_Thrower_Speed>:

inline void Set_Thrower_Speed(volatile uint32_t * channel_a, int32_t thrower_speed) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	if (thrower_speed > 0) {
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dd0e      	ble.n	8000316 <Set_Thrower_Speed+0x2e>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	dc0f      	bgt.n	800031e <Set_Thrower_Speed+0x36>
			// 0 to 100 compact range
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	4613      	mov	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	1a9b      	subs	r3, r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800030c:	3308      	adds	r3, #8
 800030e:	461a      	mov	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 8000314:	e003      	b.n	800031e <Set_Thrower_Speed+0x36>
		*channel_a = ESC_IDLE_CCR;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000330:	f001 f8ef 	bl	8001512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f8cc 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f000 fd20 	bl	8000d7c <MX_GPIO_Init>
  MX_TIM4_Init();
 800033c:	f000 faa8 	bl	8000890 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000340:	f000 fb32 	bl	80009a8 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000344:	f000 fba0 	bl	8000a88 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000348:	f000 fc24 	bl	8000b94 <MX_TIM16_Init>
  MX_TIM1_Init();
 800034c:	f000 f928 	bl	80005a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000350:	f000 f9d6 	bl	8000700 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000354:	f000 fa28 	bl	80007a8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000358:	f000 faf0 	bl	800093c <MX_TIM7_Init>
  MX_TIM17_Init();
 800035c:	f000 fc94 	bl	8000c88 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000360:	f008 fed6 	bl	8009110 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000364:	2104      	movs	r1, #4
 8000366:	4840      	ldr	r0, [pc, #256]	; (8000468 <main+0x13c>)
 8000368:	f004 f9d0 	bl	800470c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800036c:	2104      	movs	r1, #4
 800036e:	483f      	ldr	r0, [pc, #252]	; (800046c <main+0x140>)
 8000370:	f004 f9cc 	bl	800470c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000374:	2104      	movs	r1, #4
 8000376:	483e      	ldr	r0, [pc, #248]	; (8000470 <main+0x144>)
 8000378:	f004 f9c8 	bl	800470c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800037c:	2100      	movs	r1, #0
 800037e:	483d      	ldr	r0, [pc, #244]	; (8000474 <main+0x148>)
 8000380:	f004 f81e 	bl	80043c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000384:	2104      	movs	r1, #4
 8000386:	483b      	ldr	r0, [pc, #236]	; (8000474 <main+0x148>)
 8000388:	f004 f81a 	bl	80043c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800038c:	2108      	movs	r1, #8
 800038e:	4839      	ldr	r0, [pc, #228]	; (8000474 <main+0x148>)
 8000390:	f004 f816 	bl	80043c0 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000394:	4b38      	ldr	r3, [pc, #224]	; (8000478 <main+0x14c>)
 8000396:	2200      	movs	r2, #0
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800039a:	4b37      	ldr	r3, [pc, #220]	; (8000478 <main+0x14c>)
 800039c:	2200      	movs	r2, #0
 800039e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80003a0:	4b35      	ldr	r3, [pc, #212]	; (8000478 <main+0x14c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003a6:	2100      	movs	r1, #0
 80003a8:	4834      	ldr	r0, [pc, #208]	; (800047c <main+0x150>)
 80003aa:	f004 f809 	bl	80043c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003ae:	2104      	movs	r1, #4
 80003b0:	4832      	ldr	r0, [pc, #200]	; (800047c <main+0x150>)
 80003b2:	f004 f805 	bl	80043c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003b6:	2108      	movs	r1, #8
 80003b8:	4830      	ldr	r0, [pc, #192]	; (800047c <main+0x150>)
 80003ba:	f004 f801 	bl	80043c0 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 80003be:	4b30      	ldr	r3, [pc, #192]	; (8000480 <main+0x154>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 80003c4:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <main+0x154>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 80003ca:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <main+0x154>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80003d0:	2100      	movs	r1, #0
 80003d2:	482c      	ldr	r0, [pc, #176]	; (8000484 <main+0x158>)
 80003d4:	f003 fff4 	bl	80043c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80003d8:	2100      	movs	r1, #0
 80003da:	482b      	ldr	r0, [pc, #172]	; (8000488 <main+0x15c>)
 80003dc:	f003 fff0 	bl	80043c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80003e0:	2100      	movs	r1, #0
 80003e2:	482a      	ldr	r0, [pc, #168]	; (800048c <main+0x160>)
 80003e4:	f003 ffec 	bl	80043c0 <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 80003e8:	4b29      	ldr	r3, [pc, #164]	; (8000490 <main+0x164>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = ESC_IDLE_CCR;
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <main+0x168>)
 80003f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <main+0x16c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 80003fc:	4827      	ldr	r0, [pc, #156]	; (800049c <main+0x170>)
 80003fe:	f003 ff1d 	bl	800423c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <main+0x174>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b01      	cmp	r3, #1
 800040a:	d1fa      	bne.n	8000402 <main+0xd6>
		command_received = 0;
 800040c:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <main+0x174>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
		command_received_ticker = 60;
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <main+0x178>)
 8000414:	223c      	movs	r2, #60	; 0x3c
 8000416:	701a      	strb	r2, [r3, #0]

		// toggle led
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000418:	2120      	movs	r1, #32
 800041a:	4823      	ldr	r0, [pc, #140]	; (80004a8 <main+0x17c>)
 800041c:	f001 fb94 	bl	8001b48 <HAL_GPIO_TogglePin>

		feedback.thrower = 666;
 8000420:	4b22      	ldr	r3, [pc, #136]	; (80004ac <main+0x180>)
 8000422:	f240 229a 	movw	r2, #666	; 0x29a
 8000426:	60da      	str	r2, [r3, #12]

		// set motor speeds
		Set_Motor_Speed(&(TIM1->CCR3), &(TIM1->CCR2), command.motor1);
 8000428:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <main+0x184>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4921      	ldr	r1, [pc, #132]	; (80004b4 <main+0x188>)
 8000430:	4821      	ldr	r0, [pc, #132]	; (80004b8 <main+0x18c>)
 8000432:	f7ff ff11 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), command.motor2);
 8000436:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <main+0x184>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	461a      	mov	r2, r3
 800043c:	491f      	ldr	r1, [pc, #124]	; (80004bc <main+0x190>)
 800043e:	4820      	ldr	r0, [pc, #128]	; (80004c0 <main+0x194>)
 8000440:	f7ff ff0a 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), command.motor3);
 8000444:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <main+0x184>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	461a      	mov	r2, r3
 800044a:	491e      	ldr	r1, [pc, #120]	; (80004c4 <main+0x198>)
 800044c:	481e      	ldr	r0, [pc, #120]	; (80004c8 <main+0x19c>)
 800044e:	f7ff ff03 	bl	8000258 <Set_Motor_Speed>

		Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <main+0x184>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	4619      	mov	r1, r3
 8000458:	481c      	ldr	r0, [pc, #112]	; (80004cc <main+0x1a0>)
 800045a:	f7ff ff45 	bl	80002e8 <Set_Thrower_Speed>

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 800045e:	2114      	movs	r1, #20
 8000460:	4812      	ldr	r0, [pc, #72]	; (80004ac <main+0x180>)
 8000462:	f008 ff17 	bl	8009294 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000466:	e7cc      	b.n	8000402 <main+0xd6>
 8000468:	200005bc 	.word	0x200005bc
 800046c:	20000440 	.word	0x20000440
 8000470:	200003f4 	.word	0x200003f4
 8000474:	20000570 	.word	0x20000570
 8000478:	40012c00 	.word	0x40012c00
 800047c:	20000524 	.word	0x20000524
 8000480:	40000400 	.word	0x40000400
 8000484:	2000048c 	.word	0x2000048c
 8000488:	20000608 	.word	0x20000608
 800048c:	200004d8 	.word	0x200004d8
 8000490:	40014000 	.word	0x40014000
 8000494:	40014400 	.word	0x40014400
 8000498:	40014800 	.word	0x40014800
 800049c:	20000654 	.word	0x20000654
 80004a0:	200001c8 	.word	0x200001c8
 80004a4:	200001c9 	.word	0x200001c9
 80004a8:	48000400 	.word	0x48000400
 80004ac:	200001b4 	.word	0x200001b4
 80004b0:	200001a0 	.word	0x200001a0
 80004b4:	40012c38 	.word	0x40012c38
 80004b8:	40012c3c 	.word	0x40012c3c
 80004bc:	4000043c 	.word	0x4000043c
 80004c0:	40012c34 	.word	0x40012c34
 80004c4:	40000438 	.word	0x40000438
 80004c8:	40000434 	.word	0x40000434
 80004cc:	40014434 	.word	0x40014434

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0a4      	sub	sp, #144	; 0x90
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004da:	2238      	movs	r2, #56	; 0x38
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f009 fb3d 	bl	8009b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2244      	movs	r2, #68	; 0x44
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f009 fb2f 	bl	8009b5e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000500:	2000      	movs	r0, #0
 8000502:	f002 fea3 	bl	800324c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000506:	2322      	movs	r3, #34	; 0x22
 8000508:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051c:	2302      	movs	r3, #2
 800051e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000520:	2301      	movs	r3, #1
 8000522:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000524:	2314      	movs	r3, #20
 8000526:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000536:	2302      	movs	r3, #2
 8000538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000540:	4618      	mov	r0, r3
 8000542:	f002 ff37 	bl	80033b4 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800054c:	f000 fcf4 	bl	8000f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	230f      	movs	r3, #15
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	2303      	movs	r3, #3
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000568:	2104      	movs	r1, #4
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fa3a 	bl	80039e4 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000576:	f000 fcdf 	bl	8000f38 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800057a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000580:	2300      	movs	r3, #0
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fc10 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000592:	f000 fcd1 	bl	8000f38 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3790      	adds	r7, #144	; 0x90
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b098      	sub	sp, #96	; 0x60
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2234      	movs	r2, #52	; 0x34
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f009 fac6 	bl	8009b5e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d2:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <MX_TIM1_Init+0x158>)
 80005d4:	4a49      	ldr	r2, [pc, #292]	; (80006fc <MX_TIM1_Init+0x15c>)
 80005d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005d8:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <MX_TIM1_Init+0x158>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <MX_TIM1_Init+0x158>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005e4:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <MX_TIM1_Init+0x158>)
 80005e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <MX_TIM1_Init+0x158>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f2:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <MX_TIM1_Init+0x158>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <MX_TIM1_Init+0x158>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005fe:	483e      	ldr	r0, [pc, #248]	; (80006f8 <MX_TIM1_Init+0x158>)
 8000600:	f003 fe86 	bl	8004310 <HAL_TIM_PWM_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800060a:	f000 fc95 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000612:	2300      	movs	r3, #0
 8000614:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000616:	2300      	movs	r3, #0
 8000618:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800061a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800061e:	4619      	mov	r1, r3
 8000620:	4835      	ldr	r0, [pc, #212]	; (80006f8 <MX_TIM1_Init+0x158>)
 8000622:	f004 ff63 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800062c:	f000 fc84 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	2300      	movs	r3, #0
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800063c:	2300      	movs	r3, #0
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000644:	2300      	movs	r3, #0
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	4828      	ldr	r0, [pc, #160]	; (80006f8 <MX_TIM1_Init+0x158>)
 8000656:	f004 fa65 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000660:	f000 fc6a 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000668:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066c:	2204      	movs	r2, #4
 800066e:	4619      	mov	r1, r3
 8000670:	4821      	ldr	r0, [pc, #132]	; (80006f8 <MX_TIM1_Init+0x158>)
 8000672:	f004 fa57 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 800067c:	f000 fc5c 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000684:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000688:	2208      	movs	r2, #8
 800068a:	4619      	mov	r1, r3
 800068c:	481a      	ldr	r0, [pc, #104]	; (80006f8 <MX_TIM1_Init+0x158>)
 800068e:	f004 fa49 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000698:	f000 fc4e 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <MX_TIM1_Init+0x158>)
 80006da:	f004 ff89 	bl	80055f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80006e4:	f000 fc28 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <MX_TIM1_Init+0x158>)
 80006ea:	f000 fda9 	bl	8001240 <HAL_TIM_MspPostInit>

}
 80006ee:	bf00      	nop
 80006f0:	3760      	adds	r7, #96	; 0x60
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000570 	.word	0x20000570
 80006fc:	40012c00 	.word	0x40012c00

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2224      	movs	r2, #36	; 0x24
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f009 fa25 	bl	8009b5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_TIM2_Init+0xa4>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_TIM2_Init+0xa4>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000746:	2303      	movs	r3, #3
 8000748:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800075e:	2301      	movs	r3, #1
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_TIM2_Init+0xa4>)
 8000772:	f003 ff25 	bl	80045c0 <HAL_TIM_Encoder_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800077c:	f000 fbdc 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_TIM2_Init+0xa4>)
 800078e:	f004 fead 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000798:	f000 fbce 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3730      	adds	r7, #48	; 0x30
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200005bc 	.word	0x200005bc

080007a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_TIM3_Init+0xe0>)
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <MX_TIM3_Init+0xe4>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_TIM3_Init+0xe0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_TIM3_Init+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_TIM3_Init+0xe0>)
 80007e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_TIM3_Init+0xe0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_TIM3_Init+0xe0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007f2:	4825      	ldr	r0, [pc, #148]	; (8000888 <MX_TIM3_Init+0xe0>)
 80007f4:	f003 fd8c 	bl	8004310 <HAL_TIM_PWM_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007fe:	f000 fb9b 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	481d      	ldr	r0, [pc, #116]	; (8000888 <MX_TIM3_Init+0xe0>)
 8000812:	f004 fe6b 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800081c:	f000 fb8c 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	2360      	movs	r3, #96	; 0x60
 8000822:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <MX_TIM3_Init+0xe0>)
 8000838:	f004 f974 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 fb79 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	2204      	movs	r2, #4
 800084e:	4619      	mov	r1, r3
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_TIM3_Init+0xe0>)
 8000852:	f004 f967 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800085c:	f000 fb6c 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	2208      	movs	r2, #8
 8000868:	4619      	mov	r1, r3
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM3_Init+0xe0>)
 800086c:	f004 f95a 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000876:	f000 fb5f 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM3_Init+0xe0>)
 800087c:	f000 fce0 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000524 	.word	0x20000524
 800088c:	40000400 	.word	0x40000400

08000890 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2224      	movs	r2, #36	; 0x24
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f009 f95d 	bl	8009b5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <MX_TIM4_Init+0xa8>)
 80008b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM4_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008d4:	2303      	movs	r3, #3
 80008d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_TIM4_Init+0xa4>)
 8000900:	f003 fe5e 	bl	80045c0 <HAL_TIM_Encoder_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800090a:	f000 fb15 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_TIM4_Init+0xa4>)
 800091c:	f004 fde6 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000926:	f000 fb07 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000440 	.word	0x20000440
 8000938:	40000800 	.word	0x40000800

0800093c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_TIM7_Init+0x64>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_TIM7_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_TIM7_Init+0x64>)
 8000954:	2228      	movs	r2, #40	; 0x28
 8000956:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_TIM7_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_TIM7_Init+0x64>)
 8000960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000964:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_TIM7_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_TIM7_Init+0x64>)
 800096e:	f003 fc0d 	bl	800418c <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000978:	f000 fade 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_TIM7_Init+0x64>)
 800098a:	f004 fdaf 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fad0 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000654 	.word	0x20000654
 80009a4:	40001400 	.word	0x40001400

080009a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09a      	sub	sp, #104	; 0x68
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009b2:	2224      	movs	r2, #36	; 0x24
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f009 f8d1 	bl	8009b5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2234      	movs	r2, #52	; 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f009 f8c5 	bl	8009b5e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_TIM8_Init+0xd8>)
 80009d6:	4a2b      	ldr	r2, [pc, #172]	; (8000a84 <MX_TIM8_Init+0xdc>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_TIM8_Init+0xd8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_TIM8_Init+0xd8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_TIM8_Init+0xd8>)
 80009e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_TIM8_Init+0xd8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_TIM8_Init+0xd8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_TIM8_Init+0xd8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a00:	2303      	movs	r3, #3
 8000a02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a04:	2300      	movs	r3, #0
 8000a06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a14:	2300      	movs	r3, #0
 8000a16:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <MX_TIM8_Init+0xd8>)
 8000a2c:	f003 fdc8 	bl	80045c0 <HAL_TIM_Encoder_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000a36:	f000 fa7f 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_TIM8_Init+0xd8>)
 8000a4e:	f004 fd4d 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000a58:	f000 fa6e 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_TIM8_Init+0xd8>)
 8000a6a:	f004 fdc1 	bl	80055f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000a74:	f000 fa60 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3768      	adds	r7, #104	; 0x68
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200003f4 	.word	0x200003f4
 8000a84:	40013400 	.word	0x40013400

08000a88 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b098      	sub	sp, #96	; 0x60
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2234      	movs	r2, #52	; 0x34
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f009 f852 	bl	8009b5e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000abc:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <MX_TIM15_Init+0x108>)
 8000abe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000ac0:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ae6:	4829      	ldr	r0, [pc, #164]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000ae8:	f003 fc12 	bl	8004310 <HAL_TIM_PWM_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f000 fa21 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000afe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b02:	4619      	mov	r1, r3
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000b06:	f004 fcf1 	bl	80054ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 fa12 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b14:	2360      	movs	r3, #96	; 0x60
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b20:	2300      	movs	r3, #0
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b34:	2200      	movs	r2, #0
 8000b36:	4619      	mov	r1, r3
 8000b38:	4814      	ldr	r0, [pc, #80]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000b3a:	f003 fff3 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000b44:	f000 f9f8 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000b70:	f004 fd3e 	bl	80055f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000b7a:	f000 f9dd 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <MX_TIM15_Init+0x104>)
 8000b80:	f000 fb5e 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000b84:	bf00      	nop
 8000b86:	3760      	adds	r7, #96	; 0x60
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000048c 	.word	0x2000048c
 8000b90:	40014000 	.word	0x40014000

08000b94 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	; 0x50
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
 8000baa:	615a      	str	r2, [r3, #20]
 8000bac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2234      	movs	r2, #52	; 0x34
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 ffd2 	bl	8009b5e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000bbc:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <MX_TIM16_Init+0xf0>)
 8000bbe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65300;
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000bce:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000bd2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000be6:	4826      	ldr	r0, [pc, #152]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000be8:	f003 fad0 	bl	800418c <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000bf2:	f000 f9a1 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000bf6:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000bf8:	f003 fb8a 	bl	8004310 <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c02:	f000 f999 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c06:	2360      	movs	r3, #96	; 0x60
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000c2c:	f003 ff7a 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000c36:	f000 f97f 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000c62:	f004 fcc5 	bl	80055f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000c6c:	f000 f964 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_TIM16_Init+0xec>)
 8000c72:	f000 fae5 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	; 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000608 	.word	0x20000608
 8000c84:	40014400 	.word	0x40014400

08000c88 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	2234      	movs	r2, #52	; 0x34
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f008 ff58 	bl	8009b5e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cb0:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <MX_TIM17_Init+0xf0>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cda:	4826      	ldr	r0, [pc, #152]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cdc:	f003 fa56 	bl	800418c <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000ce6:	f000 f927 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000cea:	4822      	ldr	r0, [pc, #136]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000cec:	f003 fb10 	bl	8004310 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000cf6:	f000 f91f 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfa:	2360      	movs	r3, #96	; 0x60
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d06:	2300      	movs	r3, #0
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4815      	ldr	r0, [pc, #84]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000d20:	f003 ff00 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000d2a:	f000 f905 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	4619      	mov	r1, r3
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000d56:	f004 fc4b 	bl	80055f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000d60:	f000 f8ea 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <MX_TIM17_Init+0xec>)
 8000d66:	f000 fa6b 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000d6a:	bf00      	nop
 8000d6c:	3750      	adds	r7, #80	; 0x50
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200004d8 	.word	0x200004d8
 8000d78:	40014800 	.word	0x40014800

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_GPIO_Init+0x8c>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <MX_GPIO_Init+0x8c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_GPIO_Init+0x8c>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_GPIO_Init+0x8c>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <MX_GPIO_Init+0x8c>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_GPIO_Init+0x8c>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4811      	ldr	r0, [pc, #68]	; (8000e0c <MX_GPIO_Init+0x90>)
 8000dc8:	f000 fea6 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <MX_GPIO_Init+0x90>)
 8000de0:	f000 fd18 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000de4:	2320      	movs	r3, #32
 8000de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_GPIO_Init+0x90>)
 8000dfc:	f000 fd0a 	bl	8001814 <HAL_GPIO_Init>

}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400

08000e10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000e2c:	8bfb      	ldrh	r3, [r7, #30]
 8000e2e:	4a39      	ldr	r2, [pc, #228]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e30:	8812      	ldrh	r2, [r2, #0]
 8000e32:	b292      	uxth	r2, r2
 8000e34:	1a9b      	subs	r3, r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000e38:	8bbb      	ldrh	r3, [r7, #28]
 8000e3a:	4a37      	ldr	r2, [pc, #220]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e3c:	8812      	ldrh	r2, [r2, #0]
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000e44:	8b7b      	ldrh	r3, [r7, #26]
 8000e46:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e48:	8812      	ldrh	r2, [r2, #0]
 8000e4a:	b292      	uxth	r2, r2
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000e50:	4a30      	ldr	r2, [pc, #192]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e52:	8bfb      	ldrh	r3, [r7, #30]
 8000e54:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000e56:	4a30      	ldr	r2, [pc, #192]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e58:	8bbb      	ldrh	r3, [r7, #28]
 8000e5a:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000e5c:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000e5e:	8b7b      	ldrh	r3, [r7, #26]
 8000e60:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19 * -1; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	4a2c      	ldr	r2, [pc, #176]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1252      	asrs	r2, r2, #9
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e7a:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19 * -1;
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1252      	asrs	r2, r2, #9
 8000e8e:	17db      	asrs	r3, r3, #31
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000e94:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19 * -1;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	1252      	asrs	r2, r2, #9
 8000ea8:	17db      	asrs	r3, r3, #31
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000eae:	6093      	str	r3, [r2, #8]
	feedback.thrower = 666;
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000eb2:	f240 229a 	movw	r2, #666	; 0x29a
 8000eb6:	60da      	str	r2, [r3, #12]

	// pwm pid

	// timeout
	if (command_received_ticker > 0) {
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0xc2>
		command_received_ticker -= 1;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ece:	701a      	strb	r2, [r3, #0]
		TIM3->CCR3 = 0;

		// stop thrower
		TIM16->CCR1 = ESC_IDLE_CCR;
	}
}
 8000ed0:	e015      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0xee>
		TIM1->CCR1 = 0;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000efe:	bf00      	nop
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40000800 	.word	0x40000800
 8000f10:	40013400 	.word	0x40013400
 8000f14:	200001ca 	.word	0x200001ca
 8000f18:	200001cc 	.word	0x200001cc
 8000f1c:	200001ce 	.word	0x200001ce
 8000f20:	6bca1af3 	.word	0x6bca1af3
 8000f24:	200001b4 	.word	0x200001b4
 8000f28:	200001c9 	.word	0x200001c9
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40014400 	.word	0x40014400

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f7e:	f002 fa09 	bl	8003394 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <HAL_TIM_PWM_MspInit+0x80>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10c      	bne.n	8000fbc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fac:	6613      	str	r3, [r2, #96]	; 0x60
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000fba:	e022      	b.n	8001002 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_TIM_PWM_MspInit+0x88>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
}
 8000fde:	e010      	b.n	8001002 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_TIM_PWM_MspInit+0x8c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10b      	bne.n	8001002 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_TIM_PWM_MspInit+0x84>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	bf00      	nop
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40012c00 	.word	0x40012c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40000400 	.word	0x40000400
 800101c:	40014000 	.word	0x40014000

08001020 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d129      	bne.n	8001096 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6593      	str	r3, [r2, #88]	; 0x58
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	623b      	str	r3, [r7, #32]
 8001058:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001072:	2303      	movs	r3, #3
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001082:	2301      	movs	r3, #1
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f000 fbc0 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001094:	e079      	b.n	800118a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <HAL_TIM_Encoder_MspInit+0x178>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d128      	bne.n	80010f2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010a0:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 80010a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a4:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6593      	str	r3, [r2, #88]	; 0x58
 80010ac:	4b39      	ldr	r3, [pc, #228]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	4a35      	ldr	r2, [pc, #212]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010e0:	2302      	movs	r3, #2
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	482c      	ldr	r0, [pc, #176]	; (800119c <HAL_TIM_Encoder_MspInit+0x17c>)
 80010ec:	f000 fb92 	bl	8001814 <HAL_GPIO_Init>
}
 80010f0:	e04b      	b.n	800118a <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <HAL_TIM_Encoder_MspInit+0x180>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d146      	bne.n	800118a <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 80010fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001102:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001106:	6613      	str	r3, [r2, #96]	; 0x60
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	4a18      	ldr	r2, [pc, #96]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_TIM_Encoder_MspInit+0x174>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001156:	2302      	movs	r3, #2
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f000 fb56 	bl	8001814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800117a:	230a      	movs	r3, #10
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_TIM_Encoder_MspInit+0x17c>)
 8001186:	f000 fb45 	bl	8001814 <HAL_GPIO_Init>
}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40000800 	.word	0x40000800
 800119c:	48000400 	.word	0x48000400
 80011a0:	40013400 	.word	0x40013400

080011a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <HAL_TIM_Base_MspInit+0x8c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d114      	bne.n	80011e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	6593      	str	r3, [r2, #88]	; 0x58
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2037      	movs	r0, #55	; 0x37
 80011d4:	f000 fae9 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011d8:	2037      	movs	r0, #55	; 0x37
 80011da:	f000 fb00 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011de:	e022      	b.n	8001226 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_TIM_Base_MspInit+0x94>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10c      	bne.n	8001204 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	6613      	str	r3, [r2, #96]	; 0x60
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	e010      	b.n	8001226 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_TIM_Base_MspInit+0x98>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10b      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	6613      	str	r3, [r2, #96]	; 0x60
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_TIM_Base_MspInit+0x90>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40001400 	.word	0x40001400
 8001234:	40021000 	.word	0x40021000
 8001238:	40014400 	.word	0x40014400
 800123c:	40014800 	.word	0x40014800

08001240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <HAL_TIM_MspPostInit+0x1b4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11e      	bne.n	80012a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a64      	ldr	r2, [pc, #400]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b62      	ldr	r3, [pc, #392]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800127a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800128c:	2306      	movs	r3, #6
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f000 fabb 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800129e:	e0a5      	b.n	80013ec <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a55      	ldr	r2, [pc, #340]	; (80013fc <HAL_TIM_MspPostInit+0x1bc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d139      	bne.n	800131e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80012da:	2350      	movs	r3, #80	; 0x50
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ea:	2302      	movs	r3, #2
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fa8c 	bl	8001814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800130c:	2302      	movs	r3, #2
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	483a      	ldr	r0, [pc, #232]	; (8001400 <HAL_TIM_MspPostInit+0x1c0>)
 8001318:	f000 fa7c 	bl	8001814 <HAL_GPIO_Init>
}
 800131c:	e066      	b.n	80013ec <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a38      	ldr	r2, [pc, #224]	; (8001404 <HAL_TIM_MspPostInit+0x1c4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d11d      	bne.n	8001364 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	4a32      	ldr	r2, [pc, #200]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001340:	2304      	movs	r3, #4
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001350:	2309      	movs	r3, #9
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f000 fa59 	bl	8001814 <HAL_GPIO_Init>
}
 8001362:	e043      	b.n	80013ec <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_TIM_MspPostInit+0x1c8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11c      	bne.n	80013a8 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001386:	2310      	movs	r3, #16
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001396:	2301      	movs	r3, #1
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4817      	ldr	r0, [pc, #92]	; (8001400 <HAL_TIM_MspPostInit+0x1c0>)
 80013a2:	f000 fa37 	bl	8001814 <HAL_GPIO_Init>
}
 80013a6:	e021      	b.n	80013ec <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_TIM_MspPostInit+0x1cc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d11c      	bne.n	80013ec <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_TIM_MspPostInit+0x1b8>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80013da:	2301      	movs	r3, #1
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 fa14 	bl	8001814 <HAL_GPIO_Init>
}
 80013ec:	bf00      	nop
 80013ee:	3738      	adds	r7, #56	; 0x38
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40012c00 	.word	0x40012c00
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40000400 	.word	0x40000400
 8001400:	48000400 	.word	0x48000400
 8001404:	40014000 	.word	0x40014000
 8001408:	40014400 	.word	0x40014400
 800140c:	40014800 	.word	0x40014800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 f8a8 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <USB_LP_IRQHandler+0x10>)
 8001472:	f000 fc8a 	bl	8001d8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20001344 	.word	0x20001344

08001480 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM7_IRQHandler+0x10>)
 8001486:	f003 f9ce 	bl	8004826 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000654 	.word	0x20000654

08001494 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <SystemInit+0x28>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <SystemInit+0x28>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SystemInit+0x28>)
 80014aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ae:	609a      	str	r2, [r3, #8]
#endif
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <LoopForever+0x6>)
  ldr r1, =_edata
 80014c6:	490e      	ldr	r1, [pc, #56]	; (8001500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <LoopForever+0xe>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014dc:	4c0b      	ldr	r4, [pc, #44]	; (800150c <LoopForever+0x16>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ea:	f7ff ffd3 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f008 fb07 	bl	8009b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f2:	f7fe ff1b 	bl	800032c <main>

080014f6 <LoopForever>:

LoopForever:
    b LoopForever
 80014f6:	e7fe      	b.n	80014f6 <LoopForever>
  ldr   r0, =_estack
 80014f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001504:	08009be8 	.word	0x08009be8
  ldr r2, =_sbss
 8001508:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800150c:	20001638 	.word	0x20001638

08001510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC1_2_IRQHandler>

08001512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f939 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f80e 	bl	8001544 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	e001      	b.n	8001538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001534:	f7ff fd08 	bl	8000f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001538:	79fb      	ldrb	r3, [r7, #7]

}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_InitTick+0x68>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d022      	beq.n	800159e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_InitTick+0x6c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_InitTick+0x68>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
 8001568:	fbb2 f3f3 	udiv	r3, r2, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f944 	bl	80017fa <HAL_SYSTICK_Config>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10f      	bne.n	8001598 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	d809      	bhi.n	8001592 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157e:	2200      	movs	r2, #0
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	f04f 30ff 	mov.w	r0, #4294967295
 8001586:	f000 f910 	bl	80017aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_InitTick+0x70>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e007      	b.n	80015a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e004      	b.n	80015a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x1c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_IncTick+0x20>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <HAL_IncTick+0x1c>)
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	200006a0 	.word	0x200006a0
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200006a0 	.word	0x200006a0

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff29 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff40 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff90 	bl	80016e8 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5f 	bl	8001694 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff33 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa4 	bl	8001750 <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001822:	e15a      	b.n	8001ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 814c 	beq.w	8001ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d00b      	beq.n	800185c <HAL_GPIO_Init+0x48>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001850:	2b11      	cmp	r3, #17
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b12      	cmp	r3, #18
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0xea>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	6939      	ldr	r1, [r7, #16]
 8001942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0203 	and.w	r2, r3, #3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a6 	beq.w	8001ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198c:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6613      	str	r3, [r2, #96]	; 0x60
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a0:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ca:	d01f      	beq.n	8001a0c <HAL_GPIO_Init+0x1f8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x2ec>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d019      	beq.n	8001a08 <HAL_GPIO_Init+0x1f4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_GPIO_Init+0x1f0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x2f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1ec>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_GPIO_Init+0x2f8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1e8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2fc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019f4:	2305      	movs	r3, #5
 80019f6:	e00a      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 80019f8:	2306      	movs	r3, #6
 80019fa:	e008      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1e:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a50:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae9d 	bne.w	8001824 <HAL_GPIO_Init+0x10>
  }
}
 8001aea:	bf00      	nop
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	48000400 	.word	0x48000400
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48000c00 	.word	0x48000c00
 8001b0c:	48001000 	.word	0x48001000
 8001b10:	48001400 	.word	0x48001400
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43d9      	mvns	r1, r3
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	400b      	ands	r3, r1
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af06      	add	r7, sp, #24
 8001b82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0d7      	b.n	8001d3e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f007 fcbc 	bl	8009520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fe18 	bl	80057ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e04c      	b.n	8001c5a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	b298      	uxth	r0, r3
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3336      	adds	r3, #54	; 0x36
 8001bfe:	4602      	mov	r2, r0
 8001c00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	3303      	adds	r3, #3
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	3338      	adds	r3, #56	; 0x38
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	333c      	adds	r3, #60	; 0x3c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3340      	adds	r3, #64	; 0x40
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	3301      	adds	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d3ad      	bcc.n	8001bc0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e044      	b.n	8001cf4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3b5      	bcc.n	8001c6a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	687e      	ldr	r6, [r7, #4]
 8001d06:	466d      	mov	r5, sp
 8001d08:	f106 0410 	add.w	r4, r6, #16
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	602b      	str	r3, [r5, #0]
 8001d14:	1d33      	adds	r3, r6, #4
 8001d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d18:	6838      	ldr	r0, [r7, #0]
 8001d1a:	f003 fd81 	bl	8005820 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d102      	bne.n	8001d3c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f001 fa5e 	bl	80031f8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_PCD_Start+0x16>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e012      	b.n	8001d82 <HAL_PCD_Start+0x3c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fd27 	bl	80057bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f005 fd13 	bl	800779e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 fd18 	bl	80077cc <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da6:	d102      	bne.n	8001dae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fb5b 	bl	8002464 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 fd0a 	bl	80077cc <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d112      	bne.n	8001dea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f007 fc1a 	bl	8009616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001de2:	2100      	movs	r1, #0
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f91e 	bl	8002026 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f005 fcec 	bl	80077cc <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dfe:	d10b      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 fcd5 	bl	80077cc <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2c:	d10b      	bne.n	8001e46 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e40:	b292      	uxth	r2, r2
 8001e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 fcbe 	bl	80077cc <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5a:	d133      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0208 	bic.w	r2, r2, #8
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f007 fdad 	bl	8009a00 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fbee 	bl	8009688 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 fc7f 	bl	80077cc <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed8:	d126      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0208 	orr.w	r2, r2, #8
 8001eec:	b292      	uxth	r2, r2
 8001eee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f04:	b292      	uxth	r2, r2
 8001f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0204 	orr.w	r2, r2, #4
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f007 fb96 	bl	8009654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f005 fc4d 	bl	80077cc <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d13f      	bne.n	8001fbc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d12b      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0204 	orr.w	r2, r2, #4
 8001f70:	b292      	uxth	r2, r2
 8001f72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0208 	orr.w	r2, r2, #8
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fac:	2101      	movs	r1, #1
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f007 fd26 	bl	8009a00 <HAL_PCDEx_LPM_Callback>
 8001fb4:	e002      	b.n	8001fbc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f007 fb4c 	bl	8009654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f005 fc03 	bl	80077cc <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe4:	b292      	uxth	r2, r2
 8001fe6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f007 fb05 	bl	80095fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f005 fbe9 	bl	80077cc <USB_ReadInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002004:	d10b      	bne.n	800201e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002018:	b292      	uxth	r2, r2
 800201a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_PCD_SetAddress+0x1a>
 800203c:	2302      	movs	r3, #2
 800203e:	e013      	b.n	8002068 <HAL_PCD_SetAddress+0x42>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f005 fb8c 	bl	8007776 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	70fb      	strb	r3, [r7, #3]
 8002082:	460b      	mov	r3, r1
 8002084:	803b      	strh	r3, [r7, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800208e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	da0e      	bge.n	80020b4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	705a      	strb	r2, [r3, #1]
 80020b2:	e00e      	b.n	80020d2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 0207 	and.w	r2, r3, #7
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020de:	883a      	ldrh	r2, [r7, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	78ba      	ldrb	r2, [r7, #2]
 80020e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020fc:	78bb      	ldrb	r3, [r7, #2]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d102      	bne.n	8002108 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_PCD_EP_Open+0xa6>
 8002112:	2302      	movs	r3, #2
 8002114:	e00e      	b.n	8002134 <HAL_PCD_EP_Open+0xc4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fb9d 	bl	8005864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002132:	7afb      	ldrb	r3, [r7, #11]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214c:	2b00      	cmp	r3, #0
 800214e:	da0e      	bge.n	800216e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	705a      	strb	r2, [r3, #1]
 800216c:	e00e      	b.n	800218c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 0207 	and.w	r2, r3, #7
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_PCD_EP_Close+0x6a>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e00e      	b.n	80021c4 <HAL_PCD_EP_Close+0x88>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 fec3 	bl	8005f40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	f003 0207 	and.w	r2, r3, #7
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220c:	7afb      	ldrb	r3, [r7, #11]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	b2da      	uxtb	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6979      	ldr	r1, [r7, #20]
 8002228:	4618      	mov	r0, r3
 800222a:	f004 f876 	bl	800631a <USB_EPStartXfer>
 800222e:	e005      	b.n	800223c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6979      	ldr	r1, [r7, #20]
 8002236:	4618      	mov	r0, r3
 8002238:	f004 f86f 	bl	800631a <USB_EPStartXfer>
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0207 	and.w	r2, r3, #7
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002268:	681b      	ldr	r3, [r3, #0]
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	460b      	mov	r3, r1
 8002284:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2201      	movs	r2, #1
 80022c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d106      	bne.n	80022e6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6979      	ldr	r1, [r7, #20]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 f81b 	bl	800631a <USB_EPStartXfer>
 80022e4:	e005      	b.n	80022f2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6979      	ldr	r1, [r7, #20]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 f814 	bl	800631a <USB_EPStartXfer>
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 0207 	and.w	r2, r3, #7
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d901      	bls.n	800231a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e04c      	b.n	80023b4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800231a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231e:	2b00      	cmp	r3, #0
 8002320:	da0e      	bge.n	8002340 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	705a      	strb	r2, [r3, #1]
 800233e:	e00c      	b.n	800235a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	b2da      	uxtb	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_PCD_EP_SetStall+0x7e>
 8002376:	2302      	movs	r3, #2
 8002378:	e01c      	b.n	80023b4 <HAL_PCD_EP_SetStall+0xb8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	4618      	mov	r0, r3
 800238a:	f005 f8f5 	bl	8007578 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f005 fa21 	bl	80077ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 020f 	and.w	r2, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d901      	bls.n	80023da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e040      	b.n	800245c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da0e      	bge.n	8002400 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	705a      	strb	r2, [r3, #1]
 80023fe:	e00e      	b.n	800241e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 0207 	and.w	r2, r3, #7
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_EP_ClrStall+0x82>
 800243a:	2302      	movs	r3, #2
 800243c:	e00e      	b.n	800245c <HAL_PCD_EP_ClrStall+0xa0>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	4618      	mov	r0, r3
 800244e:	f005 f8e4 	bl	800761a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	; 0x38
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800246c:	e2d1      	b.n	8002a12 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002476:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002478:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002484:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 8152 	bne.w	8002732 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800248e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d150      	bne.n	800253a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a8:	81fb      	strh	r3, [r7, #14]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	89fb      	ldrh	r3, [r7, #14]
 80024b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3328      	adds	r3, #40	; 0x28
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	441a      	add	r2, r3
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024f8:	2100      	movs	r1, #0
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f007 f863 	bl	80095c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8282 	beq.w	8002a12 <PCD_EP_ISR_Handler+0x5ae>
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 827d 	bne.w	8002a12 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002524:	b2da      	uxtb	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002538:	e26b      	b.n	8002a12 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800254a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800254c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002550:	2b00      	cmp	r3, #0
 8002552:	d032      	beq.n	80025ba <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800258e:	b29b      	uxth	r3, r3
 8002590:	f005 f979 	bl	8007886 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b29a      	uxth	r2, r3
 800259c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a0:	4013      	ands	r3, r2
 80025a2:	823b      	strh	r3, [r7, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	8a3a      	ldrh	r2, [r7, #16]
 80025aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ae:	b292      	uxth	r2, r2
 80025b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f006 ffda 	bl	800956c <HAL_PCD_SetupStageCallback>
 80025b8:	e22b      	b.n	8002a12 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025ba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f280 8227 	bge.w	8002a12 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d0:	4013      	ands	r3, r2
 80025d2:	83bb      	strh	r3, [r7, #28]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	8bba      	ldrh	r2, [r7, #28]
 80025da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025de:	b292      	uxth	r2, r2
 80025e0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d019      	beq.n	8002646 <PCD_EP_ISR_Handler+0x1e2>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d015      	beq.n	8002646 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	6959      	ldr	r1, [r3, #20]
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800262a:	b29b      	uxth	r3, r3
 800262c:	f005 f92b 	bl	8007886 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	441a      	add	r2, r3
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800263e:	2100      	movs	r1, #0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f006 ffa5 	bl	8009590 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002654:	b29b      	uxth	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d112      	bne.n	8002694 <PCD_EP_ISR_Handler+0x230>
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002678:	b29a      	uxth	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268c:	b29a      	uxth	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	e02f      	b.n	80026f4 <PCD_EP_ISR_Handler+0x290>
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b3e      	cmp	r3, #62	; 0x3e
 800269a:	d813      	bhi.n	80026c4 <PCD_EP_ISR_Handler+0x260>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <PCD_EP_ISR_Handler+0x252>
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	3301      	adds	r3, #1
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	e017      	b.n	80026f4 <PCD_EP_ISR_Handler+0x290>
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <PCD_EP_ISR_Handler+0x27a>
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	3b01      	subs	r3, #1
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002704:	827b      	strh	r3, [r7, #18]
 8002706:	8a7b      	ldrh	r3, [r7, #18]
 8002708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800270c:	827b      	strh	r3, [r7, #18]
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002714:	827b      	strh	r3, [r7, #18]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	8a7b      	ldrh	r3, [r7, #18]
 800271c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272c:	b29b      	uxth	r3, r3
 800272e:	8013      	strh	r3, [r2, #0]
 8002730:	e16f      	b.n	8002a12 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002744:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002748:	2b00      	cmp	r3, #0
 800274a:	f280 80e4 	bge.w	8002916 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29a      	uxth	r2, r3
 8002760:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002764:	4013      	ands	r3, r2
 8002766:	853b      	strh	r3, [r7, #40]	; 0x28
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800277c:	b292      	uxth	r2, r2
 800277e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002780:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	7b1b      	ldrb	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d120      	bne.n	80027e0 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8083 	beq.w	80028d2 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	88da      	ldrh	r2, [r3, #6]
 80027d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027da:	f005 f854 	bl	8007886 <USB_ReadPMA>
 80027de:	e078      	b.n	80028d2 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	78db      	ldrb	r3, [r3, #3]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d108      	bne.n	80027fa <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027ea:	461a      	mov	r2, r3
 80027ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f91d 	bl	8002a2e <HAL_PCD_EP_DB_Receive>
 80027f4:	4603      	mov	r3, r0
 80027f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027f8:	e06b      	b.n	80028d2 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	847b      	strh	r3, [r7, #34]	; 0x22
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	441a      	add	r2, r3
 8002824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800282e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002832:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002836:	b29b      	uxth	r3, r3
 8002838:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01f      	beq.n	8002894 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	4413      	add	r3, r2
 800286e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002878:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800287a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287c:	2b00      	cmp	r3, #0
 800287e:	d028      	beq.n	80028d2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	6959      	ldr	r1, [r3, #20]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	891a      	ldrh	r2, [r3, #8]
 800288c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800288e:	f004 fffa 	bl	8007886 <USB_ReadPMA>
 8002892:	e01e      	b.n	80028d2 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	6959      	ldr	r1, [r3, #20]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	895a      	ldrh	r2, [r3, #10]
 80028cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ce:	f004 ffda 	bl	8007886 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d8:	441a      	add	r2, r3
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e4:	441a      	add	r2, r3
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <PCD_EP_ISR_Handler+0x498>
 80028f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d206      	bcs.n	800290a <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4619      	mov	r1, r3
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f006 fe44 	bl	8009590 <HAL_PCD_DataOutStageCallback>
 8002908:	e005      	b.n	8002916 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fd02 	bl	800631a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002916:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d078      	beq.n	8002a12 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002920:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	843b      	strh	r3, [r7, #32]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	8c3b      	ldrh	r3, [r7, #32]
 8002960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002968:	b29b      	uxth	r3, r3
 800296a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	78db      	ldrb	r3, [r3, #3]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d108      	bne.n	8002986 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002978:	2b02      	cmp	r3, #2
 800297a:	d144      	bne.n	8002a06 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800297c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d13f      	bne.n	8002a06 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029aa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	8bfb      	ldrh	r3, [r7, #30]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d906      	bls.n	80029c4 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	8bfb      	ldrh	r3, [r7, #30]
 80029bc:	1ad2      	subs	r2, r2, r3
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	619a      	str	r2, [r3, #24]
 80029c2:	e002      	b.n	80029ca <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f006 fdf4 	bl	80095c6 <HAL_PCD_DataInStageCallback>
 80029de:	e018      	b.n	8002a12 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	8bfb      	ldrh	r3, [r7, #30]
 80029e6:	441a      	add	r2, r3
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	8bfb      	ldrh	r3, [r7, #30]
 80029f2:	441a      	add	r2, r3
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fc8b 	bl	800631a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a04:	e005      	b.n	8002a12 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f917 	bl	8002c40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f6ff ad25 	blt.w	800246e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3738      	adds	r7, #56	; 0x38
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b088      	sub	sp, #32
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d07c      	beq.n	8002b40 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	8b7b      	ldrh	r3, [r7, #26]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d306      	bcc.n	8002a84 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	8b7b      	ldrh	r3, [r7, #26]
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	619a      	str	r2, [r3, #24]
 8002a82:	e002      	b.n	8002a8a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d123      	bne.n	8002ada <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aac:	833b      	strh	r3, [r7, #24]
 8002aae:	8b3b      	ldrh	r3, [r7, #24]
 8002ab0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ab4:	833b      	strh	r3, [r7, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	441a      	add	r2, r3
 8002ac4:	8b3b      	ldrh	r3, [r7, #24]
 8002ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01f      	beq.n	8002b24 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	82fb      	strh	r3, [r7, #22]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	8afb      	ldrh	r3, [r7, #22]
 8002b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b24:	8b7b      	ldrh	r3, [r7, #26]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8085 	beq.w	8002c36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6959      	ldr	r1, [r3, #20]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	891a      	ldrh	r2, [r3, #8]
 8002b38:	8b7b      	ldrh	r3, [r7, #26]
 8002b3a:	f004 fea4 	bl	8007886 <USB_ReadPMA>
 8002b3e:	e07a      	b.n	8002c36 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	8b7b      	ldrh	r3, [r7, #26]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d306      	bcc.n	8002b7e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	8b7b      	ldrh	r3, [r7, #26]
 8002b76:	1ad2      	subs	r2, r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	619a      	str	r2, [r3, #24]
 8002b7c:	e002      	b.n	8002b84 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d123      	bne.n	8002bd4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	83fb      	strh	r3, [r7, #30]
 8002ba8:	8bfb      	ldrh	r3, [r7, #30]
 8002baa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bae:	83fb      	strh	r3, [r7, #30]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	8bfb      	ldrh	r3, [r7, #30]
 8002bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11f      	bne.n	8002c1e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf8:	83bb      	strh	r3, [r7, #28]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	441a      	add	r2, r3
 8002c08:	8bbb      	ldrh	r3, [r7, #28]
 8002c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c1e:	8b7b      	ldrh	r3, [r7, #26]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6959      	ldr	r1, [r3, #20]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	895a      	ldrh	r2, [r3, #10]
 8002c30:	8b7b      	ldrh	r3, [r7, #26]
 8002c32:	f004 fe28 	bl	8007886 <USB_ReadPMA>
    }
  }

  return count;
 8002c36:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b092      	sub	sp, #72	; 0x48
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8130 	beq.w	8002eba <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d906      	bls.n	8002c98 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c90:	1ad2      	subs	r2, r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	619a      	str	r2, [r3, #24]
 8002c96:	e002      	b.n	8002c9e <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d12c      	bne.n	8002d00 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f006 fc8a 	bl	80095c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 822d 	beq.w	8003118 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd8:	827b      	strh	r3, [r7, #18]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	441a      	add	r2, r3
 8002ce8:	8a7b      	ldrh	r3, [r7, #18]
 8002cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	8013      	strh	r3, [r2, #0]
 8002cfe:	e20b      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01f      	beq.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 81e1 	bne.w	8003118 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d5c:	441a      	add	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d68:	441a      	add	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d309      	bcc.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	621a      	str	r2, [r3, #32]
 8002d8c:	e014      	b.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002da2:	e009      	b.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	785b      	ldrb	r3, [r3, #1]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d155      	bne.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x22c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	00da      	lsls	r2, r3, #3
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4413      	add	r3, r2
 8002de2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d112      	bne.n	8002e14 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	801a      	strh	r2, [r3, #0]
 8002e12:	e047      	b.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	2b3e      	cmp	r3, #62	; 0x3e
 8002e18:	d811      	bhi.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	801a      	strh	r2, [r3, #0]
 8002e3c:	e032      	b.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x214>
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	e01b      	b.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d117      	bne.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	4413      	add	r3, r2
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	00da      	lsls	r2, r3, #3
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	4413      	add	r3, r2
 8002e96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	6959      	ldr	r1, [r3, #20]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	891a      	ldrh	r2, [r3, #8]
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f004 fca6 	bl	8007804 <USB_WritePMA>
 8002eb8:	e12e      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ede:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d306      	bcc.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ef0:	1ad2      	subs	r2, r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	619a      	str	r2, [r3, #24]
 8002ef6:	e002      	b.n	8002efe <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d12c      	bne.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f006 fb5a 	bl	80095c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 80fd 	bne.w	8003118 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	8013      	strh	r3, [r2, #0]
 8002f5e:	e0db      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11f      	bne.n	8002faa <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f84:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	441a      	add	r2, r3
 8002f94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 80b1 	bne.w	8003118 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fc8:	441a      	add	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d309      	bcc.n	8002fee <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a1a      	ldr	r2, [r3, #32]
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	621a      	str	r2, [r3, #32]
 8002fec:	e014      	b.n	8003018 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003002:	e009      	b.n	8003018 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	785b      	ldrb	r3, [r3, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d155      	bne.n	80030d2 <HAL_PCD_EP_DB_Transmit+0x492>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	647b      	str	r3, [r7, #68]	; 0x44
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	4413      	add	r3, r2
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	4413      	add	r3, r2
 8003048:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800304c:	643b      	str	r3, [r7, #64]	; 0x40
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d112      	bne.n	800307a <HAL_PCD_EP_DB_Transmit+0x43a>
 8003054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800305e:	b29a      	uxth	r2, r3
 8003060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800306e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003072:	b29a      	uxth	r2, r3
 8003074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003076:	801a      	strh	r2, [r3, #0]
 8003078:	e044      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	2b3e      	cmp	r3, #62	; 0x3e
 800307e:	d811      	bhi.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x464>
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_PCD_EP_DB_Transmit+0x456>
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	3301      	adds	r3, #1
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003098:	b29b      	uxth	r3, r3
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	b29a      	uxth	r2, r3
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	801a      	strh	r2, [r3, #0]
 80030a2:	e02f      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_EP_DB_Transmit+0x47a>
 80030b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b6:	3b01      	subs	r3, #1
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030bc:	b29b      	uxth	r3, r3
 80030be:	029b      	lsls	r3, r3, #10
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ce:	801a      	strh	r2, [r3, #0]
 80030d0:	e018      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d114      	bne.n	8003104 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e8:	4413      	add	r3, r2
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	00da      	lsls	r2, r3, #3
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	4413      	add	r3, r2
 80030f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6959      	ldr	r1, [r3, #20]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	895a      	ldrh	r2, [r3, #10]
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	b29b      	uxth	r3, r3
 8003114:	f004 fb76 	bl	8007804 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003132:	823b      	strh	r3, [r7, #16]
 8003134:	8a3b      	ldrh	r3, [r7, #16]
 8003136:	f083 0310 	eor.w	r3, r3, #16
 800313a:	823b      	strh	r3, [r7, #16]
 800313c:	8a3b      	ldrh	r3, [r7, #16]
 800313e:	f083 0320 	eor.w	r3, r3, #32
 8003142:	823b      	strh	r3, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	8a3b      	ldrh	r3, [r7, #16]
 8003154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003164:	b29b      	uxth	r3, r3
 8003166:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3748      	adds	r7, #72	; 0x48
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003172:	b480      	push	{r7}
 8003174:	b087      	sub	sp, #28
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	817b      	strh	r3, [r7, #10]
 8003180:	4613      	mov	r3, r2
 8003182:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003184:	897b      	ldrh	r3, [r7, #10]
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003190:	897b      	ldrh	r3, [r7, #10]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e009      	b.n	80031bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031a8:	897a      	ldrh	r2, [r7, #10]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031bc:	893b      	ldrh	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2200      	movs	r2, #0
 80031c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	80da      	strh	r2, [r3, #6]
 80031d0:	e00b      	b.n	80031ea <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2201      	movs	r2, #1
 80031d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800321c:	b29b      	uxth	r3, r3
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003230:	b29b      	uxth	r3, r3
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d141      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800325a:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d131      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003268:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326e:	4a46      	ldr	r2, [pc, #280]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003280:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003288:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2232      	movs	r2, #50	; 0x32
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329e:	e002      	b.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d102      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f2      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d158      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e057      	b.n	800337c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d2:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032dc:	e04d      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d141      	bne.n	800336a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d131      	bne.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fa:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2232      	movs	r2, #50	; 0x32
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	0c9b      	lsrs	r3, r3, #18
 8003326:	3301      	adds	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332a:	e002      	b.n	8003332 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d102      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f2      	bne.n	800332c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d112      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e011      	b.n	800337c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003368:	e007      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003378:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40007000 	.word	0x40007000
 800338c:	20000000 	.word	0x20000000
 8003390:	431bde83 	.word	0x431bde83

08003394 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800339e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a2:	6093      	str	r3, [r2, #8]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40007000 	.word	0x40007000

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e308      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	4ba3      	ldr	r3, [pc, #652]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033dc:	4ba0      	ldr	r3, [pc, #640]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3e>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_OscConfig+0x44>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d10b      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	4b99      	ldr	r3, [pc, #612]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05b      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d157      	bne.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e2e3      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x74>
 800341a:	4b91      	ldr	r3, [pc, #580]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a90      	ldr	r2, [pc, #576]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b8b      	ldr	r3, [pc, #556]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a8a      	ldr	r2, [pc, #552]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b88      	ldr	r3, [pc, #544]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a87      	ldr	r2, [pc, #540]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 800344c:	4b84      	ldr	r3, [pc, #528]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a83      	ldr	r2, [pc, #524]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b81      	ldr	r3, [pc, #516]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe f8b6 	bl	80015dc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe f8b2 	bl	80015dc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e2a8      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003486:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xc0>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe f8a2 	bl	80015dc <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe f89e 	bl	80015dc <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e294      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d075      	beq.n	80035b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ca:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d4:	4b62      	ldr	r3, [pc, #392]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d102      	bne.n	80034ea <HAL_RCC_OscConfig+0x136>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_OscConfig+0x13c>
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d11f      	bne.n	8003530 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f0:	4b5b      	ldr	r3, [pc, #364]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_OscConfig+0x154>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e267      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4b55      	ldr	r3, [pc, #340]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	4952      	ldr	r1, [pc, #328]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCC_OscConfig+0x2b0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe f80f 	bl	8001544 <HAL_InitTick>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d043      	beq.n	80035b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e253      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d023      	beq.n	8003580 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003538:	4b49      	ldr	r3, [pc, #292]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a48      	ldr	r2, [pc, #288]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe f84a 	bl	80015dc <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe f846 	bl	80015dc <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e23c      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800355e:	4b40      	ldr	r3, [pc, #256]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	061b      	lsls	r3, r3, #24
 8003578:	4939      	ldr	r1, [pc, #228]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
 800357e:	e01a      	b.n	80035b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a36      	ldr	r2, [pc, #216]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe f826 	bl	80015dc <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7fe f822 	bl	80015dc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e218      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x1e0>
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03c      	beq.n	800363c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01c      	beq.n	8003604 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ca:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fd ffff 	bl	80015dc <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fd fffb 	bl	80015dc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e1f1      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ef      	beq.n	80035e2 <HAL_RCC_OscConfig+0x22e>
 8003602:	e01b      	b.n	800363c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fd ffe2 	bl	80015dc <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fd ffde 	bl	80015dc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1d4      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ef      	bne.n	800361c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80ab 	beq.w	80037a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800364e:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x2b4>
 800365a:	2301      	movs	r3, #1
 800365c:	e005      	b.n	800366a <HAL_RCC_OscConfig+0x2b6>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	20000004 	.word	0x20000004
 8003668:	2300      	movs	r3, #0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	4baf      	ldr	r3, [pc, #700]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	4aae      	ldr	r2, [pc, #696]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
 800367a:	4bac      	ldr	r3, [pc, #688]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368a:	4ba9      	ldr	r3, [pc, #676]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003696:	4ba6      	ldr	r3, [pc, #664]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4aa5      	ldr	r2, [pc, #660]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fd ff9b 	bl	80015dc <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fd ff97 	bl	80015dc <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e18d      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036bc:	4b9c      	ldr	r3, [pc, #624]	; (8003930 <HAL_RCC_OscConfig+0x57c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d108      	bne.n	80036e2 <HAL_RCC_OscConfig+0x32e>
 80036d0:	4b96      	ldr	r3, [pc, #600]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	4a95      	ldr	r2, [pc, #596]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e0:	e024      	b.n	800372c <HAL_RCC_OscConfig+0x378>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d110      	bne.n	800370c <HAL_RCC_OscConfig+0x358>
 80036ea:	4b90      	ldr	r3, [pc, #576]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	4a8e      	ldr	r2, [pc, #568]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fa:	4b8c      	ldr	r3, [pc, #560]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	4a8a      	ldr	r2, [pc, #552]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370a:	e00f      	b.n	800372c <HAL_RCC_OscConfig+0x378>
 800370c:	4b87      	ldr	r3, [pc, #540]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a86      	ldr	r2, [pc, #536]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800371c:	4b83      	ldr	r3, [pc, #524]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a82      	ldr	r2, [pc, #520]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d016      	beq.n	8003762 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fd ff52 	bl	80015dc <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fd ff4e 	bl	80015dc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e142      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003752:	4b76      	ldr	r3, [pc, #472]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ed      	beq.n	800373c <HAL_RCC_OscConfig+0x388>
 8003760:	e015      	b.n	800378e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fd ff3b 	bl	80015dc <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd ff37 	bl	80015dc <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e12b      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003780:	4b6a      	ldr	r3, [pc, #424]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ed      	bne.n	800376a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800378e:	7ffb      	ldrb	r3, [r7, #31]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003794:	4b65      	ldr	r3, [pc, #404]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	4a64      	ldr	r2, [pc, #400]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800379a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d03c      	beq.n	8003826 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01c      	beq.n	80037ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037b4:	4b5d      	ldr	r3, [pc, #372]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ba:	4a5c      	ldr	r2, [pc, #368]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd ff0a 	bl	80015dc <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037cc:	f7fd ff06 	bl	80015dc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0fc      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037de:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ef      	beq.n	80037cc <HAL_RCC_OscConfig+0x418>
 80037ec:	e01b      	b.n	8003826 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ee:	4b4f      	ldr	r3, [pc, #316]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f4:	4a4d      	ldr	r2, [pc, #308]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd feed 	bl	80015dc <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003806:	f7fd fee9 	bl	80015dc <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0df      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003818:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800381a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1ef      	bne.n	8003806 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80d3 	beq.w	80039d6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003830:	4b3e      	ldr	r3, [pc, #248]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b0c      	cmp	r3, #12
 800383a:	f000 808d 	beq.w	8003958 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d15a      	bne.n	80038fc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a38      	ldr	r2, [pc, #224]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800384c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fd fec3 	bl	80015dc <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fd febf 	bl	80015dc <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0b5      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386c:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003878:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	4b2d      	ldr	r3, [pc, #180]	; (8003934 <HAL_RCC_OscConfig+0x580>)
 800387e:	4013      	ands	r3, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6a11      	ldr	r1, [r2, #32]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003888:	3a01      	subs	r2, #1
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003892:	0212      	lsls	r2, r2, #8
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	3a01      	subs	r2, #1
 800389e:	0552      	lsls	r2, r2, #21
 80038a0:	4311      	orrs	r1, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038a6:	0852      	lsrs	r2, r2, #1
 80038a8:	3a01      	subs	r2, #1
 80038aa:	0652      	lsls	r2, r2, #25
 80038ac:	4311      	orrs	r1, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038b2:	06d2      	lsls	r2, r2, #27
 80038b4:	430a      	orrs	r2, r1
 80038b6:	491d      	ldr	r1, [pc, #116]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fe82 	bl	80015dc <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fe7e 	bl	80015dc <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e074      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x528>
 80038fa:	e06c      	b.n	80039d6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_OscConfig+0x578>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a07      	ldr	r2, [pc, #28]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_OscConfig+0x578>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_RCC_OscConfig+0x578>)
 800391a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800391e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003922:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd fe5a 	bl	80015dc <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392a:	e00e      	b.n	800394a <HAL_RCC_OscConfig+0x596>
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
 8003934:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd fe50 	bl	80015dc <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e046      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394a:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_OscConfig+0x62c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x584>
 8003956:	e03e      	b.n	80039d6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e039      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_RCC_OscConfig+0x62c>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 0203 	and.w	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	429a      	cmp	r2, r3
 8003976:	d12c      	bne.n	80039d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	3b01      	subs	r3, #1
 8003984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d123      	bne.n	80039d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d11b      	bne.n	80039d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d113      	bne.n	80039d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	3b01      	subs	r3, #1
 80039b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	3b01      	subs	r3, #1
 80039cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e11e      	b.n	8003c3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b91      	ldr	r3, [pc, #580]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d910      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b8e      	ldr	r3, [pc, #568]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 020f 	bic.w	r2, r3, #15
 8003a12:	498c      	ldr	r1, [pc, #560]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e106      	b.n	8003c3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d073      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d129      	bne.n	8003a94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a40:	4b81      	ldr	r3, [pc, #516]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0f4      	b.n	8003c3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a50:	f000 f966 	bl	8003d20 <RCC_GetSysClockFreqFromPLLSource>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4a7c      	ldr	r2, [pc, #496]	; (8003c4c <HAL_RCC_ClockConfig+0x268>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d93f      	bls.n	8003ade <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a5e:	4b7a      	ldr	r3, [pc, #488]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d033      	beq.n	8003ade <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d12f      	bne.n	8003ade <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a7e:	4b72      	ldr	r3, [pc, #456]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a86:	4a70      	ldr	r2, [pc, #448]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e024      	b.n	8003ade <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9c:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0c6      	b.n	8003c3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0be      	b.n	8003c3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003abc:	f000 f8ce 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4a61      	ldr	r2, [pc, #388]	; (8003c4c <HAL_RCC_ClockConfig+0x268>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d909      	bls.n	8003ade <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aca:	4b5f      	ldr	r3, [pc, #380]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad2:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4957      	ldr	r1, [pc, #348]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af0:	f7fd fd74 	bl	80015dc <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fd fd70 	bl	80015dc <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e095      	b.n	8003c3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b38:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b50:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b58:	4a3b      	ldr	r2, [pc, #236]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4936      	ldr	r1, [pc, #216]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b80      	cmp	r3, #128	; 0x80
 8003b78:	d105      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b7a:	4b33      	ldr	r3, [pc, #204]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4a32      	ldr	r2, [pc, #200]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b86:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d21d      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b94:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 020f 	bic.w	r2, r3, #15
 8003b9c:	4929      	ldr	r1, [pc, #164]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ba4:	f7fd fd1a 	bl	80015dc <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fd fd16 	bl	80015dc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e03b      	b.n	8003c3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <HAL_RCC_ClockConfig+0x260>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1ed      	bne.n	8003bac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4917      	ldr	r1, [pc, #92]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	490f      	ldr	r1, [pc, #60]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c0e:	f000 f825 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c12:	4601      	mov	r1, r0
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_RCC_ClockConfig+0x264>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <HAL_RCC_ClockConfig+0x26c>)
 8003c20:	5cd3      	ldrb	r3, [r2, r3]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <HAL_RCC_ClockConfig+0x270>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <HAL_RCC_ClockConfig+0x274>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd fc86 	bl	8001544 <HAL_InitTick>
 8003c38:	4603      	mov	r3, r0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	04c4b400 	.word	0x04c4b400
 8003c50:	08009bd0 	.word	0x08009bd0
 8003c54:	20000000 	.word	0x20000000
 8003c58:	20000004 	.word	0x20000004

08003c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d102      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e047      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d102      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c80:	4b26      	ldr	r3, [pc, #152]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	e03e      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c86:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d136      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d10c      	bne.n	8003cca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb0:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cba:	68d2      	ldr	r2, [r2, #12]
 8003cbc:	0a12      	lsrs	r2, r2, #8
 8003cbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]
      break;
 8003cc8:	e00c      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	4a10      	ldr	r2, [pc, #64]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd4:	68d2      	ldr	r2, [r2, #12]
 8003cd6:	0a12      	lsrs	r2, r2, #8
 8003cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
      break;
 8003ce2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0e5b      	lsrs	r3, r3, #25
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	e001      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d04:	693b      	ldr	r3, [r7, #16]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d10c      	bne.n	8003d5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d44:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4e:	68d2      	ldr	r2, [r2, #12]
 8003d50:	0a12      	lsrs	r2, r2, #8
 8003d52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]
    break;
 8003d5c:	e00c      	b.n	8003d78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d68:	68d2      	ldr	r2, [r2, #12]
 8003d6a:	0a12      	lsrs	r2, r2, #8
 8003d6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
    break;
 8003d76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0e5b      	lsrs	r3, r3, #25
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d92:	687b      	ldr	r3, [r7, #4]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40021000 	.word	0x40021000
 8003da4:	007a1200 	.word	0x007a1200
 8003da8:	00f42400 	.word	0x00f42400

08003dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db4:	2300      	movs	r3, #0
 8003db6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db8:	2300      	movs	r3, #0
 8003dba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8098 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dce:	4b43      	ldr	r3, [pc, #268]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	4b40      	ldr	r3, [pc, #256]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	4a3f      	ldr	r2, [pc, #252]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6593      	str	r3, [r2, #88]	; 0x58
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df2:	2301      	movs	r3, #1
 8003df4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a39      	ldr	r2, [pc, #228]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e02:	f7fd fbeb 	bl	80015dc <HAL_GetTick>
 8003e06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e08:	e009      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fd fbe7 	bl	80015dc <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d902      	bls.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	74fb      	strb	r3, [r7, #19]
        break;
 8003e1c:	e005      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1e:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ef      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d159      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01e      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d019      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e58:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e68:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fba7 	bl	80015dc <HAL_GetTick>
 8003e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e90:	e00b      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fd fba3 	bl	80015dc <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d902      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea8:	e006      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ec      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4903      	ldr	r1, [pc, #12]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
 8003eda:	e005      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee8:	7c7b      	ldrb	r3, [r7, #17]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4ba6      	ldr	r3, [pc, #664]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	4aa5      	ldr	r2, [pc, #660]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f06:	4ba0      	ldr	r3, [pc, #640]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f023 0203 	bic.w	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	499c      	ldr	r1, [pc, #624]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f28:	4b97      	ldr	r3, [pc, #604]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f023 020c 	bic.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4994      	ldr	r1, [pc, #592]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f4a:	4b8f      	ldr	r3, [pc, #572]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	498b      	ldr	r1, [pc, #556]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f6c:	4b86      	ldr	r3, [pc, #536]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4983      	ldr	r1, [pc, #524]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f8e:	4b7e      	ldr	r3, [pc, #504]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	497a      	ldr	r1, [pc, #488]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	4972      	ldr	r1, [pc, #456]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4969      	ldr	r1, [pc, #420]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff4:	4b64      	ldr	r3, [pc, #400]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4961      	ldr	r1, [pc, #388]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004016:	4b5c      	ldr	r3, [pc, #368]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	4958      	ldr	r1, [pc, #352]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d015      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004038:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	4950      	ldr	r1, [pc, #320]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004056:	d105      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004058:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004062:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004070:	4b45      	ldr	r3, [pc, #276]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4942      	ldr	r1, [pc, #264]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004090:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a3c      	ldr	r2, [pc, #240]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040a8:	4b37      	ldr	r3, [pc, #220]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	4934      	ldr	r1, [pc, #208]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c6:	d105      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c8:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e0:	4b29      	ldr	r3, [pc, #164]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	4926      	ldr	r1, [pc, #152]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fe:	d105      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004100:	4b21      	ldr	r3, [pc, #132]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a20      	ldr	r2, [pc, #128]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	4918      	ldr	r1, [pc, #96]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004136:	d105      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a12      	ldr	r2, [pc, #72]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	490a      	ldr	r1, [pc, #40]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800417c:	7cbb      	ldrb	r3, [r7, #18]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000

0800418c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e049      	b.n	8004232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fff6 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f000 fde2 	bl	8004d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e04a      	b.n	80042ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d013      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <HAL_TIM_Base_Start_IT+0xc0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_TIM_Base_Start_IT+0xc4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <HAL_TIM_Base_Start_IT+0xc8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x6c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_TIM_Base_Start_IT+0xcc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d115      	bne.n	80042d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	4b17      	ldr	r3, [pc, #92]	; (800430c <HAL_TIM_Base_Start_IT+0xd0>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d015      	beq.n	80042e6 <HAL_TIM_Base_Start_IT+0xaa>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d011      	beq.n	80042e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	e008      	b.n	80042e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e000      	b.n	80042e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40013400 	.word	0x40013400
 8004308:	40014000 	.word	0x40014000
 800430c:	00010007 	.word	0x00010007

08004310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e049      	b.n	80043b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fc fe2a 	bl	8000f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f000 fd20 	bl	8004d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_TIM_PWM_Start+0x24>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e03c      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d109      	bne.n	80043fe <HAL_TIM_PWM_Start+0x3e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e02f      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d109      	bne.n	8004418 <HAL_TIM_PWM_Start+0x58>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e022      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d109      	bne.n	8004432 <HAL_TIM_PWM_Start+0x72>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e015      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b10      	cmp	r3, #16
 8004436:	d109      	bne.n	800444c <HAL_TIM_PWM_Start+0x8c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e008      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e097      	b.n	8004596 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_TIM_PWM_Start+0xb6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004474:	e023      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d104      	bne.n	8004486 <HAL_TIM_PWM_Start+0xc6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	e01b      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d104      	bne.n	8004496 <HAL_TIM_PWM_Start+0xd6>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004494:	e013      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Start+0xe6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044a4:	e00b      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Start+0xf6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b4:	e003      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 ffea 	bl	80054a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a33      	ldr	r2, [pc, #204]	; (80045a0 <HAL_TIM_PWM_Start+0x1e0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a32      	ldr	r2, [pc, #200]	; (80045a4 <HAL_TIM_PWM_Start+0x1e4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a30      	ldr	r2, [pc, #192]	; (80045a8 <HAL_TIM_PWM_Start+0x1e8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <HAL_TIM_PWM_Start+0x1ec>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a2d      	ldr	r2, [pc, #180]	; (80045b0 <HAL_TIM_PWM_Start+0x1f0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_Start+0x142>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_TIM_PWM_Start+0x144>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_TIM_PWM_Start+0x1e0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d018      	beq.n	8004554 <HAL_TIM_PWM_Start+0x194>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d013      	beq.n	8004554 <HAL_TIM_PWM_Start+0x194>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <HAL_TIM_PWM_Start+0x1f4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <HAL_TIM_PWM_Start+0x194>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1f      	ldr	r2, [pc, #124]	; (80045b8 <HAL_TIM_PWM_Start+0x1f8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <HAL_TIM_PWM_Start+0x194>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <HAL_TIM_PWM_Start+0x1e4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <HAL_TIM_PWM_Start+0x194>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a16      	ldr	r2, [pc, #88]	; (80045a8 <HAL_TIM_PWM_Start+0x1e8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d115      	bne.n	8004580 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_TIM_PWM_Start+0x1fc>)
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b06      	cmp	r3, #6
 8004564:	d015      	beq.n	8004592 <HAL_TIM_PWM_Start+0x1d2>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456c:	d011      	beq.n	8004592 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	e008      	b.n	8004592 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e000      	b.n	8004594 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40013400 	.word	0x40013400
 80045a8:	40014000 	.word	0x40014000
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	00010007 	.word	0x00010007

080045c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e097      	b.n	8004704 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc fd19 	bl	8001020 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004604:	f023 0307 	bic.w	r3, r3, #7
 8004608:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f000 fbbd 	bl	8004d94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	4313      	orrs	r3, r2
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004660:	f023 030c 	bic.w	r3, r3, #12
 8004664:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800466c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	4313      	orrs	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	011a      	lsls	r2, r3, #4
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	031b      	lsls	r3, r3, #12
 8004690:	4313      	orrs	r3, r2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	4313      	orrs	r3, r2
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800471c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004724:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800472c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004734:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d110      	bne.n	800475e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004742:	7b7b      	ldrb	r3, [r7, #13]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e068      	b.n	800481e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	e031      	b.n	80047c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d110      	bne.n	8004786 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004764:	7bbb      	ldrb	r3, [r7, #14]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d102      	bne.n	8004770 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800476a:	7b3b      	ldrb	r3, [r7, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d001      	beq.n	8004774 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e054      	b.n	800481e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004784:	e01d      	b.n	80047c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d108      	bne.n	800479e <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800478c:	7bbb      	ldrb	r3, [r7, #14]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004792:	7b7b      	ldrb	r3, [r7, #13]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004798:	7b3b      	ldrb	r3, [r7, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e03d      	b.n	800481e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_TIM_Encoder_Start+0xc2>
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d008      	beq.n	80047de <HAL_TIM_Encoder_Start+0xd2>
 80047cc:	e00f      	b.n	80047ee <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fe62 	bl	80054a0 <TIM_CCxChannelCmd>
      break;
 80047dc:	e016      	b.n	800480c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	2104      	movs	r1, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fe5a 	bl	80054a0 <TIM_CCxChannelCmd>
      break;
 80047ec:	e00e      	b.n	800480c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2201      	movs	r2, #1
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fe52 	bl	80054a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2201      	movs	r2, #1
 8004802:	2104      	movs	r1, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fe4b 	bl	80054a0 <TIM_CCxChannelCmd>
      break;
 800480a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d122      	bne.n	8004882 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b02      	cmp	r3, #2
 8004848:	d11b      	bne.n	8004882 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f06f 0202 	mvn.w	r2, #2
 8004852:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa75 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 800486e:	e005      	b.n	800487c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa67 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa78 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d122      	bne.n	80048d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b04      	cmp	r3, #4
 800489c:	d11b      	bne.n	80048d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f06f 0204 	mvn.w	r2, #4
 80048a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa4b 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 80048c2:	e005      	b.n	80048d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa3d 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa4e 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d122      	bne.n	800492a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d11b      	bne.n	800492a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0208 	mvn.w	r2, #8
 80048fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2204      	movs	r2, #4
 8004900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa21 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 8004916:	e005      	b.n	8004924 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa13 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa24 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b10      	cmp	r3, #16
 8004936:	d122      	bne.n	800497e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b10      	cmp	r3, #16
 8004944:	d11b      	bne.n	800497e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f06f 0210 	mvn.w	r2, #16
 800494e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2208      	movs	r2, #8
 8004954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f9f7 	bl	8004d58 <HAL_TIM_IC_CaptureCallback>
 800496a:	e005      	b.n	8004978 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f9e9 	bl	8004d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f9fa 	bl	8004d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10e      	bne.n	80049aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d107      	bne.n	80049aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0201 	mvn.w	r2, #1
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fc fa33 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d10e      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b80      	cmp	r3, #128	; 0x80
 80049c4:	d107      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 feb7 	bl	8005744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 feaa 	bl	8005758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9a8 	bl	8004d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0220 	mvn.w	r2, #32
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fe6a 	bl	8005730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a6a:	d10f      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7a:	d107      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fe70 	bl	800576c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a9a:	d10f      	bne.n	8004abc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fe62 	bl	8005780 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aca:	d10f      	bne.n	8004aec <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fe54 	bl	8005794 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004afa:	d10f      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b0a:	d107      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fe46 	bl	80057a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0fd      	b.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b14      	cmp	r3, #20
 8004b4a:	f200 80f0 	bhi.w	8004d2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004ba9 	.word	0x08004ba9
 8004b58:	08004d2f 	.word	0x08004d2f
 8004b5c:	08004d2f 	.word	0x08004d2f
 8004b60:	08004d2f 	.word	0x08004d2f
 8004b64:	08004be9 	.word	0x08004be9
 8004b68:	08004d2f 	.word	0x08004d2f
 8004b6c:	08004d2f 	.word	0x08004d2f
 8004b70:	08004d2f 	.word	0x08004d2f
 8004b74:	08004c2b 	.word	0x08004c2b
 8004b78:	08004d2f 	.word	0x08004d2f
 8004b7c:	08004d2f 	.word	0x08004d2f
 8004b80:	08004d2f 	.word	0x08004d2f
 8004b84:	08004c6b 	.word	0x08004c6b
 8004b88:	08004d2f 	.word	0x08004d2f
 8004b8c:	08004d2f 	.word	0x08004d2f
 8004b90:	08004d2f 	.word	0x08004d2f
 8004b94:	08004cad 	.word	0x08004cad
 8004b98:	08004d2f 	.word	0x08004d2f
 8004b9c:	08004d2f 	.word	0x08004d2f
 8004ba0:	08004d2f 	.word	0x08004d2f
 8004ba4:	08004ced 	.word	0x08004ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f980 	bl	8004eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0208 	orr.w	r2, r2, #8
 8004bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0204 	bic.w	r2, r2, #4
 8004bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	619a      	str	r2, [r3, #24]
      break;
 8004be6:	e0a3      	b.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f9f0 	bl	8004fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6999      	ldr	r1, [r3, #24]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	021a      	lsls	r2, r3, #8
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	619a      	str	r2, [r3, #24]
      break;
 8004c28:	e082      	b.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fa59 	bl	80050e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0208 	orr.w	r2, r2, #8
 8004c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0204 	bic.w	r2, r2, #4
 8004c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	61da      	str	r2, [r3, #28]
      break;
 8004c68:	e062      	b.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fac1 	bl	80051f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	021a      	lsls	r2, r3, #8
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	61da      	str	r2, [r3, #28]
      break;
 8004caa:	e041      	b.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fb2a 	bl	800530c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0208 	orr.w	r2, r2, #8
 8004cc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0204 	bic.w	r2, r2, #4
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cea:	e021      	b.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fb6e 	bl	80053d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	021a      	lsls	r2, r3, #8
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d2c:	e000      	b.n	8004d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop

08004d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3c      	ldr	r2, [pc, #240]	; (8004e98 <TIM_Base_SetConfig+0x104>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d00b      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a39      	ldr	r2, [pc, #228]	; (8004e9c <TIM_Base_SetConfig+0x108>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a38      	ldr	r2, [pc, #224]	; (8004ea0 <TIM_Base_SetConfig+0x10c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x38>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a37      	ldr	r2, [pc, #220]	; (8004ea4 <TIM_Base_SetConfig+0x110>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d108      	bne.n	8004dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2d      	ldr	r2, [pc, #180]	; (8004e98 <TIM_Base_SetConfig+0x104>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01b      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d017      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <TIM_Base_SetConfig+0x108>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a29      	ldr	r2, [pc, #164]	; (8004ea0 <TIM_Base_SetConfig+0x10c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a28      	ldr	r2, [pc, #160]	; (8004ea4 <TIM_Base_SetConfig+0x110>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a27      	ldr	r2, [pc, #156]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a26      	ldr	r2, [pc, #152]	; (8004eac <TIM_Base_SetConfig+0x118>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <TIM_Base_SetConfig+0x11c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <TIM_Base_SetConfig+0x104>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00f      	beq.n	8004e7c <TIM_Base_SetConfig+0xe8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a11      	ldr	r2, [pc, #68]	; (8004ea4 <TIM_Base_SetConfig+0x110>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_Base_SetConfig+0xe8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a10      	ldr	r2, [pc, #64]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_Base_SetConfig+0xe8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <TIM_Base_SetConfig+0x118>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0xe8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <TIM_Base_SetConfig+0x11c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	615a      	str	r2, [r3, #20]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800

08004eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0201 	bic.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 0302 	bic.w	r3, r3, #2
 8004f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <TIM_OC1_SetConfig+0x10c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00f      	beq.n	8004f34 <TIM_OC1_SetConfig+0x80>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a2b      	ldr	r2, [pc, #172]	; (8004fc4 <TIM_OC1_SetConfig+0x110>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_OC1_SetConfig+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <TIM_OC1_SetConfig+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_OC1_SetConfig+0x80>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <TIM_OC1_SetConfig+0x118>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC1_SetConfig+0x80>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <TIM_OC1_SetConfig+0x11c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10c      	bne.n	8004f4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0308 	bic.w	r3, r3, #8
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <TIM_OC1_SetConfig+0x10c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_OC1_SetConfig+0xc2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <TIM_OC1_SetConfig+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_OC1_SetConfig+0xc2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <TIM_OC1_SetConfig+0x114>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_OC1_SetConfig+0xc2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <TIM_OC1_SetConfig+0x118>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC1_SetConfig+0xc2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <TIM_OC1_SetConfig+0x11c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d111      	bne.n	8004f9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	621a      	str	r2, [r3, #32]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40012c00 	.word	0x40012c00
 8004fc4:	40013400 	.word	0x40013400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800

08004fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0210 	bic.w	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0320 	bic.w	r3, r3, #32
 8005022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a28      	ldr	r2, [pc, #160]	; (80050d4 <TIM_OC2_SetConfig+0x100>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_OC2_SetConfig+0x6c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a27      	ldr	r2, [pc, #156]	; (80050d8 <TIM_OC2_SetConfig+0x104>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10d      	bne.n	800505c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <TIM_OC2_SetConfig+0x100>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00f      	beq.n	8005084 <TIM_OC2_SetConfig+0xb0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <TIM_OC2_SetConfig+0x104>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00b      	beq.n	8005084 <TIM_OC2_SetConfig+0xb0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <TIM_OC2_SetConfig+0x108>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_OC2_SetConfig+0xb0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <TIM_OC2_SetConfig+0x10c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC2_SetConfig+0xb0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <TIM_OC2_SetConfig+0x110>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d113      	bne.n	80050ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800508a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40013400 	.word	0x40013400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800

080050e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <TIM_OC3_SetConfig+0xfc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_OC3_SetConfig+0x6a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a26      	ldr	r2, [pc, #152]	; (80051e8 <TIM_OC3_SetConfig+0x100>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10d      	bne.n	800516e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800516c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <TIM_OC3_SetConfig+0xfc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00f      	beq.n	8005196 <TIM_OC3_SetConfig+0xae>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <TIM_OC3_SetConfig+0x100>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00b      	beq.n	8005196 <TIM_OC3_SetConfig+0xae>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <TIM_OC3_SetConfig+0x104>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <TIM_OC3_SetConfig+0xae>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a19      	ldr	r2, [pc, #100]	; (80051f0 <TIM_OC3_SetConfig+0x108>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC3_SetConfig+0xae>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <TIM_OC3_SetConfig+0x10c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d113      	bne.n	80051be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800519c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	621a      	str	r2, [r3, #32]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40013400 	.word	0x40013400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800

080051f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <TIM_OC4_SetConfig+0x100>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC4_SetConfig+0x6c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a27      	ldr	r2, [pc, #156]	; (80052fc <TIM_OC4_SetConfig+0x104>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10d      	bne.n	8005280 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800526a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800527e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <TIM_OC4_SetConfig+0x100>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00f      	beq.n	80052a8 <TIM_OC4_SetConfig+0xb0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <TIM_OC4_SetConfig+0x104>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_OC4_SetConfig+0xb0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <TIM_OC4_SetConfig+0x108>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_OC4_SetConfig+0xb0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <TIM_OC4_SetConfig+0x10c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_OC4_SetConfig+0xb0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a19      	ldr	r2, [pc, #100]	; (8005308 <TIM_OC4_SetConfig+0x110>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d113      	bne.n	80052d0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	019b      	lsls	r3, r3, #6
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	019b      	lsls	r3, r3, #6
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40012c00 	.word	0x40012c00
 80052fc:	40013400 	.word	0x40013400
 8005300:	40014000 	.word	0x40014000
 8005304:	40014400 	.word	0x40014400
 8005308:	40014800 	.word	0x40014800

0800530c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <TIM_OC5_SetConfig+0xb4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <TIM_OC5_SetConfig+0x7a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <TIM_OC5_SetConfig+0xb8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00b      	beq.n	8005386 <TIM_OC5_SetConfig+0x7a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <TIM_OC5_SetConfig+0xbc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_OC5_SetConfig+0x7a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <TIM_OC5_SetConfig+0xc0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC5_SetConfig+0x7a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <TIM_OC5_SetConfig+0xc4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d109      	bne.n	800539a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	621a      	str	r2, [r3, #32]
}
 80053b4:	bf00      	nop
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40013400 	.word	0x40013400
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800541a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	051b      	lsls	r3, r3, #20
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <TIM_OC6_SetConfig+0xb8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <TIM_OC6_SetConfig+0x7c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a17      	ldr	r2, [pc, #92]	; (8005490 <TIM_OC6_SetConfig+0xbc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_OC6_SetConfig+0x7c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a16      	ldr	r2, [pc, #88]	; (8005494 <TIM_OC6_SetConfig+0xc0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_OC6_SetConfig+0x7c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <TIM_OC6_SetConfig+0xc4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC6_SetConfig+0x7c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a14      	ldr	r2, [pc, #80]	; (800549c <TIM_OC6_SetConfig+0xc8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d109      	bne.n	8005464 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40013400 	.word	0x40013400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800

080054a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2201      	movs	r2, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1a      	ldr	r2, [r3, #32]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	401a      	ands	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	fa01 f303 	lsl.w	r3, r1, r3
 80054d8:	431a      	orrs	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005500:	2302      	movs	r3, #2
 8005502:	e065      	b.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2c      	ldr	r2, [pc, #176]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2b      	ldr	r2, [pc, #172]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d108      	bne.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800553e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1b      	ldr	r2, [pc, #108]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557a:	d013      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a13      	ldr	r2, [pc, #76]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10c      	bne.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40014000 	.word	0x40014000

080055f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005608:	2302      	movs	r3, #2
 800560a:	e087      	b.n	800571c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	041b      	lsls	r3, r3, #16
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a27      	ldr	r2, [pc, #156]	; (8005728 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d106      	bne.n	80056a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1d      	ldr	r2, [pc, #116]	; (800572c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d126      	bne.n	800570a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	051b      	lsls	r3, r3, #20
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a0d      	ldr	r2, [pc, #52]	; (800572c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d106      	bne.n	800570a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40013400 	.word	0x40013400

08005730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057f2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	b29b      	uxth	r3, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	4013      	ands	r3, r2
 800580a:	b29a      	uxth	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005820:	b084      	sub	sp, #16
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	f107 0014 	add.w	r0, r7, #20
 800582e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	b004      	add	sp, #16
 8005860:	4770      	bx	lr
	...

08005864 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005864:	b480      	push	{r7}
 8005866:	b09b      	sub	sp, #108	; 0x6c
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	78db      	ldrb	r3, [r3, #3]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d81f      	bhi.n	80058d6 <USB_ActivateEndpoint+0x72>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USB_ActivateEndpoint+0x38>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058df 	.word	0x080058df
 80058a8:	080058bb 	.word	0x080058bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058b8:	e012      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058c6:	e00b      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058d4:	e004      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80058dc:	e000      	b.n	80058e0 <USB_ActivateEndpoint+0x7c>
      break;
 80058de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	441a      	add	r2, r3
 80058ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	b21b      	sxth	r3, r3
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	b21a      	sxth	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b21b      	sxth	r3, r3
 8005922:	4313      	orrs	r3, r2
 8005924:	b21b      	sxth	r3, r3
 8005926:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	441a      	add	r2, r3
 8005934:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	7b1b      	ldrb	r3, [r3, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 8149 	bne.w	8005be8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8084 	beq.w	8005a68 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	4413      	add	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	00da      	lsls	r2, r3, #3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	88db      	ldrh	r3, [r3, #6]
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	b29b      	uxth	r3, r3
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	81fb      	strh	r3, [r7, #14]
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <USB_ActivateEndpoint+0x180>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	81bb      	strh	r3, [r7, #12]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	89bb      	ldrh	r3, [r7, #12]
 80059d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	78db      	ldrb	r3, [r3, #3]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d020      	beq.n	8005a2e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a02:	813b      	strh	r3, [r7, #8]
 8005a04:	893b      	ldrh	r3, [r7, #8]
 8005a06:	f083 0320 	eor.w	r3, r3, #32
 8005a0a:	813b      	strh	r3, [r7, #8]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	893b      	ldrh	r3, [r7, #8]
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
 8005a2c:	e27f      	b.n	8005f2e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	897b      	ldrh	r3, [r7, #10]
 8005a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8013      	strh	r3, [r2, #0]
 8005a66:	e262      	b.n	8005f2e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	4413      	add	r3, r2
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	00da      	lsls	r2, r3, #3
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	88db      	ldrh	r3, [r3, #6]
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	4413      	add	r3, r2
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	00da      	lsls	r2, r3, #3
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005abe:	623b      	str	r3, [r7, #32]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d112      	bne.n	8005aee <USB_ActivateEndpoint+0x28a>
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e02f      	b.n	8005b4e <USB_ActivateEndpoint+0x2ea>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b3e      	cmp	r3, #62	; 0x3e
 8005af4:	d813      	bhi.n	8005b1e <USB_ActivateEndpoint+0x2ba>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	663b      	str	r3, [r7, #96]	; 0x60
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <USB_ActivateEndpoint+0x2ac>
 8005b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	029b      	lsls	r3, r3, #10
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	e017      	b.n	8005b4e <USB_ActivateEndpoint+0x2ea>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	663b      	str	r3, [r7, #96]	; 0x60
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <USB_ActivateEndpoint+0x2d4>
 8005b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b34:	3b01      	subs	r3, #1
 8005b36:	663b      	str	r3, [r7, #96]	; 0x60
 8005b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	83fb      	strh	r3, [r7, #30]
 8005b5c:	8bfb      	ldrh	r3, [r7, #30]
 8005b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01b      	beq.n	8005b9e <USB_ActivateEndpoint+0x33a>
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	83bb      	strh	r3, [r7, #28]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	8bbb      	ldrh	r3, [r7, #28]
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb4:	837b      	strh	r3, [r7, #26]
 8005bb6:	8b7b      	ldrh	r3, [r7, #26]
 8005bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bbc:	837b      	strh	r3, [r7, #26]
 8005bbe:	8b7b      	ldrh	r3, [r7, #26]
 8005bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bc4:	837b      	strh	r3, [r7, #26]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	8b7b      	ldrh	r3, [r7, #26]
 8005bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	8013      	strh	r3, [r2, #0]
 8005be6:	e1a2      	b.n	8005f2e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	441a      	add	r2, r3
 8005c0c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c34:	4413      	add	r3, r2
 8005c36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	00da      	lsls	r2, r3, #3
 8005c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c46:	657b      	str	r3, [r7, #84]	; 0x54
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	891b      	ldrh	r3, [r3, #8]
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	4413      	add	r3, r2
 8005c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c74:	4413      	add	r3, r2
 8005c76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	895b      	ldrh	r3, [r3, #10]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 8091 	bne.w	8005db8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ca4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01b      	beq.n	8005ce6 <USB_ActivateEndpoint+0x482>
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cf4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d01b      	beq.n	8005d36 <USB_ActivateEndpoint+0x4d2>
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d14:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d94:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	441a      	add	r2, r3
 8005da0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	8013      	strh	r3, [r2, #0]
 8005db6:	e0ba      	b.n	8005f2e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005dc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01d      	beq.n	8005e10 <USB_ActivateEndpoint+0x5ac>
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	441a      	add	r2, r3
 8005df8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01d      	beq.n	8005e68 <USB_ActivateEndpoint+0x604>
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d024      	beq.n	8005eba <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e8e:	f083 0320 	eor.w	r3, r3, #32
 8005e92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8013      	strh	r3, [r2, #0]
 8005eb8:	e01d      	b.n	8005ef6 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	441a      	add	r2, r3
 8005ede:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	376c      	adds	r7, #108	; 0x6c
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop

08005f40 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b08d      	sub	sp, #52	; 0x34
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	7b1b      	ldrb	r3, [r3, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 808e 	bne.w	8006070 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d044      	beq.n	8005fe6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	81bb      	strh	r3, [r7, #12]
 8005f6a:	89bb      	ldrh	r3, [r7, #12]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <USB_DeactivateEndpoint+0x6c>
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	817b      	strh	r3, [r7, #10]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	441a      	add	r2, r3
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	813b      	strh	r3, [r7, #8]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	893b      	ldrh	r3, [r7, #8]
 8005fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	8013      	strh	r3, [r2, #0]
 8005fe4:	e192      	b.n	800630c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	827b      	strh	r3, [r7, #18]
 8005ff4:	8a7b      	ldrh	r3, [r7, #18]
 8005ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01b      	beq.n	8006036 <USB_DeactivateEndpoint+0xf6>
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006014:	823b      	strh	r3, [r7, #16]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	441a      	add	r2, r3
 8006020:	8a3b      	ldrh	r3, [r7, #16]
 8006022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	81fb      	strh	r3, [r7, #14]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	89fb      	ldrh	r3, [r7, #14]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
 800606e:	e14d      	b.n	800630c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f040 80a5 	bne.w	80061c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	843b      	strh	r3, [r7, #32]
 8006088:	8c3b      	ldrh	r3, [r7, #32]
 800608a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01b      	beq.n	80060ca <USB_DeactivateEndpoint+0x18a>
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a8:	83fb      	strh	r3, [r7, #30]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	8bfb      	ldrh	r3, [r7, #30]
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	83bb      	strh	r3, [r7, #28]
 80060d8:	8bbb      	ldrh	r3, [r7, #28]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01b      	beq.n	800611a <USB_DeactivateEndpoint+0x1da>
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	837b      	strh	r3, [r7, #26]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	8b7b      	ldrh	r3, [r7, #26]
 8006106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006112:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006116:	b29b      	uxth	r3, r3
 8006118:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	833b      	strh	r3, [r7, #24]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	8b3b      	ldrh	r3, [r7, #24]
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006168:	82fb      	strh	r3, [r7, #22]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	441a      	add	r2, r3
 8006174:	8afb      	ldrh	r3, [r7, #22]
 8006176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006186:	b29b      	uxth	r3, r3
 8006188:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a0:	82bb      	strh	r3, [r7, #20]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	8abb      	ldrh	r3, [r7, #20]
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
 80061c2:	e0a3      	b.n	800630c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <USB_DeactivateEndpoint+0x2d4>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006222:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01b      	beq.n	8006264 <USB_DeactivateEndpoint+0x324>
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006242:	853b      	strh	r3, [r7, #40]	; 0x28
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006260:	b29b      	uxth	r3, r3
 8006262:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	441a      	add	r2, r3
 8006286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006298:	b29b      	uxth	r3, r3
 800629a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	441a      	add	r2, r3
 80062f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006308:	b29b      	uxth	r3, r3
 800630a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3734      	adds	r7, #52	; 0x34
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b0c4      	sub	sp, #272	; 0x110
 800631e:	af00      	add	r7, sp, #0
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	6018      	str	r0, [r3, #0]
 8006324:	463b      	mov	r3, r7
 8006326:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b01      	cmp	r3, #1
 8006330:	f040 8566 	bne.w	8006e00 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	429a      	cmp	r2, r3
 8006342:	d905      	bls.n	8006350 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800634e:	e004      	b.n	800635a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800635a:	463b      	mov	r3, r7
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	7b1b      	ldrb	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d12c      	bne.n	80063be <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006364:	463b      	mov	r3, r7
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6959      	ldr	r1, [r3, #20]
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	88da      	ldrh	r2, [r3, #6]
 8006370:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006374:	b29b      	uxth	r3, r3
 8006376:	1d38      	adds	r0, r7, #4
 8006378:	6800      	ldr	r0, [r0, #0]
 800637a:	f001 fa43 	bl	8007804 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	00da      	lsls	r2, r3, #3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80063a6:	f107 0310 	add.w	r3, r7, #16
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	f107 0310 	add.w	r3, r7, #16
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	f000 bcec 	b.w	8006d96 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	78db      	ldrb	r3, [r3, #3]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	f040 8356 	bne.w	8006a76 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	f240 82fa 	bls.w	80069d0 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063dc:	1d3b      	adds	r3, r7, #4
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800640c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006414:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641c:	b29b      	uxth	r3, r3
 800641e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 815e 	beq.w	8006714 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d164      	bne.n	8006532 <USB_EPStartXfer+0x218>
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006476:	b29b      	uxth	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	4413      	add	r3, r2
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	00da      	lsls	r2, r3, #3
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	4413      	add	r3, r2
 800648c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
 8006492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006496:	2b00      	cmp	r3, #0
 8006498:	d112      	bne.n	80064c0 <USB_EPStartXfer+0x1a6>
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e054      	b.n	800656a <USB_EPStartXfer+0x250>
 80064c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064c4:	2b3e      	cmp	r3, #62	; 0x3e
 80064c6:	d817      	bhi.n	80064f8 <USB_EPStartXfer+0x1de>
 80064c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <USB_EPStartXfer+0x1ce>
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e2:	3301      	adds	r3, #1
 80064e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	e038      	b.n	800656a <USB_EPStartXfer+0x250>
 80064f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <USB_EPStartXfer+0x1fe>
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006512:	3b01      	subs	r3, #1
 8006514:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	b29b      	uxth	r3, r3
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e01b      	b.n	800656a <USB_EPStartXfer+0x250>
 8006532:	463b      	mov	r3, r7
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d116      	bne.n	800656a <USB_EPStartXfer+0x250>
 800653c:	1d3b      	adds	r3, r7, #4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	4413      	add	r3, r2
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	00da      	lsls	r2, r3, #3
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	4413      	add	r3, r2
 800655a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
 8006560:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006564:	b29a      	uxth	r2, r3
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	895b      	ldrh	r3, [r3, #10]
 8006570:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006574:	463b      	mov	r3, r7
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6959      	ldr	r1, [r3, #20]
 800657a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800657e:	b29b      	uxth	r3, r3
 8006580:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006584:	1d38      	adds	r0, r7, #4
 8006586:	6800      	ldr	r0, [r0, #0]
 8006588:	f001 f93c 	bl	8007804 <USB_WritePMA>
            ep->xfer_buff += len;
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695a      	ldr	r2, [r3, #20]
 8006592:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006596:	441a      	add	r2, r3
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	463b      	mov	r3, r7
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d90e      	bls.n	80065cc <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	621a      	str	r2, [r3, #32]
 80065ca:	e008      	b.n	80065de <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d164      	bne.n	80066b2 <USB_EPStartXfer+0x398>
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	00da      	lsls	r2, r3, #3
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006616:	2b00      	cmp	r3, #0
 8006618:	d112      	bne.n	8006640 <USB_EPStartXfer+0x326>
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006624:	b29a      	uxth	r2, r3
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006638:	b29a      	uxth	r2, r3
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e057      	b.n	80066f0 <USB_EPStartXfer+0x3d6>
 8006640:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006644:	2b3e      	cmp	r3, #62	; 0x3e
 8006646:	d817      	bhi.n	8006678 <USB_EPStartXfer+0x35e>
 8006648:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006652:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <USB_EPStartXfer+0x34e>
 800665e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006662:	3301      	adds	r3, #1
 8006664:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006668:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800666c:	b29b      	uxth	r3, r3
 800666e:	029b      	lsls	r3, r3, #10
 8006670:	b29a      	uxth	r2, r3
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e03b      	b.n	80066f0 <USB_EPStartXfer+0x3d6>
 8006678:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006682:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <USB_EPStartXfer+0x37e>
 800668e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006692:	3b01      	subs	r3, #1
 8006694:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006698:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800669c:	b29b      	uxth	r3, r3
 800669e:	029b      	lsls	r3, r3, #10
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	e01e      	b.n	80066f0 <USB_EPStartXfer+0x3d6>
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d119      	bne.n	80066f0 <USB_EPStartXfer+0x3d6>
 80066bc:	1d3b      	adds	r3, r7, #4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	4413      	add	r3, r2
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	00da      	lsls	r2, r3, #3
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	4413      	add	r3, r2
 80066e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066f0:	463b      	mov	r3, r7
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	891b      	ldrh	r3, [r3, #8]
 80066f6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006704:	b29b      	uxth	r3, r3
 8006706:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800670a:	1d38      	adds	r0, r7, #4
 800670c:	6800      	ldr	r0, [r0, #0]
 800670e:	f001 f879 	bl	8007804 <USB_WritePMA>
 8006712:	e340      	b.n	8006d96 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006714:	463b      	mov	r3, r7
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d164      	bne.n	80067e8 <USB_EPStartXfer+0x4ce>
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	4413      	add	r3, r2
 8006734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006736:	463b      	mov	r3, r7
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	00da      	lsls	r2, r3, #3
 800673e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006740:	4413      	add	r3, r2
 8006742:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006746:	64bb      	str	r3, [r7, #72]	; 0x48
 8006748:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800674c:	2b00      	cmp	r3, #0
 800674e:	d112      	bne.n	8006776 <USB_EPStartXfer+0x45c>
 8006750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800675a:	b29a      	uxth	r2, r3
 800675c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675e:	801a      	strh	r2, [r3, #0]
 8006760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676e:	b29a      	uxth	r2, r3
 8006770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	e057      	b.n	8006826 <USB_EPStartXfer+0x50c>
 8006776:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800677a:	2b3e      	cmp	r3, #62	; 0x3e
 800677c:	d817      	bhi.n	80067ae <USB_EPStartXfer+0x494>
 800677e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006788:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <USB_EPStartXfer+0x484>
 8006794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006798:	3301      	adds	r3, #1
 800679a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800679e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	029b      	lsls	r3, r3, #10
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e03b      	b.n	8006826 <USB_EPStartXfer+0x50c>
 80067ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <USB_EPStartXfer+0x4b4>
 80067c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067c8:	3b01      	subs	r3, #1
 80067ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e01e      	b.n	8006826 <USB_EPStartXfer+0x50c>
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d119      	bne.n	8006826 <USB_EPStartXfer+0x50c>
 80067f2:	1d3b      	adds	r3, r7, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	657b      	str	r3, [r7, #84]	; 0x54
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006800:	b29b      	uxth	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006806:	4413      	add	r3, r2
 8006808:	657b      	str	r3, [r7, #84]	; 0x54
 800680a:	463b      	mov	r3, r7
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	00da      	lsls	r2, r3, #3
 8006812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006814:	4413      	add	r3, r2
 8006816:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800681a:	653b      	str	r3, [r7, #80]	; 0x50
 800681c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006820:	b29a      	uxth	r2, r3
 8006822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006824:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	891b      	ldrh	r3, [r3, #8]
 800682c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006830:	463b      	mov	r3, r7
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6959      	ldr	r1, [r3, #20]
 8006836:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800683a:	b29b      	uxth	r3, r3
 800683c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006840:	1d38      	adds	r0, r7, #4
 8006842:	6800      	ldr	r0, [r0, #0]
 8006844:	f000 ffde 	bl	8007804 <USB_WritePMA>
            ep->xfer_buff += len;
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695a      	ldr	r2, [r3, #20]
 800684e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006852:	441a      	add	r2, r3
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d90e      	bls.n	8006888 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800686a:	463b      	mov	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6a1a      	ldr	r2, [r3, #32]
 800687a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	621a      	str	r2, [r3, #32]
 8006886:	e008      	b.n	800689a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006888:	463b      	mov	r3, r7
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006892:	463b      	mov	r3, r7
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	647b      	str	r3, [r7, #68]	; 0x44
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d164      	bne.n	8006974 <USB_EPStartXfer+0x65a>
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068be:	4413      	add	r3, r2
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c2:	463b      	mov	r3, r7
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	00da      	lsls	r2, r3, #3
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80068d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d112      	bne.n	8006902 <USB_EPStartXfer+0x5e8>
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	801a      	strh	r2, [r3, #0]
 8006900:	e054      	b.n	80069ac <USB_EPStartXfer+0x692>
 8006902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006906:	2b3e      	cmp	r3, #62	; 0x3e
 8006908:	d817      	bhi.n	800693a <USB_EPStartXfer+0x620>
 800690a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006914:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <USB_EPStartXfer+0x610>
 8006920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006924:	3301      	adds	r3, #1
 8006926:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800692a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800692e:	b29b      	uxth	r3, r3
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	b29a      	uxth	r2, r3
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e038      	b.n	80069ac <USB_EPStartXfer+0x692>
 800693a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <USB_EPStartXfer+0x640>
 8006950:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006954:	3b01      	subs	r3, #1
 8006956:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800695a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800695e:	b29b      	uxth	r3, r3
 8006960:	029b      	lsls	r3, r3, #10
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696c:	b29a      	uxth	r2, r3
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	e01b      	b.n	80069ac <USB_EPStartXfer+0x692>
 8006974:	463b      	mov	r3, r7
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	785b      	ldrb	r3, [r3, #1]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d116      	bne.n	80069ac <USB_EPStartXfer+0x692>
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800698c:	4413      	add	r3, r2
 800698e:	647b      	str	r3, [r7, #68]	; 0x44
 8006990:	463b      	mov	r3, r7
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	00da      	lsls	r2, r3, #3
 8006998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699a:	4413      	add	r3, r2
 800699c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069a0:	643b      	str	r3, [r7, #64]	; 0x40
 80069a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069ac:	463b      	mov	r3, r7
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	895b      	ldrh	r3, [r3, #10]
 80069b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069b6:	463b      	mov	r3, r7
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6959      	ldr	r1, [r3, #20]
 80069bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80069c6:	1d38      	adds	r0, r7, #4
 80069c8:	6800      	ldr	r0, [r0, #0]
 80069ca:	f000 ff1b 	bl	8007804 <USB_WritePMA>
 80069ce:	e1e2      	b.n	8006d96 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	463b      	mov	r3, r7
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	463b      	mov	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	441a      	add	r2, r3
 8006a06:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a1e:	1d3b      	adds	r3, r7, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	663b      	str	r3, [r7, #96]	; 0x60
 8006a24:	1d3b      	adds	r3, r7, #4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a32:	4413      	add	r3, r2
 8006a34:	663b      	str	r3, [r7, #96]	; 0x60
 8006a36:	463b      	mov	r3, r7
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	00da      	lsls	r2, r3, #3
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	4413      	add	r3, r2
 8006a42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a52:	463b      	mov	r3, r7
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	891b      	ldrh	r3, [r3, #8]
 8006a58:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6959      	ldr	r1, [r3, #20]
 8006a62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a6c:	1d38      	adds	r0, r7, #4
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	f000 fec8 	bl	8007804 <USB_WritePMA>
 8006a74:	e18f      	b.n	8006d96 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 808f 	beq.w	8006bb0 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d164      	bne.n	8006b6c <USB_EPStartXfer+0x852>
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8006aa8:	1d3b      	adds	r3, r7, #4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab6:	4413      	add	r3, r2
 8006ab8:	673b      	str	r3, [r7, #112]	; 0x70
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	00da      	lsls	r2, r3, #3
 8006ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006acc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d112      	bne.n	8006afa <USB_EPStartXfer+0x7e0>
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e054      	b.n	8006ba4 <USB_EPStartXfer+0x88a>
 8006afa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006afe:	2b3e      	cmp	r3, #62	; 0x3e
 8006b00:	d817      	bhi.n	8006b32 <USB_EPStartXfer+0x818>
 8006b02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <USB_EPStartXfer+0x808>
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	029b      	lsls	r3, r3, #10
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e038      	b.n	8006ba4 <USB_EPStartXfer+0x88a>
 8006b32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <USB_EPStartXfer+0x838>
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e01b      	b.n	8006ba4 <USB_EPStartXfer+0x88a>
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d116      	bne.n	8006ba4 <USB_EPStartXfer+0x88a>
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b84:	4413      	add	r3, r2
 8006b86:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b88:	463b      	mov	r3, r7
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	00da      	lsls	r2, r3, #3
 8006b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b92:	4413      	add	r3, r2
 8006b94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b98:	677b      	str	r3, [r7, #116]	; 0x74
 8006b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ba4:	463b      	mov	r3, r7
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	895b      	ldrh	r3, [r3, #10]
 8006baa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006bae:	e097      	b.n	8006ce0 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bb0:	463b      	mov	r3, r7
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d168      	bne.n	8006c8c <USB_EPStartXfer+0x972>
 8006bba:	1d3b      	adds	r3, r7, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bc2:	1d3b      	adds	r3, r7, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bd8:	463b      	mov	r3, r7
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	00da      	lsls	r2, r3, #3
 8006be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006be4:	4413      	add	r3, r2
 8006be6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d112      	bne.n	8006c1a <USB_EPStartXfer+0x900>
 8006bf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e05d      	b.n	8006cd6 <USB_EPStartXfer+0x9bc>
 8006c1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c20:	d817      	bhi.n	8006c52 <USB_EPStartXfer+0x938>
 8006c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d004      	beq.n	8006c42 <USB_EPStartXfer+0x928>
 8006c38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	029b      	lsls	r3, r3, #10
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e041      	b.n	8006cd6 <USB_EPStartXfer+0x9bc>
 8006c52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <USB_EPStartXfer+0x958>
 8006c68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	029b      	lsls	r3, r3, #10
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c88:	801a      	strh	r2, [r3, #0]
 8006c8a:	e024      	b.n	8006cd6 <USB_EPStartXfer+0x9bc>
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d11f      	bne.n	8006cd6 <USB_EPStartXfer+0x9bc>
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cae:	4413      	add	r3, r2
 8006cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	00da      	lsls	r2, r3, #3
 8006cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cd6:	463b      	mov	r3, r7
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	891b      	ldrh	r3, [r3, #8]
 8006cdc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6959      	ldr	r1, [r3, #20]
 8006ce6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006cf0:	1d38      	adds	r0, r7, #4
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	f000 fd86 	bl	8007804 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d122      	bne.n	8006d48 <USB_EPStartXfer+0xa2e>
 8006d02:	1d3b      	adds	r3, r7, #4
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	463b      	mov	r3, r7
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006d20:	1d3b      	adds	r3, r7, #4
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	463b      	mov	r3, r7
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e026      	b.n	8006d96 <USB_EPStartXfer+0xa7c>
 8006d48:	463b      	mov	r3, r7
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d121      	bne.n	8006d96 <USB_EPStartXfer+0xa7c>
 8006d52:	1d3b      	adds	r3, r7, #4
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	463b      	mov	r3, r7
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d70:	1d3b      	adds	r3, r7, #4
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	463b      	mov	r3, r7
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f107 020e 	add.w	r2, r7, #14
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db4:	8013      	strh	r3, [r2, #0]
 8006db6:	f107 030e 	add.w	r3, r7, #14
 8006dba:	f107 020e 	add.w	r2, r7, #14
 8006dbe:	8812      	ldrh	r2, [r2, #0]
 8006dc0:	f082 0210 	eor.w	r2, r2, #16
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	f107 030e 	add.w	r3, r7, #14
 8006dca:	f107 020e 	add.w	r2, r7, #14
 8006dce:	8812      	ldrh	r2, [r2, #0]
 8006dd0:	f082 0220 	eor.w	r2, r2, #32
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	f107 030e 	add.w	r3, r7, #14
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	8013      	strh	r3, [r2, #0]
 8006dfe:	e3b5      	b.n	800756c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	7b1b      	ldrb	r3, [r3, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 8090 	bne.w	8006f2c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	463b      	mov	r3, r7
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d90e      	bls.n	8006e3a <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006e26:	463b      	mov	r3, r7
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e30:	1ad2      	subs	r2, r2, r3
 8006e32:	463b      	mov	r3, r7
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	619a      	str	r2, [r3, #24]
 8006e38:	e008      	b.n	8006e4c <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006e44:	463b      	mov	r3, r7
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e54:	1d3b      	adds	r3, r7, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e64:	4413      	add	r3, r2
 8006e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	00da      	lsls	r2, r3, #3
 8006e72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d116      	bne.n	8006eb6 <USB_EPStartXfer+0xb9c>
 8006e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	e32c      	b.n	8007510 <USB_EPStartXfer+0x11f6>
 8006eb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eba:	2b3e      	cmp	r3, #62	; 0x3e
 8006ebc:	d818      	bhi.n	8006ef0 <USB_EPStartXfer+0xbd6>
 8006ebe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ec8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <USB_EPStartXfer+0xbc4>
 8006ed4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ed8:	3301      	adds	r3, #1
 8006eda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ede:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e30f      	b.n	8007510 <USB_EPStartXfer+0x11f6>
 8006ef0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006efa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <USB_EPStartXfer+0xbf6>
 8006f06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	029b      	lsls	r3, r3, #10
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e2f1      	b.n	8007510 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	78db      	ldrb	r3, [r3, #3]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	f040 818f 	bne.w	8007256 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f38:	463b      	mov	r3, r7
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d175      	bne.n	800702e <USB_EPStartXfer+0xd14>
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f4a:	1d3b      	adds	r3, r7, #4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f60:	463b      	mov	r3, r7
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	00da      	lsls	r2, r3, #3
 8006f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f76:	463b      	mov	r3, r7
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d116      	bne.n	8006fae <USB_EPStartXfer+0xc94>
 8006f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f92:	801a      	strh	r2, [r3, #0]
 8006f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	e065      	b.n	800707a <USB_EPStartXfer+0xd60>
 8006fae:	463b      	mov	r3, r7
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb6:	d81a      	bhi.n	8006fee <USB_EPStartXfer+0xcd4>
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <USB_EPStartXfer+0xcc2>
 8006fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	029b      	lsls	r3, r3, #10
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	e045      	b.n	800707a <USB_EPStartXfer+0xd60>
 8006fee:	463b      	mov	r3, r7
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 031f 	and.w	r3, r3, #31
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <USB_EPStartXfer+0xcf8>
 8007008:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800700c:	3b01      	subs	r3, #1
 800700e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007012:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007016:	b29b      	uxth	r3, r3
 8007018:	029b      	lsls	r3, r3, #10
 800701a:	b29b      	uxth	r3, r3
 800701c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	e025      	b.n	800707a <USB_EPStartXfer+0xd60>
 800702e:	463b      	mov	r3, r7
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d120      	bne.n	800707a <USB_EPStartXfer+0xd60>
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007040:	1d3b      	adds	r3, r7, #4
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007050:	4413      	add	r3, r2
 8007052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	00da      	lsls	r2, r3, #3
 800705e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007062:	4413      	add	r3, r2
 8007064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800706c:	463b      	mov	r3, r7
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	b29a      	uxth	r2, r3
 8007074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007078:	801a      	strh	r2, [r3, #0]
 800707a:	1d3b      	adds	r3, r7, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007082:	463b      	mov	r3, r7
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d175      	bne.n	8007178 <USB_EPStartXfer+0xe5e>
 800708c:	1d3b      	adds	r3, r7, #4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007094:	1d3b      	adds	r3, r7, #4
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709c:	b29b      	uxth	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070a4:	4413      	add	r3, r2
 80070a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070aa:	463b      	mov	r3, r7
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	00da      	lsls	r2, r3, #3
 80070b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b6:	4413      	add	r3, r2
 80070b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070c0:	463b      	mov	r3, r7
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d116      	bne.n	80070f8 <USB_EPStartXfer+0xdde>
 80070ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f4:	801a      	strh	r2, [r3, #0]
 80070f6:	e061      	b.n	80071bc <USB_EPStartXfer+0xea2>
 80070f8:	463b      	mov	r3, r7
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007100:	d81a      	bhi.n	8007138 <USB_EPStartXfer+0xe1e>
 8007102:	463b      	mov	r3, r7
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800710e:	463b      	mov	r3, r7
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <USB_EPStartXfer+0xe0c>
 800711c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007120:	3301      	adds	r3, #1
 8007122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712a:	b29b      	uxth	r3, r3
 800712c:	029b      	lsls	r3, r3, #10
 800712e:	b29a      	uxth	r2, r3
 8007130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	e041      	b.n	80071bc <USB_EPStartXfer+0xea2>
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <USB_EPStartXfer+0xe42>
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007156:	3b01      	subs	r3, #1
 8007158:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800715c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007160:	b29b      	uxth	r3, r3
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	b29b      	uxth	r3, r3
 8007166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	e021      	b.n	80071bc <USB_EPStartXfer+0xea2>
 8007178:	463b      	mov	r3, r7
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d11c      	bne.n	80071bc <USB_EPStartXfer+0xea2>
 8007182:	1d3b      	adds	r3, r7, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718a:	b29b      	uxth	r3, r3
 800718c:	461a      	mov	r2, r3
 800718e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007192:	4413      	add	r3, r2
 8007194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007198:	463b      	mov	r3, r7
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	00da      	lsls	r2, r3, #3
 80071a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071a4:	4413      	add	r3, r2
 80071a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071ae:	463b      	mov	r3, r7
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071ba:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80071bc:	463b      	mov	r3, r7
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 81a4 	beq.w	8007510 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071c8:	1d3b      	adds	r3, r7, #4
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	463b      	mov	r3, r7
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <USB_EPStartXfer+0xeda>
 80071e8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10d      	bne.n	8007210 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071f4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 8187 	bne.w	8007510 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007202:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 8180 	bne.w	8007510 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007210:	1d3b      	adds	r3, r7, #4
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	463b      	mov	r3, r7
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	463b      	mov	r3, r7
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	441a      	add	r2, r3
 800723c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800724c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007250:	b29b      	uxth	r3, r3
 8007252:	8013      	strh	r3, [r2, #0]
 8007254:	e15c      	b.n	8007510 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007256:	463b      	mov	r3, r7
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	78db      	ldrb	r3, [r3, #3]
 800725c:	2b01      	cmp	r3, #1
 800725e:	f040 8155 	bne.w	800750c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007262:	463b      	mov	r3, r7
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699a      	ldr	r2, [r3, #24]
 8007268:	463b      	mov	r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	429a      	cmp	r2, r3
 8007270:	d90e      	bls.n	8007290 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007272:	463b      	mov	r3, r7
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800727c:	463b      	mov	r3, r7
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007286:	1ad2      	subs	r2, r2, r3
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	619a      	str	r2, [r3, #24]
 800728e:	e008      	b.n	80072a2 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007290:	463b      	mov	r3, r7
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800729a:	463b      	mov	r3, r7
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2200      	movs	r2, #0
 80072a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072a2:	463b      	mov	r3, r7
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d16f      	bne.n	800738c <USB_EPStartXfer+0x1072>
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b4:	1d3b      	adds	r3, r7, #4
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072bc:	b29b      	uxth	r3, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072c4:	4413      	add	r3, r2
 80072c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072ca:	463b      	mov	r3, r7
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	00da      	lsls	r2, r3, #3
 80072d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072d6:	4413      	add	r3, r2
 80072d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d116      	bne.n	8007316 <USB_EPStartXfer+0xffc>
 80072e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730c:	b29a      	uxth	r2, r3
 800730e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e05f      	b.n	80073d6 <USB_EPStartXfer+0x10bc>
 8007316:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800731a:	2b3e      	cmp	r3, #62	; 0x3e
 800731c:	d818      	bhi.n	8007350 <USB_EPStartXfer+0x1036>
 800731e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007328:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <USB_EPStartXfer+0x1024>
 8007334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007338:	3301      	adds	r3, #1
 800733a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	b29b      	uxth	r3, r3
 8007344:	029b      	lsls	r3, r3, #10
 8007346:	b29a      	uxth	r2, r3
 8007348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e042      	b.n	80073d6 <USB_EPStartXfer+0x10bc>
 8007350:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800735a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	2b00      	cmp	r3, #0
 8007364:	d104      	bne.n	8007370 <USB_EPStartXfer+0x1056>
 8007366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736a:	3b01      	subs	r3, #1
 800736c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	b29b      	uxth	r3, r3
 8007376:	029b      	lsls	r3, r3, #10
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e024      	b.n	80073d6 <USB_EPStartXfer+0x10bc>
 800738c:	463b      	mov	r3, r7
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d11f      	bne.n	80073d6 <USB_EPStartXfer+0x10bc>
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800739e:	1d3b      	adds	r3, r7, #4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ae:	4413      	add	r3, r2
 80073b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073b4:	463b      	mov	r3, r7
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	00da      	lsls	r2, r3, #3
 80073bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073c0:	4413      	add	r3, r2
 80073c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	1d3b      	adds	r3, r7, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073de:	463b      	mov	r3, r7
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d16f      	bne.n	80074c8 <USB_EPStartXfer+0x11ae>
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007400:	4413      	add	r3, r2
 8007402:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	00da      	lsls	r2, r3, #3
 800740e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007412:	4413      	add	r3, r2
 8007414:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800741c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007420:	2b00      	cmp	r3, #0
 8007422:	d116      	bne.n	8007452 <USB_EPStartXfer+0x1138>
 8007424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007430:	b29a      	uxth	r2, r3
 8007432:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007448:	b29a      	uxth	r2, r3
 800744a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	e05e      	b.n	8007510 <USB_EPStartXfer+0x11f6>
 8007452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007456:	2b3e      	cmp	r3, #62	; 0x3e
 8007458:	d818      	bhi.n	800748c <USB_EPStartXfer+0x1172>
 800745a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <USB_EPStartXfer+0x1160>
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007474:	3301      	adds	r3, #1
 8007476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800747a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747e:	b29b      	uxth	r3, r3
 8007480:	029b      	lsls	r3, r3, #10
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	e041      	b.n	8007510 <USB_EPStartXfer+0x11f6>
 800748c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007490:	095b      	lsrs	r3, r3, #5
 8007492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007496:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800749a:	f003 031f 	and.w	r3, r3, #31
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <USB_EPStartXfer+0x1192>
 80074a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a6:	3b01      	subs	r3, #1
 80074a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	029b      	lsls	r3, r3, #10
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e023      	b.n	8007510 <USB_EPStartXfer+0x11f6>
 80074c8:	463b      	mov	r3, r7
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d11e      	bne.n	8007510 <USB_EPStartXfer+0x11f6>
 80074d2:	1d3b      	adds	r3, r7, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074da:	b29b      	uxth	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074e2:	4413      	add	r3, r2
 80074e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	00da      	lsls	r2, r3, #3
 80074f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	e001      	b.n	8007510 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e02e      	b.n	800756e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	463b      	mov	r3, r7
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800752e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007532:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007536:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800753a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800753e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007542:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007546:	1d3b      	adds	r3, r7, #4
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	463b      	mov	r3, r7
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	441a      	add	r2, r3
 8007554:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007568:	b29b      	uxth	r3, r3
 800756a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d020      	beq.n	80075cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a0:	81bb      	strh	r3, [r7, #12]
 80075a2:	89bb      	ldrh	r3, [r7, #12]
 80075a4:	f083 0310 	eor.w	r3, r3, #16
 80075a8:	81bb      	strh	r3, [r7, #12]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	441a      	add	r2, r3
 80075b4:	89bb      	ldrh	r3, [r7, #12]
 80075b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	8013      	strh	r3, [r2, #0]
 80075ca:	e01f      	b.n	800760c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	81fb      	strh	r3, [r7, #14]
 80075e4:	89fb      	ldrh	r3, [r7, #14]
 80075e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075ea:	81fb      	strh	r3, [r7, #14]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	441a      	add	r2, r3
 80075f6:	89fb      	ldrh	r3, [r7, #14]
 80075f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007608:	b29b      	uxth	r3, r3
 800760a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800761a:	b480      	push	{r7}
 800761c:	b087      	sub	sp, #28
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	7b1b      	ldrb	r3, [r3, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 809d 	bne.w	8007768 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d04c      	beq.n	80076d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	823b      	strh	r3, [r7, #16]
 8007644:	8a3b      	ldrh	r3, [r7, #16]
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01b      	beq.n	8007686 <USB_EPClearStall+0x6c>
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007664:	81fb      	strh	r3, [r7, #14]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	441a      	add	r2, r3
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800767a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800767e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007682:	b29b      	uxth	r3, r3
 8007684:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	78db      	ldrb	r3, [r3, #3]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d06c      	beq.n	8007768 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a4:	81bb      	strh	r3, [r7, #12]
 80076a6:	89bb      	ldrh	r3, [r7, #12]
 80076a8:	f083 0320 	eor.w	r3, r3, #32
 80076ac:	81bb      	strh	r3, [r7, #12]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	441a      	add	r2, r3
 80076b8:	89bb      	ldrh	r3, [r7, #12]
 80076ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	8013      	strh	r3, [r2, #0]
 80076ce:	e04b      	b.n	8007768 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	82fb      	strh	r3, [r7, #22]
 80076de:	8afb      	ldrh	r3, [r7, #22]
 80076e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01b      	beq.n	8007720 <USB_EPClearStall+0x106>
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fe:	82bb      	strh	r3, [r7, #20]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	441a      	add	r2, r3
 800770a:	8abb      	ldrh	r3, [r7, #20]
 800770c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771c:	b29b      	uxth	r3, r3
 800771e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007736:	827b      	strh	r3, [r7, #18]
 8007738:	8a7b      	ldrh	r3, [r7, #18]
 800773a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800773e:	827b      	strh	r3, [r7, #18]
 8007740:	8a7b      	ldrh	r3, [r7, #18]
 8007742:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007746:	827b      	strh	r3, [r7, #18]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	8a7b      	ldrh	r3, [r7, #18]
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d103      	bne.n	8007790 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2280      	movs	r2, #128	; 0x80
 800778c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077da:	b29b      	uxth	r3, r3
 80077dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077de:	68fb      	ldr	r3, [r7, #12]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007804:	b480      	push	{r7}
 8007806:	b08d      	sub	sp, #52	; 0x34
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4611      	mov	r1, r2
 8007810:	461a      	mov	r2, r3
 8007812:	460b      	mov	r3, r1
 8007814:	80fb      	strh	r3, [r7, #6]
 8007816:	4613      	mov	r3, r2
 8007818:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800781a:	88bb      	ldrh	r3, [r7, #4]
 800781c:	3301      	adds	r3, #1
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800783a:	e01b      	b.n	8007874 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	3301      	adds	r3, #1
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	b29b      	uxth	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	b29a      	uxth	r2, r3
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	3302      	adds	r3, #2
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	3301      	adds	r3, #1
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	3b01      	subs	r3, #1
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e0      	bne.n	800783c <USB_WritePMA+0x38>
  }
}
 800787a:	bf00      	nop
 800787c:	3734      	adds	r7, #52	; 0x34
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007886:	b480      	push	{r7}
 8007888:	b08b      	sub	sp, #44	; 0x2c
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	4611      	mov	r1, r2
 8007892:	461a      	mov	r2, r3
 8007894:	460b      	mov	r3, r1
 8007896:	80fb      	strh	r3, [r7, #6]
 8007898:	4613      	mov	r3, r2
 800789a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800789c:	88bb      	ldrh	r3, [r7, #4]
 800789e:	085b      	lsrs	r3, r3, #1
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078ac:	88fa      	ldrh	r2, [r7, #6]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
 80078bc:	e018      	b.n	80078f0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	3302      	adds	r3, #2
 80078ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	3301      	adds	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	0a1b      	lsrs	r3, r3, #8
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	3b01      	subs	r3, #1
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e3      	bne.n	80078be <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078f6:	88bb      	ldrh	r3, [r7, #4]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	b2da      	uxtb	r2, r3
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	701a      	strb	r2, [r3, #0]
  }
}
 8007912:	bf00      	nop
 8007914:	372c      	adds	r7, #44	; 0x2c
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800792a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800792e:	f002 f89d 	bl	8009a6c <USBD_static_malloc>
 8007932:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d105      	bne.n	8007946 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007942:	2302      	movs	r3, #2
 8007944:	e066      	b.n	8007a14 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d119      	bne.n	800798a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800795a:	2202      	movs	r2, #2
 800795c:	2181      	movs	r1, #129	; 0x81
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 ff29 	bl	80097b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800796a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800796e:	2202      	movs	r2, #2
 8007970:	2101      	movs	r1, #1
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 ff1f 	bl	80097b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2210      	movs	r2, #16
 8007984:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007988:	e016      	b.n	80079b8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	2202      	movs	r2, #2
 800798e:	2181      	movs	r1, #129	; 0x81
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 ff10 	bl	80097b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	2202      	movs	r2, #2
 80079a0:	2101      	movs	r1, #1
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 ff07 	bl	80097b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2210      	movs	r2, #16
 80079b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079b8:	2308      	movs	r3, #8
 80079ba:	2203      	movs	r2, #3
 80079bc:	2182      	movs	r1, #130	; 0x82
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 fef9 	bl	80097b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7c1b      	ldrb	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079f8:	2101      	movs	r1, #1
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 ffcb 	bl	8009996 <USBD_LL_PrepareReceive>
 8007a00:	e007      	b.n	8007a12 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a08:	2340      	movs	r3, #64	; 0x40
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 ffc2 	bl	8009996 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a28:	2181      	movs	r1, #129	; 0x81
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fee9 	bl	8009802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a36:	2101      	movs	r1, #1
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fee2 	bl	8009802 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a46:	2182      	movs	r1, #130	; 0x82
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 feda 	bl	8009802 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00e      	beq.n	8007a86 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f002 f805 	bl	8009a88 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d03a      	beq.n	8007b30 <USBD_CDC_Setup+0xa0>
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	f040 8097 	bne.w	8007bee <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d029      	beq.n	8007b1c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da11      	bge.n	8007af6 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ade:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	88d2      	ldrh	r2, [r2, #6]
 8007ae4:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ae6:	6939      	ldr	r1, [r7, #16]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	88db      	ldrh	r3, [r3, #6]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fa8d 	bl	800900e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007af4:	e082      	b.n	8007bfc <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	785a      	ldrb	r2, [r3, #1]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	88db      	ldrh	r3, [r3, #6]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b0c:	6939      	ldr	r1, [r7, #16]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	88db      	ldrh	r3, [r3, #6]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 faa6 	bl	8009066 <USBD_CtlPrepareRx>
      break;
 8007b1a:	e06f      	b.n	8007bfc <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	7850      	ldrb	r0, [r2, #1]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	4798      	blx	r3
      break;
 8007b2e:	e065      	b.n	8007bfc <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	2b0b      	cmp	r3, #11
 8007b36:	d84f      	bhi.n	8007bd8 <USBD_CDC_Setup+0x148>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBD_CDC_Setup+0xb0>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b71 	.word	0x08007b71
 8007b44:	08007be7 	.word	0x08007be7
 8007b48:	08007bd9 	.word	0x08007bd9
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007bd9 	.word	0x08007bd9
 8007b54:	08007bd9 	.word	0x08007bd9
 8007b58:	08007bd9 	.word	0x08007bd9
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007bd9 	.word	0x08007bd9
 8007b68:	08007b99 	.word	0x08007b99
 8007b6c:	08007bc1 	.word	0x08007bc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d107      	bne.n	8007b8a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b7a:	f107 030c 	add.w	r3, r7, #12
 8007b7e:	2202      	movs	r2, #2
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fa43 	bl	800900e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b88:	e030      	b.n	8007bec <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f9cd 	bl	8008f2c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	75fb      	strb	r3, [r7, #23]
          break;
 8007b96:	e029      	b.n	8007bec <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d107      	bne.n	8007bb2 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ba2:	f107 030f 	add.w	r3, r7, #15
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 fa2f 	bl	800900e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bb0:	e01c      	b.n	8007bec <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f9b9 	bl	8008f2c <USBD_CtlError>
            ret = USBD_FAIL;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbe:	e015      	b.n	8007bec <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d00f      	beq.n	8007bea <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 f9ad 	bl	8008f2c <USBD_CtlError>
            ret = USBD_FAIL;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bd6:	e008      	b.n	8007bea <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 f9a6 	bl	8008f2c <USBD_CtlError>
          ret = USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	75fb      	strb	r3, [r7, #23]
          break;
 8007be4:	e002      	b.n	8007bec <USBD_CDC_Setup+0x15c>
          break;
 8007be6:	bf00      	nop
 8007be8:	e008      	b.n	8007bfc <USBD_CDC_Setup+0x16c>
          break;
 8007bea:	bf00      	nop
      }
      break;
 8007bec:	e006      	b.n	8007bfc <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 f99b 	bl	8008f2c <USBD_CtlError>
      ret = USBD_FAIL;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfa:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop

08007c08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e04f      	b.n	8007cca <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	3318      	adds	r3, #24
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d029      	beq.n	8007c9c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	3318      	adds	r3, #24
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	78f9      	ldrb	r1, [r7, #3]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4403      	add	r3, r0
 8007c68:	3338      	adds	r3, #56	; 0x38
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c70:	fb03 f301 	mul.w	r3, r3, r1
 8007c74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d110      	bne.n	8007c9c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	3318      	adds	r3, #24
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c8e:	78f9      	ldrb	r1, [r7, #3]
 8007c90:	2300      	movs	r3, #0
 8007c92:	2200      	movs	r2, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fe5d 	bl	8009954 <USBD_LL_Transmit>
 8007c9a:	e015      	b.n	8007cc8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e015      	b.n	8007d20 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fe6d 	bl	80099d8 <USBD_LL_GetRxDataSize>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d36:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d015      	beq.n	8007d6e <USBD_CDC_EP0_RxReady+0x46>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d48:	2bff      	cmp	r3, #255	; 0xff
 8007d4a:	d010      	beq.n	8007d6e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d5a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d62:	b292      	uxth	r2, r2
 8007d64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	22ff      	movs	r2, #255	; 0xff
 8007d6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2243      	movs	r2, #67	; 0x43
 8007d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d86:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	20000094 	.word	0x20000094

08007d98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2243      	movs	r2, #67	; 0x43
 8007da4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007da6:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20000050 	.word	0x20000050

08007db8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2243      	movs	r2, #67	; 0x43
 8007dc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007dc6:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	200000d8 	.word	0x200000d8

08007dd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220a      	movs	r2, #10
 8007de4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007de6:	4b03      	ldr	r3, [pc, #12]	; (8007df4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	2000000c 	.word	0x2000000c

08007df8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e004      	b.n	8007e16 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b087      	sub	sp, #28
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e64:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e01a      	b.n	8007ed4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d114      	bne.n	8007ed2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ec6:	2181      	movs	r1, #129	; 0x81
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fd43 	bl	8009954 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e016      	b.n	8007f28 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7c1b      	ldrb	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fd41 	bl	8009996 <USBD_LL_PrepareReceive>
 8007f14:	e007      	b.n	8007f26 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f1c:	2340      	movs	r3, #64	; 0x40
 8007f1e:	2101      	movs	r1, #1
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fd38 	bl	8009996 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e01f      	b.n	8007f88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	79fa      	ldrb	r2, [r7, #7]
 8007f7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f001 fb9f 	bl	80096c0 <USBD_LL_Init>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e016      	b.n	8007fd6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	f107 020e 	add.w	r2, r7, #14
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
 8007fcc:	4602      	mov	r2, r0
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 fbca 	bl	8009780 <USBD_LL_Start>
 8007fec:	4603      	mov	r3, r0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	4611      	mov	r1, r2
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	4611      	mov	r1, r2
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
  }

  return USBD_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 ff16 	bl	8008eb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080a8:	f003 031f 	and.w	r3, r3, #31
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d00e      	beq.n	80080ce <USBD_LL_SetupStage+0x5a>
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d302      	bcc.n	80080ba <USBD_LL_SetupStage+0x46>
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d014      	beq.n	80080e2 <USBD_LL_SetupStage+0x6e>
 80080b8:	e01d      	b.n	80080f6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f9d6 	bl	8008474 <USBD_StdDevReq>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
      break;
 80080cc:	e020      	b.n	8008110 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa3a 	bl	8008550 <USBD_StdItfReq>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
      break;
 80080e0:	e016      	b.n	8008110 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa76 	bl	80085dc <USBD_StdEPReq>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]
      break;
 80080f4:	e00c      	b.n	8008110 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008100:	b2db      	uxtb	r3, r3
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 fb9b 	bl	8009840 <USBD_LL_StallEP>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]
      break;
 800810e:	bf00      	nop
  }

  return ret;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b086      	sub	sp, #24
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	460b      	mov	r3, r1
 8008124:	607a      	str	r2, [r7, #4]
 8008126:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d137      	bne.n	800819e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008134:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800813c:	2b03      	cmp	r3, #3
 800813e:	d14a      	bne.n	80081d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	429a      	cmp	r2, r3
 800814a:	d913      	bls.n	8008174 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	1ad2      	subs	r2, r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	4293      	cmp	r3, r2
 8008164:	bf28      	it	cs
 8008166:	4613      	movcs	r3, r2
 8008168:	461a      	mov	r2, r3
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 ff97 	bl	80090a0 <USBD_CtlContinueRx>
 8008172:	e030      	b.n	80081d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008186:	2b03      	cmp	r3, #3
 8008188:	d105      	bne.n	8008196 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 ff93 	bl	80090c2 <USBD_CtlSendStatus>
 800819c:	e01b      	b.n	80081d6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d013      	beq.n	80081d2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d10e      	bne.n	80081d2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	7afa      	ldrb	r2, [r7, #11]
 80081be:	4611      	mov	r1, r2
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	4798      	blx	r3
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	e002      	b.n	80081d8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e000      	b.n	80081d8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	460b      	mov	r3, r1
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80081ee:	7afb      	ldrb	r3, [r7, #11]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d16a      	bne.n	80082ca <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3314      	adds	r3, #20
 80081f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008200:	2b02      	cmp	r3, #2
 8008202:	d155      	bne.n	80082b0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	429a      	cmp	r2, r3
 800820e:	d914      	bls.n	800823a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	1ad2      	subs	r2, r2, r3
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	461a      	mov	r2, r3
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 ff0c 	bl	8009044 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800822c:	2300      	movs	r3, #0
 800822e:	2200      	movs	r2, #0
 8008230:	2100      	movs	r1, #0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f001 fbaf 	bl	8009996 <USBD_LL_PrepareReceive>
 8008238:	e03a      	b.n	80082b0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	d11c      	bne.n	8008280 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800824e:	429a      	cmp	r2, r3
 8008250:	d316      	bcc.n	8008280 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800825c:	429a      	cmp	r2, r3
 800825e:	d20f      	bcs.n	8008280 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008260:	2200      	movs	r2, #0
 8008262:	2100      	movs	r1, #0
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 feed 	bl	8009044 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008272:	2300      	movs	r3, #0
 8008274:	2200      	movs	r2, #0
 8008276:	2100      	movs	r1, #0
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f001 fb8c 	bl	8009996 <USBD_LL_PrepareReceive>
 800827e:	e017      	b.n	80082b0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008292:	2b03      	cmp	r3, #3
 8008294:	d105      	bne.n	80082a2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082a2:	2180      	movs	r1, #128	; 0x80
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f001 facb 	bl	8009840 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 ff1c 	bl	80090e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d123      	bne.n	8008302 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff fe9b 	bl	8007ff6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082c8:	e01b      	b.n	8008302 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d013      	beq.n	80082fe <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d10e      	bne.n	80082fe <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	7afa      	ldrb	r2, [r7, #11]
 80082ea:	4611      	mov	r1, r2
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	4798      	blx	r3
 80082f0:	4603      	mov	r3, r0
 80082f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	e002      	b.n	8008304 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082fe:	2303      	movs	r3, #3
 8008300:	e000      	b.n	8008304 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008338:	2b00      	cmp	r3, #0
 800833a:	d009      	beq.n	8008350 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6852      	ldr	r2, [r2, #4]
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	4611      	mov	r1, r2
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008350:	2340      	movs	r3, #64	; 0x40
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 fa2d 	bl	80097b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2240      	movs	r2, #64	; 0x40
 8008368:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800836c:	2340      	movs	r3, #64	; 0x40
 800836e:	2200      	movs	r2, #0
 8008370:	2180      	movs	r1, #128	; 0x80
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fa1f 	bl	80097b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2240      	movs	r2, #64	; 0x40
 8008382:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2204      	movs	r2, #4
 80083c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d105      	bne.n	80083f6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008412:	2b03      	cmp	r3, #3
 8008414:	d10b      	bne.n	800842e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	3301      	adds	r3, #1
 800844e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008456:	8a3b      	ldrh	r3, [r7, #16]
 8008458:	021b      	lsls	r3, r3, #8
 800845a:	b21a      	sxth	r2, r3
 800845c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008460:	4313      	orrs	r3, r2
 8008462:	b21b      	sxth	r3, r3
 8008464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008466:	89fb      	ldrh	r3, [r7, #14]
}
 8008468:	4618      	mov	r0, r3
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800848a:	2b20      	cmp	r3, #32
 800848c:	d004      	beq.n	8008498 <USBD_StdDevReq+0x24>
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	d002      	beq.n	8008498 <USBD_StdDevReq+0x24>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <USBD_StdDevReq+0x38>
 8008496:	e050      	b.n	800853a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]
    break;
 80084aa:	e04b      	b.n	8008544 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b09      	cmp	r3, #9
 80084b2:	d83c      	bhi.n	800852e <USBD_StdDevReq+0xba>
 80084b4:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <USBD_StdDevReq+0x48>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	08008511 	.word	0x08008511
 80084c0:	08008525 	.word	0x08008525
 80084c4:	0800852f 	.word	0x0800852f
 80084c8:	0800851b 	.word	0x0800851b
 80084cc:	0800852f 	.word	0x0800852f
 80084d0:	080084ef 	.word	0x080084ef
 80084d4:	080084e5 	.word	0x080084e5
 80084d8:	0800852f 	.word	0x0800852f
 80084dc:	08008507 	.word	0x08008507
 80084e0:	080084f9 	.word	0x080084f9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f9d0 	bl	800888c <USBD_GetDescriptor>
      break;
 80084ec:	e024      	b.n	8008538 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb5f 	bl	8008bb4 <USBD_SetAddress>
      break;
 80084f6:	e01f      	b.n	8008538 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fb9c 	bl	8008c38 <USBD_SetConfig>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]
      break;
 8008504:	e018      	b.n	8008538 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fc39 	bl	8008d80 <USBD_GetConfig>
      break;
 800850e:	e013      	b.n	8008538 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fc68 	bl	8008de8 <USBD_GetStatus>
      break;
 8008518:	e00e      	b.n	8008538 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fc96 	bl	8008e4e <USBD_SetFeature>
      break;
 8008522:	e009      	b.n	8008538 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fca5 	bl	8008e76 <USBD_ClrFeature>
      break;
 800852c:	e004      	b.n	8008538 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fcfb 	bl	8008f2c <USBD_CtlError>
      break;
 8008536:	bf00      	nop
    }
    break;
 8008538:	e004      	b.n	8008544 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fcf5 	bl	8008f2c <USBD_CtlError>
    break;
 8008542:	bf00      	nop
  }

  return ret;
 8008544:	7bfb      	ldrb	r3, [r7, #15]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop

08008550 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008566:	2b20      	cmp	r3, #32
 8008568:	d003      	beq.n	8008572 <USBD_StdItfReq+0x22>
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	d001      	beq.n	8008572 <USBD_StdItfReq+0x22>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d12a      	bne.n	80085c8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008578:	3b01      	subs	r3, #1
 800857a:	2b02      	cmp	r3, #2
 800857c:	d81d      	bhi.n	80085ba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	889b      	ldrh	r3, [r3, #4]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b01      	cmp	r3, #1
 8008586:	d813      	bhi.n	80085b0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88db      	ldrh	r3, [r3, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d110      	bne.n	80085c4 <USBD_StdItfReq+0x74>
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10d      	bne.n	80085c4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fd8a 	bl	80090c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085ae:	e009      	b.n	80085c4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fcba 	bl	8008f2c <USBD_CtlError>
      break;
 80085b8:	e004      	b.n	80085c4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fcb5 	bl	8008f2c <USBD_CtlError>
      break;
 80085c2:	e000      	b.n	80085c6 <USBD_StdItfReq+0x76>
      break;
 80085c4:	bf00      	nop
    }
    break;
 80085c6:	e004      	b.n	80085d2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fcae 	bl	8008f2c <USBD_CtlError>
    break;
 80085d0:	bf00      	nop
  }

  return ret;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	889b      	ldrh	r3, [r3, #4]
 80085ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d004      	beq.n	8008606 <USBD_StdEPReq+0x2a>
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	d002      	beq.n	8008606 <USBD_StdEPReq+0x2a>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <USBD_StdEPReq+0x3e>
 8008604:	e137      	b.n	8008876 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
 8008614:	4603      	mov	r3, r0
 8008616:	73fb      	strb	r3, [r7, #15]
    break;
 8008618:	e132      	b.n	8008880 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	785b      	ldrb	r3, [r3, #1]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d03e      	beq.n	80086a0 <USBD_StdEPReq+0xc4>
 8008622:	2b03      	cmp	r3, #3
 8008624:	d002      	beq.n	800862c <USBD_StdEPReq+0x50>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d079      	beq.n	800871e <USBD_StdEPReq+0x142>
 800862a:	e11e      	b.n	800886a <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008632:	2b02      	cmp	r3, #2
 8008634:	d002      	beq.n	800863c <USBD_StdEPReq+0x60>
 8008636:	2b03      	cmp	r3, #3
 8008638:	d015      	beq.n	8008666 <USBD_StdEPReq+0x8a>
 800863a:	e02b      	b.n	8008694 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <USBD_StdEPReq+0x80>
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b80      	cmp	r3, #128	; 0x80
 8008646:	d009      	beq.n	800865c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f8f7 	bl	8009840 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008652:	2180      	movs	r1, #128	; 0x80
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f8f3 	bl	8009840 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800865a:	e020      	b.n	800869e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fc64 	bl	8008f2c <USBD_CtlError>
        break;
 8008664:	e01b      	b.n	800869e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10e      	bne.n	800868c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <USBD_StdEPReq+0xb0>
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b80      	cmp	r3, #128	; 0x80
 8008678:	d008      	beq.n	800868c <USBD_StdEPReq+0xb0>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88db      	ldrh	r3, [r3, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d104      	bne.n	800868c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f8da 	bl	8009840 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fd18 	bl	80090c2 <USBD_CtlSendStatus>

        break;
 8008692:	e004      	b.n	800869e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc48 	bl	8008f2c <USBD_CtlError>
        break;
 800869c:	bf00      	nop
      }
      break;
 800869e:	e0e9      	b.n	8008874 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d002      	beq.n	80086b0 <USBD_StdEPReq+0xd4>
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d015      	beq.n	80086da <USBD_StdEPReq+0xfe>
 80086ae:	e02f      	b.n	8008710 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <USBD_StdEPReq+0xf4>
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b80      	cmp	r3, #128	; 0x80
 80086ba:	d009      	beq.n	80086d0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 f8bd 	bl	8009840 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086c6:	2180      	movs	r1, #128	; 0x80
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 f8b9 	bl	8009840 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086ce:	e025      	b.n	800871c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc2a 	bl	8008f2c <USBD_CtlError>
        break;
 80086d8:	e020      	b.n	800871c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	885b      	ldrh	r3, [r3, #2]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d11b      	bne.n	800871a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f8c4 	bl	800987e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fce3 	bl	80090c2 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800870e:	e004      	b.n	800871a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fc0a 	bl	8008f2c <USBD_CtlError>
        break;
 8008718:	e000      	b.n	800871c <USBD_StdEPReq+0x140>
        break;
 800871a:	bf00      	nop
      }
      break;
 800871c:	e0aa      	b.n	8008874 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008724:	2b02      	cmp	r3, #2
 8008726:	d002      	beq.n	800872e <USBD_StdEPReq+0x152>
 8008728:	2b03      	cmp	r3, #3
 800872a:	d032      	beq.n	8008792 <USBD_StdEPReq+0x1b6>
 800872c:	e097      	b.n	800885e <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <USBD_StdEPReq+0x168>
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b80      	cmp	r3, #128	; 0x80
 8008738:	d004      	beq.n	8008744 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fbf5 	bl	8008f2c <USBD_CtlError>
          break;
 8008742:	e091      	b.n	8008868 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da0b      	bge.n	8008764 <USBD_StdEPReq+0x188>
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	3310      	adds	r3, #16
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	3304      	adds	r3, #4
 8008762:	e00b      	b.n	800877c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2202      	movs	r2, #2
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fc3f 	bl	800900e <USBD_CtlSendData>
        break;
 8008790:	e06a      	b.n	8008868 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008796:	2b00      	cmp	r3, #0
 8008798:	da11      	bge.n	80087be <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3324      	adds	r3, #36	; 0x24
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d117      	bne.n	80087e4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fbb8 	bl	8008f2c <USBD_CtlError>
            break;
 80087bc:	e054      	b.n	8008868 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	f003 020f 	and.w	r2, r3, #15
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fba5 	bl	8008f2c <USBD_CtlError>
            break;
 80087e2:	e041      	b.n	8008868 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da0b      	bge.n	8008804 <USBD_StdEPReq+0x228>
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	3310      	adds	r3, #16
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	4413      	add	r3, r2
 8008800:	3304      	adds	r3, #4
 8008802:	e00b      	b.n	800881c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4413      	add	r3, r2
 800881a:	3304      	adds	r3, #4
 800881c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <USBD_StdEPReq+0x24e>
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	2b80      	cmp	r3, #128	; 0x80
 8008828:	d103      	bne.n	8008832 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e00e      	b.n	8008850 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 f840 	bl	80098bc <USBD_LL_IsStallEP>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	e002      	b.n	8008850 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2202      	movs	r2, #2
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fbd9 	bl	800900e <USBD_CtlSendData>
          break;
 800885c:	e004      	b.n	8008868 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fb63 	bl	8008f2c <USBD_CtlError>
        break;
 8008866:	bf00      	nop
      }
      break;
 8008868:	e004      	b.n	8008874 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb5d 	bl	8008f2c <USBD_CtlError>
      break;
 8008872:	bf00      	nop
    }
    break;
 8008874:	e004      	b.n	8008880 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fb57 	bl	8008f2c <USBD_CtlError>
    break;
 800887e:	bf00      	nop
  }

  return ret;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	885b      	ldrh	r3, [r3, #2]
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b0e      	cmp	r3, #14
 80088ae:	f200 8152 	bhi.w	8008b56 <USBD_GetDescriptor+0x2ca>
 80088b2:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <USBD_GetDescriptor+0x2c>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	08008929 	.word	0x08008929
 80088bc:	08008941 	.word	0x08008941
 80088c0:	08008981 	.word	0x08008981
 80088c4:	08008b57 	.word	0x08008b57
 80088c8:	08008b57 	.word	0x08008b57
 80088cc:	08008af7 	.word	0x08008af7
 80088d0:	08008b23 	.word	0x08008b23
 80088d4:	08008b57 	.word	0x08008b57
 80088d8:	08008b57 	.word	0x08008b57
 80088dc:	08008b57 	.word	0x08008b57
 80088e0:	08008b57 	.word	0x08008b57
 80088e4:	08008b57 	.word	0x08008b57
 80088e8:	08008b57 	.word	0x08008b57
 80088ec:	08008b57 	.word	0x08008b57
 80088f0:	080088f5 	.word	0x080088f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008916:	e126      	b.n	8008b66 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fb06 	bl	8008f2c <USBD_CtlError>
      err++;
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	3301      	adds	r3, #1
 8008924:	72fb      	strb	r3, [r7, #11]
    break;
 8008926:	e11e      	b.n	8008b66 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	7c12      	ldrb	r2, [r2, #16]
 8008934:	f107 0108 	add.w	r1, r7, #8
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	60f8      	str	r0, [r7, #12]
    break;
 800893e:	e112      	b.n	8008b66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	7c1b      	ldrb	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10d      	bne.n	8008964 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	f107 0208 	add.w	r2, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	2202      	movs	r2, #2
 8008960:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008962:	e100      	b.n	8008b66 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	f107 0208 	add.w	r2, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	2202      	movs	r2, #2
 800897c:	701a      	strb	r2, [r3, #0]
    break;
 800897e:	e0f2      	b.n	8008b66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	885b      	ldrh	r3, [r3, #2]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b05      	cmp	r3, #5
 8008988:	f200 80ac 	bhi.w	8008ae4 <USBD_GetDescriptor+0x258>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <USBD_GetDescriptor+0x108>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089ad 	.word	0x080089ad
 8008998:	080089e1 	.word	0x080089e1
 800899c:	08008a15 	.word	0x08008a15
 80089a0:	08008a49 	.word	0x08008a49
 80089a4:	08008a7d 	.word	0x08008a7d
 80089a8:	08008ab1 	.word	0x08008ab1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00b      	beq.n	80089d0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	7c12      	ldrb	r2, [r2, #16]
 80089c4:	f107 0108 	add.w	r1, r7, #8
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089ce:	e091      	b.n	8008af4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 faaa 	bl	8008f2c <USBD_CtlError>
        err++;
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	3301      	adds	r3, #1
 80089dc:	72fb      	strb	r3, [r7, #11]
      break;
 80089de:	e089      	b.n	8008af4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	7c12      	ldrb	r2, [r2, #16]
 80089f8:	f107 0108 	add.w	r1, r7, #8
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
 8008a00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a02:	e077      	b.n	8008af4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fa90 	bl	8008f2c <USBD_CtlError>
        err++;
 8008a0c:	7afb      	ldrb	r3, [r7, #11]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	72fb      	strb	r3, [r7, #11]
      break;
 8008a12:	e06f      	b.n	8008af4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	7c12      	ldrb	r2, [r2, #16]
 8008a2c:	f107 0108 	add.w	r1, r7, #8
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a36:	e05d      	b.n	8008af4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa76 	bl	8008f2c <USBD_CtlError>
        err++;
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	3301      	adds	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
      break;
 8008a46:	e055      	b.n	8008af4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7c12      	ldrb	r2, [r2, #16]
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a6a:	e043      	b.n	8008af4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa5c 	bl	8008f2c <USBD_CtlError>
        err++;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	3301      	adds	r3, #1
 8008a78:	72fb      	strb	r3, [r7, #11]
      break;
 8008a7a:	e03b      	b.n	8008af4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	7c12      	ldrb	r2, [r2, #16]
 8008a94:	f107 0108 	add.w	r1, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a9e:	e029      	b.n	8008af4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa42 	bl	8008f2c <USBD_CtlError>
        err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
      break;
 8008aae:	e021      	b.n	8008af4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ad2:	e00f      	b.n	8008af4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa28 	bl	8008f2c <USBD_CtlError>
        err++;
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae2:	e007      	b.n	8008af4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa20 	bl	8008f2c <USBD_CtlError>
      err++;
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	3301      	adds	r3, #1
 8008af0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008af2:	bf00      	nop
    }
    break;
 8008af4:	e037      	b.n	8008b66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7c1b      	ldrb	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	f107 0208 	add.w	r2, r7, #8
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4798      	blx	r3
 8008b0e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b10:	e029      	b.n	8008b66 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fa09 	bl	8008f2c <USBD_CtlError>
      err++;
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	72fb      	strb	r3, [r7, #11]
    break;
 8008b20:	e021      	b.n	8008b66 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	7c1b      	ldrb	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10d      	bne.n	8008b46 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	f107 0208 	add.w	r2, r7, #8
 8008b36:	4610      	mov	r0, r2
 8008b38:	4798      	blx	r3
 8008b3a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	2207      	movs	r2, #7
 8008b42:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008b44:	e00f      	b.n	8008b66 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9ef 	bl	8008f2c <USBD_CtlError>
      err++;
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	3301      	adds	r3, #1
 8008b52:	72fb      	strb	r3, [r7, #11]
    break;
 8008b54:	e007      	b.n	8008b66 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f9e7 	bl	8008f2c <USBD_CtlError>
    err++;
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	3301      	adds	r3, #1
 8008b62:	72fb      	strb	r3, [r7, #11]
    break;
 8008b64:	bf00      	nop
  }

  if (err != 0U)
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d11e      	bne.n	8008baa <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	88db      	ldrh	r3, [r3, #6]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d016      	beq.n	8008ba2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b74:	893b      	ldrh	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	88da      	ldrh	r2, [r3, #6]
 8008b7e:	893b      	ldrh	r3, [r7, #8]
 8008b80:	4293      	cmp	r3, r2
 8008b82:	bf28      	it	cs
 8008b84:	4613      	movcs	r3, r2
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b8a:	893b      	ldrh	r3, [r7, #8]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa3c 	bl	800900e <USBD_CtlSendData>
 8008b96:	e009      	b.n	8008bac <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f9c6 	bl	8008f2c <USBD_CtlError>
 8008ba0:	e004      	b.n	8008bac <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fa8d 	bl	80090c2 <USBD_CtlSendStatus>
 8008ba8:	e000      	b.n	8008bac <USBD_GetDescriptor+0x320>
    return;
 8008baa:	bf00      	nop
    }
  }
}
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop

08008bb4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	889b      	ldrh	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d130      	bne.n	8008c28 <USBD_SetAddress+0x74>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	88db      	ldrh	r3, [r3, #6]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d12c      	bne.n	8008c28 <USBD_SetAddress+0x74>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8008bd4:	d828      	bhi.n	8008c28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d104      	bne.n	8008bf6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f99c 	bl	8008f2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf4:	e01c      	b.n	8008c30 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	7bfa      	ldrb	r2, [r7, #15]
 8008bfa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fe87 	bl	8009916 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa5a 	bl	80090c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d004      	beq.n	8008c1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1c:	e008      	b.n	8008c30 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c26:	e003      	b.n	8008c30 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f97e 	bl	8008f2c <USBD_CtlError>
  }
}
 8008c30:	bf00      	nop
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	885b      	ldrh	r3, [r3, #2]
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	4b4b      	ldr	r3, [pc, #300]	; (8008d7c <USBD_SetConfig+0x144>)
 8008c4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c50:	4b4a      	ldr	r3, [pc, #296]	; (8008d7c <USBD_SetConfig+0x144>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d905      	bls.n	8008c64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f966 	bl	8008f2c <USBD_CtlError>
    return USBD_FAIL;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e087      	b.n	8008d74 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d002      	beq.n	8008c74 <USBD_SetConfig+0x3c>
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d025      	beq.n	8008cbe <USBD_SetConfig+0x86>
 8008c72:	e071      	b.n	8008d58 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c74:	4b41      	ldr	r3, [pc, #260]	; (8008d7c <USBD_SetConfig+0x144>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01c      	beq.n	8008cb6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c7c:	4b3f      	ldr	r3, [pc, #252]	; (8008d7c <USBD_SetConfig+0x144>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c86:	4b3d      	ldr	r3, [pc, #244]	; (8008d7c <USBD_SetConfig+0x144>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff f9bd 	bl	800800c <USBD_SetClassConfig>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f944 	bl	8008f2c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008ca4:	e065      	b.n	8008d72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa0b 	bl	80090c2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008cb4:	e05d      	b.n	8008d72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa03 	bl	80090c2 <USBD_CtlSendStatus>
    break;
 8008cbc:	e059      	b.n	8008d72 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008cbe:	4b2f      	ldr	r3, [pc, #188]	; (8008d7c <USBD_SetConfig+0x144>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d112      	bne.n	8008cec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008cce:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <USBD_SetConfig+0x144>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cd8:	4b28      	ldr	r3, [pc, #160]	; (8008d7c <USBD_SetConfig+0x144>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff f9b0 	bl	8008044 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9ec 	bl	80090c2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008cea:	e042      	b.n	8008d72 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008cec:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <USBD_SetConfig+0x144>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d02a      	beq.n	8008d50 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff f99e 	bl	8008044 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008d08:	4b1c      	ldr	r3, [pc, #112]	; (8008d7c <USBD_SetConfig+0x144>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d12:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <USBD_SetConfig+0x144>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff f977 	bl	800800c <USBD_SetClassConfig>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00f      	beq.n	8008d48 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f8fe 	bl	8008f2c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff f983 	bl	8008044 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2202      	movs	r2, #2
 8008d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d46:	e014      	b.n	8008d72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f9ba 	bl	80090c2 <USBD_CtlSendStatus>
    break;
 8008d4e:	e010      	b.n	8008d72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f9b6 	bl	80090c2 <USBD_CtlSendStatus>
    break;
 8008d56:	e00c      	b.n	8008d72 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f8e6 	bl	8008f2c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <USBD_SetConfig+0x144>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff f96c 	bl	8008044 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d70:	bf00      	nop
  }

  return ret;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	200001d0 	.word	0x200001d0

08008d80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	88db      	ldrh	r3, [r3, #6]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d004      	beq.n	8008d9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8c9 	bl	8008f2c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d9a:	e021      	b.n	8008de0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	db17      	blt.n	8008dd6 <USBD_GetConfig+0x56>
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	dd02      	ble.n	8008db0 <USBD_GetConfig+0x30>
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d00b      	beq.n	8008dc6 <USBD_GetConfig+0x46>
 8008dae:	e012      	b.n	8008dd6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3308      	adds	r3, #8
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f925 	bl	800900e <USBD_CtlSendData>
      break;
 8008dc4:	e00c      	b.n	8008de0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f91d 	bl	800900e <USBD_CtlSendData>
      break;
 8008dd4:	e004      	b.n	8008de0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f8a7 	bl	8008f2c <USBD_CtlError>
      break;
 8008dde:	bf00      	nop
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d81e      	bhi.n	8008e3c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	88db      	ldrh	r3, [r3, #6]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d004      	beq.n	8008e10 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f88f 	bl	8008f2c <USBD_CtlError>
      break;
 8008e0e:	e01a      	b.n	8008e46 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d005      	beq.n	8008e2c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f043 0202 	orr.w	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	330c      	adds	r3, #12
 8008e30:	2202      	movs	r2, #2
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f8ea 	bl	800900e <USBD_CtlSendData>
    break;
 8008e3a:	e004      	b.n	8008e46 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f874 	bl	8008f2c <USBD_CtlError>
    break;
 8008e44:	bf00      	nop
  }
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	885b      	ldrh	r3, [r3, #2]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d106      	bne.n	8008e6e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f92a 	bl	80090c2 <USBD_CtlSendStatus>
  }
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e86:	3b01      	subs	r3, #1
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d80b      	bhi.n	8008ea4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	885b      	ldrh	r3, [r3, #2]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d10c      	bne.n	8008eae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f910 	bl	80090c2 <USBD_CtlSendStatus>
      }
      break;
 8008ea2:	e004      	b.n	8008eae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f840 	bl	8008f2c <USBD_CtlError>
      break;
 8008eac:	e000      	b.n	8008eb0 <USBD_ClrFeature+0x3a>
      break;
 8008eae:	bf00      	nop
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	781a      	ldrb	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff faa8 	bl	8008438 <SWAPBYTE>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff fa9b 	bl	8008438 <SWAPBYTE>
 8008f02:	4603      	mov	r3, r0
 8008f04:	461a      	mov	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff fa8e 	bl	8008438 <SWAPBYTE>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	80da      	strh	r2, [r3, #6]
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fc81 	bl	8009840 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f3e:	2100      	movs	r1, #0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fc7d 	bl	8009840 <USBD_LL_StallEP>
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d036      	beq.n	8008fd2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f68:	6938      	ldr	r0, [r7, #16]
 8008f6a:	f000 f836 	bl	8008fda <USBD_GetLen>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	3301      	adds	r3, #1
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	7812      	ldrb	r2, [r2, #0]
 8008f86:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	4413      	add	r3, r2
 8008f94:	2203      	movs	r2, #3
 8008f96:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f9e:	e013      	b.n	8008fc8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	7812      	ldrb	r2, [r2, #0]
 8008faa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	613b      	str	r3, [r7, #16]
    idx++;
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e7      	bne.n	8008fa0 <USBD_GetString+0x52>
 8008fd0:	e000      	b.n	8008fd4 <USBD_GetString+0x86>
    return;
 8008fd2:	bf00      	nop
  }
}
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fea:	e005      	b.n	8008ff8 <USBD_GetLen+0x1e>
  {
    len++;
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1f5      	bne.n	8008fec <USBD_GetLen+0x12>
  }

  return len;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2202      	movs	r2, #2
 800901e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	2100      	movs	r1, #0
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fc8d 	bl	8009954 <USBD_LL_Transmit>

  return USBD_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	2100      	movs	r1, #0
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fc7c 	bl	8009954 <USBD_LL_Transmit>

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2203      	movs	r2, #3
 8009076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	2100      	movs	r1, #0
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fc80 	bl	8009996 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	2100      	movs	r1, #0
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fc6f 	bl	8009996 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b082      	sub	sp, #8
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2204      	movs	r2, #4
 80090ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090d2:	2300      	movs	r3, #0
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fc3b 	bl	8009954 <USBD_LL_Transmit>

  return USBD_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2205      	movs	r2, #5
 80090f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090f8:	2300      	movs	r3, #0
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fc49 	bl	8009996 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009114:	2200      	movs	r2, #0
 8009116:	4912      	ldr	r1, [pc, #72]	; (8009160 <MX_USB_Device_Init+0x50>)
 8009118:	4812      	ldr	r0, [pc, #72]	; (8009164 <MX_USB_Device_Init+0x54>)
 800911a:	f7fe ff09 	bl	8007f30 <USBD_Init>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009124:	f7f7 ff08 	bl	8000f38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009128:	490f      	ldr	r1, [pc, #60]	; (8009168 <MX_USB_Device_Init+0x58>)
 800912a:	480e      	ldr	r0, [pc, #56]	; (8009164 <MX_USB_Device_Init+0x54>)
 800912c:	f7fe ff30 	bl	8007f90 <USBD_RegisterClass>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009136:	f7f7 feff 	bl	8000f38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800913a:	490c      	ldr	r1, [pc, #48]	; (800916c <MX_USB_Device_Init+0x5c>)
 800913c:	4809      	ldr	r0, [pc, #36]	; (8009164 <MX_USB_Device_Init+0x54>)
 800913e:	f7fe fe5b 	bl	8007df8 <USBD_CDC_RegisterInterface>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009148:	f7f7 fef6 	bl	8000f38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800914c:	4805      	ldr	r0, [pc, #20]	; (8009164 <MX_USB_Device_Init+0x54>)
 800914e:	f7fe ff46 	bl	8007fde <USBD_Start>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009158:	f7f7 feee 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800915c:	bf00      	nop
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000130 	.word	0x20000130
 8009164:	200006a4 	.word	0x200006a4
 8009168:	20000018 	.word	0x20000018
 800916c:	2000011c 	.word	0x2000011c

08009170 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009174:	2200      	movs	r2, #0
 8009176:	4905      	ldr	r1, [pc, #20]	; (800918c <CDC_Init_FS+0x1c>)
 8009178:	4805      	ldr	r0, [pc, #20]	; (8009190 <CDC_Init_FS+0x20>)
 800917a:	f7fe fe52 	bl	8007e22 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800917e:	4905      	ldr	r1, [pc, #20]	; (8009194 <CDC_Init_FS+0x24>)
 8009180:	4803      	ldr	r0, [pc, #12]	; (8009190 <CDC_Init_FS+0x20>)
 8009182:	f7fe fe67 	bl	8007e54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009186:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009188:	4618      	mov	r0, r3
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000d5c 	.word	0x20000d5c
 8009190:	200006a4 	.word	0x200006a4
 8009194:	20000974 	.word	0x20000974

08009198 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800919c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800919e:	4618      	mov	r0, r3
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	4603      	mov	r3, r0
 80091b0:	6039      	str	r1, [r7, #0]
 80091b2:	71fb      	strb	r3, [r7, #7]
 80091b4:	4613      	mov	r3, r2
 80091b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	2b23      	cmp	r3, #35	; 0x23
 80091bc:	d84a      	bhi.n	8009254 <CDC_Control_FS+0xac>
 80091be:	a201      	add	r2, pc, #4	; (adr r2, 80091c4 <CDC_Control_FS+0x1c>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	08009255 	.word	0x08009255
 80091c8:	08009255 	.word	0x08009255
 80091cc:	08009255 	.word	0x08009255
 80091d0:	08009255 	.word	0x08009255
 80091d4:	08009255 	.word	0x08009255
 80091d8:	08009255 	.word	0x08009255
 80091dc:	08009255 	.word	0x08009255
 80091e0:	08009255 	.word	0x08009255
 80091e4:	08009255 	.word	0x08009255
 80091e8:	08009255 	.word	0x08009255
 80091ec:	08009255 	.word	0x08009255
 80091f0:	08009255 	.word	0x08009255
 80091f4:	08009255 	.word	0x08009255
 80091f8:	08009255 	.word	0x08009255
 80091fc:	08009255 	.word	0x08009255
 8009200:	08009255 	.word	0x08009255
 8009204:	08009255 	.word	0x08009255
 8009208:	08009255 	.word	0x08009255
 800920c:	08009255 	.word	0x08009255
 8009210:	08009255 	.word	0x08009255
 8009214:	08009255 	.word	0x08009255
 8009218:	08009255 	.word	0x08009255
 800921c:	08009255 	.word	0x08009255
 8009220:	08009255 	.word	0x08009255
 8009224:	08009255 	.word	0x08009255
 8009228:	08009255 	.word	0x08009255
 800922c:	08009255 	.word	0x08009255
 8009230:	08009255 	.word	0x08009255
 8009234:	08009255 	.word	0x08009255
 8009238:	08009255 	.word	0x08009255
 800923c:	08009255 	.word	0x08009255
 8009240:	08009255 	.word	0x08009255
 8009244:	08009255 	.word	0x08009255
 8009248:	08009255 	.word	0x08009255
 800924c:	08009255 	.word	0x08009255
 8009250:	08009255 	.word	0x08009255
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009254:	bf00      	nop
  }

  return (USBD_OK);
 8009256:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7f6 ffd1 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <CDC_Receive_FS+0x2c>)
 800927a:	f7fe fdeb 	bl	8007e54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800927e:	4804      	ldr	r0, [pc, #16]	; (8009290 <CDC_Receive_FS+0x2c>)
 8009280:	f7fe fe2c 	bl	8007edc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009284:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	200006a4 	.word	0x200006a4

08009294 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092a4:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <CDC_Transmit_FS+0x48>)
 80092a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e00b      	b.n	80092d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092ba:	887b      	ldrh	r3, [r7, #2]
 80092bc:	461a      	mov	r2, r3
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4806      	ldr	r0, [pc, #24]	; (80092dc <CDC_Transmit_FS+0x48>)
 80092c2:	f7fe fdae 	bl	8007e22 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092c6:	4805      	ldr	r0, [pc, #20]	; (80092dc <CDC_Transmit_FS+0x48>)
 80092c8:	f7fe fdd8 	bl	8007e7c <USBD_CDC_TransmitPacket>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200006a4 	.word	0x200006a4

080092e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4613      	mov	r3, r2
 80092ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2212      	movs	r2, #18
 8009314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009316:	4b03      	ldr	r3, [pc, #12]	; (8009324 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	20000150 	.word	0x20000150

08009328 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2204      	movs	r2, #4
 8009338:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800933a:	4b03      	ldr	r3, [pc, #12]	; (8009348 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800933c:	4618      	mov	r0, r3
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	20000164 	.word	0x20000164

0800934c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	6039      	str	r1, [r7, #0]
 8009356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d105      	bne.n	800936a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4907      	ldr	r1, [pc, #28]	; (8009380 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009362:	4808      	ldr	r0, [pc, #32]	; (8009384 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009364:	f7ff fdf3 	bl	8008f4e <USBD_GetString>
 8009368:	e004      	b.n	8009374 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	4904      	ldr	r1, [pc, #16]	; (8009380 <USBD_CDC_ProductStrDescriptor+0x34>)
 800936e:	4805      	ldr	r0, [pc, #20]	; (8009384 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009370:	f7ff fded 	bl	8008f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009374:	4b02      	ldr	r3, [pc, #8]	; (8009380 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20001144 	.word	0x20001144
 8009384:	08009b88 	.word	0x08009b88

08009388 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	4904      	ldr	r1, [pc, #16]	; (80093a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009398:	4804      	ldr	r0, [pc, #16]	; (80093ac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800939a:	f7ff fdd8 	bl	8008f4e <USBD_GetString>
  return USBD_StrDesc;
 800939e:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20001144 	.word	0x20001144
 80093ac:	08009ba0 	.word	0x08009ba0

080093b0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	221a      	movs	r2, #26
 80093c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093c2:	f000 f843 	bl	800944c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093c6:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20000168 	.word	0x20000168

080093d4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d105      	bne.n	80093f2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4907      	ldr	r1, [pc, #28]	; (8009408 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093ea:	4808      	ldr	r0, [pc, #32]	; (800940c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093ec:	f7ff fdaf 	bl	8008f4e <USBD_GetString>
 80093f0:	e004      	b.n	80093fc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80093f6:	4805      	ldr	r0, [pc, #20]	; (800940c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80093f8:	f7ff fda9 	bl	8008f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20001144 	.word	0x20001144
 800940c:	08009bb4 	.word	0x08009bb4

08009410 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d105      	bne.n	800942e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	4907      	ldr	r1, [pc, #28]	; (8009444 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009426:	4808      	ldr	r0, [pc, #32]	; (8009448 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009428:	f7ff fd91 	bl	8008f4e <USBD_GetString>
 800942c:	e004      	b.n	8009438 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	4904      	ldr	r1, [pc, #16]	; (8009444 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009432:	4805      	ldr	r0, [pc, #20]	; (8009448 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009434:	f7ff fd8b 	bl	8008f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800943a:	4618      	mov	r0, r3
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20001144 	.word	0x20001144
 8009448:	08009bc0 	.word	0x08009bc0

0800944c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009452:	4b0f      	ldr	r3, [pc, #60]	; (8009490 <Get_SerialNum+0x44>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009458:	4b0e      	ldr	r3, [pc, #56]	; (8009494 <Get_SerialNum+0x48>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800945e:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <Get_SerialNum+0x4c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4413      	add	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009472:	2208      	movs	r2, #8
 8009474:	4909      	ldr	r1, [pc, #36]	; (800949c <Get_SerialNum+0x50>)
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f814 	bl	80094a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800947c:	2204      	movs	r2, #4
 800947e:	4908      	ldr	r1, [pc, #32]	; (80094a0 <Get_SerialNum+0x54>)
 8009480:	68b8      	ldr	r0, [r7, #8]
 8009482:	f000 f80f 	bl	80094a4 <IntToUnicode>
  }
}
 8009486:	bf00      	nop
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	1fff7590 	.word	0x1fff7590
 8009494:	1fff7594 	.word	0x1fff7594
 8009498:	1fff7598 	.word	0x1fff7598
 800949c:	2000016a 	.word	0x2000016a
 80094a0:	2000017a 	.word	0x2000017a

080094a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]
 80094ba:	e027      	b.n	800950c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	0f1b      	lsrs	r3, r3, #28
 80094c0:	2b09      	cmp	r3, #9
 80094c2:	d80b      	bhi.n	80094dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	0f1b      	lsrs	r3, r3, #28
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	4619      	mov	r1, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	440b      	add	r3, r1
 80094d4:	3230      	adds	r2, #48	; 0x30
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	e00a      	b.n	80094f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	0f1b      	lsrs	r3, r3, #28
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	4619      	mov	r1, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	440b      	add	r3, r1
 80094ec:	3237      	adds	r2, #55	; 0x37
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	011b      	lsls	r3, r3, #4
 80094f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	3301      	adds	r3, #1
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	2200      	movs	r2, #0
 8009504:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	3301      	adds	r3, #1
 800950a:	75fb      	strb	r3, [r7, #23]
 800950c:	7dfa      	ldrb	r2, [r7, #23]
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	429a      	cmp	r2, r3
 8009512:	d3d3      	bcc.n	80094bc <IntToUnicode+0x18>
  }
}
 8009514:	bf00      	nop
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a0d      	ldr	r2, [pc, #52]	; (8009564 <HAL_PCD_MspInit+0x44>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d113      	bne.n	800955a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <HAL_PCD_MspInit+0x48>)
 8009534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009536:	4a0c      	ldr	r2, [pc, #48]	; (8009568 <HAL_PCD_MspInit+0x48>)
 8009538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800953c:	6593      	str	r3, [r2, #88]	; 0x58
 800953e:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <HAL_PCD_MspInit+0x48>)
 8009540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	2014      	movs	r0, #20
 8009550:	f7f8 f92b 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009554:	2014      	movs	r0, #20
 8009556:	f7f8 f942 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800955a:	bf00      	nop
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	40005c00 	.word	0x40005c00
 8009568:	40021000 	.word	0x40021000

0800956c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f7fe fd76 	bl	8008074 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	440b      	add	r3, r1
 80095b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	4619      	mov	r1, r3
 80095ba:	f7fe fdae 	bl	800811a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80095d8:	78fa      	ldrb	r2, [r7, #3]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	440b      	add	r3, r1
 80095e6:	333c      	adds	r3, #60	; 0x3c
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	78fb      	ldrb	r3, [r7, #3]
 80095ec:	4619      	mov	r1, r3
 80095ee:	f7fe fdf7 	bl	80081e0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe fefb 	bl	8008404 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800961e:	2301      	movs	r3, #1
 8009620:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b02      	cmp	r3, #2
 8009628:	d001      	beq.n	800962e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800962a:	f7f7 fc85 	bl	8000f38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009634:	7bfa      	ldrb	r2, [r7, #15]
 8009636:	4611      	mov	r1, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fea8 	bl	800838e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009644:	4618      	mov	r0, r3
 8009646:	f7fe fe61 	bl	800830c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fea3 	bl	80083ae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d005      	beq.n	800967c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009670:	4b04      	ldr	r3, [pc, #16]	; (8009684 <HAL_PCD_SuspendCallback+0x30>)
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	4a03      	ldr	r2, [pc, #12]	; (8009684 <HAL_PCD_SuspendCallback+0x30>)
 8009676:	f043 0306 	orr.w	r3, r3, #6
 800967a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	e000ed00 	.word	0xe000ed00

08009688 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d007      	beq.n	80096a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <HAL_PCD_ResumeCallback+0x34>)
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	4a07      	ldr	r2, [pc, #28]	; (80096bc <HAL_PCD_ResumeCallback+0x34>)
 800969e:	f023 0306 	bic.w	r3, r3, #6
 80096a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80096a4:	f000 f9fa 	bl	8009a9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fe92 	bl	80083d8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	e000ed00 	.word	0xe000ed00

080096c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80096c8:	4a2b      	ldr	r2, [pc, #172]	; (8009778 <USBD_LL_Init+0xb8>)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a29      	ldr	r2, [pc, #164]	; (8009778 <USBD_LL_Init+0xb8>)
 80096d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80096d8:	4b27      	ldr	r3, [pc, #156]	; (8009778 <USBD_LL_Init+0xb8>)
 80096da:	4a28      	ldr	r2, [pc, #160]	; (800977c <USBD_LL_Init+0xbc>)
 80096dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096de:	4b26      	ldr	r3, [pc, #152]	; (8009778 <USBD_LL_Init+0xb8>)
 80096e0:	2208      	movs	r2, #8
 80096e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096e4:	4b24      	ldr	r3, [pc, #144]	; (8009778 <USBD_LL_Init+0xb8>)
 80096e6:	2202      	movs	r2, #2
 80096e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096ea:	4b23      	ldr	r3, [pc, #140]	; (8009778 <USBD_LL_Init+0xb8>)
 80096ec:	2202      	movs	r2, #2
 80096ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096f0:	4b21      	ldr	r3, [pc, #132]	; (8009778 <USBD_LL_Init+0xb8>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096f6:	4b20      	ldr	r3, [pc, #128]	; (8009778 <USBD_LL_Init+0xb8>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096fc:	4b1e      	ldr	r3, [pc, #120]	; (8009778 <USBD_LL_Init+0xb8>)
 80096fe:	2200      	movs	r2, #0
 8009700:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009702:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <USBD_LL_Init+0xb8>)
 8009704:	2200      	movs	r2, #0
 8009706:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009708:	481b      	ldr	r0, [pc, #108]	; (8009778 <USBD_LL_Init+0xb8>)
 800970a:	f7f8 fa37 	bl	8001b7c <HAL_PCD_Init>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009714:	f7f7 fc10 	bl	8000f38 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800971e:	2318      	movs	r3, #24
 8009720:	2200      	movs	r2, #0
 8009722:	2100      	movs	r1, #0
 8009724:	f7f9 fd25 	bl	8003172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800972e:	2358      	movs	r3, #88	; 0x58
 8009730:	2200      	movs	r2, #0
 8009732:	2180      	movs	r1, #128	; 0x80
 8009734:	f7f9 fd1d 	bl	8003172 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800973e:	23c0      	movs	r3, #192	; 0xc0
 8009740:	2200      	movs	r2, #0
 8009742:	2181      	movs	r1, #129	; 0x81
 8009744:	f7f9 fd15 	bl	8003172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800974e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009752:	2200      	movs	r2, #0
 8009754:	2101      	movs	r1, #1
 8009756:	f7f9 fd0c 	bl	8003172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009764:	2200      	movs	r2, #0
 8009766:	2182      	movs	r1, #130	; 0x82
 8009768:	f7f9 fd03 	bl	8003172 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20001344 	.word	0x20001344
 800977c:	40005c00 	.word	0x40005c00

08009780 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009796:	4618      	mov	r0, r3
 8009798:	f7f8 fad5 	bl	8001d46 <HAL_PCD_Start>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f980 	bl	8009aa8 <USBD_Get_USB_Status>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	4608      	mov	r0, r1
 80097c0:	4611      	mov	r1, r2
 80097c2:	461a      	mov	r2, r3
 80097c4:	4603      	mov	r3, r0
 80097c6:	70fb      	strb	r3, [r7, #3]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70bb      	strb	r3, [r7, #2]
 80097cc:	4613      	mov	r3, r2
 80097ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097de:	78bb      	ldrb	r3, [r7, #2]
 80097e0:	883a      	ldrh	r2, [r7, #0]
 80097e2:	78f9      	ldrb	r1, [r7, #3]
 80097e4:	f7f8 fc44 	bl	8002070 <HAL_PCD_EP_Open>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 f95a 	bl	8009aa8 <USBD_Get_USB_Status>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800981c:	78fa      	ldrb	r2, [r7, #3]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7f8 fc8b 	bl	800213c <HAL_PCD_EP_Close>
 8009826:	4603      	mov	r3, r0
 8009828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	4618      	mov	r0, r3
 800982e:	f000 f93b 	bl	8009aa8 <USBD_Get_USB_Status>
 8009832:	4603      	mov	r3, r0
 8009834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009836:	7bbb      	ldrb	r3, [r7, #14]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800985a:	78fa      	ldrb	r2, [r7, #3]
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f7f8 fd4c 	bl	80022fc <HAL_PCD_EP_SetStall>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	4618      	mov	r0, r3
 800986c:	f000 f91c 	bl	8009aa8 <USBD_Get_USB_Status>
 8009870:	4603      	mov	r3, r0
 8009872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009874:	7bbb      	ldrb	r3, [r7, #14]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	460b      	mov	r3, r1
 8009888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	4611      	mov	r1, r2
 800989c:	4618      	mov	r0, r3
 800989e:	f7f8 fd8d 	bl	80023bc <HAL_PCD_EP_ClrStall>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 f8fd 	bl	8009aa8 <USBD_Get_USB_Status>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	da0c      	bge.n	80098f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098d8:	78fb      	ldrb	r3, [r7, #3]
 80098da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	440b      	add	r3, r1
 80098ec:	3302      	adds	r3, #2
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	e00b      	b.n	800990a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f8:	68f9      	ldr	r1, [r7, #12]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	440b      	add	r3, r1
 8009904:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009908:	781b      	ldrb	r3, [r3, #0]
  }
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009930:	78fa      	ldrb	r2, [r7, #3]
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f7f8 fb76 	bl	8002026 <HAL_PCD_SetAddress>
 800993a:	4603      	mov	r3, r0
 800993c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	4618      	mov	r0, r3
 8009942:	f000 f8b1 	bl	8009aa8 <USBD_Get_USB_Status>
 8009946:	4603      	mov	r3, r0
 8009948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800994a:	7bbb      	ldrb	r3, [r7, #14]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	460b      	mov	r3, r1
 8009962:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009972:	7af9      	ldrb	r1, [r7, #11]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	f7f8 fc7d 	bl	8002276 <HAL_PCD_EP_Transmit>
 800997c:	4603      	mov	r3, r0
 800997e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 f890 	bl	8009aa8 <USBD_Get_USB_Status>
 8009988:	4603      	mov	r3, r0
 800998a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800998c:	7dbb      	ldrb	r3, [r7, #22]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b086      	sub	sp, #24
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
 80099a2:	460b      	mov	r3, r1
 80099a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099b4:	7af9      	ldrb	r1, [r7, #11]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	f7f8 fc07 	bl	80021cc <HAL_PCD_EP_Receive>
 80099be:	4603      	mov	r3, r0
 80099c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 f86f 	bl	8009aa8 <USBD_Get_USB_Status>
 80099ca:	4603      	mov	r3, r0
 80099cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099ea:	78fa      	ldrb	r2, [r7, #3]
 80099ec:	4611      	mov	r1, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f8 fc29 	bl	8002246 <HAL_PCD_EP_GetRxCount>
 80099f4:	4603      	mov	r3, r0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <HAL_PCDEx_LPM_Callback+0x18>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d013      	beq.n	8009a3e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009a16:	e023      	b.n	8009a60 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d007      	beq.n	8009a30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a20:	f000 f83c 	bl	8009a9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a24:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	4a0f      	ldr	r2, [pc, #60]	; (8009a68 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a2a:	f023 0306 	bic.w	r3, r3, #6
 8009a2e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fcce 	bl	80083d8 <USBD_LL_Resume>
    break;
 8009a3c:	e010      	b.n	8009a60 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe fcb2 	bl	80083ae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a52:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	4a04      	ldr	r2, [pc, #16]	; (8009a68 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a58:	f043 0306 	orr.w	r3, r3, #6
 8009a5c:	6113      	str	r3, [r2, #16]
    break;
 8009a5e:	bf00      	nop
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	e000ed00 	.word	0xe000ed00

08009a6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a74:	4b03      	ldr	r3, [pc, #12]	; (8009a84 <USBD_static_malloc+0x18>)
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	200001d4 	.word	0x200001d4

08009a88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]

}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009aa0:	f7f6 fd16 	bl	80004d0 <SystemClock_Config>
}
 8009aa4:	bf00      	nop
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d817      	bhi.n	8009aec <USBD_Get_USB_Status+0x44>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBD_Get_USB_Status+0x1c>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009adb 	.word	0x08009adb
 8009acc:	08009ae1 	.word	0x08009ae1
 8009ad0:	08009ae7 	.word	0x08009ae7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad8:	e00b      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ada:	2303      	movs	r3, #3
 8009adc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ade:	e008      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	e005      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aea:	e002      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aec:	2303      	movs	r3, #3
 8009aee:	73fb      	strb	r3, [r7, #15]
    break;
 8009af0:	bf00      	nop
  }
  return usb_status;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <__libc_init_array>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4e0d      	ldr	r6, [pc, #52]	; (8009b38 <__libc_init_array+0x38>)
 8009b04:	4c0d      	ldr	r4, [pc, #52]	; (8009b3c <__libc_init_array+0x3c>)
 8009b06:	1ba4      	subs	r4, r4, r6
 8009b08:	10a4      	asrs	r4, r4, #2
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	42a5      	cmp	r5, r4
 8009b0e:	d109      	bne.n	8009b24 <__libc_init_array+0x24>
 8009b10:	4e0b      	ldr	r6, [pc, #44]	; (8009b40 <__libc_init_array+0x40>)
 8009b12:	4c0c      	ldr	r4, [pc, #48]	; (8009b44 <__libc_init_array+0x44>)
 8009b14:	f000 f82c 	bl	8009b70 <_init>
 8009b18:	1ba4      	subs	r4, r4, r6
 8009b1a:	10a4      	asrs	r4, r4, #2
 8009b1c:	2500      	movs	r5, #0
 8009b1e:	42a5      	cmp	r5, r4
 8009b20:	d105      	bne.n	8009b2e <__libc_init_array+0x2e>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b28:	4798      	blx	r3
 8009b2a:	3501      	adds	r5, #1
 8009b2c:	e7ee      	b.n	8009b0c <__libc_init_array+0xc>
 8009b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b32:	4798      	blx	r3
 8009b34:	3501      	adds	r5, #1
 8009b36:	e7f2      	b.n	8009b1e <__libc_init_array+0x1e>
 8009b38:	08009be0 	.word	0x08009be0
 8009b3c:	08009be0 	.word	0x08009be0
 8009b40:	08009be0 	.word	0x08009be0
 8009b44:	08009be4 	.word	0x08009be4

08009b48 <memcpy>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	1e43      	subs	r3, r0, #1
 8009b4c:	440a      	add	r2, r1
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	d100      	bne.n	8009b54 <memcpy+0xc>
 8009b52:	bd10      	pop	{r4, pc}
 8009b54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b5c:	e7f7      	b.n	8009b4e <memcpy+0x6>

08009b5e <memset>:
 8009b5e:	4402      	add	r2, r0
 8009b60:	4603      	mov	r3, r0
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d100      	bne.n	8009b68 <memset+0xa>
 8009b66:	4770      	bx	lr
 8009b68:	f803 1b01 	strb.w	r1, [r3], #1
 8009b6c:	e7f9      	b.n	8009b62 <memset+0x4>
	...

08009b70 <_init>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	bf00      	nop
 8009b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b76:	bc08      	pop	{r3}
 8009b78:	469e      	mov	lr, r3
 8009b7a:	4770      	bx	lr

08009b7c <_fini>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	bf00      	nop
 8009b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b82:	bc08      	pop	{r3}
 8009b84:	469e      	mov	lr, r3
 8009b86:	4770      	bx	lr
