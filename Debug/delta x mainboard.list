
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a8c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009c64  08009c64  00019c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cbc  08009cbc  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  08009cbc  08009cbc  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cbc  08009cbc  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cbc  08009cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc0  08009cc0  00019cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08009cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  200001a0  08009e64  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001654  08009e64  00021654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae62  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000347f  00000000  00000000  0003b032  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  0003e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  0003f868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  00040aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c33  00000000  00000000  00061033  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c43c7  00000000  00000000  00072c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013702d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  001370a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a0 	.word	0x200001a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009c4c 	.word	0x08009c4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001a4 	.word	0x200001a4
 8000214:	08009c4c 	.word	0x08009c4c

08000218 <CDC_On_Receive>:
volatile uint8_t motor1_target_rpm = 0;
volatile uint8_t motor2_target_rpm = 0;
volatile uint8_t motor3_target_rpm = 0;


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b14      	cmp	r3, #20
 8000228:	d10c      	bne.n	8000244 <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	2214      	movs	r2, #20
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <CDC_On_Receive+0x34>)
 8000230:	f009 fcf8 	bl	8009c24 <memcpy>

		if (command.delimiter == 0xABCABC) {
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <CDC_On_Receive+0x34>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <CDC_On_Receive+0x38>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d102      	bne.n	8000244 <CDC_On_Receive+0x2c>
			command_received = 1;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <CDC_On_Receive+0x3c>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001bc 	.word	0x200001bc
 8000250:	00abcabc 	.word	0x00abcabc
 8000254:	200001e4 	.word	0x200001e4

08000258 <Set_Motor_Speed>:

int min_duty_m = 20000;
int max_duty_m = 65000;
int max_speed_m = 100;

inline void Set_Motor_Speed(volatile uint32_t * channel_a, volatile uint32_t * channel_b, int32_t motor_speed) {
 8000258:	b480      	push	{r7}
 800025a:	b087      	sub	sp, #28
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	int speed_cof = (max_duty_m - min_duty_m) / max_speed_m;
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <Set_Motor_Speed+0xac>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b27      	ldr	r3, [pc, #156]	; (8000308 <Set_Motor_Speed+0xb0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1ad2      	subs	r2, r2, r3
 800026e:	4b27      	ldr	r3, [pc, #156]	; (800030c <Set_Motor_Speed+0xb4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	fb92 f3f3 	sdiv	r3, r2, r3
 8000276:	617b      	str	r3, [r7, #20]
	int speed_cof_n = speed_cof * -1;
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	425b      	negs	r3, r3
 800027c:	613b      	str	r3, [r7, #16]
	if (motor_speed > 0) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b00      	cmp	r3, #0
 8000282:	dd16      	ble.n	80002b2 <Set_Motor_Speed+0x5a>
		// forward
		if (motor_speed <= max_speed_m) {
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <Set_Motor_Speed+0xb4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	429a      	cmp	r2, r3
 800028c:	dc0a      	bgt.n	80002a4 <Set_Motor_Speed+0x4c>
			// 0 to 100 compact range
			*channel_a = motor_speed * speed_cof + min_duty_m;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	fb02 f203 	mul.w	r2, r2, r3
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <Set_Motor_Speed+0xb0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4413      	add	r3, r2
 800029c:	461a      	mov	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	e002      	b.n	80002aa <Set_Motor_Speed+0x52>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 80002b0:	e022      	b.n	80002f8 <Set_Motor_Speed+0xa0>
	} else if (motor_speed < 0) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da19      	bge.n	80002ec <Set_Motor_Speed+0x94>
		if (motor_speed >= -max_speed_m) {
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <Set_Motor_Speed+0xb4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	425b      	negs	r3, r3
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	db0a      	blt.n	80002da <Set_Motor_Speed+0x82>
			*channel_b = motor_speed * speed_cof_n + min_duty_m;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	fb02 f203 	mul.w	r2, r2, r3
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <Set_Motor_Speed+0xb0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4413      	add	r3, r2
 80002d2:	461a      	mov	r2, r3
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	e004      	b.n	80002e4 <Set_Motor_Speed+0x8c>
			*channel_b = motor_speed * -1;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	425b      	negs	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
}
 80002ea:	e005      	b.n	80002f8 <Set_Motor_Speed+0xa0>
		*channel_a = 0;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	371c      	adds	r7, #28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000
 800030c:	20000008 	.word	0x20000008

08000310 <Turn_On_Thrower>:
int turn_on_duty = 3600;
int min_duty_t = 4000;
int max_duty_t = 7000;
int max_speed_t = 100;

void Turn_On_Thrower(volatile uint32_t * channel_a) {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	*channel_a = turn_on_duty;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <Turn_On_Thrower+0x2c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	601a      	str	r2, [r3, #0]
	esc_wait_ticker = 0;
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <Turn_On_Thrower+0x30>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
	esc_turned_on = 1;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <Turn_On_Thrower+0x34>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	2000000c 	.word	0x2000000c
 8000340:	200001e7 	.word	0x200001e7
 8000344:	200001e6 	.word	0x200001e6

08000348 <Turn_Off_Thrower>:

void Turn_Off_Thrower(volatile uint32_t * channel_a) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	*channel_a = 0;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
	esc_turned_on = 0;
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <Turn_Off_Thrower+0x20>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	200001e6 	.word	0x200001e6

0800036c <Set_Thrower_Speed>:

inline void Set_Thrower_Speed(volatile uint32_t * channel_a, int32_t thrower_speed) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	int speed_cof = (max_duty_t - min_duty_t) / max_speed_t;
 8000376:	4b19      	ldr	r3, [pc, #100]	; (80003dc <Set_Thrower_Speed+0x70>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <Set_Thrower_Speed+0x74>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	1ad2      	subs	r2, r2, r3
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <Set_Thrower_Speed+0x78>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	fb92 f3f3 	sdiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]
	if (thrower_speed > 0) {
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	dd1d      	ble.n	80003cc <Set_Thrower_Speed+0x60>
		if (esc_turned_on == 0) {
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <Set_Thrower_Speed+0x7c>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d103      	bne.n	80003a2 <Set_Thrower_Speed+0x36>
			Turn_On_Thrower(channel_a);
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f7ff ffb8 	bl	8000310 <Turn_On_Thrower>
		}
	} else {
		// stop
		Turn_Off_Thrower(channel_a);
	}
}
 80003a0:	e017      	b.n	80003d2 <Set_Thrower_Speed+0x66>
			if (thrower_speed <= max_speed_t && esc_wait_ticker == 0) {
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <Set_Thrower_Speed+0x78>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	683a      	ldr	r2, [r7, #0]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dc12      	bgt.n	80003d2 <Set_Thrower_Speed+0x66>
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <Set_Thrower_Speed+0x80>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d10d      	bne.n	80003d2 <Set_Thrower_Speed+0x66>
				*channel_a = thrower_speed * speed_cof + min_duty_t;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	fb02 f203 	mul.w	r2, r2, r3
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <Set_Thrower_Speed+0x74>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	461a      	mov	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	e002      	b.n	80003d2 <Set_Thrower_Speed+0x66>
		Turn_Off_Thrower(channel_a);
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ffbb 	bl	8000348 <Turn_Off_Thrower>
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000014 	.word	0x20000014
 80003e0:	20000010 	.word	0x20000010
 80003e4:	20000018 	.word	0x20000018
 80003e8:	200001e6 	.word	0x200001e6
 80003ec:	200001e7 	.word	0x200001e7

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f4:	f001 f8fb 	bl	80015ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f8cc 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 fd20 	bl	8000e40 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000400:	f000 faa8 	bl	8000954 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000404:	f000 fb32 	bl	8000a6c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000408:	f000 fba0 	bl	8000b4c <MX_TIM15_Init>
  MX_TIM16_Init();
 800040c:	f000 fc24 	bl	8000c58 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000410:	f000 f928 	bl	8000664 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000414:	f000 f9d6 	bl	80007c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000418:	f000 fa28 	bl	800086c <MX_TIM3_Init>
  MX_TIM7_Init();
 800041c:	f000 faf0 	bl	8000a00 <MX_TIM7_Init>
  MX_TIM17_Init();
 8000420:	f000 fc94 	bl	8000d4c <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000424:	f008 fee2 	bl	80091ec <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000428:	2104      	movs	r1, #4
 800042a:	4840      	ldr	r0, [pc, #256]	; (800052c <main+0x13c>)
 800042c:	f004 f9dc 	bl	80047e8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000430:	2104      	movs	r1, #4
 8000432:	483f      	ldr	r0, [pc, #252]	; (8000530 <main+0x140>)
 8000434:	f004 f9d8 	bl	80047e8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000438:	2104      	movs	r1, #4
 800043a:	483e      	ldr	r0, [pc, #248]	; (8000534 <main+0x144>)
 800043c:	f004 f9d4 	bl	80047e8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000440:	2100      	movs	r1, #0
 8000442:	483d      	ldr	r0, [pc, #244]	; (8000538 <main+0x148>)
 8000444:	f004 f82a 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000448:	2104      	movs	r1, #4
 800044a:	483b      	ldr	r0, [pc, #236]	; (8000538 <main+0x148>)
 800044c:	f004 f826 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000450:	2108      	movs	r1, #8
 8000452:	4839      	ldr	r0, [pc, #228]	; (8000538 <main+0x148>)
 8000454:	f004 f822 	bl	800449c <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000458:	4b38      	ldr	r3, [pc, #224]	; (800053c <main+0x14c>)
 800045a:	2200      	movs	r2, #0
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <main+0x14c>)
 8000460:	2200      	movs	r2, #0
 8000462:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000464:	4b35      	ldr	r3, [pc, #212]	; (800053c <main+0x14c>)
 8000466:	2200      	movs	r2, #0
 8000468:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800046a:	2100      	movs	r1, #0
 800046c:	4834      	ldr	r0, [pc, #208]	; (8000540 <main+0x150>)
 800046e:	f004 f815 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000472:	2104      	movs	r1, #4
 8000474:	4832      	ldr	r0, [pc, #200]	; (8000540 <main+0x150>)
 8000476:	f004 f811 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800047a:	2108      	movs	r1, #8
 800047c:	4830      	ldr	r0, [pc, #192]	; (8000540 <main+0x150>)
 800047e:	f004 f80d 	bl	800449c <HAL_TIM_PWM_Start>
  TIM3->CCR1 = 0;
 8000482:	4b30      	ldr	r3, [pc, #192]	; (8000544 <main+0x154>)
 8000484:	2200      	movs	r2, #0
 8000486:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 8000488:	4b2e      	ldr	r3, [pc, #184]	; (8000544 <main+0x154>)
 800048a:	2200      	movs	r2, #0
 800048c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 0;
 800048e:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <main+0x154>)
 8000490:	2200      	movs	r2, #0
 8000492:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000494:	2100      	movs	r1, #0
 8000496:	482c      	ldr	r0, [pc, #176]	; (8000548 <main+0x158>)
 8000498:	f004 f800 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800049c:	2100      	movs	r1, #0
 800049e:	482b      	ldr	r0, [pc, #172]	; (800054c <main+0x15c>)
 80004a0:	f003 fffc 	bl	800449c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80004a4:	2100      	movs	r1, #0
 80004a6:	482a      	ldr	r0, [pc, #168]	; (8000550 <main+0x160>)
 80004a8:	f003 fff8 	bl	800449c <HAL_TIM_PWM_Start>
  TIM15->CCR1 = 0;
 80004ac:	4b29      	ldr	r3, [pc, #164]	; (8000554 <main+0x164>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM16->CCR1 = 0;
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <main+0x168>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM17->CCR1 = 0;
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <main+0x16c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_Base_Start_IT(&htim7);
 80004be:	4828      	ldr	r0, [pc, #160]	; (8000560 <main+0x170>)
 80004c0:	f003 ff2a 	bl	8004318 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 80004c4:	4b27      	ldr	r3, [pc, #156]	; (8000564 <main+0x174>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d1fa      	bne.n	80004c4 <main+0xd4>
		command_received = 0;
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <main+0x174>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
		command_received_ticker = 60;
 80004d4:	4b24      	ldr	r3, [pc, #144]	; (8000568 <main+0x178>)
 80004d6:	223c      	movs	r2, #60	; 0x3c
 80004d8:	701a      	strb	r2, [r3, #0]

		// toggle led
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80004da:	2120      	movs	r1, #32
 80004dc:	4823      	ldr	r0, [pc, #140]	; (800056c <main+0x17c>)
 80004de:	f001 fba1 	bl	8001c24 <HAL_GPIO_TogglePin>

		feedback.thrower = 666;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <main+0x180>)
 80004e4:	f240 229a 	movw	r2, #666	; 0x29a
 80004e8:	60da      	str	r2, [r3, #12]

		// set motor speeds
		Set_Motor_Speed(&(TIM1->CCR3), &(TIM1->CCR2), command.motor1);
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <main+0x184>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4921      	ldr	r1, [pc, #132]	; (8000578 <main+0x188>)
 80004f2:	4822      	ldr	r0, [pc, #136]	; (800057c <main+0x18c>)
 80004f4:	f7ff feb0 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), command.motor2);
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <main+0x184>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4920      	ldr	r1, [pc, #128]	; (8000580 <main+0x190>)
 8000500:	4820      	ldr	r0, [pc, #128]	; (8000584 <main+0x194>)
 8000502:	f7ff fea9 	bl	8000258 <Set_Motor_Speed>
		Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), command.motor3);
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <main+0x184>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	461a      	mov	r2, r3
 800050c:	491e      	ldr	r1, [pc, #120]	; (8000588 <main+0x198>)
 800050e:	481f      	ldr	r0, [pc, #124]	; (800058c <main+0x19c>)
 8000510:	f7ff fea2 	bl	8000258 <Set_Motor_Speed>

		Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <main+0x184>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	4619      	mov	r1, r3
 800051a:	481d      	ldr	r0, [pc, #116]	; (8000590 <main+0x1a0>)
 800051c:	f7ff ff26 	bl	800036c <Set_Thrower_Speed>

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000520:	2114      	movs	r1, #20
 8000522:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0x180>)
 8000524:	f008 ff24 	bl	8009370 <CDC_Transmit_FS>
	if (command_received == 1) {
 8000528:	e7cc      	b.n	80004c4 <main+0xd4>
 800052a:	bf00      	nop
 800052c:	200005d8 	.word	0x200005d8
 8000530:	2000045c 	.word	0x2000045c
 8000534:	20000410 	.word	0x20000410
 8000538:	2000058c 	.word	0x2000058c
 800053c:	40012c00 	.word	0x40012c00
 8000540:	20000540 	.word	0x20000540
 8000544:	40000400 	.word	0x40000400
 8000548:	200004a8 	.word	0x200004a8
 800054c:	20000624 	.word	0x20000624
 8000550:	200004f4 	.word	0x200004f4
 8000554:	40014000 	.word	0x40014000
 8000558:	40014400 	.word	0x40014400
 800055c:	40014800 	.word	0x40014800
 8000560:	20000670 	.word	0x20000670
 8000564:	200001e4 	.word	0x200001e4
 8000568:	200001e5 	.word	0x200001e5
 800056c:	48000400 	.word	0x48000400
 8000570:	200001d0 	.word	0x200001d0
 8000574:	200001bc 	.word	0x200001bc
 8000578:	40012c38 	.word	0x40012c38
 800057c:	40012c3c 	.word	0x40012c3c
 8000580:	4000043c 	.word	0x4000043c
 8000584:	40012c34 	.word	0x40012c34
 8000588:	40000438 	.word	0x40000438
 800058c:	40000434 	.word	0x40000434
 8000590:	40014434 	.word	0x40014434

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b0a4      	sub	sp, #144	; 0x90
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059e:	2238      	movs	r2, #56	; 0x38
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 fb49 	bl	8009c3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f009 fb3b 	bl	8009c3a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f002 feaf 	bl	8003328 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005ca:	2322      	movs	r3, #34	; 0x22
 80005cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2340      	movs	r3, #64	; 0x40
 80005d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005e8:	2314      	movs	r3, #20
 80005ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ff43 	bl	8003490 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000610:	f000 fd00 	bl	8001014 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2303      	movs	r3, #3
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000628:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800062c:	2104      	movs	r1, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fa46 	bl	8003ac0 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800063a:	f000 fceb 	bl	8001014 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800063e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000642:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000644:	2300      	movs	r3, #0
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fc1c 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 fcdd 	bl	8001014 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3790      	adds	r7, #144	; 0x90
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b098      	sub	sp, #96	; 0x60
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2234      	movs	r2, #52	; 0x34
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f009 fad2 	bl	8009c3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000696:	4b49      	ldr	r3, [pc, #292]	; (80007bc <MX_TIM1_Init+0x158>)
 8000698:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <MX_TIM1_Init+0x15c>)
 800069a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800069c:	4b47      	ldr	r3, [pc, #284]	; (80007bc <MX_TIM1_Init+0x158>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b46      	ldr	r3, [pc, #280]	; (80007bc <MX_TIM1_Init+0x158>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006a8:	4b44      	ldr	r3, [pc, #272]	; (80007bc <MX_TIM1_Init+0x158>)
 80006aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b42      	ldr	r3, [pc, #264]	; (80007bc <MX_TIM1_Init+0x158>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b6:	4b41      	ldr	r3, [pc, #260]	; (80007bc <MX_TIM1_Init+0x158>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <MX_TIM1_Init+0x158>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c2:	483e      	ldr	r0, [pc, #248]	; (80007bc <MX_TIM1_Init+0x158>)
 80006c4:	f003 fe92 	bl	80043ec <HAL_TIM_PWM_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 fca1 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d2:	2300      	movs	r3, #0
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006e2:	4619      	mov	r1, r3
 80006e4:	4835      	ldr	r0, [pc, #212]	; (80007bc <MX_TIM1_Init+0x158>)
 80006e6:	f004 ff6f 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006f0:	f000 fc90 	bl	8001014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f4:	2360      	movs	r3, #96	; 0x60
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fc:	2300      	movs	r3, #0
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000700:	2300      	movs	r3, #0
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000710:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <MX_TIM1_Init+0x158>)
 800071a:	f004 fa71 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000724:	f000 fc76 	bl	8001014 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800072c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000730:	2204      	movs	r2, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4821      	ldr	r0, [pc, #132]	; (80007bc <MX_TIM1_Init+0x158>)
 8000736:	f004 fa63 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000740:	f000 fc68 	bl	8001014 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000748:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800074c:	2208      	movs	r2, #8
 800074e:	4619      	mov	r1, r3
 8000750:	481a      	ldr	r0, [pc, #104]	; (80007bc <MX_TIM1_Init+0x158>)
 8000752:	f004 fa55 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800075c:	f000 fc5a 	bl	8001014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000778:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <MX_TIM1_Init+0x158>)
 800079e:	f004 ff95 	bl	80056cc <HAL_TIMEx_ConfigBreakDeadTime>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80007a8:	f000 fc34 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <MX_TIM1_Init+0x158>)
 80007ae:	f000 fdb5 	bl	800131c <HAL_TIM_MspPostInit>

}
 80007b2:	bf00      	nop
 80007b4:	3760      	adds	r7, #96	; 0x60
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000058c 	.word	0x2000058c
 80007c0:	40012c00 	.word	0x40012c00

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2224      	movs	r2, #36	; 0x24
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f009 fa31 	bl	8009c3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_TIM2_Init+0xa4>)
 80007f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800080a:	2303      	movs	r3, #3
 800080c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000822:	2301      	movs	r3, #1
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000836:	f003 ff31 	bl	800469c <HAL_TIM_Encoder_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000840:	f000 fbe8 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_TIM2_Init+0xa4>)
 8000852:	f004 feb9 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800085c:	f000 fbda 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3730      	adds	r7, #48	; 0x30
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200005d8 	.word	0x200005d8

0800086c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <MX_TIM3_Init+0xe0>)
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <MX_TIM3_Init+0xe4>)
 8000894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_TIM3_Init+0xe0>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_TIM3_Init+0xe0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_TIM3_Init+0xe0>)
 80008a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <MX_TIM3_Init+0xe0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_TIM3_Init+0xe0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008b6:	4825      	ldr	r0, [pc, #148]	; (800094c <MX_TIM3_Init+0xe0>)
 80008b8:	f003 fd98 	bl	80043ec <HAL_TIM_PWM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008c2:	f000 fba7 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	481d      	ldr	r0, [pc, #116]	; (800094c <MX_TIM3_Init+0xe0>)
 80008d6:	f004 fe77 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008e0:	f000 fb98 	bl	8001014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e4:	2360      	movs	r3, #96	; 0x60
 80008e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <MX_TIM3_Init+0xe0>)
 80008fc:	f004 f980 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000906:	f000 fb85 	bl	8001014 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	2204      	movs	r2, #4
 8000912:	4619      	mov	r1, r3
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_TIM3_Init+0xe0>)
 8000916:	f004 f973 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000920:	f000 fb78 	bl	8001014 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	2208      	movs	r2, #8
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_TIM3_Init+0xe0>)
 8000930:	f004 f966 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800093a:	f000 fb6b 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_TIM3_Init+0xe0>)
 8000940:	f000 fcec 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000540 	.word	0x20000540
 8000950:	40000400 	.word	0x40000400

08000954 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2224      	movs	r2, #36	; 0x24
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f009 f969 	bl	8009c3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_TIM4_Init+0xa4>)
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <MX_TIM4_Init+0xa8>)
 8000976:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_TIM4_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_TIM4_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_TIM4_Init+0xa4>)
 8000986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_TIM4_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_TIM4_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000998:	2303      	movs	r3, #3
 800099a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a0:	2301      	movs	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009b0:	2301      	movs	r3, #1
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_TIM4_Init+0xa4>)
 80009c4:	f003 fe6a 	bl	800469c <HAL_TIM_Encoder_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009ce:	f000 fb21 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_TIM4_Init+0xa4>)
 80009e0:	f004 fdf2 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009ea:	f000 fb13 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000045c 	.word	0x2000045c
 80009fc:	40000800 	.word	0x40000800

08000a00 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_TIM7_Init+0x64>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <MX_TIM7_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_TIM7_Init+0x64>)
 8000a18:	2228      	movs	r2, #40	; 0x28
 8000a1a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_TIM7_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_TIM7_Init+0x64>)
 8000a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_TIM7_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_TIM7_Init+0x64>)
 8000a32:	f003 fc19 	bl	8004268 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a3c:	f000 faea 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_TIM7_Init+0x64>)
 8000a4e:	f004 fdbb 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a58:	f000 fadc 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000670 	.word	0x20000670
 8000a68:	40001400 	.word	0x40001400

08000a6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09a      	sub	sp, #104	; 0x68
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a76:	2224      	movs	r2, #36	; 0x24
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f009 f8dd 	bl	8009c3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2234      	movs	r2, #52	; 0x34
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f009 f8d1 	bl	8009c3a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000a9a:	4a2b      	ldr	r2, [pc, #172]	; (8000b48 <MX_TIM8_Init+0xdc>)
 8000a9c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000acc:	2301      	movs	r3, #1
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000adc:	2301      	movs	r3, #1
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000ae8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aec:	4619      	mov	r1, r3
 8000aee:	4815      	ldr	r0, [pc, #84]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000af0:	f003 fdd4 	bl	800469c <HAL_TIM_Encoder_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000afa:	f000 fa8b 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000b12:	f004 fd59 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000b1c:	f000 fa7a 	bl	8001014 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_TIM8_Init+0xd8>)
 8000b2e:	f004 fdcd 	bl	80056cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000b38:	f000 fa6c 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3768      	adds	r7, #104	; 0x68
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000410 	.word	0x20000410
 8000b48:	40013400 	.word	0x40013400

08000b4c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b098      	sub	sp, #96	; 0x60
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2234      	movs	r2, #52	; 0x34
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 f85e 	bl	8009c3a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b7e:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000b80:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <MX_TIM15_Init+0x108>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b84:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b90:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b96:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000baa:	4829      	ldr	r0, [pc, #164]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000bac:	f003 fc1e 	bl	80043ec <HAL_TIM_PWM_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 fa2d 	bl	8001014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000bc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4821      	ldr	r0, [pc, #132]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000bca:	f004 fcfd 	bl	80055c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000bd4:	f000 fa1e 	bl	8001014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd8:	2360      	movs	r3, #96	; 0x60
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be0:	2300      	movs	r3, #0
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000be4:	2300      	movs	r3, #0
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000bfe:	f003 ffff 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000c08:	f000 fa04 	bl	8001014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000c34:	f004 fd4a 	bl	80056cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000c3e:	f000 f9e9 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM15_Init+0x104>)
 8000c44:	f000 fb6a 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000c48:	bf00      	nop
 8000c4a:	3760      	adds	r7, #96	; 0x60
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200004a8 	.word	0x200004a8
 8000c54:	40014000 	.word	0x40014000

08000c58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2234      	movs	r2, #52	; 0x34
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f008 ffde 	bl	8009c3a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c7e:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c80:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <MX_TIM16_Init+0xf0>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48;
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65300;
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c92:	f64f 7214 	movw	r2, #65300	; 0xff14
 8000c96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000cac:	f003 fadc 	bl	8004268 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000cb6:	f000 f9ad 	bl	8001014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000cba:	4822      	ldr	r0, [pc, #136]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000cbc:	f003 fb96 	bl	80043ec <HAL_TIM_PWM_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000cc6:	f000 f9a5 	bl	8001014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cca:	2360      	movs	r3, #96	; 0x60
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4815      	ldr	r0, [pc, #84]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000cf0:	f003 ff86 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cfa:	f000 f98b 	bl	8001014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000d26:	f004 fcd1 	bl	80056cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d30:	f000 f970 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM16_Init+0xec>)
 8000d36:	f000 faf1 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000d3a:	bf00      	nop
 8000d3c:	3750      	adds	r7, #80	; 0x50
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000624 	.word	0x20000624
 8000d48:	40014400 	.word	0x40014400

08000d4c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2234      	movs	r2, #52	; 0x34
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f008 ff64 	bl	8009c3a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000d74:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <MX_TIM17_Init+0xf0>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d9e:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000da0:	f003 fa62 	bl	8004268 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000daa:	f000 f933 	bl	8001014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000dae:	4822      	ldr	r0, [pc, #136]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000db0:	f003 fb1c 	bl	80043ec <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000dba:	f000 f92b 	bl	8001014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	; 0x60
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dde:	2200      	movs	r2, #0
 8000de0:	4619      	mov	r1, r3
 8000de2:	4815      	ldr	r0, [pc, #84]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000de4:	f003 ff0c 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dee:	f000 f911 	bl	8001014 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000e1a:	f004 fc57 	bl	80056cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e24:	f000 f8f6 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <MX_TIM17_Init+0xec>)
 8000e2a:	f000 fa77 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	; 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200004f4 	.word	0x200004f4
 8000e3c:	40014800 	.word	0x40014800

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_GPIO_Init+0x8c>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <MX_GPIO_Init+0x8c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_GPIO_Init+0x8c>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_GPIO_Init+0x8c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <MX_GPIO_Init+0x8c>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_GPIO_Init+0x8c>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <MX_GPIO_Init+0x90>)
 8000e8c:	f000 feb2 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e90:	2308      	movs	r3, #8
 8000e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <MX_GPIO_Init+0x90>)
 8000ea4:	f000 fd24 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_GPIO_Init+0x90>)
 8000ec0:	f000 fd16 	bl	80018f0 <HAL_GPIO_Init>

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000400 	.word	0x48000400

08000ed4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	// encoders
	uint16_t motor1_position = TIM2->CNT;
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	83fb      	strh	r3, [r7, #30]
	uint16_t motor2_position = TIM4->CNT;
 8000ee4:	4b3f      	ldr	r3, [pc, #252]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	83bb      	strh	r3, [r7, #28]
	uint16_t motor3_position = TIM8->CNT;
 8000eea:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	837b      	strh	r3, [r7, #26]
	int32_t motor1_position_change = motor1_position - motor1_position_prev;
 8000ef0:	8bfb      	ldrh	r3, [r7, #30]
 8000ef2:	4a3e      	ldr	r2, [pc, #248]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ef4:	8812      	ldrh	r2, [r2, #0]
 8000ef6:	b292      	uxth	r2, r2
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	617b      	str	r3, [r7, #20]
	int32_t motor2_position_change = motor2_position - motor2_position_prev;
 8000efc:	8bbb      	ldrh	r3, [r7, #28]
 8000efe:	4a3c      	ldr	r2, [pc, #240]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f00:	8812      	ldrh	r2, [r2, #0]
 8000f02:	b292      	uxth	r2, r2
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
	int32_t motor3_position_change = motor3_position - motor3_position_prev;
 8000f08:	8b7b      	ldrh	r3, [r7, #26]
 8000f0a:	4a3a      	ldr	r2, [pc, #232]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
	motor1_position_prev = motor1_position;
 8000f14:	4a35      	ldr	r2, [pc, #212]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f16:	8bfb      	ldrh	r3, [r7, #30]
 8000f18:	8013      	strh	r3, [r2, #0]
	motor2_position_prev = motor2_position;
 8000f1a:	4a35      	ldr	r2, [pc, #212]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f1c:	8bbb      	ldrh	r3, [r7, #28]
 8000f1e:	8013      	strh	r3, [r2, #0]
	motor3_position_prev = motor3_position;
 8000f20:	4a34      	ldr	r2, [pc, #208]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f22:	8b7b      	ldrh	r3, [r7, #26]
 8000f24:	8013      	strh	r3, [r2, #0]
	feedback.motor1 = motor1_position_change * 60 * 60 / 64 / 19 * -1; //60hz, 60s, 64cpr, 19~=18.75 gear ratio, inverted
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4a31      	ldr	r2, [pc, #196]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	1252      	asrs	r2, r2, #9
 8000f38:	17db      	asrs	r3, r3, #31
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f3e:	6013      	str	r3, [r2, #0]
	feedback.motor2 = motor2_position_change * 60 * 60 / 64 / 19 * -1;
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f50:	1252      	asrs	r2, r2, #9
 8000f52:	17db      	asrs	r3, r3, #31
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f58:	6053      	str	r3, [r2, #4]
	feedback.motor3 = motor3_position_change * 60 * 60 / 64 / 19 * -1;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f66:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6a:	1252      	asrs	r2, r2, #9
 8000f6c:	17db      	asrs	r3, r3, #31
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f72:	6093      	str	r3, [r2, #8]
	feedback.thrower = 666;
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f76:	f240 229a 	movw	r2, #666	; 0x29a
 8000f7a:	60da      	str	r2, [r3, #12]

	// pwm pid

	// wait for thrower motor to enable
	if (esc_wait_ticker > 0) {
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0xc0>
		esc_wait_ticker -= 1;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000f92:	701a      	strb	r2, [r3, #0]
	}
	// timeout
	if (command_received_ticker > 0) {
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <HAL_TIM_PeriodElapsedCallback+0xda>
		command_received_ticker -= 1;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000faa:	701a      	strb	r2, [r3, #0]
		TIM3->CCR3 = 0;

		// stop thrower
		TIM16->CCR1 = 0;
	}
}
 8000fac:	e014      	b.n	8000fd8 <HAL_TIM_PeriodElapsedCallback+0x104>
		TIM1->CCR1 = 0;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = 0;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fd8:	bf00      	nop
 8000fda:	3724      	adds	r7, #36	; 0x24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40000800 	.word	0x40000800
 8000fe8:	40013400 	.word	0x40013400
 8000fec:	200001e8 	.word	0x200001e8
 8000ff0:	200001ea 	.word	0x200001ea
 8000ff4:	200001ec 	.word	0x200001ec
 8000ff8:	6bca1af3 	.word	0x6bca1af3
 8000ffc:	200001d0 	.word	0x200001d0
 8001000:	200001e7 	.word	0x200001e7
 8001004:	200001e5 	.word	0x200001e5
 8001008:	40012c00 	.word	0x40012c00
 800100c:	40000400 	.word	0x40000400
 8001010:	40014400 	.word	0x40014400

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x44>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x44>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6613      	str	r3, [r2, #96]	; 0x60
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_MspInit+0x44>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6593      	str	r3, [r2, #88]	; 0x58
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800105a:	f002 fa09 	bl	8003470 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_TIM_PWM_MspInit+0x80>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10c      	bne.n	8001098 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001096:	e022      	b.n	80010de <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_TIM_PWM_MspInit+0x88>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10c      	bne.n	80010bc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
}
 80010ba:	e010      	b.n	80010de <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_TIM_PWM_MspInit+0x8c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10b      	bne.n	80010de <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6613      	str	r3, [r2, #96]	; 0x60
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_TIM_PWM_MspInit+0x84>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
}
 80010de:	bf00      	nop
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40014000 	.word	0x40014000

080010fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800111c:	d129      	bne.n	8001172 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	4b54      	ldr	r3, [pc, #336]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a53      	ldr	r2, [pc, #332]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b51      	ldr	r3, [pc, #324]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114e:	2303      	movs	r3, #3
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800115e:	2301      	movs	r3, #1
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fbc0 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001170:	e079      	b.n	8001266 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a3f      	ldr	r2, [pc, #252]	; (8001274 <HAL_TIM_Encoder_MspInit+0x178>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d128      	bne.n	80011ce <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800117c:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	4a3b      	ldr	r2, [pc, #236]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6593      	str	r3, [r2, #88]	; 0x58
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a35      	ldr	r2, [pc, #212]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ac:	23c0      	movs	r3, #192	; 0xc0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	482c      	ldr	r0, [pc, #176]	; (8001278 <HAL_TIM_Encoder_MspInit+0x17c>)
 80011c8:	f000 fb92 	bl	80018f0 <HAL_GPIO_Init>
}
 80011cc:	e04b      	b.n	8001266 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a2a      	ldr	r2, [pc, #168]	; (800127c <HAL_TIM_Encoder_MspInit+0x180>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d146      	bne.n	8001266 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 80011da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011dc:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 80011de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e2:	6613      	str	r3, [r2, #96]	; 0x60
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 80011e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_TIM_Encoder_MspInit+0x174>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001232:	2302      	movs	r3, #2
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f000 fb56 	bl	80018f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001256:	230a      	movs	r3, #10
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001262:	f000 fb45 	bl	80018f0 <HAL_GPIO_Init>
}
 8001266:	bf00      	nop
 8001268:	3738      	adds	r7, #56	; 0x38
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40000800 	.word	0x40000800
 8001278:	48000400 	.word	0x48000400
 800127c:	40013400 	.word	0x40013400

08001280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_TIM_Base_MspInit+0x8c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d114      	bne.n	80012bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6593      	str	r3, [r2, #88]	; 0x58
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2037      	movs	r0, #55	; 0x37
 80012b0:	f000 fae9 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012b4:	2037      	movs	r0, #55	; 0x37
 80012b6:	f000 fb00 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012ba:	e022      	b.n	8001302 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <HAL_TIM_Base_MspInit+0x94>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10c      	bne.n	80012e0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	6613      	str	r3, [r2, #96]	; 0x60
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
}
 80012de:	e010      	b.n	8001302 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_TIM_Base_MspInit+0x98>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10b      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f4:	6613      	str	r3, [r2, #96]	; 0x60
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_TIM_Base_MspInit+0x90>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40001400 	.word	0x40001400
 8001310:	40021000 	.word	0x40021000
 8001314:	40014400 	.word	0x40014400
 8001318:	40014800 	.word	0x40014800

0800131c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_TIM_MspPostInit+0x1b4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d11e      	bne.n	800137c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	623b      	str	r3, [r7, #32]
 8001354:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001356:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001368:	2306      	movs	r3, #6
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f000 fabb 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800137a:	e0a5      	b.n	80014c8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a55      	ldr	r2, [pc, #340]	; (80014d8 <HAL_TIM_MspPostInit+0x1bc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d139      	bne.n	80013fa <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80013b6:	2350      	movs	r3, #80	; 0x50
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013c6:	2302      	movs	r3, #2
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f000 fa8c 	bl	80018f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013e8:	2302      	movs	r3, #2
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	4619      	mov	r1, r3
 80013f2:	483a      	ldr	r0, [pc, #232]	; (80014dc <HAL_TIM_MspPostInit+0x1c0>)
 80013f4:	f000 fa7c 	bl	80018f0 <HAL_GPIO_Init>
}
 80013f8:	e066      	b.n	80014c8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_TIM_MspPostInit+0x1c4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d11d      	bne.n	8001440 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800141c:	2304      	movs	r3, #4
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800142c:	2309      	movs	r3, #9
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f000 fa59 	bl	80018f0 <HAL_GPIO_Init>
}
 800143e:	e043      	b.n	80014c8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_TIM_MspPostInit+0x1c8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11c      	bne.n	8001484 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001462:	2310      	movs	r3, #16
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001472:	2301      	movs	r3, #1
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4817      	ldr	r0, [pc, #92]	; (80014dc <HAL_TIM_MspPostInit+0x1c0>)
 800147e:	f000 fa37 	bl	80018f0 <HAL_GPIO_Init>
}
 8001482:	e021      	b.n	80014c8 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_TIM_MspPostInit+0x1cc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d11c      	bne.n	80014c8 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_TIM_MspPostInit+0x1b8>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80014b6:	2301      	movs	r3, #1
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f000 fa14 	bl	80018f0 <HAL_GPIO_Init>
}
 80014c8:	bf00      	nop
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40012c00 	.word	0x40012c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40000400 	.word	0x40000400
 80014dc:	48000400 	.word	0x48000400
 80014e0:	40014000 	.word	0x40014000
 80014e4:	40014400 	.word	0x40014400
 80014e8:	40014800 	.word	0x40014800

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 f8a8 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <USB_LP_IRQHandler+0x10>)
 800154e:	f000 fc8a 	bl	8001e66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20001360 	.word	0x20001360

0800155c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM7_IRQHandler+0x10>)
 8001562:	f003 f9ce 	bl	8004902 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000670 	.word	0x20000670

08001570 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <SystemInit+0x28>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <SystemInit+0x28>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SystemInit+0x28>)
 8001586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158a:	609a      	str	r2, [r3, #8]
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800159e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a2:	490e      	ldr	r1, [pc, #56]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b8:	4c0b      	ldr	r4, [pc, #44]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c6:	f7ff ffd3 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f008 fb07 	bl	8009bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ce:	f7fe ff0f 	bl	80003f0 <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   r0, =_estack
 80015d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80015e0:	08009cc4 	.word	0x08009cc4
  ldr r2, =_sbss
 80015e4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80015e8:	20001654 	.word	0x20001654

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>

080015ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f939 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f80e 	bl	8001620 <HAL_InitTick>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	e001      	b.n	8001614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001610:	f7ff fd08 	bl	8001024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001614:	79fb      	ldrb	r3, [r7, #7]

}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_InitTick+0x68>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d022      	beq.n	800167a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_InitTick+0x6c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_InitTick+0x68>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001640:	fbb1 f3f3 	udiv	r3, r1, r3
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f944 	bl	80018d6 <HAL_SYSTICK_Config>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10f      	bne.n	8001674 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	d809      	bhi.n	800166e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165a:	2200      	movs	r2, #0
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	f04f 30ff 	mov.w	r0, #4294967295
 8001662:	f000 f910 	bl	8001886 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_InitTick+0x70>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e007      	b.n	800167e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e004      	b.n	800167e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000024 	.word	0x20000024
 800168c:	2000001c 	.word	0x2000001c
 8001690:	20000020 	.word	0x20000020

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x1c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x20>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <HAL_IncTick+0x1c>)
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	200006bc 	.word	0x200006bc
 80016b4:	20000024 	.word	0x20000024

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200006bc 	.word	0x200006bc

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff40 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff33 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa4 	bl	800182c <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018fe:	e15a      	b.n	8001bb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 814c 	beq.w	8001bb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d00b      	beq.n	8001938 <HAL_GPIO_Init+0x48>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192c:	2b11      	cmp	r3, #17
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b12      	cmp	r3, #18
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 0201 	and.w	r2, r3, #1
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0xea>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d123      	bne.n	8001a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	6939      	ldr	r1, [r7, #16]
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0203 	and.w	r2, r3, #3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80a6 	beq.w	8001bb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <HAL_GPIO_Init+0x2e4>)
 8001a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a68:	4a5a      	ldr	r2, [pc, #360]	; (8001bd4 <HAL_GPIO_Init+0x2e4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a70:	4b58      	ldr	r3, [pc, #352]	; (8001bd4 <HAL_GPIO_Init+0x2e4>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7c:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa6:	d01f      	beq.n	8001ae8 <HAL_GPIO_Init+0x1f8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <HAL_GPIO_Init+0x2ec>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d019      	beq.n	8001ae4 <HAL_GPIO_Init+0x1f4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d013      	beq.n	8001ae0 <HAL_GPIO_Init+0x1f0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a4a      	ldr	r2, [pc, #296]	; (8001be4 <HAL_GPIO_Init+0x2f4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d00d      	beq.n	8001adc <HAL_GPIO_Init+0x1ec>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a49      	ldr	r2, [pc, #292]	; (8001be8 <HAL_GPIO_Init+0x2f8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_GPIO_Init+0x1e8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a48      	ldr	r2, [pc, #288]	; (8001bec <HAL_GPIO_Init+0x2fc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	e00a      	b.n	8001aea <HAL_GPIO_Init+0x1fa>
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	e008      	b.n	8001aea <HAL_GPIO_Init+0x1fa>
 8001ad8:	2304      	movs	r3, #4
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x1fa>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x1fa>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x1fa>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x1fa>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afa:	4937      	ldr	r1, [pc, #220]	; (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2c:	4a30      	ldr	r2, [pc, #192]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b56:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001baa:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_GPIO_Init+0x300>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f ae9d 	bne.w	8001900 <HAL_GPIO_Init+0x10>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	48000400 	.word	0x48000400
 8001be0:	48000800 	.word	0x48000800
 8001be4:	48000c00 	.word	0x48000c00
 8001be8:	48001000 	.word	0x48001000
 8001bec:	48001400 	.word	0x48001400
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43d9      	mvns	r1, r3
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	400b      	ands	r3, r1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af06      	add	r7, sp, #24
 8001c5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0d7      	b.n	8001e1a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f007 fcbc 	bl	80095fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2203      	movs	r2, #3
 8001c88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fe18 	bl	80058c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	e04c      	b.n	8001d36 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3301      	adds	r3, #1
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	b298      	uxth	r0, r3
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3336      	adds	r3, #54	; 0x36
 8001cda:	4602      	mov	r2, r0
 8001cdc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	3303      	adds	r3, #3
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	333c      	adds	r3, #60	; 0x3c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3340      	adds	r3, #64	; 0x40
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3301      	adds	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3ad      	bcc.n	8001c9c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e044      	b.n	8001dd0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3b5      	bcc.n	8001d46 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	687e      	ldr	r6, [r7, #4]
 8001de2:	466d      	mov	r5, sp
 8001de4:	f106 0410 	add.w	r4, r6, #16
 8001de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	602b      	str	r3, [r5, #0]
 8001df0:	1d33      	adds	r3, r6, #4
 8001df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f003 fd81 	bl	80058fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f001 fa5e 	bl	80032d4 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_Start+0x16>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e012      	b.n	8001e5e <HAL_PCD_Start+0x3c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fd27 	bl	8005898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f005 fd13 	bl	800787a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f005 fd18 	bl	80078a8 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e82:	d102      	bne.n	8001e8a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb5b 	bl	8002540 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f005 fd0a 	bl	80078a8 <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9e:	d112      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f007 fc1a 	bl	80096f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f91e 	bl	8002102 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f005 fcec 	bl	80078a8 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eda:	d10b      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f005 fcd5 	bl	80078a8 <USB_ReadInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f08:	d10b      	bne.n	8001f22 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 fcbe 	bl	80078a8 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f36:	d133      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0204 	bic.w	r2, r2, #4
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0208 	bic.w	r2, r2, #8
 8001f62:	b292      	uxth	r2, r2
 8001f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f007 fdad 	bl	8009adc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f007 fbee 	bl	8009764 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f9a:	b292      	uxth	r2, r2
 8001f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f005 fc7f 	bl	80078a8 <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb4:	d126      	bne.n	8002004 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0208 	orr.w	r2, r2, #8
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0204 	orr.w	r2, r2, #4
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f007 fb96 	bl	8009730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f005 fc4d 	bl	80078a8 <USB_ReadInterrupts>
 800200e:	4603      	mov	r3, r0
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d13f      	bne.n	8002098 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800202a:	b292      	uxth	r2, r2
 800202c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d12b      	bne.n	8002092 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0204 	orr.w	r2, r2, #4
 800204c:	b292      	uxth	r2, r2
 800204e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0208 	orr.w	r2, r2, #8
 8002064:	b292      	uxth	r2, r2
 8002066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800207a:	b29b      	uxth	r3, r3
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002088:	2101      	movs	r1, #1
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f007 fd26 	bl	8009adc <HAL_PCDEx_LPM_Callback>
 8002090:	e002      	b.n	8002098 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f007 fb4c 	bl	8009730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f005 fc03 	bl	80078a8 <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ac:	d10e      	bne.n	80020cc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020c0:	b292      	uxth	r2, r2
 80020c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f007 fb05 	bl	80096d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f005 fbe9 	bl	80078a8 <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e0:	d10b      	bne.n	80020fa <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f4:	b292      	uxth	r2, r2
 80020f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_PCD_SetAddress+0x1a>
 8002118:	2302      	movs	r3, #2
 800211a:	e013      	b.n	8002144 <HAL_PCD_SetAddress+0x42>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fb8c 	bl	8007852 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	70fb      	strb	r3, [r7, #3]
 800215e:	460b      	mov	r3, r1
 8002160:	803b      	strh	r3, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800216a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800216e:	2b00      	cmp	r3, #0
 8002170:	da0e      	bge.n	8002190 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	705a      	strb	r2, [r3, #1]
 800218e:	e00e      	b.n	80021ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 0207 	and.w	r2, r3, #7
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021ba:	883a      	ldrh	r2, [r7, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	78ba      	ldrb	r2, [r7, #2]
 80021c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021d8:	78bb      	ldrb	r3, [r7, #2]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d102      	bne.n	80021e4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_PCD_EP_Open+0xa6>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e00e      	b.n	8002210 <HAL_PCD_EP_Open+0xc4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68f9      	ldr	r1, [r7, #12]
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fb9d 	bl	8005940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800220e:	7afb      	ldrb	r3, [r7, #11]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002228:	2b00      	cmp	r3, #0
 800222a:	da0e      	bge.n	800224a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	705a      	strb	r2, [r3, #1]
 8002248:	e00e      	b.n	8002268 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 0207 	and.w	r2, r3, #7
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_PCD_EP_Close+0x6a>
 800227e:	2302      	movs	r3, #2
 8002280:	e00e      	b.n	80022a0 <HAL_PCD_EP_Close+0x88>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	f003 fec3 	bl	800601c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	460b      	mov	r3, r1
 80022b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b8:	7afb      	ldrb	r3, [r7, #11]
 80022ba:	f003 0207 	and.w	r2, r3, #7
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2200      	movs	r2, #0
 80022e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	4618      	mov	r0, r3
 8002306:	f004 f876 	bl	80063f6 <USB_EPStartXfer>
 800230a:	e005      	b.n	8002318 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6979      	ldr	r1, [r7, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	f004 f86f 	bl	80063f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0207 	and.w	r2, r3, #7
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002344:	681b      	ldr	r3, [r3, #0]
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	460b      	mov	r3, r1
 8002360:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2201      	movs	r2, #1
 800239c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6979      	ldr	r1, [r7, #20]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 f81b 	bl	80063f6 <USB_EPStartXfer>
 80023c0:	e005      	b.n	80023ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6979      	ldr	r1, [r7, #20]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 f814 	bl	80063f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 0207 	and.w	r2, r3, #7
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d901      	bls.n	80023f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e04c      	b.n	8002490 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	da0e      	bge.n	800241c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	705a      	strb	r2, [r3, #1]
 800241a:	e00c      	b.n	8002436 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	b2da      	uxtb	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_PCD_EP_SetStall+0x7e>
 8002452:	2302      	movs	r3, #2
 8002454:	e01c      	b.n	8002490 <HAL_PCD_EP_SetStall+0xb8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	4618      	mov	r0, r3
 8002466:	f005 f8f5 	bl	8007654 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	2b00      	cmp	r3, #0
 8002472:	d108      	bne.n	8002486 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f005 fa21 	bl	80078c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 020f 	and.w	r2, r3, #15
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d901      	bls.n	80024b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e040      	b.n	8002538 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	da0e      	bge.n	80024dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	705a      	strb	r2, [r3, #1]
 80024da:	e00e      	b.n	80024fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	f003 0207 	and.w	r2, r3, #7
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	b2da      	uxtb	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_PCD_EP_ClrStall+0x82>
 8002516:	2302      	movs	r3, #2
 8002518:	e00e      	b.n	8002538 <HAL_PCD_EP_ClrStall+0xa0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f005 f8e4 	bl	80076f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002548:	e2d1      	b.n	8002aee <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002552:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002560:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002564:	2b00      	cmp	r3, #0
 8002566:	f040 8152 	bne.w	800280e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800256a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d150      	bne.n	8002616 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002584:	81fb      	strh	r3, [r7, #14]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002594:	b29b      	uxth	r3, r3
 8002596:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3328      	adds	r3, #40	; 0x28
 800259c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	441a      	add	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025d4:	2100      	movs	r1, #0
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f007 f863 	bl	80096a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8282 	beq.w	8002aee <PCD_EP_ISR_Handler+0x5ae>
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 827d 	bne.w	8002aee <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b292      	uxth	r2, r2
 8002608:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002614:	e26b      	b.n	8002aee <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002626:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262c:	2b00      	cmp	r3, #0
 800262e:	d032      	beq.n	8002696 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	4413      	add	r3, r2
 800264a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800266a:	b29b      	uxth	r3, r3
 800266c:	f005 f979 	bl	8007962 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29a      	uxth	r2, r3
 8002678:	f640 738f 	movw	r3, #3983	; 0xf8f
 800267c:	4013      	ands	r3, r2
 800267e:	823b      	strh	r3, [r7, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	8a3a      	ldrh	r2, [r7, #16]
 8002686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268a:	b292      	uxth	r2, r2
 800268c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f006 ffda 	bl	8009648 <HAL_PCD_SetupStageCallback>
 8002694:	e22b      	b.n	8002aee <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002696:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800269a:	2b00      	cmp	r3, #0
 800269c:	f280 8227 	bge.w	8002aee <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026ac:	4013      	ands	r3, r2
 80026ae:	83bb      	strh	r3, [r7, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	8bba      	ldrh	r2, [r7, #28]
 80026b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ba:	b292      	uxth	r2, r2
 80026bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d019      	beq.n	8002722 <PCD_EP_ISR_Handler+0x1e2>
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	6959      	ldr	r1, [r3, #20]
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002706:	b29b      	uxth	r3, r3
 8002708:	f005 f92b 	bl	8007962 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	441a      	add	r2, r3
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800271a:	2100      	movs	r1, #0
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f006 ffa5 	bl	800966c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d112      	bne.n	8002770 <PCD_EP_ISR_Handler+0x230>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002754:	b29a      	uxth	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	e02f      	b.n	80027d0 <PCD_EP_ISR_Handler+0x290>
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b3e      	cmp	r3, #62	; 0x3e
 8002776:	d813      	bhi.n	80027a0 <PCD_EP_ISR_Handler+0x260>
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <PCD_EP_ISR_Handler+0x252>
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	3301      	adds	r3, #1
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	b29b      	uxth	r3, r3
 8002796:	029b      	lsls	r3, r3, #10
 8002798:	b29a      	uxth	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	e017      	b.n	80027d0 <PCD_EP_ISR_Handler+0x290>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <PCD_EP_ISR_Handler+0x27a>
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	3b01      	subs	r3, #1
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	b29b      	uxth	r3, r3
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	827b      	strh	r3, [r7, #18]
 80027e2:	8a7b      	ldrh	r3, [r7, #18]
 80027e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027e8:	827b      	strh	r3, [r7, #18]
 80027ea:	8a7b      	ldrh	r3, [r7, #18]
 80027ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027f0:	827b      	strh	r3, [r7, #18]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	8a7b      	ldrh	r3, [r7, #18]
 80027f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002808:	b29b      	uxth	r3, r3
 800280a:	8013      	strh	r3, [r2, #0]
 800280c:	e16f      	b.n	8002aee <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002820:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002824:	2b00      	cmp	r3, #0
 8002826:	f280 80e4 	bge.w	80029f2 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002840:	4013      	ands	r3, r2
 8002842:	853b      	strh	r3, [r7, #40]	; 0x28
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002858:	b292      	uxth	r2, r2
 800285a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800285c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	7b1b      	ldrb	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d120      	bne.n	80028bc <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002882:	b29b      	uxth	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	4413      	add	r3, r2
 8002894:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80028a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8083 	beq.w	80029ae <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	6959      	ldr	r1, [r3, #20]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	88da      	ldrh	r2, [r3, #6]
 80028b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b6:	f005 f854 	bl	8007962 <USB_ReadPMA>
 80028ba:	e078      	b.n	80029ae <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	78db      	ldrb	r3, [r3, #3]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d108      	bne.n	80028d6 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028c6:	461a      	mov	r2, r3
 80028c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f91d 	bl	8002b0a <HAL_PCD_EP_DB_Receive>
 80028d0:	4603      	mov	r3, r0
 80028d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028d4:	e06b      	b.n	80029ae <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	441a      	add	r2, r3
 8002900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01f      	beq.n	8002970 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	4413      	add	r3, r2
 800294a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002954:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002956:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002958:	2b00      	cmp	r3, #0
 800295a:	d028      	beq.n	80029ae <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	6959      	ldr	r1, [r3, #20]
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	891a      	ldrh	r2, [r3, #8]
 8002968:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800296a:	f004 fffa 	bl	8007962 <USB_ReadPMA>
 800296e:	e01e      	b.n	80029ae <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4413      	add	r3, r2
 800298a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002994:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	6959      	ldr	r1, [r3, #20]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	895a      	ldrh	r2, [r3, #10]
 80029a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029aa:	f004 ffda 	bl	8007962 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b4:	441a      	add	r2, r3
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029c0:	441a      	add	r2, r3
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <PCD_EP_ISR_Handler+0x498>
 80029ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d206      	bcs.n	80029e6 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f006 fe44 	bl	800966c <HAL_PCD_DataOutStageCallback>
 80029e4:	e005      	b.n	80029f2 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fd02 	bl	80063f6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d078      	beq.n	8002aee <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80029fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	843b      	strh	r3, [r7, #32]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	8c3b      	ldrh	r3, [r7, #32]
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	78db      	ldrb	r3, [r3, #3]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d108      	bne.n	8002a62 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d144      	bne.n	8002ae2 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d13f      	bne.n	8002ae2 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a86:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	8bfb      	ldrh	r3, [r7, #30]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d906      	bls.n	8002aa0 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	8bfb      	ldrh	r3, [r7, #30]
 8002a98:	1ad2      	subs	r2, r2, r3
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	619a      	str	r2, [r3, #24]
 8002a9e:	e002      	b.n	8002aa6 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f006 fdf4 	bl	80096a2 <HAL_PCD_DataInStageCallback>
 8002aba:	e018      	b.n	8002aee <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	8bfb      	ldrh	r3, [r7, #30]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	8bfb      	ldrh	r3, [r7, #30]
 8002ace:	441a      	add	r2, r3
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 fc8b 	bl	80063f6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002ae0:	e005      	b.n	8002aee <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ae2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f917 	bl	8002d1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f6ff ad25 	blt.w	800254a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3738      	adds	r7, #56	; 0x38
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b088      	sub	sp, #32
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	4613      	mov	r3, r2
 8002b16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d07c      	beq.n	8002c1c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	8b7b      	ldrh	r3, [r7, #26]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d306      	bcc.n	8002b60 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	8b7b      	ldrh	r3, [r7, #26]
 8002b58:	1ad2      	subs	r2, r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	e002      	b.n	8002b66 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d123      	bne.n	8002bb6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b88:	833b      	strh	r3, [r7, #24]
 8002b8a:	8b3b      	ldrh	r3, [r7, #24]
 8002b8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b90:	833b      	strh	r3, [r7, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	441a      	add	r2, r3
 8002ba0:	8b3b      	ldrh	r3, [r7, #24]
 8002ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01f      	beq.n	8002c00 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bda:	82fb      	strh	r3, [r7, #22]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	8afb      	ldrh	r3, [r7, #22]
 8002bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c00:	8b7b      	ldrh	r3, [r7, #26]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8085 	beq.w	8002d12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6959      	ldr	r1, [r3, #20]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	891a      	ldrh	r2, [r3, #8]
 8002c14:	8b7b      	ldrh	r3, [r7, #26]
 8002c16:	f004 fea4 	bl	8007962 <USB_ReadPMA>
 8002c1a:	e07a      	b.n	8002d12 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	8b7b      	ldrh	r3, [r7, #26]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d306      	bcc.n	8002c5a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	699a      	ldr	r2, [r3, #24]
 8002c50:	8b7b      	ldrh	r3, [r7, #26]
 8002c52:	1ad2      	subs	r2, r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	619a      	str	r2, [r3, #24]
 8002c58:	e002      	b.n	8002c60 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d123      	bne.n	8002cb0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	83fb      	strh	r3, [r7, #30]
 8002c84:	8bfb      	ldrh	r3, [r7, #30]
 8002c86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c8a:	83fb      	strh	r3, [r7, #30]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	8bfb      	ldrh	r3, [r7, #30]
 8002c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11f      	bne.n	8002cfa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd4:	83bb      	strh	r3, [r7, #28]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	8bbb      	ldrh	r3, [r7, #28]
 8002ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cfa:	8b7b      	ldrh	r3, [r7, #26]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6959      	ldr	r1, [r3, #20]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	895a      	ldrh	r2, [r3, #10]
 8002d0c:	8b7b      	ldrh	r3, [r7, #26]
 8002d0e:	f004 fe28 	bl	8007962 <USB_ReadPMA>
    }
  }

  return count;
 8002d12:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b092      	sub	sp, #72	; 0x48
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8130 	beq.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d906      	bls.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d6c:	1ad2      	subs	r2, r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	619a      	str	r2, [r3, #24]
 8002d72:	e002      	b.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d12c      	bne.n	8002ddc <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4619      	mov	r1, r3
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f006 fc8a 	bl	80096a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 822d 	beq.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db4:	827b      	strh	r3, [r7, #18]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	441a      	add	r2, r3
 8002dc4:	8a7b      	ldrh	r3, [r7, #18]
 8002dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	8013      	strh	r3, [r2, #0]
 8002dda:	e20b      	b.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01f      	beq.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e00:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	f040 81e1 	bne.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e38:	441a      	add	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e44:	441a      	add	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d309      	bcc.n	8002e6a <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	621a      	str	r2, [r3, #32]
 8002e68:	e014      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002e72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e74:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e7e:	e009      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d155      	bne.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00da      	lsls	r2, r3, #3
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d112      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	e047      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x264>
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ef4:	d811      	bhi.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	3301      	adds	r3, #1
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e032      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x214>
 8002f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	029b      	lsls	r3, r3, #10
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e01b      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d117      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x264>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	4413      	add	r3, r2
 8002f66:	623b      	str	r3, [r7, #32]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	00da      	lsls	r2, r3, #3
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	891a      	ldrh	r2, [r3, #8]
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f004 fca6 	bl	80078e0 <USB_WritePMA>
 8002f94:	e12e      	b.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fba:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d306      	bcc.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fcc:	1ad2      	subs	r2, r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	619a      	str	r2, [r3, #24]
 8002fd2:	e002      	b.n	8002fda <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d12c      	bne.n	800303c <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f006 fb5a 	bl	80096a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f040 80fd 	bne.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003014:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	441a      	add	r2, r3
 8003024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800302a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	b29b      	uxth	r3, r3
 8003038:	8013      	strh	r3, [r2, #0]
 800303a:	e0db      	b.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11f      	bne.n	8003086 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003060:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	441a      	add	r2, r3
 8003070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800307a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800307e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003082:	b29b      	uxth	r3, r3
 8003084:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 80b1 	bne.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003098:	441a      	add	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030a4:	441a      	add	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d309      	bcc.n	80030ca <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c2:	1ad2      	subs	r2, r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	621a      	str	r2, [r3, #32]
 80030c8:	e014      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80030d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030de:	e009      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d155      	bne.n	80031ae <HAL_PCD_EP_DB_Transmit+0x492>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	4413      	add	r3, r2
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	00da      	lsls	r2, r3, #3
 8003120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003122:	4413      	add	r3, r2
 8003124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003128:	643b      	str	r3, [r7, #64]	; 0x40
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	2b00      	cmp	r3, #0
 800312e:	d112      	bne.n	8003156 <HAL_PCD_EP_DB_Transmit+0x43a>
 8003130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313a:	b29a      	uxth	r2, r3
 800313c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313e:	801a      	strh	r2, [r3, #0]
 8003140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314e:	b29a      	uxth	r2, r3
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	e044      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	2b3e      	cmp	r3, #62	; 0x3e
 800315a:	d811      	bhi.n	8003180 <HAL_PCD_EP_DB_Transmit+0x464>
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_PCD_EP_DB_Transmit+0x456>
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	3301      	adds	r3, #1
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	b29b      	uxth	r3, r3
 8003176:	029b      	lsls	r3, r3, #10
 8003178:	b29a      	uxth	r2, r3
 800317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317c:	801a      	strh	r2, [r3, #0]
 800317e:	e02f      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003192:	3b01      	subs	r3, #1
 8003194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	b29b      	uxth	r3, r3
 800319a:	029b      	lsls	r3, r3, #10
 800319c:	b29b      	uxth	r3, r3
 800319e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	e018      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d114      	bne.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	4413      	add	r3, r2
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00da      	lsls	r2, r3, #3
 80031ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	b29a      	uxth	r2, r3
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6959      	ldr	r1, [r3, #20]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	895a      	ldrh	r2, [r3, #10]
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f004 fb76 	bl	80078e0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320e:	823b      	strh	r3, [r7, #16]
 8003210:	8a3b      	ldrh	r3, [r7, #16]
 8003212:	f083 0310 	eor.w	r3, r3, #16
 8003216:	823b      	strh	r3, [r7, #16]
 8003218:	8a3b      	ldrh	r3, [r7, #16]
 800321a:	f083 0320 	eor.w	r3, r3, #32
 800321e:	823b      	strh	r3, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	441a      	add	r2, r3
 800322e:	8a3b      	ldrh	r3, [r7, #16]
 8003230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003240:	b29b      	uxth	r3, r3
 8003242:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3748      	adds	r7, #72	; 0x48
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800324e:	b480      	push	{r7}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	817b      	strh	r3, [r7, #10]
 800325c:	4613      	mov	r3, r2
 800325e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003260:	897b      	ldrh	r3, [r7, #10]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326c:	897b      	ldrh	r3, [r7, #10]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e009      	b.n	8003298 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003284:	897a      	ldrh	r2, [r7, #10]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003298:	893b      	ldrh	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	80da      	strh	r2, [r3, #6]
 80032ac:	e00b      	b.n	80032c6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2201      	movs	r2, #1
 80032b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800330c:	b29b      	uxth	r3, r3
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d141      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003336:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d131      	bne.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003344:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	4a46      	ldr	r2, [pc, #280]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003354:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800335c:	4a41      	ldr	r2, [pc, #260]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003364:	4b40      	ldr	r3, [pc, #256]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2232      	movs	r2, #50	; 0x32
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	4a3f      	ldr	r2, [pc, #252]	; (800346c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0c9b      	lsrs	r3, r3, #18
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337a:	e002      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3b01      	subs	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338e:	d102      	bne.n	8003396 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f2      	bne.n	800337c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d158      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e057      	b.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a8:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ae:	4a2d      	ldr	r2, [pc, #180]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033b8:	e04d      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d141      	bne.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	d131      	bne.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d6:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2232      	movs	r2, #50	; 0x32
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	0c9b      	lsrs	r3, r3, #18
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003406:	e002      	b.n	800340e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3b01      	subs	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341a:	d102      	bne.n	8003422 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f2      	bne.n	8003408 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342e:	d112      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e011      	b.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003444:	e007      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003454:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40007000 	.word	0x40007000
 8003468:	2000001c 	.word	0x2000001c
 800346c:	431bde83 	.word	0x431bde83

08003470 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800347a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347e:	6093      	str	r3, [r2, #8]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40007000 	.word	0x40007000

08003490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e308      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d075      	beq.n	800359a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ae:	4ba3      	ldr	r3, [pc, #652]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b8:	4ba0      	ldr	r3, [pc, #640]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_OscConfig+0x3e>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_OscConfig+0x44>
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d10b      	bne.n	80034ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	4b99      	ldr	r3, [pc, #612]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05b      	beq.n	8003598 <HAL_RCC_OscConfig+0x108>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d157      	bne.n	8003598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e2e3      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d106      	bne.n	8003504 <HAL_RCC_OscConfig+0x74>
 80034f6:	4b91      	ldr	r3, [pc, #580]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a90      	ldr	r2, [pc, #576]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e01d      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x98>
 800350e:	4b8b      	ldr	r3, [pc, #556]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a8a      	ldr	r2, [pc, #552]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b88      	ldr	r3, [pc, #544]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a87      	ldr	r2, [pc, #540]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e00b      	b.n	8003540 <HAL_RCC_OscConfig+0xb0>
 8003528:	4b84      	ldr	r3, [pc, #528]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800352e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b81      	ldr	r3, [pc, #516]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a80      	ldr	r2, [pc, #512]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800353a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe f8b6 	bl	80016b8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe f8b2 	bl	80016b8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e2a8      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0xc0>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe f8a2 	bl	80016b8 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe f89e 	bl	80016b8 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e294      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800358a:	4b6c      	ldr	r3, [pc, #432]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0xe8>
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d075      	beq.n	8003692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a6:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b0:	4b62      	ldr	r3, [pc, #392]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_OscConfig+0x136>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_OscConfig+0x13c>
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d11f      	bne.n	800360c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035cc:	4b5b      	ldr	r3, [pc, #364]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x154>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e267      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b55      	ldr	r3, [pc, #340]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	4952      	ldr	r1, [pc, #328]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035f8:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_RCC_OscConfig+0x2b0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f80f 	bl	8001620 <HAL_InitTick>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d043      	beq.n	8003690 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e253      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d023      	beq.n	800365c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b49      	ldr	r3, [pc, #292]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a48      	ldr	r2, [pc, #288]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f84a 	bl	80016b8 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe f846 	bl	80016b8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e23c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363a:	4b40      	ldr	r3, [pc, #256]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	061b      	lsls	r3, r3, #24
 8003654:	4939      	ldr	r1, [pc, #228]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
 800365a:	e01a      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365c:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a36      	ldr	r2, [pc, #216]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe f826 	bl	80016b8 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003670:	f7fe f822 	bl	80016b8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e218      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003682:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1e0>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03c      	beq.n	8003718 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01c      	beq.n	80036e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b25      	ldr	r3, [pc, #148]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ac:	4a23      	ldr	r2, [pc, #140]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fd ffff 	bl	80016b8 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036be:	f7fd fffb 	bl	80016b8 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1f1      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ef      	beq.n	80036be <HAL_RCC_OscConfig+0x22e>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80036e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd ffe2 	bl	80016b8 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fd ffde 	bl	80016b8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e1d4      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800370c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ef      	bne.n	80036f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80ab 	beq.w	800387c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_RCC_OscConfig+0x2ac>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_RCC_OscConfig+0x2b4>
 8003736:	2301      	movs	r3, #1
 8003738:	e005      	b.n	8003746 <HAL_RCC_OscConfig+0x2b6>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	20000020 	.word	0x20000020
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4baf      	ldr	r3, [pc, #700]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	4aae      	ldr	r2, [pc, #696]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6593      	str	r3, [r2, #88]	; 0x58
 8003756:	4bac      	ldr	r3, [pc, #688]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003762:	2301      	movs	r3, #1
 8003764:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003766:	4ba9      	ldr	r3, [pc, #676]	; (8003a0c <HAL_RCC_OscConfig+0x57c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d118      	bne.n	80037a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003772:	4ba6      	ldr	r3, [pc, #664]	; (8003a0c <HAL_RCC_OscConfig+0x57c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4aa5      	ldr	r2, [pc, #660]	; (8003a0c <HAL_RCC_OscConfig+0x57c>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377e:	f7fd ff9b 	bl	80016b8 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fd ff97 	bl	80016b8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e18d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003798:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <HAL_RCC_OscConfig+0x57c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d108      	bne.n	80037be <HAL_RCC_OscConfig+0x32e>
 80037ac:	4b96      	ldr	r3, [pc, #600]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	4a95      	ldr	r2, [pc, #596]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037bc:	e024      	b.n	8003808 <HAL_RCC_OscConfig+0x378>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d110      	bne.n	80037e8 <HAL_RCC_OscConfig+0x358>
 80037c6:	4b90      	ldr	r3, [pc, #576]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	4a8e      	ldr	r2, [pc, #568]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d6:	4b8c      	ldr	r3, [pc, #560]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4a8a      	ldr	r2, [pc, #552]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e6:	e00f      	b.n	8003808 <HAL_RCC_OscConfig+0x378>
 80037e8:	4b87      	ldr	r3, [pc, #540]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a86      	ldr	r2, [pc, #536]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f8:	4b83      	ldr	r3, [pc, #524]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a82      	ldr	r2, [pc, #520]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd ff52 	bl	80016b8 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fd ff4e 	bl	80016b8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e142      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382e:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ed      	beq.n	8003818 <HAL_RCC_OscConfig+0x388>
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd ff3b 	bl	80016b8 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003844:	e00a      	b.n	800385c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7fd ff37 	bl	80016b8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e12b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800385c:	4b6a      	ldr	r3, [pc, #424]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ed      	bne.n	8003846 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a64      	ldr	r2, [pc, #400]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03c      	beq.n	8003902 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01c      	beq.n	80038ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003890:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003896:	4a5c      	ldr	r2, [pc, #368]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd ff0a 	bl	80016b8 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a8:	f7fd ff06 	bl	80016b8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0fc      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ba:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80038bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <HAL_RCC_OscConfig+0x418>
 80038c8:	e01b      	b.n	8003902 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ca:	4b4f      	ldr	r3, [pc, #316]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80038cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d0:	4a4d      	ldr	r2, [pc, #308]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd feed 	bl	80016b8 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e2:	f7fd fee9 	bl	80016b8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0df      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f4:	4b44      	ldr	r3, [pc, #272]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80038f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ef      	bne.n	80038e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80d3 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b0c      	cmp	r3, #12
 8003916:	f000 808d 	beq.w	8003a34 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d15a      	bne.n	80039d8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a38      	ldr	r2, [pc, #224]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fd fec3 	bl	80016b8 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7fd febf 	bl	80016b8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0b5      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003948:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003954:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_RCC_OscConfig+0x580>)
 800395a:	4013      	ands	r3, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a11      	ldr	r1, [r2, #32]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003964:	3a01      	subs	r2, #1
 8003966:	0112      	lsls	r2, r2, #4
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800396e:	0212      	lsls	r2, r2, #8
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003976:	0852      	lsrs	r2, r2, #1
 8003978:	3a01      	subs	r2, #1
 800397a:	0552      	lsls	r2, r2, #21
 800397c:	4311      	orrs	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003982:	0852      	lsrs	r2, r2, #1
 8003984:	3a01      	subs	r2, #1
 8003986:	0652      	lsls	r2, r2, #25
 8003988:	4311      	orrs	r1, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800398e:	06d2      	lsls	r2, r2, #27
 8003990:	430a      	orrs	r2, r1
 8003992:	491d      	ldr	r1, [pc, #116]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a4:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd fe82 	bl	80016b8 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fd fe7e 	bl	80016b8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e074      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x528>
 80039d6:	e06c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_RCC_OscConfig+0x578>)
 80039f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd fe5a 	bl	80016b8 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a06:	e00e      	b.n	8003a26 <HAL_RCC_OscConfig+0x596>
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd fe50 	bl	80016b8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e046      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <HAL_RCC_OscConfig+0x62c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x584>
 8003a32:	e03e      	b.n	8003ab2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e039      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a40:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <HAL_RCC_OscConfig+0x62c>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d12c      	bne.n	8003aae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d123      	bne.n	8003aae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d11b      	bne.n	8003aae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d113      	bne.n	8003aae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	3b01      	subs	r3, #1
 8003a94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e11e      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b91      	ldr	r3, [pc, #580]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d910      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b8e      	ldr	r3, [pc, #568]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 020f 	bic.w	r2, r3, #15
 8003aee:	498c      	ldr	r1, [pc, #560]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b8a      	ldr	r3, [pc, #552]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e106      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d073      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d129      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1c:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0f4      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b2c:	f000 f966 	bl	8003dfc <RCC_GetSysClockFreqFromPLLSource>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4a7c      	ldr	r2, [pc, #496]	; (8003d28 <HAL_RCC_ClockConfig+0x268>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d93f      	bls.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d033      	beq.n	8003bba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12f      	bne.n	8003bba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b62:	4a70      	ldr	r2, [pc, #448]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e024      	b.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b78:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0c6      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0be      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b98:	f000 f8ce 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4a61      	ldr	r2, [pc, #388]	; (8003d28 <HAL_RCC_ClockConfig+0x268>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d909      	bls.n	8003bba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bae:	4a5d      	ldr	r2, [pc, #372]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bba:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f023 0203 	bic.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4957      	ldr	r1, [pc, #348]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fd74 	bl	80016b8 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd4:	f7fd fd70 	bl	80016b8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e095      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	4b4e      	ldr	r3, [pc, #312]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 020c 	and.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d1eb      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d023      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a42      	ldr	r2, [pc, #264]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c2c:	4b3d      	ldr	r3, [pc, #244]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c34:	4a3b      	ldr	r2, [pc, #236]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4936      	ldr	r1, [pc, #216]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b80      	cmp	r3, #128	; 0x80
 8003c54:	d105      	bne.n	8003c62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a32      	ldr	r2, [pc, #200]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c62:	4b2f      	ldr	r3, [pc, #188]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d21d      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c70:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 020f 	bic.w	r2, r3, #15
 8003c78:	4929      	ldr	r1, [pc, #164]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c80:	f7fd fd1a 	bl	80016b8 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7fd fd16 	bl	80016b8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e03b      	b.n	8003d16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCC_ClockConfig+0x260>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1ed      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4917      	ldr	r1, [pc, #92]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490f      	ldr	r1, [pc, #60]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cea:	f000 f825 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cee:	4601      	mov	r1, r0
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <HAL_RCC_ClockConfig+0x26c>)
 8003cfc:	5cd3      	ldrb	r3, [r2, r3]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	fa21 f303 	lsr.w	r3, r1, r3
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x270>)
 8003d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd fc86 	bl	8001620 <HAL_InitTick>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40022000 	.word	0x40022000
 8003d24:	40021000 	.word	0x40021000
 8003d28:	04c4b400 	.word	0x04c4b400
 8003d2c:	08009cac 	.word	0x08009cac
 8003d30:	2000001c 	.word	0x2000001c
 8003d34:	20000020 	.word	0x20000020

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e047      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d50:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d5c:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e03e      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d136      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3301      	adds	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d8c:	4a1a      	ldr	r2, [pc, #104]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d96:	68d2      	ldr	r2, [r2, #12]
 8003d98:	0a12      	lsrs	r2, r2, #8
 8003d9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	617b      	str	r3, [r7, #20]
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	0a12      	lsrs	r2, r2, #8
 8003db4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	e001      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003de0:	693b      	ldr	r3, [r7, #16]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	007a1200 	.word	0x007a1200

08003dfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d10c      	bne.n	8003e3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e20:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e2a:	68d2      	ldr	r2, [r2, #12]
 8003e2c:	0a12      	lsrs	r2, r2, #8
 8003e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	617b      	str	r3, [r7, #20]
    break;
 8003e38:	e00c      	b.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e44:	68d2      	ldr	r2, [r2, #12]
 8003e46:	0a12      	lsrs	r2, r2, #8
 8003e48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]
    break;
 8003e52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	0e5b      	lsrs	r3, r3, #25
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e6e:	687b      	ldr	r3, [r7, #4]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	007a1200 	.word	0x007a1200
 8003e84:	00f42400 	.word	0x00f42400

08003e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e90:	2300      	movs	r3, #0
 8003e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e94:	2300      	movs	r3, #0
 8003e96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8098 	beq.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed2:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a39      	ldr	r2, [pc, #228]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ede:	f7fd fbeb 	bl	80016b8 <HAL_GetTick>
 8003ee2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee4:	e009      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7fd fbe7 	bl	80016b8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d902      	bls.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8003ef8:	e005      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ef      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d159      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01e      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d019      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f28:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f44:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f66:	f7fd fba7 	bl	80016b8 <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6c:	e00b      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fd fba3 	bl	80016b8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d902      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	74fb      	strb	r3, [r7, #19]
            break;
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ec      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	4903      	ldr	r1, [pc, #12]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	74bb      	strb	r3, [r7, #18]
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc4:	7c7b      	ldrb	r3, [r7, #17]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d105      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fca:	4ba6      	ldr	r3, [pc, #664]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4aa5      	ldr	r2, [pc, #660]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fe2:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f023 0203 	bic.w	r2, r3, #3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	499c      	ldr	r1, [pc, #624]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004004:	4b97      	ldr	r3, [pc, #604]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f023 020c 	bic.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4994      	ldr	r1, [pc, #592]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004026:	4b8f      	ldr	r3, [pc, #572]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	498b      	ldr	r1, [pc, #556]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004048:	4b86      	ldr	r3, [pc, #536]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	4983      	ldr	r1, [pc, #524]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800406a:	4b7e      	ldr	r3, [pc, #504]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	497a      	ldr	r1, [pc, #488]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408c:	4b75      	ldr	r3, [pc, #468]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	4972      	ldr	r1, [pc, #456]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ae:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4969      	ldr	r1, [pc, #420]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d0:	4b64      	ldr	r3, [pc, #400]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4961      	ldr	r1, [pc, #388]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	4958      	ldr	r1, [pc, #352]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	4950      	ldr	r1, [pc, #320]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004134:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800413a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4942      	ldr	r1, [pc, #264]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416a:	d105      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416c:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a3c      	ldr	r2, [pc, #240]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004176:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004184:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4934      	ldr	r1, [pc, #208]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a2:	d105      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a2e      	ldr	r2, [pc, #184]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	4926      	ldr	r1, [pc, #152]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041da:	d105      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a20      	ldr	r2, [pc, #128]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4918      	ldr	r1, [pc, #96]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	490a      	ldr	r1, [pc, #40]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004256:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004258:	7cbb      	ldrb	r3, [r7, #18]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e049      	b.n	800430e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fff6 	bl	8001280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f000 fde2 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d001      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e04a      	b.n	80043c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d013      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIM_Base_Start_IT+0xc4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x6c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d115      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b06      	cmp	r3, #6
 8004394:	d015      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xaa>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d011      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e008      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	00010007 	.word	0x00010007

080043ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e049      	b.n	8004492 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc fe2a 	bl	800106c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 fd20 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <HAL_TIM_PWM_Start+0x24>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	e03c      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d109      	bne.n	80044da <HAL_TIM_PWM_Start+0x3e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e02f      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d109      	bne.n	80044f4 <HAL_TIM_PWM_Start+0x58>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e022      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d109      	bne.n	800450e <HAL_TIM_PWM_Start+0x72>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b01      	cmp	r3, #1
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e015      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b10      	cmp	r3, #16
 8004512:	d109      	bne.n	8004528 <HAL_TIM_PWM_Start+0x8c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e008      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e097      	b.n	8004672 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <HAL_TIM_PWM_Start+0xb6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004550:	e023      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Start+0xc6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004560:	e01b      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start+0xd6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004570:	e013      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start+0xe6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004580:	e00b      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b10      	cmp	r3, #16
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start+0xf6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004590:	e003      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 ffea 	bl	800557c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a33      	ldr	r2, [pc, #204]	; (800467c <HAL_TIM_PWM_Start+0x1e0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a32      	ldr	r2, [pc, #200]	; (8004680 <HAL_TIM_PWM_Start+0x1e4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a30      	ldr	r2, [pc, #192]	; (8004684 <HAL_TIM_PWM_Start+0x1e8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <HAL_TIM_PWM_Start+0x1ec>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2d      	ldr	r2, [pc, #180]	; (800468c <HAL_TIM_PWM_Start+0x1f0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d101      	bne.n	80045de <HAL_TIM_PWM_Start+0x142>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_TIM_PWM_Start+0x144>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a20      	ldr	r2, [pc, #128]	; (800467c <HAL_TIM_PWM_Start+0x1e0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d018      	beq.n	8004630 <HAL_TIM_PWM_Start+0x194>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d013      	beq.n	8004630 <HAL_TIM_PWM_Start+0x194>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a20      	ldr	r2, [pc, #128]	; (8004690 <HAL_TIM_PWM_Start+0x1f4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00e      	beq.n	8004630 <HAL_TIM_PWM_Start+0x194>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <HAL_TIM_PWM_Start+0x1f8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_TIM_PWM_Start+0x194>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a17      	ldr	r2, [pc, #92]	; (8004680 <HAL_TIM_PWM_Start+0x1e4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_TIM_PWM_Start+0x194>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a16      	ldr	r2, [pc, #88]	; (8004684 <HAL_TIM_PWM_Start+0x1e8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d115      	bne.n	800465c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_TIM_PWM_Start+0x1fc>)
 8004638:	4013      	ands	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b06      	cmp	r3, #6
 8004640:	d015      	beq.n	800466e <HAL_TIM_PWM_Start+0x1d2>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d011      	beq.n	800466e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465a:	e008      	b.n	800466e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e000      	b.n	8004670 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40013400 	.word	0x40013400
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400
 800468c:	40014800 	.word	0x40014800
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	00010007 	.word	0x00010007

0800469c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e097      	b.n	80047e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fc fd19 	bl	80010fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80046e0:	f023 0307 	bic.w	r3, r3, #7
 80046e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f000 fbbd 	bl	8004e70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	4313      	orrs	r3, r2
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800473c:	f023 030c 	bic.w	r3, r3, #12
 8004740:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800474c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	4313      	orrs	r3, r2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	011a      	lsls	r2, r3, #4
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	031b      	lsls	r3, r3, #12
 800476c:	4313      	orrs	r3, r2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	4313      	orrs	r3, r2
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004800:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004808:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004810:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d110      	bne.n	800483a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d102      	bne.n	8004824 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800481e:	7b7b      	ldrb	r3, [r7, #13]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d001      	beq.n	8004828 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e068      	b.n	80048fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004838:	e031      	b.n	800489e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d110      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004840:	7bbb      	ldrb	r3, [r7, #14]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d102      	bne.n	800484c <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004846:	7b3b      	ldrb	r3, [r7, #12]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e054      	b.n	80048fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	e01d      	b.n	800489e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d108      	bne.n	800487a <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004868:	7bbb      	ldrb	r3, [r7, #14]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800486e:	7b7b      	ldrb	r3, [r7, #13]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d102      	bne.n	800487a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004874:	7b3b      	ldrb	r3, [r7, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e03d      	b.n	80048fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_TIM_Encoder_Start+0xc2>
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d008      	beq.n	80048ba <HAL_TIM_Encoder_Start+0xd2>
 80048a8:	e00f      	b.n	80048ca <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fe62 	bl	800557c <TIM_CCxChannelCmd>
      break;
 80048b8:	e016      	b.n	80048e8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	2104      	movs	r1, #4
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fe5a 	bl	800557c <TIM_CCxChannelCmd>
      break;
 80048c8:	e00e      	b.n	80048e8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2201      	movs	r2, #1
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fe52 	bl	800557c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2201      	movs	r2, #1
 80048de:	2104      	movs	r1, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fe4b 	bl	800557c <TIM_CCxChannelCmd>
      break;
 80048e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	d122      	bne.n	800495e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d11b      	bne.n	800495e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0202 	mvn.w	r2, #2
 800492e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fa75 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 800494a:	e005      	b.n	8004958 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa67 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa78 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b04      	cmp	r3, #4
 800496a:	d122      	bne.n	80049b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d11b      	bne.n	80049b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0204 	mvn.w	r2, #4
 8004982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fa4b 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 800499e:	e005      	b.n	80049ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fa3d 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fa4e 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d122      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d11b      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0208 	mvn.w	r2, #8
 80049d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2204      	movs	r2, #4
 80049dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fa21 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 80049f2:	e005      	b.n	8004a00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa13 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa24 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d122      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d11b      	bne.n	8004a5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0210 	mvn.w	r2, #16
 8004a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2208      	movs	r2, #8
 8004a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f9f7 	bl	8004e34 <HAL_TIM_IC_CaptureCallback>
 8004a46:	e005      	b.n	8004a54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f9e9 	bl	8004e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9fa 	bl	8004e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10e      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d107      	bne.n	8004a86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 0201 	mvn.w	r2, #1
 8004a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc fa27 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b80      	cmp	r3, #128	; 0x80
 8004a92:	d10e      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 feb7 	bl	8005820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 feaa 	bl	8005834 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9a8 	bl	8004e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0220 	mvn.w	r2, #32
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fe6a 	bl	800580c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b46:	d10f      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b56:	d107      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fe70 	bl	8005848 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b76:	d10f      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b86:	d107      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fe62 	bl	800585c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba6:	d10f      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fe54 	bl	8005870 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd6:	d10f      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fe46 	bl	8005884 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0fd      	b.n	8004e16 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b14      	cmp	r3, #20
 8004c26:	f200 80f0 	bhi.w	8004e0a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004e0b 	.word	0x08004e0b
 8004c38:	08004e0b 	.word	0x08004e0b
 8004c3c:	08004e0b 	.word	0x08004e0b
 8004c40:	08004cc5 	.word	0x08004cc5
 8004c44:	08004e0b 	.word	0x08004e0b
 8004c48:	08004e0b 	.word	0x08004e0b
 8004c4c:	08004e0b 	.word	0x08004e0b
 8004c50:	08004d07 	.word	0x08004d07
 8004c54:	08004e0b 	.word	0x08004e0b
 8004c58:	08004e0b 	.word	0x08004e0b
 8004c5c:	08004e0b 	.word	0x08004e0b
 8004c60:	08004d47 	.word	0x08004d47
 8004c64:	08004e0b 	.word	0x08004e0b
 8004c68:	08004e0b 	.word	0x08004e0b
 8004c6c:	08004e0b 	.word	0x08004e0b
 8004c70:	08004d89 	.word	0x08004d89
 8004c74:	08004e0b 	.word	0x08004e0b
 8004c78:	08004e0b 	.word	0x08004e0b
 8004c7c:	08004e0b 	.word	0x08004e0b
 8004c80:	08004dc9 	.word	0x08004dc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f980 	bl	8004f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	619a      	str	r2, [r3, #24]
      break;
 8004cc2:	e0a3      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f9f0 	bl	80050b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]
      break;
 8004d04:	e082      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fa59 	bl	80051c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0208 	orr.w	r2, r2, #8
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0204 	bic.w	r2, r2, #4
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
      break;
 8004d44:	e062      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fac1 	bl	80052d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
      break;
 8004d86:	e041      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fb2a 	bl	80053e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004dc6:	e021      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fb6e 	bl	80054b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e08:	e000      	b.n	8004e0c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004e0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop

08004e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3c      	ldr	r2, [pc, #240]	; (8004f74 <TIM_Base_SetConfig+0x104>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00f      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a39      	ldr	r2, [pc, #228]	; (8004f78 <TIM_Base_SetConfig+0x108>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a38      	ldr	r2, [pc, #224]	; (8004f7c <TIM_Base_SetConfig+0x10c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a37      	ldr	r2, [pc, #220]	; (8004f80 <TIM_Base_SetConfig+0x110>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <TIM_Base_SetConfig+0x104>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01b      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d017      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <TIM_Base_SetConfig+0x108>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a29      	ldr	r2, [pc, #164]	; (8004f7c <TIM_Base_SetConfig+0x10c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00f      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <TIM_Base_SetConfig+0x110>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <TIM_Base_SetConfig+0x118>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a10      	ldr	r2, [pc, #64]	; (8004f74 <TIM_Base_SetConfig+0x104>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <TIM_Base_SetConfig+0x110>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <TIM_Base_SetConfig+0x118>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d103      	bne.n	8004f60 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	615a      	str	r2, [r3, #20]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40013400 	.word	0x40013400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800

08004f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0201 	bic.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 0302 	bic.w	r3, r3, #2
 8004fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a2c      	ldr	r2, [pc, #176]	; (800509c <TIM_OC1_SetConfig+0x10c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00f      	beq.n	8005010 <TIM_OC1_SetConfig+0x80>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <TIM_OC1_SetConfig+0x110>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <TIM_OC1_SetConfig+0x80>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <TIM_OC1_SetConfig+0x114>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <TIM_OC1_SetConfig+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <TIM_OC1_SetConfig+0x118>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC1_SetConfig+0x80>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a28      	ldr	r2, [pc, #160]	; (80050ac <TIM_OC1_SetConfig+0x11c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10c      	bne.n	800502a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0308 	bic.w	r3, r3, #8
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1b      	ldr	r2, [pc, #108]	; (800509c <TIM_OC1_SetConfig+0x10c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00f      	beq.n	8005052 <TIM_OC1_SetConfig+0xc2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <TIM_OC1_SetConfig+0x110>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_OC1_SetConfig+0xc2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <TIM_OC1_SetConfig+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_OC1_SetConfig+0xc2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <TIM_OC1_SetConfig+0x118>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC1_SetConfig+0xc2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a17      	ldr	r2, [pc, #92]	; (80050ac <TIM_OC1_SetConfig+0x11c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0320 	bic.w	r3, r3, #32
 80050fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <TIM_OC2_SetConfig+0x100>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_OC2_SetConfig+0x6c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <TIM_OC2_SetConfig+0x104>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d10d      	bne.n	8005138 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <TIM_OC2_SetConfig+0x100>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00f      	beq.n	8005160 <TIM_OC2_SetConfig+0xb0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <TIM_OC2_SetConfig+0x104>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00b      	beq.n	8005160 <TIM_OC2_SetConfig+0xb0>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <TIM_OC2_SetConfig+0x108>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_OC2_SetConfig+0xb0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <TIM_OC2_SetConfig+0x10c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC2_SetConfig+0xb0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <TIM_OC2_SetConfig+0x110>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d113      	bne.n	8005188 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <TIM_OC3_SetConfig+0xfc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <TIM_OC3_SetConfig+0x6a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a26      	ldr	r2, [pc, #152]	; (80052c4 <TIM_OC3_SetConfig+0x100>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10d      	bne.n	800524a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <TIM_OC3_SetConfig+0xfc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_OC3_SetConfig+0xae>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1b      	ldr	r2, [pc, #108]	; (80052c4 <TIM_OC3_SetConfig+0x100>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_OC3_SetConfig+0xae>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a1a      	ldr	r2, [pc, #104]	; (80052c8 <TIM_OC3_SetConfig+0x104>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_OC3_SetConfig+0xae>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <TIM_OC3_SetConfig+0x108>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC3_SetConfig+0xae>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <TIM_OC3_SetConfig+0x10c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d113      	bne.n	800529a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	621a      	str	r2, [r3, #32]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40013400 	.word	0x40013400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40014400 	.word	0x40014400
 80052d0:	40014800 	.word	0x40014800

080052d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a28      	ldr	r2, [pc, #160]	; (80053d4 <TIM_OC4_SetConfig+0x100>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC4_SetConfig+0x6c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a27      	ldr	r2, [pc, #156]	; (80053d8 <TIM_OC4_SetConfig+0x104>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10d      	bne.n	800535c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <TIM_OC4_SetConfig+0x100>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00f      	beq.n	8005384 <TIM_OC4_SetConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <TIM_OC4_SetConfig+0x104>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_OC4_SetConfig+0xb0>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <TIM_OC4_SetConfig+0x108>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_OC4_SetConfig+0xb0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a1a      	ldr	r2, [pc, #104]	; (80053e0 <TIM_OC4_SetConfig+0x10c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_OC4_SetConfig+0xb0>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <TIM_OC4_SetConfig+0x110>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d113      	bne.n	80053ac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800538a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005392:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	019b      	lsls	r3, r3, #6
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	019b      	lsls	r3, r3, #6
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800

080053e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800542c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	041b      	lsls	r3, r3, #16
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a17      	ldr	r2, [pc, #92]	; (800549c <TIM_OC5_SetConfig+0xb4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_OC5_SetConfig+0x7a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <TIM_OC5_SetConfig+0xb8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_OC5_SetConfig+0x7a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <TIM_OC5_SetConfig+0xbc>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_OC5_SetConfig+0x7a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <TIM_OC5_SetConfig+0xc0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_OC5_SetConfig+0x7a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <TIM_OC5_SetConfig+0xc4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d109      	bne.n	8005476 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	621a      	str	r2, [r3, #32]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800

080054b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	051b      	lsls	r3, r3, #20
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a18      	ldr	r2, [pc, #96]	; (8005568 <TIM_OC6_SetConfig+0xb8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00f      	beq.n	800552c <TIM_OC6_SetConfig+0x7c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a17      	ldr	r2, [pc, #92]	; (800556c <TIM_OC6_SetConfig+0xbc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_OC6_SetConfig+0x7c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <TIM_OC6_SetConfig+0xc0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_OC6_SetConfig+0x7c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <TIM_OC6_SetConfig+0xc4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_OC6_SetConfig+0x7c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a14      	ldr	r2, [pc, #80]	; (8005578 <TIM_OC6_SetConfig+0xc8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d109      	bne.n	8005540 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40013400 	.word	0x40013400
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2201      	movs	r2, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1a      	ldr	r2, [r3, #32]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055dc:	2302      	movs	r3, #2
 80055de:	e065      	b.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d108      	bne.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800561a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d018      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d013      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00e      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a12      	ldr	r2, [pc, #72]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10c      	bne.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40014000 	.word	0x40014000

080056cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e087      	b.n	80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a27      	ldr	r2, [pc, #156]	; (8005804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d106      	bne.n	8005784 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d126      	bne.n	80057e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	051b      	lsls	r3, r3, #20
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a0e      	ldr	r2, [pc, #56]	; (8005804 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a0d      	ldr	r2, [pc, #52]	; (8005808 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d106      	bne.n	80057e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40013400 	.word	0x40013400

0800580c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80058ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80058d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	4013      	ands	r3, r2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058fc:	b084      	sub	sp, #16
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	f107 0014 	add.w	r0, r7, #20
 800590a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	b004      	add	sp, #16
 800593c:	4770      	bx	lr
	...

08005940 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005940:	b480      	push	{r7}
 8005942:	b09b      	sub	sp, #108	; 0x6c
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d81f      	bhi.n	80059b2 <USB_ActivateEndpoint+0x72>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <USB_ActivateEndpoint+0x38>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	08005989 	.word	0x08005989
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059bb 	.word	0x080059bb
 8005984:	08005997 	.word	0x08005997
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005988:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800598c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005990:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005994:	e012      	b.n	80059bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005996:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800599a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800599e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059a2:	e00b      	b.n	80059bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059b0:	e004      	b.n	80059bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80059b8:	e000      	b.n	80059bc <USB_ActivateEndpoint+0x7c>
      break;
 80059ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	b21b      	sxth	r3, r3
 80059ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	b21a      	sxth	r2, r3
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b21b      	sxth	r3, r3
 80059fe:	4313      	orrs	r3, r2
 8005a00:	b21b      	sxth	r3, r3
 8005a02:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	441a      	add	r2, r3
 8005a10:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	7b1b      	ldrb	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f040 8149 	bne.w	8005cc4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 8084 	beq.w	8005b44 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	88db      	ldrh	r3, [r3, #6]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	81fb      	strh	r3, [r7, #14]
 8005a7e:	89fb      	ldrh	r3, [r7, #14]
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <USB_ActivateEndpoint+0x180>
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9e:	81bb      	strh	r3, [r7, #12]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	441a      	add	r2, r3
 8005aaa:	89bb      	ldrh	r3, [r7, #12]
 8005aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d020      	beq.n	8005b0a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ade:	813b      	strh	r3, [r7, #8]
 8005ae0:	893b      	ldrh	r3, [r7, #8]
 8005ae2:	f083 0320 	eor.w	r3, r3, #32
 8005ae6:	813b      	strh	r3, [r7, #8]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	893b      	ldrh	r3, [r7, #8]
 8005af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8013      	strh	r3, [r2, #0]
 8005b08:	e27f      	b.n	800600a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b20:	817b      	strh	r3, [r7, #10]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	441a      	add	r2, r3
 8005b2c:	897b      	ldrh	r3, [r7, #10]
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]
 8005b42:	e262      	b.n	800600a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	4413      	add	r3, r2
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	00da      	lsls	r2, r3, #3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	4413      	add	r3, r2
 8005b62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	88db      	ldrh	r3, [r3, #6]
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	4413      	add	r3, r2
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	00da      	lsls	r2, r3, #3
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	4413      	add	r3, r2
 8005b96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b9a:	623b      	str	r3, [r7, #32]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d112      	bne.n	8005bca <USB_ActivateEndpoint+0x28a>
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	e02f      	b.n	8005c2a <USB_ActivateEndpoint+0x2ea>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd0:	d813      	bhi.n	8005bfa <USB_ActivateEndpoint+0x2ba>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <USB_ActivateEndpoint+0x2ac>
 8005be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be8:	3301      	adds	r3, #1
 8005bea:	663b      	str	r3, [r7, #96]	; 0x60
 8005bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	029b      	lsls	r3, r3, #10
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	e017      	b.n	8005c2a <USB_ActivateEndpoint+0x2ea>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	663b      	str	r3, [r7, #96]	; 0x60
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <USB_ActivateEndpoint+0x2d4>
 8005c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c10:	3b01      	subs	r3, #1
 8005c12:	663b      	str	r3, [r7, #96]	; 0x60
 8005c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	83fb      	strh	r3, [r7, #30]
 8005c38:	8bfb      	ldrh	r3, [r7, #30]
 8005c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01b      	beq.n	8005c7a <USB_ActivateEndpoint+0x33a>
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c58:	83bb      	strh	r3, [r7, #28]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	8bbb      	ldrh	r3, [r7, #28]
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	837b      	strh	r3, [r7, #26]
 8005c92:	8b7b      	ldrh	r3, [r7, #26]
 8005c94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c98:	837b      	strh	r3, [r7, #26]
 8005c9a:	8b7b      	ldrh	r3, [r7, #26]
 8005c9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ca0:	837b      	strh	r3, [r7, #26]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	8b7b      	ldrh	r3, [r7, #26]
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]
 8005cc2:	e1a2      	b.n	800600a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d10:	4413      	add	r3, r2
 8005d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00da      	lsls	r2, r3, #3
 8005d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d22:	657b      	str	r3, [r7, #84]	; 0x54
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	891b      	ldrh	r3, [r3, #8]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	653b      	str	r3, [r7, #80]	; 0x50
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d44:	4413      	add	r3, r2
 8005d46:	653b      	str	r3, [r7, #80]	; 0x50
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	00da      	lsls	r2, r3, #3
 8005d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	895b      	ldrh	r3, [r3, #10]
 8005d5c:	085b      	lsrs	r3, r3, #1
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f040 8091 	bne.w	8005e94 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01b      	beq.n	8005dc2 <USB_ActivateEndpoint+0x482>
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	441a      	add	r2, r3
 8005dac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	873b      	strh	r3, [r7, #56]	; 0x38
 8005dd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01b      	beq.n	8005e12 <USB_ActivateEndpoint+0x4d2>
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e70:	867b      	strh	r3, [r7, #50]	; 0x32
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
 8005e92:	e0ba      	b.n	800600a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01d      	beq.n	8005eec <USB_ActivateEndpoint+0x5ac>
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005efc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01d      	beq.n	8005f44 <USB_ActivateEndpoint+0x604>
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	441a      	add	r2, r3
 8005f2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d024      	beq.n	8005f96 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f6a:	f083 0320 	eor.w	r3, r3, #32
 8005f6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	8013      	strh	r3, [r2, #0]
 8005f94:	e01d      	b.n	8005fd2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	441a      	add	r2, r3
 8005fba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800600a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800600e:	4618      	mov	r0, r3
 8006010:	376c      	adds	r7, #108	; 0x6c
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop

0800601c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800601c:	b480      	push	{r7}
 800601e:	b08d      	sub	sp, #52	; 0x34
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	7b1b      	ldrb	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 808e 	bne.w	800614c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d044      	beq.n	80060c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	81bb      	strh	r3, [r7, #12]
 8006046:	89bb      	ldrh	r3, [r7, #12]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01b      	beq.n	8006088 <USB_DeactivateEndpoint+0x6c>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	817b      	strh	r3, [r7, #10]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	897b      	ldrh	r3, [r7, #10]
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609e:	813b      	strh	r3, [r7, #8]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	893b      	ldrh	r3, [r7, #8]
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
 80060c0:	e192      	b.n	80063e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	827b      	strh	r3, [r7, #18]
 80060d0:	8a7b      	ldrh	r3, [r7, #18]
 80060d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01b      	beq.n	8006112 <USB_DeactivateEndpoint+0xf6>
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f0:	823b      	strh	r3, [r7, #16]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	8a3b      	ldrh	r3, [r7, #16]
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800610a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006128:	81fb      	strh	r3, [r7, #14]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	89fb      	ldrh	r3, [r7, #14]
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
 800614a:	e14d      	b.n	80063e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 80a5 	bne.w	80062a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	843b      	strh	r3, [r7, #32]
 8006164:	8c3b      	ldrh	r3, [r7, #32]
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01b      	beq.n	80061a6 <USB_DeactivateEndpoint+0x18a>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	83fb      	strh	r3, [r7, #30]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	8bfb      	ldrh	r3, [r7, #30]
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800619e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	83bb      	strh	r3, [r7, #28]
 80061b4:	8bbb      	ldrh	r3, [r7, #28]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <USB_DeactivateEndpoint+0x1da>
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	837b      	strh	r3, [r7, #26]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	8b7b      	ldrh	r3, [r7, #26]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	833b      	strh	r3, [r7, #24]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	8b3b      	ldrh	r3, [r7, #24]
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006244:	82fb      	strh	r3, [r7, #22]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	441a      	add	r2, r3
 8006250:	8afb      	ldrh	r3, [r7, #22]
 8006252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	b29b      	uxth	r3, r3
 8006264:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627c:	82bb      	strh	r3, [r7, #20]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	8abb      	ldrh	r3, [r7, #20]
 800628a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629a:	b29b      	uxth	r3, r3
 800629c:	8013      	strh	r3, [r2, #0]
 800629e:	e0a3      	b.n	80063e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <USB_DeactivateEndpoint+0x2d4>
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80062fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01b      	beq.n	8006340 <USB_DeactivateEndpoint+0x324>
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800632c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633c:	b29b      	uxth	r3, r3
 800633e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	441a      	add	r2, r3
 80063d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3734      	adds	r7, #52	; 0x34
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b0c4      	sub	sp, #272	; 0x110
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	1d3b      	adds	r3, r7, #4
 80063fe:	6018      	str	r0, [r3, #0]
 8006400:	463b      	mov	r3, r7
 8006402:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006404:	463b      	mov	r3, r7
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b01      	cmp	r3, #1
 800640c:	f040 8566 	bne.w	8006edc <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006410:	463b      	mov	r3, r7
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d905      	bls.n	800642c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800642a:	e004      	b.n	8006436 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	7b1b      	ldrb	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d12c      	bne.n	800649a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6959      	ldr	r1, [r3, #20]
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	88da      	ldrh	r2, [r3, #6]
 800644c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006450:	b29b      	uxth	r3, r3
 8006452:	1d38      	adds	r0, r7, #4
 8006454:	6800      	ldr	r0, [r0, #0]
 8006456:	f001 fa43 	bl	80078e0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006468:	b29b      	uxth	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	4413      	add	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	463b      	mov	r3, r7
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	00da      	lsls	r2, r3, #3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4413      	add	r3, r2
 800647e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006482:	f107 0310 	add.w	r3, r7, #16
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800648c:	b29a      	uxth	r2, r3
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	f000 bcec 	b.w	8006e72 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	78db      	ldrb	r3, [r3, #3]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	f040 8356 	bne.w	8006b52 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80064a6:	463b      	mov	r3, r7
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6a1a      	ldr	r2, [r3, #32]
 80064ac:	463b      	mov	r3, r7
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	f240 82fa 	bls.w	8006aac <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	463b      	mov	r3, r7
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006506:	463b      	mov	r3, r7
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a1a      	ldr	r2, [r3, #32]
 800650c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006510:	1ad2      	subs	r2, r2, r3
 8006512:	463b      	mov	r3, r7
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	463b      	mov	r3, r7
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 815e 	beq.w	80067f0 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d164      	bne.n	800660e <USB_EPStartXfer+0x218>
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654a:	1d3b      	adds	r3, r7, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	4413      	add	r3, r2
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655c:	463b      	mov	r3, r7
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	00da      	lsls	r2, r3, #3
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	4413      	add	r3, r2
 8006568:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
 800656e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006572:	2b00      	cmp	r3, #0
 8006574:	d112      	bne.n	800659c <USB_EPStartXfer+0x1a6>
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006580:	b29a      	uxth	r2, r3
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006594:	b29a      	uxth	r2, r3
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	e054      	b.n	8006646 <USB_EPStartXfer+0x250>
 800659c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a0:	2b3e      	cmp	r3, #62	; 0x3e
 80065a2:	d817      	bhi.n	80065d4 <USB_EPStartXfer+0x1de>
 80065a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <USB_EPStartXfer+0x1ce>
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065be:	3301      	adds	r3, #1
 80065c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	029b      	lsls	r3, r3, #10
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e038      	b.n	8006646 <USB_EPStartXfer+0x250>
 80065d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <USB_EPStartXfer+0x1fe>
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ee:	3b01      	subs	r3, #1
 80065f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	029b      	lsls	r3, r3, #10
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006606:	b29a      	uxth	r2, r3
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	e01b      	b.n	8006646 <USB_EPStartXfer+0x250>
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d116      	bne.n	8006646 <USB_EPStartXfer+0x250>
 8006618:	1d3b      	adds	r3, r7, #4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	4413      	add	r3, r2
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	00da      	lsls	r2, r3, #3
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	4413      	add	r3, r2
 8006636:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
 800663c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006640:	b29a      	uxth	r2, r3
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	895b      	ldrh	r3, [r3, #10]
 800664c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006650:	463b      	mov	r3, r7
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6959      	ldr	r1, [r3, #20]
 8006656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800665a:	b29b      	uxth	r3, r3
 800665c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006660:	1d38      	adds	r0, r7, #4
 8006662:	6800      	ldr	r0, [r0, #0]
 8006664:	f001 f93c 	bl	80078e0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006668:	463b      	mov	r3, r7
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006672:	441a      	add	r2, r3
 8006674:	463b      	mov	r3, r7
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800667a:	463b      	mov	r3, r7
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a1a      	ldr	r2, [r3, #32]
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	429a      	cmp	r2, r3
 8006688:	d90e      	bls.n	80066a8 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800668a:	463b      	mov	r3, r7
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006694:	463b      	mov	r3, r7
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a1a      	ldr	r2, [r3, #32]
 800669a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	621a      	str	r2, [r3, #32]
 80066a6:	e008      	b.n	80066ba <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2200      	movs	r2, #0
 80066b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d164      	bne.n	800678e <USB_EPStartXfer+0x398>
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	1d3b      	adds	r3, r7, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	00da      	lsls	r2, r3, #3
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d112      	bne.n	800671c <USB_EPStartXfer+0x326>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006700:	b29a      	uxth	r2, r3
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006714:	b29a      	uxth	r2, r3
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	e057      	b.n	80067cc <USB_EPStartXfer+0x3d6>
 800671c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006720:	2b3e      	cmp	r3, #62	; 0x3e
 8006722:	d817      	bhi.n	8006754 <USB_EPStartXfer+0x35e>
 8006724:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800672e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <USB_EPStartXfer+0x34e>
 800673a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800673e:	3301      	adds	r3, #1
 8006740:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006744:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006748:	b29b      	uxth	r3, r3
 800674a:	029b      	lsls	r3, r3, #10
 800674c:	b29a      	uxth	r2, r3
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	e03b      	b.n	80067cc <USB_EPStartXfer+0x3d6>
 8006754:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800675e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <USB_EPStartXfer+0x37e>
 800676a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800676e:	3b01      	subs	r3, #1
 8006770:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006774:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006778:	b29b      	uxth	r3, r3
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	b29b      	uxth	r3, r3
 800677e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006786:	b29a      	uxth	r2, r3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	e01e      	b.n	80067cc <USB_EPStartXfer+0x3d6>
 800678e:	463b      	mov	r3, r7
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d119      	bne.n	80067cc <USB_EPStartXfer+0x3d6>
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	4413      	add	r3, r2
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	00da      	lsls	r2, r3, #3
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	891b      	ldrh	r3, [r3, #8]
 80067d2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d6:	463b      	mov	r3, r7
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6959      	ldr	r1, [r3, #20]
 80067dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80067e6:	1d38      	adds	r0, r7, #4
 80067e8:	6800      	ldr	r0, [r0, #0]
 80067ea:	f001 f879 	bl	80078e0 <USB_WritePMA>
 80067ee:	e340      	b.n	8006e72 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d164      	bne.n	80068c4 <USB_EPStartXfer+0x4ce>
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680e:	4413      	add	r3, r2
 8006810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006812:	463b      	mov	r3, r7
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	00da      	lsls	r2, r3, #3
 800681a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681c:	4413      	add	r3, r2
 800681e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006822:	64bb      	str	r3, [r7, #72]	; 0x48
 8006824:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006828:	2b00      	cmp	r3, #0
 800682a:	d112      	bne.n	8006852 <USB_EPStartXfer+0x45c>
 800682c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006836:	b29a      	uxth	r2, r3
 8006838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800684a:	b29a      	uxth	r2, r3
 800684c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	e057      	b.n	8006902 <USB_EPStartXfer+0x50c>
 8006852:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006856:	2b3e      	cmp	r3, #62	; 0x3e
 8006858:	d817      	bhi.n	800688a <USB_EPStartXfer+0x494>
 800685a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <USB_EPStartXfer+0x484>
 8006870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006874:	3301      	adds	r3, #1
 8006876:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800687a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800687e:	b29b      	uxth	r3, r3
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	b29a      	uxth	r2, r3
 8006884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	e03b      	b.n	8006902 <USB_EPStartXfer+0x50c>
 800688a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006894:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	2b00      	cmp	r3, #0
 800689e:	d104      	bne.n	80068aa <USB_EPStartXfer+0x4b4>
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a4:	3b01      	subs	r3, #1
 80068a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e01e      	b.n	8006902 <USB_EPStartXfer+0x50c>
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d119      	bne.n	8006902 <USB_EPStartXfer+0x50c>
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	657b      	str	r3, [r7, #84]	; 0x54
 80068d4:	1d3b      	adds	r3, r7, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068dc:	b29b      	uxth	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e2:	4413      	add	r3, r2
 80068e4:	657b      	str	r3, [r7, #84]	; 0x54
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	00da      	lsls	r2, r3, #3
 80068ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068f6:	653b      	str	r3, [r7, #80]	; 0x50
 80068f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006900:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006902:	463b      	mov	r3, r7
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	891b      	ldrh	r3, [r3, #8]
 8006908:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800690c:	463b      	mov	r3, r7
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6959      	ldr	r1, [r3, #20]
 8006912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006916:	b29b      	uxth	r3, r3
 8006918:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800691c:	1d38      	adds	r0, r7, #4
 800691e:	6800      	ldr	r0, [r0, #0]
 8006920:	f000 ffde 	bl	80078e0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006924:	463b      	mov	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695a      	ldr	r2, [r3, #20]
 800692a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800692e:	441a      	add	r2, r3
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006936:	463b      	mov	r3, r7
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	429a      	cmp	r2, r3
 8006944:	d90e      	bls.n	8006964 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006950:	463b      	mov	r3, r7
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	463b      	mov	r3, r7
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	621a      	str	r2, [r3, #32]
 8006962:	e008      	b.n	8006976 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800696e:	463b      	mov	r3, r7
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	647b      	str	r3, [r7, #68]	; 0x44
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d164      	bne.n	8006a50 <USB_EPStartXfer+0x65a>
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698c:	1d3b      	adds	r3, r7, #4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	4413      	add	r3, r2
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	00da      	lsls	r2, r3, #3
 80069a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a8:	4413      	add	r3, r2
 80069aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80069b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d112      	bne.n	80069de <USB_EPStartXfer+0x5e8>
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e054      	b.n	8006a88 <USB_EPStartXfer+0x692>
 80069de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069e2:	2b3e      	cmp	r3, #62	; 0x3e
 80069e4:	d817      	bhi.n	8006a16 <USB_EPStartXfer+0x620>
 80069e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <USB_EPStartXfer+0x610>
 80069fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	e038      	b.n	8006a88 <USB_EPStartXfer+0x692>
 8006a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <USB_EPStartXfer+0x640>
 8006a2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a30:	3b01      	subs	r3, #1
 8006a32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	e01b      	b.n	8006a88 <USB_EPStartXfer+0x692>
 8006a50:	463b      	mov	r3, r7
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d116      	bne.n	8006a88 <USB_EPStartXfer+0x692>
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a68:	4413      	add	r3, r2
 8006a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	00da      	lsls	r2, r3, #3
 8006a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a76:	4413      	add	r3, r2
 8006a78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a88:	463b      	mov	r3, r7
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	895b      	ldrh	r3, [r3, #10]
 8006a8e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a92:	463b      	mov	r3, r7
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6959      	ldr	r1, [r3, #20]
 8006a98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006aa2:	1d38      	adds	r0, r7, #4
 8006aa4:	6800      	ldr	r0, [r0, #0]
 8006aa6:	f000 ff1b 	bl	80078e0 <USB_WritePMA>
 8006aaa:	e1e2      	b.n	8006e72 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8006aac:	463b      	mov	r3, r7
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ab6:	1d3b      	adds	r3, r7, #4
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006ad4:	1d3b      	adds	r3, r7, #4
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	463b      	mov	r3, r7
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	441a      	add	r2, r3
 8006ae2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006afa:	1d3b      	adds	r3, r7, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	663b      	str	r3, [r7, #96]	; 0x60
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b0e:	4413      	add	r3, r2
 8006b10:	663b      	str	r3, [r7, #96]	; 0x60
 8006b12:	463b      	mov	r3, r7
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	00da      	lsls	r2, r3, #3
 8006b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b2e:	463b      	mov	r3, r7
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	891b      	ldrh	r3, [r3, #8]
 8006b34:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6959      	ldr	r1, [r3, #20]
 8006b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006b48:	1d38      	adds	r0, r7, #4
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	f000 fec8 	bl	80078e0 <USB_WritePMA>
 8006b50:	e18f      	b.n	8006e72 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b52:	1d3b      	adds	r3, r7, #4
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	463b      	mov	r3, r7
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 808f 	beq.w	8006c8c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b74:	463b      	mov	r3, r7
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d164      	bne.n	8006c48 <USB_EPStartXfer+0x852>
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	673b      	str	r3, [r7, #112]	; 0x70
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b92:	4413      	add	r3, r2
 8006b94:	673b      	str	r3, [r7, #112]	; 0x70
 8006b96:	463b      	mov	r3, r7
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	00da      	lsls	r2, r3, #3
 8006b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ba8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d112      	bne.n	8006bd6 <USB_EPStartXfer+0x7e0>
 8006bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	e054      	b.n	8006c80 <USB_EPStartXfer+0x88a>
 8006bd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bda:	2b3e      	cmp	r3, #62	; 0x3e
 8006bdc:	d817      	bhi.n	8006c0e <USB_EPStartXfer+0x818>
 8006bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <USB_EPStartXfer+0x808>
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	029b      	lsls	r3, r3, #10
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e038      	b.n	8006c80 <USB_EPStartXfer+0x88a>
 8006c0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <USB_EPStartXfer+0x838>
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	029b      	lsls	r3, r3, #10
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e01b      	b.n	8006c80 <USB_EPStartXfer+0x88a>
 8006c48:	463b      	mov	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d116      	bne.n	8006c80 <USB_EPStartXfer+0x88a>
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c60:	4413      	add	r3, r2
 8006c62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c64:	463b      	mov	r3, r7
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	00da      	lsls	r2, r3, #3
 8006c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c74:	677b      	str	r3, [r7, #116]	; 0x74
 8006c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c80:	463b      	mov	r3, r7
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	895b      	ldrh	r3, [r3, #10]
 8006c86:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006c8a:	e097      	b.n	8006dbc <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d168      	bne.n	8006d68 <USB_EPStartXfer+0x972>
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cae:	4413      	add	r3, r2
 8006cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	00da      	lsls	r2, r3, #3
 8006cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d112      	bne.n	8006cf6 <USB_EPStartXfer+0x900>
 8006cd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cf2:	801a      	strh	r2, [r3, #0]
 8006cf4:	e05d      	b.n	8006db2 <USB_EPStartXfer+0x9bc>
 8006cf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8006cfc:	d817      	bhi.n	8006d2e <USB_EPStartXfer+0x938>
 8006cfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <USB_EPStartXfer+0x928>
 8006d14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	029b      	lsls	r3, r3, #10
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	e041      	b.n	8006db2 <USB_EPStartXfer+0x9bc>
 8006d2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <USB_EPStartXfer+0x958>
 8006d44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	029b      	lsls	r3, r3, #10
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	e024      	b.n	8006db2 <USB_EPStartXfer+0x9bc>
 8006d68:	463b      	mov	r3, r7
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d11f      	bne.n	8006db2 <USB_EPStartXfer+0x9bc>
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d7a:	1d3b      	adds	r3, r7, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d90:	463b      	mov	r3, r7
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	00da      	lsls	r2, r3, #3
 8006d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006da2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006db0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006db2:	463b      	mov	r3, r7
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	891b      	ldrh	r3, [r3, #8]
 8006db8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006dcc:	1d38      	adds	r0, r7, #4
 8006dce:	6800      	ldr	r0, [r0, #0]
 8006dd0:	f000 fd86 	bl	80078e0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d122      	bne.n	8006e24 <USB_EPStartXfer+0xa2e>
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	463b      	mov	r3, r7
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006dfc:	1d3b      	adds	r3, r7, #4
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	441a      	add	r2, r3
 8006e0a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	8013      	strh	r3, [r2, #0]
 8006e22:	e026      	b.n	8006e72 <USB_EPStartXfer+0xa7c>
 8006e24:	463b      	mov	r3, r7
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d121      	bne.n	8006e72 <USB_EPStartXfer+0xa7c>
 8006e2e:	1d3b      	adds	r3, r7, #4
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	463b      	mov	r3, r7
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e48:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	463b      	mov	r3, r7
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e72:	1d3b      	adds	r3, r7, #4
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	463b      	mov	r3, r7
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f107 020e 	add.w	r2, r7, #14
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	8013      	strh	r3, [r2, #0]
 8006e92:	f107 030e 	add.w	r3, r7, #14
 8006e96:	f107 020e 	add.w	r2, r7, #14
 8006e9a:	8812      	ldrh	r2, [r2, #0]
 8006e9c:	f082 0210 	eor.w	r2, r2, #16
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	f107 030e 	add.w	r3, r7, #14
 8006ea6:	f107 020e 	add.w	r2, r7, #14
 8006eaa:	8812      	ldrh	r2, [r2, #0]
 8006eac:	f082 0220 	eor.w	r2, r2, #32
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	1d3b      	adds	r3, r7, #4
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	441a      	add	r2, r3
 8006ec0:	f107 030e 	add.w	r3, r7, #14
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	8013      	strh	r3, [r2, #0]
 8006eda:	e3b5      	b.n	8007648 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006edc:	463b      	mov	r3, r7
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	7b1b      	ldrb	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 8090 	bne.w	8007008 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006ee8:	463b      	mov	r3, r7
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d90e      	bls.n	8006f16 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006ef8:	463b      	mov	r3, r7
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006f02:	463b      	mov	r3, r7
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f0c:	1ad2      	subs	r2, r2, r3
 8006f0e:	463b      	mov	r3, r7
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	619a      	str	r2, [r3, #24]
 8006f14:	e008      	b.n	8006f28 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2200      	movs	r2, #0
 8006f26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f28:	1d3b      	adds	r3, r7, #4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f30:	1d3b      	adds	r3, r7, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f40:	4413      	add	r3, r2
 8006f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f46:	463b      	mov	r3, r7
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	00da      	lsls	r2, r3, #3
 8006f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f52:	4413      	add	r3, r2
 8006f54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d116      	bne.n	8006f92 <USB_EPStartXfer+0xb9c>
 8006f64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f68:	881b      	ldrh	r3, [r3, #0]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e32c      	b.n	80075ec <USB_EPStartXfer+0x11f6>
 8006f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f96:	2b3e      	cmp	r3, #62	; 0x3e
 8006f98:	d818      	bhi.n	8006fcc <USB_EPStartXfer+0xbd6>
 8006f9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <USB_EPStartXfer+0xbc4>
 8006fb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc8:	801a      	strh	r2, [r3, #0]
 8006fca:	e30f      	b.n	80075ec <USB_EPStartXfer+0x11f6>
 8006fcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <USB_EPStartXfer+0xbf6>
 8006fe2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	029b      	lsls	r3, r3, #10
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	e2f1      	b.n	80075ec <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	78db      	ldrb	r3, [r3, #3]
 800700e:	2b02      	cmp	r3, #2
 8007010:	f040 818f 	bne.w	8007332 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007014:	463b      	mov	r3, r7
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d175      	bne.n	800710a <USB_EPStartXfer+0xd14>
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007036:	4413      	add	r3, r2
 8007038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	00da      	lsls	r2, r3, #3
 8007044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007048:	4413      	add	r3, r2
 800704a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800704e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007052:	463b      	mov	r3, r7
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d116      	bne.n	800708a <USB_EPStartXfer+0xc94>
 800705c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007068:	b29a      	uxth	r2, r3
 800706a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800706e:	801a      	strh	r2, [r3, #0]
 8007070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007080:	b29a      	uxth	r2, r3
 8007082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	e065      	b.n	8007156 <USB_EPStartXfer+0xd60>
 800708a:	463b      	mov	r3, r7
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b3e      	cmp	r3, #62	; 0x3e
 8007092:	d81a      	bhi.n	80070ca <USB_EPStartXfer+0xcd4>
 8007094:	463b      	mov	r3, r7
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070a0:	463b      	mov	r3, r7
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <USB_EPStartXfer+0xcc2>
 80070ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070b2:	3301      	adds	r3, #1
 80070b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070bc:	b29b      	uxth	r3, r3
 80070be:	029b      	lsls	r3, r3, #10
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	e045      	b.n	8007156 <USB_EPStartXfer+0xd60>
 80070ca:	463b      	mov	r3, r7
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070d6:	463b      	mov	r3, r7
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <USB_EPStartXfer+0xcf8>
 80070e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070e8:	3b01      	subs	r3, #1
 80070ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	029b      	lsls	r3, r3, #10
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007100:	b29a      	uxth	r2, r3
 8007102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007106:	801a      	strh	r2, [r3, #0]
 8007108:	e025      	b.n	8007156 <USB_EPStartXfer+0xd60>
 800710a:	463b      	mov	r3, r7
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d120      	bne.n	8007156 <USB_EPStartXfer+0xd60>
 8007114:	1d3b      	adds	r3, r7, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007124:	b29b      	uxth	r3, r3
 8007126:	461a      	mov	r2, r3
 8007128:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800712c:	4413      	add	r3, r2
 800712e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	00da      	lsls	r2, r3, #3
 800713a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800713e:	4413      	add	r3, r2
 8007140:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007148:	463b      	mov	r3, r7
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	b29a      	uxth	r2, r3
 8007150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d175      	bne.n	8007254 <USB_EPStartXfer+0xe5e>
 8007168:	1d3b      	adds	r3, r7, #4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007180:	4413      	add	r3, r2
 8007182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007186:	463b      	mov	r3, r7
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	00da      	lsls	r2, r3, #3
 800718e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007192:	4413      	add	r3, r2
 8007194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d116      	bne.n	80071d4 <USB_EPStartXfer+0xdde>
 80071a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071b8:	801a      	strh	r2, [r3, #0]
 80071ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	e061      	b.n	8007298 <USB_EPStartXfer+0xea2>
 80071d4:	463b      	mov	r3, r7
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b3e      	cmp	r3, #62	; 0x3e
 80071dc:	d81a      	bhi.n	8007214 <USB_EPStartXfer+0xe1e>
 80071de:	463b      	mov	r3, r7
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071ea:	463b      	mov	r3, r7
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <USB_EPStartXfer+0xe0c>
 80071f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fc:	3301      	adds	r3, #1
 80071fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007206:	b29b      	uxth	r3, r3
 8007208:	029b      	lsls	r3, r3, #10
 800720a:	b29a      	uxth	r2, r3
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	e041      	b.n	8007298 <USB_EPStartXfer+0xea2>
 8007214:	463b      	mov	r3, r7
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	095b      	lsrs	r3, r3, #5
 800721c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <USB_EPStartXfer+0xe42>
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007232:	3b01      	subs	r3, #1
 8007234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	b29b      	uxth	r3, r3
 800723e:	029b      	lsls	r3, r3, #10
 8007240:	b29b      	uxth	r3, r3
 8007242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	e021      	b.n	8007298 <USB_EPStartXfer+0xea2>
 8007254:	463b      	mov	r3, r7
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d11c      	bne.n	8007298 <USB_EPStartXfer+0xea2>
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800726e:	4413      	add	r3, r2
 8007270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007274:	463b      	mov	r3, r7
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	00da      	lsls	r2, r3, #3
 800727c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007280:	4413      	add	r3, r2
 8007282:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800728a:	463b      	mov	r3, r7
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	b29a      	uxth	r2, r3
 8007292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007296:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007298:	463b      	mov	r3, r7
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 81a4 	beq.w	80075ec <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	463b      	mov	r3, r7
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <USB_EPStartXfer+0xeda>
 80072c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10d      	bne.n	80072ec <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f040 8187 	bne.w	80075ec <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f040 8180 	bne.w	80075ec <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	463b      	mov	r3, r7
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007306:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800730a:	1d3b      	adds	r3, r7, #4
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	441a      	add	r2, r3
 8007318:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800731c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007328:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800732c:	b29b      	uxth	r3, r3
 800732e:	8013      	strh	r3, [r2, #0]
 8007330:	e15c      	b.n	80075ec <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007332:	463b      	mov	r3, r7
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	78db      	ldrb	r3, [r3, #3]
 8007338:	2b01      	cmp	r3, #1
 800733a:	f040 8155 	bne.w	80075e8 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800733e:	463b      	mov	r3, r7
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699a      	ldr	r2, [r3, #24]
 8007344:	463b      	mov	r3, r7
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d90e      	bls.n	800736c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800734e:	463b      	mov	r3, r7
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007358:	463b      	mov	r3, r7
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007362:	1ad2      	subs	r2, r2, r3
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	619a      	str	r2, [r3, #24]
 800736a:	e008      	b.n	800737e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800736c:	463b      	mov	r3, r7
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007376:	463b      	mov	r3, r7
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800737e:	463b      	mov	r3, r7
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d16f      	bne.n	8007468 <USB_EPStartXfer+0x1072>
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007390:	1d3b      	adds	r3, r7, #4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073a0:	4413      	add	r3, r2
 80073a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073a6:	463b      	mov	r3, r7
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	00da      	lsls	r2, r3, #3
 80073ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073b2:	4413      	add	r3, r2
 80073b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d116      	bne.n	80073f2 <USB_EPStartXfer+0xffc>
 80073c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e05f      	b.n	80074b2 <USB_EPStartXfer+0x10bc>
 80073f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073f6:	2b3e      	cmp	r3, #62	; 0x3e
 80073f8:	d818      	bhi.n	800742c <USB_EPStartXfer+0x1036>
 80073fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <USB_EPStartXfer+0x1024>
 8007410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007414:	3301      	adds	r3, #1
 8007416:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800741a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800741e:	b29b      	uxth	r3, r3
 8007420:	029b      	lsls	r3, r3, #10
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e042      	b.n	80074b2 <USB_EPStartXfer+0x10bc>
 800742c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <USB_EPStartXfer+0x1056>
 8007442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007446:	3b01      	subs	r3, #1
 8007448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007450:	b29b      	uxth	r3, r3
 8007452:	029b      	lsls	r3, r3, #10
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745e:	b29a      	uxth	r2, r3
 8007460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007464:	801a      	strh	r2, [r3, #0]
 8007466:	e024      	b.n	80074b2 <USB_EPStartXfer+0x10bc>
 8007468:	463b      	mov	r3, r7
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d11f      	bne.n	80074b2 <USB_EPStartXfer+0x10bc>
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007482:	b29b      	uxth	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800748a:	4413      	add	r3, r2
 800748c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007490:	463b      	mov	r3, r7
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	00da      	lsls	r2, r3, #3
 8007498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800749c:	4413      	add	r3, r2
 800749e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80074a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	1d3b      	adds	r3, r7, #4
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d16f      	bne.n	80075a4 <USB_EPStartXfer+0x11ae>
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074dc:	4413      	add	r3, r2
 80074de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074e2:	463b      	mov	r3, r7
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	00da      	lsls	r2, r3, #3
 80074ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074ee:	4413      	add	r3, r2
 80074f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80074f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d116      	bne.n	800752e <USB_EPStartXfer+0x1138>
 8007500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	b29b      	uxth	r3, r3
 8007508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007524:	b29a      	uxth	r2, r3
 8007526:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800752a:	801a      	strh	r2, [r3, #0]
 800752c:	e05e      	b.n	80075ec <USB_EPStartXfer+0x11f6>
 800752e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007532:	2b3e      	cmp	r3, #62	; 0x3e
 8007534:	d818      	bhi.n	8007568 <USB_EPStartXfer+0x1172>
 8007536:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800753a:	085b      	lsrs	r3, r3, #1
 800753c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007540:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <USB_EPStartXfer+0x1160>
 800754c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007550:	3301      	adds	r3, #1
 8007552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755a:	b29b      	uxth	r3, r3
 800755c:	029b      	lsls	r3, r3, #10
 800755e:	b29a      	uxth	r2, r3
 8007560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007564:	801a      	strh	r2, [r3, #0]
 8007566:	e041      	b.n	80075ec <USB_EPStartXfer+0x11f6>
 8007568:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800756c:	095b      	lsrs	r3, r3, #5
 800756e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007572:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007576:	f003 031f 	and.w	r3, r3, #31
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <USB_EPStartXfer+0x1192>
 800757e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007582:	3b01      	subs	r3, #1
 8007584:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800758c:	b29b      	uxth	r3, r3
 800758e:	029b      	lsls	r3, r3, #10
 8007590:	b29b      	uxth	r3, r3
 8007592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759a:	b29a      	uxth	r2, r3
 800759c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	e023      	b.n	80075ec <USB_EPStartXfer+0x11f6>
 80075a4:	463b      	mov	r3, r7
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d11e      	bne.n	80075ec <USB_EPStartXfer+0x11f6>
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	461a      	mov	r2, r3
 80075ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075be:	4413      	add	r3, r2
 80075c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075c4:	463b      	mov	r3, r7
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	00da      	lsls	r2, r3, #3
 80075cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075d0:	4413      	add	r3, r2
 80075d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e001      	b.n	80075ec <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e02e      	b.n	800764a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	463b      	mov	r3, r7
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800760a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800760e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007612:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007616:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800761a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800761e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	463b      	mov	r3, r7
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	441a      	add	r2, r3
 8007630:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d020      	beq.n	80076a8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767c:	81bb      	strh	r3, [r7, #12]
 800767e:	89bb      	ldrh	r3, [r7, #12]
 8007680:	f083 0310 	eor.w	r3, r3, #16
 8007684:	81bb      	strh	r3, [r7, #12]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	441a      	add	r2, r3
 8007690:	89bb      	ldrh	r3, [r7, #12]
 8007692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800769a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	8013      	strh	r3, [r2, #0]
 80076a6:	e01f      	b.n	80076e8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076be:	81fb      	strh	r3, [r7, #14]
 80076c0:	89fb      	ldrh	r3, [r7, #14]
 80076c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076c6:	81fb      	strh	r3, [r7, #14]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	441a      	add	r2, r3
 80076d2:	89fb      	ldrh	r3, [r7, #14]
 80076d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b087      	sub	sp, #28
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	7b1b      	ldrb	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 809d 	bne.w	8007844 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d04c      	beq.n	80077ac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	823b      	strh	r3, [r7, #16]
 8007720:	8a3b      	ldrh	r3, [r7, #16]
 8007722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d01b      	beq.n	8007762 <USB_EPClearStall+0x6c>
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007740:	81fb      	strh	r3, [r7, #14]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	441a      	add	r2, r3
 800774c:	89fb      	ldrh	r3, [r7, #14]
 800774e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800775a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800775e:	b29b      	uxth	r3, r3
 8007760:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d06c      	beq.n	8007844 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007780:	81bb      	strh	r3, [r7, #12]
 8007782:	89bb      	ldrh	r3, [r7, #12]
 8007784:	f083 0320 	eor.w	r3, r3, #32
 8007788:	81bb      	strh	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	441a      	add	r2, r3
 8007794:	89bb      	ldrh	r3, [r7, #12]
 8007796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800779a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	8013      	strh	r3, [r2, #0]
 80077aa:	e04b      	b.n	8007844 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	82fb      	strh	r3, [r7, #22]
 80077ba:	8afb      	ldrh	r3, [r7, #22]
 80077bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01b      	beq.n	80077fc <USB_EPClearStall+0x106>
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077da:	82bb      	strh	r3, [r7, #20]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	441a      	add	r2, r3
 80077e6:	8abb      	ldrh	r3, [r7, #20]
 80077e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800780e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007812:	827b      	strh	r3, [r7, #18]
 8007814:	8a7b      	ldrh	r3, [r7, #18]
 8007816:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800781a:	827b      	strh	r3, [r7, #18]
 800781c:	8a7b      	ldrh	r3, [r7, #18]
 800781e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007822:	827b      	strh	r3, [r7, #18]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	441a      	add	r2, r3
 800782e:	8a7b      	ldrh	r3, [r7, #18]
 8007830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	460b      	mov	r3, r1
 800785c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2280      	movs	r2, #128	; 0x80
 8007868:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007888:	b29b      	uxth	r3, r3
 800788a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007892:	b29a      	uxth	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b08d      	sub	sp, #52	; 0x34
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4611      	mov	r1, r2
 80078ec:	461a      	mov	r2, r3
 80078ee:	460b      	mov	r3, r1
 80078f0:	80fb      	strh	r3, [r7, #6]
 80078f2:	4613      	mov	r3, r2
 80078f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80078f6:	88bb      	ldrh	r3, [r7, #4]
 80078f8:	3301      	adds	r3, #1
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007906:	88fa      	ldrh	r2, [r7, #6]
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007916:	e01b      	b.n	8007950 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	3301      	adds	r3, #1
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	b29b      	uxth	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	b29a      	uxth	r2, r3
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	3302      	adds	r3, #2
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	3301      	adds	r3, #1
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	3b01      	subs	r3, #1
 800794e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e0      	bne.n	8007918 <USB_WritePMA+0x38>
  }
}
 8007956:	bf00      	nop
 8007958:	3734      	adds	r7, #52	; 0x34
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007962:	b480      	push	{r7}
 8007964:	b08b      	sub	sp, #44	; 0x2c
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	4611      	mov	r1, r2
 800796e:	461a      	mov	r2, r3
 8007970:	460b      	mov	r3, r1
 8007972:	80fb      	strh	r3, [r7, #6]
 8007974:	4613      	mov	r3, r2
 8007976:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007978:	88bb      	ldrh	r3, [r7, #4]
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	b29b      	uxth	r3, r3
 800797e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007992:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
 8007998:	e018      	b.n	80079cc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	3302      	adds	r3, #2
 80079a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	3301      	adds	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	3301      	adds	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	3b01      	subs	r3, #1
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e3      	bne.n	800799a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80079d2:	88bb      	ldrh	r3, [r7, #4]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	701a      	strb	r2, [r3, #0]
  }
}
 80079ee:	bf00      	nop
 80079f0:	372c      	adds	r7, #44	; 0x2c
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a06:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a0a:	f002 f89d 	bl	8009b48 <USBD_static_malloc>
 8007a0e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e066      	b.n	8007af0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	7c1b      	ldrb	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d119      	bne.n	8007a66 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a36:	2202      	movs	r2, #2
 8007a38:	2181      	movs	r1, #129	; 0x81
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 ff29 	bl	8009892 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 ff1f 	bl	8009892 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2210      	movs	r2, #16
 8007a60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007a64:	e016      	b.n	8007a94 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a66:	2340      	movs	r3, #64	; 0x40
 8007a68:	2202      	movs	r2, #2
 8007a6a:	2181      	movs	r1, #129	; 0x81
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 ff10 	bl	8009892 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 ff07 	bl	8009892 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2210      	movs	r2, #16
 8007a90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a94:	2308      	movs	r3, #8
 8007a96:	2203      	movs	r2, #3
 8007a98:	2182      	movs	r1, #130	; 0x82
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 fef9 	bl	8009892 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	7c1b      	ldrb	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 ffcb 	bl	8009a72 <USBD_LL_PrepareReceive>
 8007adc:	e007      	b.n	8007aee <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 ffc2 	bl	8009a72 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b04:	2181      	movs	r1, #129	; 0x81
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fee9 	bl	80098de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b12:	2101      	movs	r1, #1
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fee2 	bl	80098de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b22:	2182      	movs	r1, #130	; 0x82
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 feda 	bl	80098de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00e      	beq.n	8007b62 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b54:	4618      	mov	r0, r3
 8007b56:	f002 f805 	bl	8009b64 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d03a      	beq.n	8007c0c <USBD_CDC_Setup+0xa0>
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	f040 8097 	bne.w	8007cca <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	88db      	ldrh	r3, [r3, #6]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d029      	beq.n	8007bf8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da11      	bge.n	8007bd2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007bba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	88d2      	ldrh	r2, [r2, #6]
 8007bc0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007bc2:	6939      	ldr	r1, [r7, #16]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	88db      	ldrh	r3, [r3, #6]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 fa8d 	bl	80090ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007bd0:	e082      	b.n	8007cd8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	785a      	ldrb	r2, [r3, #1]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	88db      	ldrh	r3, [r3, #6]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007be8:	6939      	ldr	r1, [r7, #16]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	88db      	ldrh	r3, [r3, #6]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 faa6 	bl	8009142 <USBD_CtlPrepareRx>
      break;
 8007bf6:	e06f      	b.n	8007cd8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	7850      	ldrb	r0, [r2, #1]
 8007c04:	2200      	movs	r2, #0
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	4798      	blx	r3
      break;
 8007c0a:	e065      	b.n	8007cd8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b0b      	cmp	r3, #11
 8007c12:	d84f      	bhi.n	8007cb4 <USBD_CDC_Setup+0x148>
 8007c14:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <USBD_CDC_Setup+0xb0>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c4d 	.word	0x08007c4d
 8007c20:	08007cc3 	.word	0x08007cc3
 8007c24:	08007cb5 	.word	0x08007cb5
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cb5 	.word	0x08007cb5
 8007c30:	08007cb5 	.word	0x08007cb5
 8007c34:	08007cb5 	.word	0x08007cb5
 8007c38:	08007cb5 	.word	0x08007cb5
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007cb5 	.word	0x08007cb5
 8007c44:	08007c75 	.word	0x08007c75
 8007c48:	08007c9d 	.word	0x08007c9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d107      	bne.n	8007c66 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c56:	f107 030c 	add.w	r3, r7, #12
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 fa43 	bl	80090ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c64:	e030      	b.n	8007cc8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 f9cd 	bl	8009008 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	75fb      	strb	r3, [r7, #23]
          break;
 8007c72:	e029      	b.n	8007cc8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d107      	bne.n	8007c8e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c7e:	f107 030f 	add.w	r3, r7, #15
 8007c82:	2201      	movs	r2, #1
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fa2f 	bl	80090ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c8c:	e01c      	b.n	8007cc8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f9b9 	bl	8009008 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	75fb      	strb	r3, [r7, #23]
          break;
 8007c9a:	e015      	b.n	8007cc8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d00f      	beq.n	8007cc6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 f9ad 	bl	8009008 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007cb2:	e008      	b.n	8007cc6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 f9a6 	bl	8009008 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	75fb      	strb	r3, [r7, #23]
          break;
 8007cc0:	e002      	b.n	8007cc8 <USBD_CDC_Setup+0x15c>
          break;
 8007cc2:	bf00      	nop
 8007cc4:	e008      	b.n	8007cd8 <USBD_CDC_Setup+0x16c>
          break;
 8007cc6:	bf00      	nop
      }
      break;
 8007cc8:	e006      	b.n	8007cd8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 f99b 	bl	8009008 <USBD_CtlError>
      ret = USBD_FAIL;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd6:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop

08007ce4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e04f      	b.n	8007da6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d029      	beq.n	8007d78 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d24:	78fa      	ldrb	r2, [r7, #3]
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	440b      	add	r3, r1
 8007d32:	3318      	adds	r3, #24
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	78f9      	ldrb	r1, [r7, #3]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	4403      	add	r3, r0
 8007d44:	3338      	adds	r3, #56	; 0x38
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d4c:	fb03 f301 	mul.w	r3, r3, r1
 8007d50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d110      	bne.n	8007d78 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	440b      	add	r3, r1
 8007d64:	3318      	adds	r3, #24
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d6a:	78f9      	ldrb	r1, [r7, #3]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	2200      	movs	r2, #0
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fe5d 	bl	8009a30 <USBD_LL_Transmit>
 8007d76:	e015      	b.n	8007da4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007da0:	78fa      	ldrb	r2, [r7, #3]
 8007da2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e015      	b.n	8007dfc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fe6d 	bl	8009ab4 <USBD_LL_GetRxDataSize>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007df6:	4611      	mov	r1, r2
 8007df8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e12:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d015      	beq.n	8007e4a <USBD_CDC_EP0_RxReady+0x46>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e24:	2bff      	cmp	r3, #255	; 0xff
 8007e26:	d010      	beq.n	8007e4a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007e36:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e3e:	b292      	uxth	r2, r2
 8007e40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2243      	movs	r2, #67	; 0x43
 8007e60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007e62:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	200000b0 	.word	0x200000b0

08007e74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2243      	movs	r2, #67	; 0x43
 8007e80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007e82:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	2000006c 	.word	0x2000006c

08007e94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2243      	movs	r2, #67	; 0x43
 8007ea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007ea2:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	200000f4 	.word	0x200000f4

08007eb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ec2:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	20000028 	.word	0x20000028

08007ed4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e004      	b.n	8007ef2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b087      	sub	sp, #28
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f10:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	371c      	adds	r7, #28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f40:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e01a      	b.n	8007fb0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d114      	bne.n	8007fae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fa2:	2181      	movs	r1, #129	; 0x81
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fd43 	bl	8009a30 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e016      	b.n	8008004 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	7c1b      	ldrb	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe8:	2101      	movs	r1, #1
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fd41 	bl	8009a72 <USBD_LL_PrepareReceive>
 8007ff0:	e007      	b.n	8008002 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fd38 	bl	8009a72 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	e01f      	b.n	8008064 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	79fa      	ldrb	r2, [r7, #7]
 8008056:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f001 fb9f 	bl	800979c <USBD_LL_Init>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e016      	b.n	80080b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	f107 020e 	add.w	r2, r7, #14
 80080a4:	4610      	mov	r0, r2
 80080a6:	4798      	blx	r3
 80080a8:	4602      	mov	r2, r0
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fbca 	bl	800985c <USBD_LL_Start>
 80080c8:	4603      	mov	r3, r0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80080f4:	2303      	movs	r3, #3
 80080f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d009      	beq.n	8008116 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	4611      	mov	r1, r2
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
 8008112:	4603      	mov	r3, r0
 8008114:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d007      	beq.n	8008146 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	4611      	mov	r1, r2
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
  }

  return USBD_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f000 ff16 	bl	8008f94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2b01      	cmp	r3, #1
 800818a:	d00e      	beq.n	80081aa <USBD_LL_SetupStage+0x5a>
 800818c:	2b01      	cmp	r3, #1
 800818e:	d302      	bcc.n	8008196 <USBD_LL_SetupStage+0x46>
 8008190:	2b02      	cmp	r3, #2
 8008192:	d014      	beq.n	80081be <USBD_LL_SetupStage+0x6e>
 8008194:	e01d      	b.n	80081d2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f9d6 	bl	8008550 <USBD_StdDevReq>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73fb      	strb	r3, [r7, #15]
      break;
 80081a8:	e020      	b.n	80081ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa3a 	bl	800862c <USBD_StdItfReq>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]
      break;
 80081bc:	e016      	b.n	80081ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa76 	bl	80086b8 <USBD_StdEPReq>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
      break;
 80081d0:	e00c      	b.n	80081ec <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 fb9b 	bl	800991c <USBD_LL_StallEP>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ea:	bf00      	nop
  }

  return ret;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	460b      	mov	r3, r1
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d137      	bne.n	800827a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008210:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008218:	2b03      	cmp	r3, #3
 800821a:	d14a      	bne.n	80082b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d913      	bls.n	8008250 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	1ad2      	subs	r2, r2, r3
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	4293      	cmp	r3, r2
 8008240:	bf28      	it	cs
 8008242:	4613      	movcs	r3, r2
 8008244:	461a      	mov	r2, r3
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 ff97 	bl	800917c <USBD_CtlContinueRx>
 800824e:	e030      	b.n	80082b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008262:	2b03      	cmp	r3, #3
 8008264:	d105      	bne.n	8008272 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 ff93 	bl	800919e <USBD_CtlSendStatus>
 8008278:	e01b      	b.n	80082b2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d013      	beq.n	80082ae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800828c:	2b03      	cmp	r3, #3
 800828e:	d10e      	bne.n	80082ae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	7afa      	ldrb	r2, [r7, #11]
 800829a:	4611      	mov	r1, r2
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	4798      	blx	r3
 80082a0:	4603      	mov	r3, r0
 80082a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	e002      	b.n	80082b4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e000      	b.n	80082b4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	460b      	mov	r3, r1
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082ca:	7afb      	ldrb	r3, [r7, #11]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d16a      	bne.n	80083a6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3314      	adds	r3, #20
 80082d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d155      	bne.n	800838c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d914      	bls.n	8008316 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	1ad2      	subs	r2, r2, r3
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	461a      	mov	r2, r3
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 ff0c 	bl	8009120 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008308:	2300      	movs	r3, #0
 800830a:	2200      	movs	r2, #0
 800830c:	2100      	movs	r1, #0
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f001 fbaf 	bl	8009a72 <USBD_LL_PrepareReceive>
 8008314:	e03a      	b.n	800838c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	429a      	cmp	r2, r3
 8008320:	d11c      	bne.n	800835c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800832a:	429a      	cmp	r2, r3
 800832c:	d316      	bcc.n	800835c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008338:	429a      	cmp	r2, r3
 800833a:	d20f      	bcs.n	800835c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800833c:	2200      	movs	r2, #0
 800833e:	2100      	movs	r1, #0
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 feed 	bl	8009120 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800834e:	2300      	movs	r3, #0
 8008350:	2200      	movs	r2, #0
 8008352:	2100      	movs	r1, #0
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f001 fb8c 	bl	8009a72 <USBD_LL_PrepareReceive>
 800835a:	e017      	b.n	800838c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800836e:	2b03      	cmp	r3, #3
 8008370:	d105      	bne.n	800837e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800837e:	2180      	movs	r1, #128	; 0x80
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f001 facb 	bl	800991c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 ff1c 	bl	80091c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008392:	2b01      	cmp	r3, #1
 8008394:	d123      	bne.n	80083de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff fe9b 	bl	80080d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083a4:	e01b      	b.n	80083de <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d013      	beq.n	80083da <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d10e      	bne.n	80083da <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	7afa      	ldrb	r2, [r7, #11]
 80083c6:	4611      	mov	r1, r2
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	4798      	blx	r3
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	e002      	b.n	80083e0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083da:	2303      	movs	r3, #3
 80083dc:	e000      	b.n	80083e0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008414:	2b00      	cmp	r3, #0
 8008416:	d009      	beq.n	800842c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6852      	ldr	r2, [r2, #4]
 8008424:	b2d2      	uxtb	r2, r2
 8008426:	4611      	mov	r1, r2
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800842c:	2340      	movs	r3, #64	; 0x40
 800842e:	2200      	movs	r2, #0
 8008430:	2100      	movs	r1, #0
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fa2d 	bl	8009892 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2240      	movs	r2, #64	; 0x40
 8008444:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008448:	2340      	movs	r3, #64	; 0x40
 800844a:	2200      	movs	r2, #0
 800844c:	2180      	movs	r1, #128	; 0x80
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 fa1f 	bl	8009892 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2240      	movs	r2, #64	; 0x40
 800845e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	78fa      	ldrb	r2, [r7, #3]
 800847a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2204      	movs	r2, #4
 80084a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d105      	bne.n	80084d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d10b      	bne.n	800850a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	3301      	adds	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008532:	8a3b      	ldrh	r3, [r7, #16]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	b21a      	sxth	r2, r3
 8008538:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800853c:	4313      	orrs	r3, r2
 800853e:	b21b      	sxth	r3, r3
 8008540:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008542:	89fb      	ldrh	r3, [r7, #14]
}
 8008544:	4618      	mov	r0, r3
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008566:	2b20      	cmp	r3, #32
 8008568:	d004      	beq.n	8008574 <USBD_StdDevReq+0x24>
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	d002      	beq.n	8008574 <USBD_StdDevReq+0x24>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <USBD_StdDevReq+0x38>
 8008572:	e050      	b.n	8008616 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	4798      	blx	r3
 8008582:	4603      	mov	r3, r0
 8008584:	73fb      	strb	r3, [r7, #15]
    break;
 8008586:	e04b      	b.n	8008620 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b09      	cmp	r3, #9
 800858e:	d83c      	bhi.n	800860a <USBD_StdDevReq+0xba>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_StdDevReq+0x48>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085ed 	.word	0x080085ed
 800859c:	08008601 	.word	0x08008601
 80085a0:	0800860b 	.word	0x0800860b
 80085a4:	080085f7 	.word	0x080085f7
 80085a8:	0800860b 	.word	0x0800860b
 80085ac:	080085cb 	.word	0x080085cb
 80085b0:	080085c1 	.word	0x080085c1
 80085b4:	0800860b 	.word	0x0800860b
 80085b8:	080085e3 	.word	0x080085e3
 80085bc:	080085d5 	.word	0x080085d5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f9d0 	bl	8008968 <USBD_GetDescriptor>
      break;
 80085c8:	e024      	b.n	8008614 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fb5f 	bl	8008c90 <USBD_SetAddress>
      break;
 80085d2:	e01f      	b.n	8008614 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fb9c 	bl	8008d14 <USBD_SetConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e018      	b.n	8008614 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fc39 	bl	8008e5c <USBD_GetConfig>
      break;
 80085ea:	e013      	b.n	8008614 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc68 	bl	8008ec4 <USBD_GetStatus>
      break;
 80085f4:	e00e      	b.n	8008614 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fc96 	bl	8008f2a <USBD_SetFeature>
      break;
 80085fe:	e009      	b.n	8008614 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fca5 	bl	8008f52 <USBD_ClrFeature>
      break;
 8008608:	e004      	b.n	8008614 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fcfb 	bl	8009008 <USBD_CtlError>
      break;
 8008612:	bf00      	nop
    }
    break;
 8008614:	e004      	b.n	8008620 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fcf5 	bl	8009008 <USBD_CtlError>
    break;
 800861e:	bf00      	nop
  }

  return ret;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop

0800862c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008642:	2b20      	cmp	r3, #32
 8008644:	d003      	beq.n	800864e <USBD_StdItfReq+0x22>
 8008646:	2b40      	cmp	r3, #64	; 0x40
 8008648:	d001      	beq.n	800864e <USBD_StdItfReq+0x22>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d12a      	bne.n	80086a4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008654:	3b01      	subs	r3, #1
 8008656:	2b02      	cmp	r3, #2
 8008658:	d81d      	bhi.n	8008696 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	889b      	ldrh	r3, [r3, #4]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b01      	cmp	r3, #1
 8008662:	d813      	bhi.n	800868c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d110      	bne.n	80086a0 <USBD_StdItfReq+0x74>
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10d      	bne.n	80086a0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fd8a 	bl	800919e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800868a:	e009      	b.n	80086a0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fcba 	bl	8009008 <USBD_CtlError>
      break;
 8008694:	e004      	b.n	80086a0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fcb5 	bl	8009008 <USBD_CtlError>
      break;
 800869e:	e000      	b.n	80086a2 <USBD_StdItfReq+0x76>
      break;
 80086a0:	bf00      	nop
    }
    break;
 80086a2:	e004      	b.n	80086ae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fcae 	bl	8009008 <USBD_CtlError>
    break;
 80086ac:	bf00      	nop
  }

  return ret;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	889b      	ldrh	r3, [r3, #4]
 80086ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d004      	beq.n	80086e2 <USBD_StdEPReq+0x2a>
 80086d8:	2b40      	cmp	r3, #64	; 0x40
 80086da:	d002      	beq.n	80086e2 <USBD_StdEPReq+0x2a>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00a      	beq.n	80086f6 <USBD_StdEPReq+0x3e>
 80086e0:	e137      	b.n	8008952 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]
    break;
 80086f4:	e132      	b.n	800895c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	785b      	ldrb	r3, [r3, #1]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d03e      	beq.n	800877c <USBD_StdEPReq+0xc4>
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d002      	beq.n	8008708 <USBD_StdEPReq+0x50>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d079      	beq.n	80087fa <USBD_StdEPReq+0x142>
 8008706:	e11e      	b.n	8008946 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870e:	2b02      	cmp	r3, #2
 8008710:	d002      	beq.n	8008718 <USBD_StdEPReq+0x60>
 8008712:	2b03      	cmp	r3, #3
 8008714:	d015      	beq.n	8008742 <USBD_StdEPReq+0x8a>
 8008716:	e02b      	b.n	8008770 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <USBD_StdEPReq+0x80>
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	2b80      	cmp	r3, #128	; 0x80
 8008722:	d009      	beq.n	8008738 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 f8f7 	bl	800991c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800872e:	2180      	movs	r1, #128	; 0x80
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 f8f3 	bl	800991c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008736:	e020      	b.n	800877a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fc64 	bl	8009008 <USBD_CtlError>
        break;
 8008740:	e01b      	b.n	800877a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10e      	bne.n	8008768 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <USBD_StdEPReq+0xb0>
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2b80      	cmp	r3, #128	; 0x80
 8008754:	d008      	beq.n	8008768 <USBD_StdEPReq+0xb0>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	88db      	ldrh	r3, [r3, #6]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d104      	bne.n	8008768 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 f8da 	bl	800991c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fd18 	bl	800919e <USBD_CtlSendStatus>

        break;
 800876e:	e004      	b.n	800877a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fc48 	bl	8009008 <USBD_CtlError>
        break;
 8008778:	bf00      	nop
      }
      break;
 800877a:	e0e9      	b.n	8008950 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008782:	2b02      	cmp	r3, #2
 8008784:	d002      	beq.n	800878c <USBD_StdEPReq+0xd4>
 8008786:	2b03      	cmp	r3, #3
 8008788:	d015      	beq.n	80087b6 <USBD_StdEPReq+0xfe>
 800878a:	e02f      	b.n	80087ec <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00c      	beq.n	80087ac <USBD_StdEPReq+0xf4>
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b80      	cmp	r3, #128	; 0x80
 8008796:	d009      	beq.n	80087ac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 f8bd 	bl	800991c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087a2:	2180      	movs	r1, #128	; 0x80
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 f8b9 	bl	800991c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80087aa:	e025      	b.n	80087f8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fc2a 	bl	8009008 <USBD_CtlError>
        break;
 80087b4:	e020      	b.n	80087f8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d11b      	bne.n	80087f6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f8c4 	bl	800995a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fce3 	bl	800919e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80087ea:	e004      	b.n	80087f6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc0a 	bl	8009008 <USBD_CtlError>
        break;
 80087f4:	e000      	b.n	80087f8 <USBD_StdEPReq+0x140>
        break;
 80087f6:	bf00      	nop
      }
      break;
 80087f8:	e0aa      	b.n	8008950 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008800:	2b02      	cmp	r3, #2
 8008802:	d002      	beq.n	800880a <USBD_StdEPReq+0x152>
 8008804:	2b03      	cmp	r3, #3
 8008806:	d032      	beq.n	800886e <USBD_StdEPReq+0x1b6>
 8008808:	e097      	b.n	800893a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <USBD_StdEPReq+0x168>
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d004      	beq.n	8008820 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fbf5 	bl	8009008 <USBD_CtlError>
          break;
 800881e:	e091      	b.n	8008944 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008824:	2b00      	cmp	r3, #0
 8008826:	da0b      	bge.n	8008840 <USBD_StdEPReq+0x188>
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	3310      	adds	r3, #16
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	4413      	add	r3, r2
 800883c:	3304      	adds	r3, #4
 800883e:	e00b      	b.n	8008858 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	4413      	add	r3, r2
 8008856:	3304      	adds	r3, #4
 8008858:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2202      	movs	r2, #2
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fc3f 	bl	80090ea <USBD_CtlSendData>
        break;
 800886c:	e06a      	b.n	8008944 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800886e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008872:	2b00      	cmp	r3, #0
 8008874:	da11      	bge.n	800889a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	f003 020f 	and.w	r2, r3, #15
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	3324      	adds	r3, #36	; 0x24
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d117      	bne.n	80088c0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fbb8 	bl	8009008 <USBD_CtlError>
            break;
 8008898:	e054      	b.n	8008944 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	f003 020f 	and.w	r2, r3, #15
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	440b      	add	r3, r1
 80088ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d104      	bne.n	80088c0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fba5 	bl	8009008 <USBD_CtlError>
            break;
 80088be:	e041      	b.n	8008944 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da0b      	bge.n	80088e0 <USBD_StdEPReq+0x228>
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	3310      	adds	r3, #16
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	3304      	adds	r3, #4
 80088de:	e00b      	b.n	80088f8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4413      	add	r3, r2
 80088f6:	3304      	adds	r3, #4
 80088f8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <USBD_StdEPReq+0x24e>
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b80      	cmp	r3, #128	; 0x80
 8008904:	d103      	bne.n	800890e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	e00e      	b.n	800892c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 f840 	bl	8009998 <USBD_LL_IsStallEP>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2201      	movs	r2, #1
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e002      	b.n	800892c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2202      	movs	r2, #2
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fbd9 	bl	80090ea <USBD_CtlSendData>
          break;
 8008938:	e004      	b.n	8008944 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fb63 	bl	8009008 <USBD_CtlError>
        break;
 8008942:	bf00      	nop
      }
      break;
 8008944:	e004      	b.n	8008950 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fb5d 	bl	8009008 <USBD_CtlError>
      break;
 800894e:	bf00      	nop
    }
    break;
 8008950:	e004      	b.n	800895c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fb57 	bl	8009008 <USBD_CtlError>
    break;
 800895a:	bf00      	nop
  }

  return ret;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	2b0e      	cmp	r3, #14
 800898a:	f200 8152 	bhi.w	8008c32 <USBD_GetDescriptor+0x2ca>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <USBD_GetDescriptor+0x2c>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	08008a05 	.word	0x08008a05
 8008998:	08008a1d 	.word	0x08008a1d
 800899c:	08008a5d 	.word	0x08008a5d
 80089a0:	08008c33 	.word	0x08008c33
 80089a4:	08008c33 	.word	0x08008c33
 80089a8:	08008bd3 	.word	0x08008bd3
 80089ac:	08008bff 	.word	0x08008bff
 80089b0:	08008c33 	.word	0x08008c33
 80089b4:	08008c33 	.word	0x08008c33
 80089b8:	08008c33 	.word	0x08008c33
 80089bc:	08008c33 	.word	0x08008c33
 80089c0:	08008c33 	.word	0x08008c33
 80089c4:	08008c33 	.word	0x08008c33
 80089c8:	08008c33 	.word	0x08008c33
 80089cc:	080089d1 	.word	0x080089d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80089f2:	e126      	b.n	8008c42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fb06 	bl	8009008 <USBD_CtlError>
      err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
    break;
 8008a02:	e11e      	b.n	8008c42 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
    break;
 8008a1a:	e112      	b.n	8008c42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7c1b      	ldrb	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10d      	bne.n	8008a40 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2c:	f107 0208 	add.w	r2, r7, #8
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008a3e:	e100      	b.n	8008c42 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	f107 0208 	add.w	r2, r7, #8
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3301      	adds	r3, #1
 8008a56:	2202      	movs	r2, #2
 8008a58:	701a      	strb	r2, [r3, #0]
    break;
 8008a5a:	e0f2      	b.n	8008c42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	885b      	ldrh	r3, [r3, #2]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b05      	cmp	r3, #5
 8008a64:	f200 80ac 	bhi.w	8008bc0 <USBD_GetDescriptor+0x258>
 8008a68:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <USBD_GetDescriptor+0x108>)
 8008a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6e:	bf00      	nop
 8008a70:	08008a89 	.word	0x08008a89
 8008a74:	08008abd 	.word	0x08008abd
 8008a78:	08008af1 	.word	0x08008af1
 8008a7c:	08008b25 	.word	0x08008b25
 8008a80:	08008b59 	.word	0x08008b59
 8008a84:	08008b8d 	.word	0x08008b8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00b      	beq.n	8008aac <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	7c12      	ldrb	r2, [r2, #16]
 8008aa0:	f107 0108 	add.w	r1, r7, #8
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aaa:	e091      	b.n	8008bd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 faaa 	bl	8009008 <USBD_CtlError>
        err++;
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	72fb      	strb	r3, [r7, #11]
      break;
 8008aba:	e089      	b.n	8008bd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00b      	beq.n	8008ae0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	7c12      	ldrb	r2, [r2, #16]
 8008ad4:	f107 0108 	add.w	r1, r7, #8
 8008ad8:	4610      	mov	r0, r2
 8008ada:	4798      	blx	r3
 8008adc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ade:	e077      	b.n	8008bd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa90 	bl	8009008 <USBD_CtlError>
        err++;
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	3301      	adds	r3, #1
 8008aec:	72fb      	strb	r3, [r7, #11]
      break;
 8008aee:	e06f      	b.n	8008bd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7c12      	ldrb	r2, [r2, #16]
 8008b08:	f107 0108 	add.w	r1, r7, #8
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	4798      	blx	r3
 8008b10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b12:	e05d      	b.n	8008bd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa76 	bl	8009008 <USBD_CtlError>
        err++;
 8008b1c:	7afb      	ldrb	r3, [r7, #11]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	72fb      	strb	r3, [r7, #11]
      break;
 8008b22:	e055      	b.n	8008bd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7c12      	ldrb	r2, [r2, #16]
 8008b3c:	f107 0108 	add.w	r1, r7, #8
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b46:	e043      	b.n	8008bd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fa5c 	bl	8009008 <USBD_CtlError>
        err++;
 8008b50:	7afb      	ldrb	r3, [r7, #11]
 8008b52:	3301      	adds	r3, #1
 8008b54:	72fb      	strb	r3, [r7, #11]
      break;
 8008b56:	e03b      	b.n	8008bd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b7a:	e029      	b.n	8008bd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa42 	bl	8009008 <USBD_CtlError>
        err++;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	3301      	adds	r3, #1
 8008b88:	72fb      	strb	r3, [r7, #11]
      break;
 8008b8a:	e021      	b.n	8008bd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bae:	e00f      	b.n	8008bd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fa28 	bl	8009008 <USBD_CtlError>
        err++;
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	72fb      	strb	r3, [r7, #11]
      break;
 8008bbe:	e007      	b.n	8008bd0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa20 	bl	8009008 <USBD_CtlError>
      err++;
 8008bc8:	7afb      	ldrb	r3, [r7, #11]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008bce:	bf00      	nop
    }
    break;
 8008bd0:	e037      	b.n	8008c42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7c1b      	ldrb	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d109      	bne.n	8008bee <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be2:	f107 0208 	add.w	r2, r7, #8
 8008be6:	4610      	mov	r0, r2
 8008be8:	4798      	blx	r3
 8008bea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008bec:	e029      	b.n	8008c42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fa09 	bl	8009008 <USBD_CtlError>
      err++;
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	72fb      	strb	r3, [r7, #11]
    break;
 8008bfc:	e021      	b.n	8008c42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7c1b      	ldrb	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10d      	bne.n	8008c22 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	f107 0208 	add.w	r2, r7, #8
 8008c12:	4610      	mov	r0, r2
 8008c14:	4798      	blx	r3
 8008c16:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	2207      	movs	r2, #7
 8008c1e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c20:	e00f      	b.n	8008c42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f9ef 	bl	8009008 <USBD_CtlError>
      err++;
 8008c2a:	7afb      	ldrb	r3, [r7, #11]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	72fb      	strb	r3, [r7, #11]
    break;
 8008c30:	e007      	b.n	8008c42 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f9e7 	bl	8009008 <USBD_CtlError>
    err++;
 8008c3a:	7afb      	ldrb	r3, [r7, #11]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	72fb      	strb	r3, [r7, #11]
    break;
 8008c40:	bf00      	nop
  }

  if (err != 0U)
 8008c42:	7afb      	ldrb	r3, [r7, #11]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11e      	bne.n	8008c86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	88db      	ldrh	r3, [r3, #6]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d016      	beq.n	8008c7e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008c50:	893b      	ldrh	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00e      	beq.n	8008c74 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	88da      	ldrh	r2, [r3, #6]
 8008c5a:	893b      	ldrh	r3, [r7, #8]
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	bf28      	it	cs
 8008c60:	4613      	movcs	r3, r2
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c66:	893b      	ldrh	r3, [r7, #8]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fa3c 	bl	80090ea <USBD_CtlSendData>
 8008c72:	e009      	b.n	8008c88 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f9c6 	bl	8009008 <USBD_CtlError>
 8008c7c:	e004      	b.n	8008c88 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa8d 	bl	800919e <USBD_CtlSendStatus>
 8008c84:	e000      	b.n	8008c88 <USBD_GetDescriptor+0x320>
    return;
 8008c86:	bf00      	nop
    }
  }
}
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop

08008c90 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	889b      	ldrh	r3, [r3, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d130      	bne.n	8008d04 <USBD_SetAddress+0x74>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	88db      	ldrh	r3, [r3, #6]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d12c      	bne.n	8008d04 <USBD_SetAddress+0x74>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	885b      	ldrh	r3, [r3, #2]
 8008cae:	2b7f      	cmp	r3, #127	; 0x7f
 8008cb0:	d828      	bhi.n	8008d04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	885b      	ldrh	r3, [r3, #2]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d104      	bne.n	8008cd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f99c 	bl	8009008 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd0:	e01c      	b.n	8008d0c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7bfa      	ldrb	r2, [r7, #15]
 8008cd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fe87 	bl	80099f2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa5a 	bl	800919e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf8:	e008      	b.n	8008d0c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d02:	e003      	b.n	8008d0c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f97e 	bl	8009008 <USBD_CtlError>
  }
}
 8008d0c:	bf00      	nop
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	885b      	ldrh	r3, [r3, #2]
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	4b4b      	ldr	r3, [pc, #300]	; (8008e58 <USBD_SetConfig+0x144>)
 8008d2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d2c:	4b4a      	ldr	r3, [pc, #296]	; (8008e58 <USBD_SetConfig+0x144>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d905      	bls.n	8008d40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f966 	bl	8009008 <USBD_CtlError>
    return USBD_FAIL;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e087      	b.n	8008e50 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d002      	beq.n	8008d50 <USBD_SetConfig+0x3c>
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d025      	beq.n	8008d9a <USBD_SetConfig+0x86>
 8008d4e:	e071      	b.n	8008e34 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008d50:	4b41      	ldr	r3, [pc, #260]	; (8008e58 <USBD_SetConfig+0x144>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01c      	beq.n	8008d92 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008d58:	4b3f      	ldr	r3, [pc, #252]	; (8008e58 <USBD_SetConfig+0x144>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d62:	4b3d      	ldr	r3, [pc, #244]	; (8008e58 <USBD_SetConfig+0x144>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff f9bd 	bl	80080e8 <USBD_SetClassConfig>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d004      	beq.n	8008d82 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f944 	bl	8009008 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008d80:	e065      	b.n	8008e4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa0b 	bl	800919e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008d90:	e05d      	b.n	8008e4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa03 	bl	800919e <USBD_CtlSendStatus>
    break;
 8008d98:	e059      	b.n	8008e4e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008d9a:	4b2f      	ldr	r3, [pc, #188]	; (8008e58 <USBD_SetConfig+0x144>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d112      	bne.n	8008dc8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2202      	movs	r2, #2
 8008da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008daa:	4b2b      	ldr	r3, [pc, #172]	; (8008e58 <USBD_SetConfig+0x144>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008db4:	4b28      	ldr	r3, [pc, #160]	; (8008e58 <USBD_SetConfig+0x144>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff f9b0 	bl	8008120 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9ec 	bl	800919e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008dc6:	e042      	b.n	8008e4e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008dc8:	4b23      	ldr	r3, [pc, #140]	; (8008e58 <USBD_SetConfig+0x144>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d02a      	beq.n	8008e2c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff f99e 	bl	8008120 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008de4:	4b1c      	ldr	r3, [pc, #112]	; (8008e58 <USBD_SetConfig+0x144>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dee:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <USBD_SetConfig+0x144>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff f977 	bl	80080e8 <USBD_SetClassConfig>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00f      	beq.n	8008e24 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8fe 	bl	8009008 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff f983 	bl	8008120 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008e22:	e014      	b.n	8008e4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9ba 	bl	800919e <USBD_CtlSendStatus>
    break;
 8008e2a:	e010      	b.n	8008e4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f9b6 	bl	800919e <USBD_CtlSendStatus>
    break;
 8008e32:	e00c      	b.n	8008e4e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f8e6 	bl	8009008 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <USBD_SetConfig+0x144>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff f96c 	bl	8008120 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4c:	bf00      	nop
  }

  return ret;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	200001ee 	.word	0x200001ee

08008e5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	88db      	ldrh	r3, [r3, #6]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d004      	beq.n	8008e78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f8c9 	bl	8009008 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008e76:	e021      	b.n	8008ebc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	db17      	blt.n	8008eb2 <USBD_GetConfig+0x56>
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	dd02      	ble.n	8008e8c <USBD_GetConfig+0x30>
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d00b      	beq.n	8008ea2 <USBD_GetConfig+0x46>
 8008e8a:	e012      	b.n	8008eb2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3308      	adds	r3, #8
 8008e96:	2201      	movs	r2, #1
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f925 	bl	80090ea <USBD_CtlSendData>
      break;
 8008ea0:	e00c      	b.n	8008ebc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f91d 	bl	80090ea <USBD_CtlSendData>
      break;
 8008eb0:	e004      	b.n	8008ebc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f8a7 	bl	8009008 <USBD_CtlError>
      break;
 8008eba:	bf00      	nop
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d81e      	bhi.n	8008f18 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	88db      	ldrh	r3, [r3, #6]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d004      	beq.n	8008eec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f88f 	bl	8009008 <USBD_CtlError>
      break;
 8008eea:	e01a      	b.n	8008f22 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f043 0202 	orr.w	r2, r3, #2
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	330c      	adds	r3, #12
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f8ea 	bl	80090ea <USBD_CtlSendData>
    break;
 8008f16:	e004      	b.n	8008f22 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f874 	bl	8009008 <USBD_CtlError>
    break;
 8008f20:	bf00      	nop
  }
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	885b      	ldrh	r3, [r3, #2]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d106      	bne.n	8008f4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f92a 	bl	800919e <USBD_CtlSendStatus>
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f62:	3b01      	subs	r3, #1
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d80b      	bhi.n	8008f80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	885b      	ldrh	r3, [r3, #2]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d10c      	bne.n	8008f8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f910 	bl	800919e <USBD_CtlSendStatus>
      }
      break;
 8008f7e:	e004      	b.n	8008f8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f840 	bl	8009008 <USBD_CtlError>
      break;
 8008f88:	e000      	b.n	8008f8c <USBD_ClrFeature+0x3a>
      break;
 8008f8a:	bf00      	nop
  }
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	781a      	ldrb	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff faa8 	bl	8008514 <SWAPBYTE>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7ff fa9b 	bl	8008514 <SWAPBYTE>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f7ff fa8e 	bl	8008514 <SWAPBYTE>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	80da      	strh	r2, [r3, #6]
}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009012:	2180      	movs	r1, #128	; 0x80
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fc81 	bl	800991c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800901a:	2100      	movs	r1, #0
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fc7d 	bl	800991c <USBD_LL_StallEP>
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d036      	beq.n	80090ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009044:	6938      	ldr	r0, [r7, #16]
 8009046:	f000 f836 	bl	80090b6 <USBD_GetLen>
 800904a:	4603      	mov	r3, r0
 800904c:	3301      	adds	r3, #1
 800904e:	b29b      	uxth	r3, r3
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4413      	add	r3, r2
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	7812      	ldrb	r2, [r2, #0]
 8009062:	701a      	strb	r2, [r3, #0]
  idx++;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	3301      	adds	r3, #1
 8009068:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	4413      	add	r3, r2
 8009070:	2203      	movs	r2, #3
 8009072:	701a      	strb	r2, [r3, #0]
  idx++;
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	3301      	adds	r3, #1
 8009078:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800907a:	e013      	b.n	80090a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	4413      	add	r3, r2
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	7812      	ldrb	r2, [r2, #0]
 8009086:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	3301      	adds	r3, #1
 800908c:	613b      	str	r3, [r7, #16]
    idx++;
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	3301      	adds	r3, #1
 8009092:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]
    idx++;
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	3301      	adds	r3, #1
 80090a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e7      	bne.n	800907c <USBD_GetString+0x52>
 80090ac:	e000      	b.n	80090b0 <USBD_GetString+0x86>
    return;
 80090ae:	bf00      	nop
  }
}
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80090c6:	e005      	b.n	80090d4 <USBD_GetLen+0x1e>
  {
    len++;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	3301      	adds	r3, #1
 80090cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	3301      	adds	r3, #1
 80090d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1f5      	bne.n	80090c8 <USBD_GetLen+0x12>
  }

  return len;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	2100      	movs	r1, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fc8d 	bl	8009a30 <USBD_LL_Transmit>

  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	2100      	movs	r1, #0
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fc7c 	bl	8009a30 <USBD_LL_Transmit>

  return USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2203      	movs	r2, #3
 8009152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	2100      	movs	r1, #0
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fc80 	bl	8009a72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	2100      	movs	r1, #0
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 fc6f 	bl	8009a72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2204      	movs	r2, #4
 80091aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80091ae:	2300      	movs	r3, #0
 80091b0:	2200      	movs	r2, #0
 80091b2:	2100      	movs	r1, #0
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fc3b 	bl	8009a30 <USBD_LL_Transmit>

  return USBD_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2205      	movs	r2, #5
 80091d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091d4:	2300      	movs	r3, #0
 80091d6:	2200      	movs	r2, #0
 80091d8:	2100      	movs	r1, #0
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fc49 	bl	8009a72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80091f0:	2200      	movs	r2, #0
 80091f2:	4912      	ldr	r1, [pc, #72]	; (800923c <MX_USB_Device_Init+0x50>)
 80091f4:	4812      	ldr	r0, [pc, #72]	; (8009240 <MX_USB_Device_Init+0x54>)
 80091f6:	f7fe ff09 	bl	800800c <USBD_Init>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009200:	f7f7 ff08 	bl	8001014 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009204:	490f      	ldr	r1, [pc, #60]	; (8009244 <MX_USB_Device_Init+0x58>)
 8009206:	480e      	ldr	r0, [pc, #56]	; (8009240 <MX_USB_Device_Init+0x54>)
 8009208:	f7fe ff30 	bl	800806c <USBD_RegisterClass>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009212:	f7f7 feff 	bl	8001014 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009216:	490c      	ldr	r1, [pc, #48]	; (8009248 <MX_USB_Device_Init+0x5c>)
 8009218:	4809      	ldr	r0, [pc, #36]	; (8009240 <MX_USB_Device_Init+0x54>)
 800921a:	f7fe fe5b 	bl	8007ed4 <USBD_CDC_RegisterInterface>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009224:	f7f7 fef6 	bl	8001014 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009228:	4805      	ldr	r0, [pc, #20]	; (8009240 <MX_USB_Device_Init+0x54>)
 800922a:	f7fe ff46 	bl	80080ba <USBD_Start>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009234:	f7f7 feee 	bl	8001014 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009238:	bf00      	nop
 800923a:	bd80      	pop	{r7, pc}
 800923c:	2000014c 	.word	0x2000014c
 8009240:	200006c0 	.word	0x200006c0
 8009244:	20000034 	.word	0x20000034
 8009248:	20000138 	.word	0x20000138

0800924c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009250:	2200      	movs	r2, #0
 8009252:	4905      	ldr	r1, [pc, #20]	; (8009268 <CDC_Init_FS+0x1c>)
 8009254:	4805      	ldr	r0, [pc, #20]	; (800926c <CDC_Init_FS+0x20>)
 8009256:	f7fe fe52 	bl	8007efe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800925a:	4905      	ldr	r1, [pc, #20]	; (8009270 <CDC_Init_FS+0x24>)
 800925c:	4803      	ldr	r0, [pc, #12]	; (800926c <CDC_Init_FS+0x20>)
 800925e:	f7fe fe67 	bl	8007f30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009262:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009264:	4618      	mov	r0, r3
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20000d78 	.word	0x20000d78
 800926c:	200006c0 	.word	0x200006c0
 8009270:	20000990 	.word	0x20000990

08009274 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009274:	b480      	push	{r7}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009278:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800927a:	4618      	mov	r0, r3
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
 8009290:	4613      	mov	r3, r2
 8009292:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	2b23      	cmp	r3, #35	; 0x23
 8009298:	d84a      	bhi.n	8009330 <CDC_Control_FS+0xac>
 800929a:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <CDC_Control_FS+0x1c>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	08009331 	.word	0x08009331
 80092a4:	08009331 	.word	0x08009331
 80092a8:	08009331 	.word	0x08009331
 80092ac:	08009331 	.word	0x08009331
 80092b0:	08009331 	.word	0x08009331
 80092b4:	08009331 	.word	0x08009331
 80092b8:	08009331 	.word	0x08009331
 80092bc:	08009331 	.word	0x08009331
 80092c0:	08009331 	.word	0x08009331
 80092c4:	08009331 	.word	0x08009331
 80092c8:	08009331 	.word	0x08009331
 80092cc:	08009331 	.word	0x08009331
 80092d0:	08009331 	.word	0x08009331
 80092d4:	08009331 	.word	0x08009331
 80092d8:	08009331 	.word	0x08009331
 80092dc:	08009331 	.word	0x08009331
 80092e0:	08009331 	.word	0x08009331
 80092e4:	08009331 	.word	0x08009331
 80092e8:	08009331 	.word	0x08009331
 80092ec:	08009331 	.word	0x08009331
 80092f0:	08009331 	.word	0x08009331
 80092f4:	08009331 	.word	0x08009331
 80092f8:	08009331 	.word	0x08009331
 80092fc:	08009331 	.word	0x08009331
 8009300:	08009331 	.word	0x08009331
 8009304:	08009331 	.word	0x08009331
 8009308:	08009331 	.word	0x08009331
 800930c:	08009331 	.word	0x08009331
 8009310:	08009331 	.word	0x08009331
 8009314:	08009331 	.word	0x08009331
 8009318:	08009331 	.word	0x08009331
 800931c:	08009331 	.word	0x08009331
 8009320:	08009331 	.word	0x08009331
 8009324:	08009331 	.word	0x08009331
 8009328:	08009331 	.word	0x08009331
 800932c:	08009331 	.word	0x08009331
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009330:	bf00      	nop
  }

  return (USBD_OK);
 8009332:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7f6 ff63 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4805      	ldr	r0, [pc, #20]	; (800936c <CDC_Receive_FS+0x2c>)
 8009356:	f7fe fdeb 	bl	8007f30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800935a:	4804      	ldr	r0, [pc, #16]	; (800936c <CDC_Receive_FS+0x2c>)
 800935c:	f7fe fe2c 	bl	8007fb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009360:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	200006c0 	.word	0x200006c0

08009370 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <CDC_Transmit_FS+0x48>)
 8009382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009386:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009392:	2301      	movs	r3, #1
 8009394:	e00b      	b.n	80093ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009396:	887b      	ldrh	r3, [r7, #2]
 8009398:	461a      	mov	r2, r3
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	4806      	ldr	r0, [pc, #24]	; (80093b8 <CDC_Transmit_FS+0x48>)
 800939e:	f7fe fdae 	bl	8007efe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <CDC_Transmit_FS+0x48>)
 80093a4:	f7fe fdd8 	bl	8007f58 <USBD_CDC_TransmitPacket>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200006c0 	.word	0x200006c0

080093bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
	...

080093e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	4603      	mov	r3, r0
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2212      	movs	r2, #18
 80093f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80093f2:	4b03      	ldr	r3, [pc, #12]	; (8009400 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	2000016c 	.word	0x2000016c

08009404 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	6039      	str	r1, [r7, #0]
 800940e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2204      	movs	r2, #4
 8009414:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009416:	4b03      	ldr	r3, [pc, #12]	; (8009424 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009418:	4618      	mov	r0, r3
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	20000180 	.word	0x20000180

08009428 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	6039      	str	r1, [r7, #0]
 8009432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	4907      	ldr	r1, [pc, #28]	; (800945c <USBD_CDC_ProductStrDescriptor+0x34>)
 800943e:	4808      	ldr	r0, [pc, #32]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009440:	f7ff fdf3 	bl	800902a <USBD_GetString>
 8009444:	e004      	b.n	8009450 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	4904      	ldr	r1, [pc, #16]	; (800945c <USBD_CDC_ProductStrDescriptor+0x34>)
 800944a:	4805      	ldr	r0, [pc, #20]	; (8009460 <USBD_CDC_ProductStrDescriptor+0x38>)
 800944c:	f7ff fded 	bl	800902a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009452:	4618      	mov	r0, r3
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20001160 	.word	0x20001160
 8009460:	08009c64 	.word	0x08009c64

08009464 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	4904      	ldr	r1, [pc, #16]	; (8009484 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009474:	4804      	ldr	r0, [pc, #16]	; (8009488 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009476:	f7ff fdd8 	bl	800902a <USBD_GetString>
  return USBD_StrDesc;
 800947a:	4b02      	ldr	r3, [pc, #8]	; (8009484 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20001160 	.word	0x20001160
 8009488:	08009c7c 	.word	0x08009c7c

0800948c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	221a      	movs	r2, #26
 800949c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800949e:	f000 f843 	bl	8009528 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80094a2:	4b02      	ldr	r3, [pc, #8]	; (80094ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20000184 	.word	0x20000184

080094b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d105      	bne.n	80094ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	4907      	ldr	r1, [pc, #28]	; (80094e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094c6:	4808      	ldr	r0, [pc, #32]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094c8:	f7ff fdaf 	bl	800902a <USBD_GetString>
 80094cc:	e004      	b.n	80094d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4904      	ldr	r1, [pc, #16]	; (80094e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094d2:	4805      	ldr	r0, [pc, #20]	; (80094e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094d4:	f7ff fda9 	bl	800902a <USBD_GetString>
  }
  return USBD_StrDesc;
 80094d8:	4b02      	ldr	r3, [pc, #8]	; (80094e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20001160 	.word	0x20001160
 80094e8:	08009c90 	.word	0x08009c90

080094ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d105      	bne.n	800950a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4907      	ldr	r1, [pc, #28]	; (8009520 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009502:	4808      	ldr	r0, [pc, #32]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009504:	f7ff fd91 	bl	800902a <USBD_GetString>
 8009508:	e004      	b.n	8009514 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4904      	ldr	r1, [pc, #16]	; (8009520 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800950e:	4805      	ldr	r0, [pc, #20]	; (8009524 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009510:	f7ff fd8b 	bl	800902a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009514:	4b02      	ldr	r3, [pc, #8]	; (8009520 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20001160 	.word	0x20001160
 8009524:	08009c9c 	.word	0x08009c9c

08009528 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <Get_SerialNum+0x44>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009534:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <Get_SerialNum+0x48>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800953a:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <Get_SerialNum+0x4c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4413      	add	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d009      	beq.n	8009562 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800954e:	2208      	movs	r2, #8
 8009550:	4909      	ldr	r1, [pc, #36]	; (8009578 <Get_SerialNum+0x50>)
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f814 	bl	8009580 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009558:	2204      	movs	r2, #4
 800955a:	4908      	ldr	r1, [pc, #32]	; (800957c <Get_SerialNum+0x54>)
 800955c:	68b8      	ldr	r0, [r7, #8]
 800955e:	f000 f80f 	bl	8009580 <IntToUnicode>
  }
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	1fff7590 	.word	0x1fff7590
 8009570:	1fff7594 	.word	0x1fff7594
 8009574:	1fff7598 	.word	0x1fff7598
 8009578:	20000186 	.word	0x20000186
 800957c:	20000196 	.word	0x20000196

08009580 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]
 8009596:	e027      	b.n	80095e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	0f1b      	lsrs	r3, r3, #28
 800959c:	2b09      	cmp	r3, #9
 800959e:	d80b      	bhi.n	80095b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	0f1b      	lsrs	r3, r3, #28
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	4619      	mov	r1, r3
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	440b      	add	r3, r1
 80095b0:	3230      	adds	r2, #48	; 0x30
 80095b2:	b2d2      	uxtb	r2, r2
 80095b4:	701a      	strb	r2, [r3, #0]
 80095b6:	e00a      	b.n	80095ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	0f1b      	lsrs	r3, r3, #28
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	4619      	mov	r1, r3
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	440b      	add	r3, r1
 80095c8:	3237      	adds	r2, #55	; 0x37
 80095ca:	b2d2      	uxtb	r2, r2
 80095cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	005b      	lsls	r3, r3, #1
 80095d8:	3301      	adds	r3, #1
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	4413      	add	r3, r2
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	3301      	adds	r3, #1
 80095e6:	75fb      	strb	r3, [r7, #23]
 80095e8:	7dfa      	ldrb	r2, [r7, #23]
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d3d3      	bcc.n	8009598 <IntToUnicode+0x18>
  }
}
 80095f0:	bf00      	nop
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a0d      	ldr	r2, [pc, #52]	; (8009640 <HAL_PCD_MspInit+0x44>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d113      	bne.n	8009636 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <HAL_PCD_MspInit+0x48>)
 8009610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009612:	4a0c      	ldr	r2, [pc, #48]	; (8009644 <HAL_PCD_MspInit+0x48>)
 8009614:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009618:	6593      	str	r3, [r2, #88]	; 0x58
 800961a:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <HAL_PCD_MspInit+0x48>)
 800961c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800961e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009626:	2200      	movs	r2, #0
 8009628:	2100      	movs	r1, #0
 800962a:	2014      	movs	r0, #20
 800962c:	f7f8 f92b 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009630:	2014      	movs	r0, #20
 8009632:	f7f8 f942 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009636:	bf00      	nop
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	40005c00 	.word	0x40005c00
 8009644:	40021000 	.word	0x40021000

08009648 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f7fe fd76 	bl	8008150 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009664:	bf00      	nop
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	440b      	add	r3, r1
 800968c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	78fb      	ldrb	r3, [r7, #3]
 8009694:	4619      	mov	r1, r3
 8009696:	f7fe fdae 	bl	80081f6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800969a:	bf00      	nop
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b082      	sub	sp, #8
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	460b      	mov	r3, r1
 80096ac:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096b4:	78fa      	ldrb	r2, [r7, #3]
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	440b      	add	r3, r1
 80096c2:	333c      	adds	r3, #60	; 0x3c
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	4619      	mov	r1, r3
 80096ca:	f7fe fdf7 	bl	80082bc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe fefb 	bl	80084e0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80096ea:	bf00      	nop
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096fa:	2301      	movs	r3, #1
 80096fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	2b02      	cmp	r3, #2
 8009704:	d001      	beq.n	800970a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009706:	f7f7 fc85 	bl	8001014 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009710:	7bfa      	ldrb	r2, [r7, #15]
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fea8 	bl	800846a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe fe61 	bl	80083e8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fea3 	bl	800848a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800974c:	4b04      	ldr	r3, [pc, #16]	; (8009760 <HAL_PCD_SuspendCallback+0x30>)
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	4a03      	ldr	r2, [pc, #12]	; (8009760 <HAL_PCD_SuspendCallback+0x30>)
 8009752:	f043 0306 	orr.w	r3, r3, #6
 8009756:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	e000ed00 	.word	0xe000ed00

08009764 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d007      	beq.n	8009784 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009774:	4b08      	ldr	r3, [pc, #32]	; (8009798 <HAL_PCD_ResumeCallback+0x34>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4a07      	ldr	r2, [pc, #28]	; (8009798 <HAL_PCD_ResumeCallback+0x34>)
 800977a:	f023 0306 	bic.w	r3, r3, #6
 800977e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009780:	f000 f9fa 	bl	8009b78 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe fe92 	bl	80084b4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed00 	.word	0xe000ed00

0800979c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80097a4:	4a2b      	ldr	r2, [pc, #172]	; (8009854 <USBD_LL_Init+0xb8>)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a29      	ldr	r2, [pc, #164]	; (8009854 <USBD_LL_Init+0xb8>)
 80097b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80097b4:	4b27      	ldr	r3, [pc, #156]	; (8009854 <USBD_LL_Init+0xb8>)
 80097b6:	4a28      	ldr	r2, [pc, #160]	; (8009858 <USBD_LL_Init+0xbc>)
 80097b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097ba:	4b26      	ldr	r3, [pc, #152]	; (8009854 <USBD_LL_Init+0xb8>)
 80097bc:	2208      	movs	r2, #8
 80097be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097c0:	4b24      	ldr	r3, [pc, #144]	; (8009854 <USBD_LL_Init+0xb8>)
 80097c2:	2202      	movs	r2, #2
 80097c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097c6:	4b23      	ldr	r3, [pc, #140]	; (8009854 <USBD_LL_Init+0xb8>)
 80097c8:	2202      	movs	r2, #2
 80097ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80097cc:	4b21      	ldr	r3, [pc, #132]	; (8009854 <USBD_LL_Init+0xb8>)
 80097ce:	2200      	movs	r2, #0
 80097d0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097d2:	4b20      	ldr	r3, [pc, #128]	; (8009854 <USBD_LL_Init+0xb8>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097d8:	4b1e      	ldr	r3, [pc, #120]	; (8009854 <USBD_LL_Init+0xb8>)
 80097da:	2200      	movs	r2, #0
 80097dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097de:	4b1d      	ldr	r3, [pc, #116]	; (8009854 <USBD_LL_Init+0xb8>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097e4:	481b      	ldr	r0, [pc, #108]	; (8009854 <USBD_LL_Init+0xb8>)
 80097e6:	f7f8 fa37 	bl	8001c58 <HAL_PCD_Init>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80097f0:	f7f7 fc10 	bl	8001014 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097fa:	2318      	movs	r3, #24
 80097fc:	2200      	movs	r2, #0
 80097fe:	2100      	movs	r1, #0
 8009800:	f7f9 fd25 	bl	800324e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800980a:	2358      	movs	r3, #88	; 0x58
 800980c:	2200      	movs	r2, #0
 800980e:	2180      	movs	r1, #128	; 0x80
 8009810:	f7f9 fd1d 	bl	800324e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800981a:	23c0      	movs	r3, #192	; 0xc0
 800981c:	2200      	movs	r2, #0
 800981e:	2181      	movs	r1, #129	; 0x81
 8009820:	f7f9 fd15 	bl	800324e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800982a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800982e:	2200      	movs	r2, #0
 8009830:	2101      	movs	r1, #1
 8009832:	f7f9 fd0c 	bl	800324e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800983c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009840:	2200      	movs	r2, #0
 8009842:	2182      	movs	r1, #130	; 0x82
 8009844:	f7f9 fd03 	bl	800324e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20001360 	.word	0x20001360
 8009858:	40005c00 	.word	0x40005c00

0800985c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009872:	4618      	mov	r0, r3
 8009874:	f7f8 fad5 	bl	8001e22 <HAL_PCD_Start>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 f980 	bl	8009b84 <USBD_Get_USB_Status>
 8009884:	4603      	mov	r3, r0
 8009886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009888:	7bbb      	ldrb	r3, [r7, #14]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	4608      	mov	r0, r1
 800989c:	4611      	mov	r1, r2
 800989e:	461a      	mov	r2, r3
 80098a0:	4603      	mov	r3, r0
 80098a2:	70fb      	strb	r3, [r7, #3]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70bb      	strb	r3, [r7, #2]
 80098a8:	4613      	mov	r3, r2
 80098aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098ba:	78bb      	ldrb	r3, [r7, #2]
 80098bc:	883a      	ldrh	r2, [r7, #0]
 80098be:	78f9      	ldrb	r1, [r7, #3]
 80098c0:	f7f8 fc44 	bl	800214c <HAL_PCD_EP_Open>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 f95a 	bl	8009b84 <USBD_Get_USB_Status>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7f8 fc8b 	bl	8002218 <HAL_PCD_EP_Close>
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f93b 	bl	8009b84 <USBD_Get_USB_Status>
 800990e:	4603      	mov	r3, r0
 8009910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009912:	7bbb      	ldrb	r3, [r7, #14]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009936:	78fa      	ldrb	r2, [r7, #3]
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f7f8 fd4c 	bl	80023d8 <HAL_PCD_EP_SetStall>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f91c 	bl	8009b84 <USBD_Get_USB_Status>
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009950:	7bbb      	ldrb	r3, [r7, #14]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f7f8 fd8d 	bl	8002498 <HAL_PCD_EP_ClrStall>
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 f8fd 	bl	8009b84 <USBD_Get_USB_Status>
 800998a:	4603      	mov	r3, r0
 800998c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800998e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	da0c      	bge.n	80099ce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ba:	68f9      	ldr	r1, [r7, #12]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	440b      	add	r3, r1
 80099c8:	3302      	adds	r3, #2
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	e00b      	b.n	80099e6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099ce:	78fb      	ldrb	r3, [r7, #3]
 80099d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099d4:	68f9      	ldr	r1, [r7, #12]
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	440b      	add	r3, r1
 80099e0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7f8 fb76 	bl	8002102 <HAL_PCD_SetAddress>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f8b1 	bl	8009b84 <USBD_Get_USB_Status>
 8009a22:	4603      	mov	r3, r0
 8009a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	607a      	str	r2, [r7, #4]
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a4e:	7af9      	ldrb	r1, [r7, #11]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	f7f8 fc7d 	bl	8002352 <HAL_PCD_EP_Transmit>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 f890 	bl	8009b84 <USBD_Get_USB_Status>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a68:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b086      	sub	sp, #24
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a90:	7af9      	ldrb	r1, [r7, #11]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	f7f8 fc07 	bl	80022a8 <HAL_PCD_EP_Receive>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f86f 	bl	8009b84 <USBD_Get_USB_Status>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7f8 fc29 	bl	8002322 <HAL_PCD_EP_GetRxCount>
 8009ad0:	4603      	mov	r3, r0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <HAL_PCDEx_LPM_Callback+0x18>
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d013      	beq.n	8009b1a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009af2:	e023      	b.n	8009b3c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009afc:	f000 f83c 	bl	8009b78 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b00:	4b10      	ldr	r3, [pc, #64]	; (8009b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	4a0f      	ldr	r2, [pc, #60]	; (8009b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b06:	f023 0306 	bic.w	r3, r3, #6
 8009b0a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fcce 	bl	80084b4 <USBD_LL_Resume>
    break;
 8009b18:	e010      	b.n	8009b3c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe fcb2 	bl	800848a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b34:	f043 0306 	orr.w	r3, r3, #6
 8009b38:	6113      	str	r3, [r2, #16]
    break;
 8009b3a:	bf00      	nop
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed00 	.word	0xe000ed00

08009b48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <USBD_static_malloc+0x18>)
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	200001f0 	.word	0x200001f0

08009b64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]

}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009b7c:	f7f6 fd0a 	bl	8000594 <SystemClock_Config>
}
 8009b80:	bf00      	nop
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	2b03      	cmp	r3, #3
 8009b96:	d817      	bhi.n	8009bc8 <USBD_Get_USB_Status+0x44>
 8009b98:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <USBD_Get_USB_Status+0x1c>)
 8009b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9e:	bf00      	nop
 8009ba0:	08009bb1 	.word	0x08009bb1
 8009ba4:	08009bb7 	.word	0x08009bb7
 8009ba8:	08009bbd 	.word	0x08009bbd
 8009bac:	08009bc3 	.word	0x08009bc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb4:	e00b      	b.n	8009bce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bba:	e008      	b.n	8009bce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc0:	e005      	b.n	8009bce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc6:	e002      	b.n	8009bce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	73fb      	strb	r3, [r7, #15]
    break;
 8009bcc:	bf00      	nop
  }
  return usb_status;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <__libc_init_array>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	4e0d      	ldr	r6, [pc, #52]	; (8009c14 <__libc_init_array+0x38>)
 8009be0:	4c0d      	ldr	r4, [pc, #52]	; (8009c18 <__libc_init_array+0x3c>)
 8009be2:	1ba4      	subs	r4, r4, r6
 8009be4:	10a4      	asrs	r4, r4, #2
 8009be6:	2500      	movs	r5, #0
 8009be8:	42a5      	cmp	r5, r4
 8009bea:	d109      	bne.n	8009c00 <__libc_init_array+0x24>
 8009bec:	4e0b      	ldr	r6, [pc, #44]	; (8009c1c <__libc_init_array+0x40>)
 8009bee:	4c0c      	ldr	r4, [pc, #48]	; (8009c20 <__libc_init_array+0x44>)
 8009bf0:	f000 f82c 	bl	8009c4c <_init>
 8009bf4:	1ba4      	subs	r4, r4, r6
 8009bf6:	10a4      	asrs	r4, r4, #2
 8009bf8:	2500      	movs	r5, #0
 8009bfa:	42a5      	cmp	r5, r4
 8009bfc:	d105      	bne.n	8009c0a <__libc_init_array+0x2e>
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c04:	4798      	blx	r3
 8009c06:	3501      	adds	r5, #1
 8009c08:	e7ee      	b.n	8009be8 <__libc_init_array+0xc>
 8009c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c0e:	4798      	blx	r3
 8009c10:	3501      	adds	r5, #1
 8009c12:	e7f2      	b.n	8009bfa <__libc_init_array+0x1e>
 8009c14:	08009cbc 	.word	0x08009cbc
 8009c18:	08009cbc 	.word	0x08009cbc
 8009c1c:	08009cbc 	.word	0x08009cbc
 8009c20:	08009cc0 	.word	0x08009cc0

08009c24 <memcpy>:
 8009c24:	b510      	push	{r4, lr}
 8009c26:	1e43      	subs	r3, r0, #1
 8009c28:	440a      	add	r2, r1
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	d100      	bne.n	8009c30 <memcpy+0xc>
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c38:	e7f7      	b.n	8009c2a <memcpy+0x6>

08009c3a <memset>:
 8009c3a:	4402      	add	r2, r0
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d100      	bne.n	8009c44 <memset+0xa>
 8009c42:	4770      	bx	lr
 8009c44:	f803 1b01 	strb.w	r1, [r3], #1
 8009c48:	e7f9      	b.n	8009c3e <memset+0x4>
	...

08009c4c <_init>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr

08009c58 <_fini>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr
