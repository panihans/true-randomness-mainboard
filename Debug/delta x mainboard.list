
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a38c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a564  0800a564  0001a564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5bc  0800a5bc  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5bc  0800a5bc  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5bc  0800a5bc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5c0  0800a5c0  0001a5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ac  20000184  0800a748  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  0800a748  00021730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1f0  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000359f  00000000  00000000  0003c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  00040d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002095e  00000000  00000000  00041f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011fb5  00000000  00000000  000628be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4e9d  00000000  00000000  00074873  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053fc  00000000  00000000  0013978c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a54c 	.word	0x0800a54c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800a54c 	.word	0x0800a54c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <CDC_On_Receive>:
volatile uint8_t command_received = 0;
volatile uint8_t command_received_ticker = 0;

volatile float pGain, iGain, dGain = 0;

void CDC_On_Receive(uint8_t *buffer, uint32_t *length) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b20      	cmp	r3, #32
 80006b0:	d10c      	bne.n	80006cc <CDC_On_Receive+0x2c>
		memcpy(&command, buffer, sizeof(Command));
 80006b2:	2220      	movs	r2, #32
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <CDC_On_Receive+0x34>)
 80006b8:	f009 ff34 	bl	800a524 <memcpy>

		if (command.delimiter == 0xABCABC) {
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <CDC_On_Receive+0x34>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <CDC_On_Receive+0x38>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d102      	bne.n	80006cc <CDC_On_Receive+0x2c>
			command_received = 1;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <CDC_On_Receive+0x3c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000544 	.word	0x20000544
 80006d8:	00abcabc 	.word	0x00abcabc
 80006dc:	200001a0 	.word	0x200001a0

080006e0 <Set_Motor_Speed>:

inline void Set_Motor_Speed(volatile uint32_t *channel_a,
		volatile uint32_t *channel_b, int32_t motor_speed) {
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
	if (motor_speed > 0) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dd15      	ble.n	800071e <Set_Motor_Speed+0x3e>
		// forward
		if (motor_speed <= MOTORS_MAX_SPEED) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b64      	cmp	r3, #100	; 0x64
 80006f6:	dc0b      	bgt.n	8000710 <Set_Motor_Speed+0x30>
			// 0 to 100 compact range
			*channel_a = motor_speed * MOTORS_CO + MOTORS_MIN_CCR;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000706:	3320      	adds	r3, #32
 8000708:	461a      	mov	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e002      	b.n	8000716 <Set_Motor_Speed+0x36>
		} else {
			// 100 to 65535 full range
			*channel_a = motor_speed;
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	601a      	str	r2, [r3, #0]
		}
		*channel_b = 0;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
	} else {
		// stop
		*channel_a = 0;
		*channel_b = 0;
	}
}
 800071c:	e020      	b.n	8000760 <Set_Motor_Speed+0x80>
	} else if (motor_speed < 0) {
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	da17      	bge.n	8000754 <Set_Motor_Speed+0x74>
		if (motor_speed >= -MOTORS_MAX_SPEED) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800072a:	db0a      	blt.n	8000742 <Set_Motor_Speed+0x62>
			*channel_b = motor_speed * -MOTORS_CO + MOTORS_MIN_CCR;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <Set_Motor_Speed+0x8c>)
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000738:	3320      	adds	r3, #32
 800073a:	461a      	mov	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	e004      	b.n	800074c <Set_Motor_Speed+0x6c>
			*channel_b = motor_speed * -1;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	425b      	negs	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	601a      	str	r2, [r3, #0]
		*channel_a = 0;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	e005      	b.n	8000760 <Set_Motor_Speed+0x80>
		*channel_a = 0;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
		*channel_b = 0;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	fffffe3e 	.word	0xfffffe3e

08000770 <Set_Thrower_Speed>:
		*channel_b = 0;
	}
}

inline void Set_Thrower_Speed(volatile uint32_t *channel_a,
		int32_t thrower_speed) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	if (thrower_speed > 0) {
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dd0e      	ble.n	800079e <Set_Thrower_Speed+0x2e>
		// forward
		if (thrower_speed <= ESC_MAX_SPEED) {
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b64      	cmp	r3, #100	; 0x64
 8000784:	dc0f      	bgt.n	80007a6 <Set_Thrower_Speed+0x36>
			// 0 to 100 compact range
			*channel_a = thrower_speed * ESC_CO + ESC_MIN_CCR;
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	4613      	mov	r3, r2
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	1a9b      	subs	r3, r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8000794:	3308      	adds	r3, #8
 8000796:	461a      	mov	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	601a      	str	r2, [r3, #0]
		}
	} else {
		// stop
		*channel_a = ESC_IDLE_CCR;
	}
}
 800079c:	e003      	b.n	80007a6 <Set_Thrower_Speed+0x36>
		*channel_a = ESC_IDLE_CCR;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <Set_Servo_Speed>:

inline void Set_Servo_Speed(volatile uint32_t *channel_a, int32_t servo_speed,
		GPIO_PinState ir_status, int32_t ir_control) {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	4613      	mov	r3, r2
 80007c2:	71fb      	strb	r3, [r7, #7]
	if (!ir_status || (ir_status && ir_control)) {
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d005      	beq.n	80007d6 <Set_Servo_Speed+0x22>
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d02a      	beq.n	8000826 <Set_Servo_Speed+0x72>
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d027      	beq.n	8000826 <Set_Servo_Speed+0x72>
		if (servo_speed > 0 && servo_speed <= SERVO_MAX_SPEED) {
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dd0c      	ble.n	80007f6 <Set_Servo_Speed+0x42>
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	2b64      	cmp	r3, #100	; 0x64
 80007e0:	dc09      	bgt.n	80007f6 <Set_Servo_Speed+0x42>
			*channel_a = SERVO_IN_MIN_CCR - command.servo * SERVO_CO;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <Set_Servo_Speed+0x80>)
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	f5c3 6392 	rsb	r3, r3, #1168	; 0x490
 80007ea:	3307      	adds	r3, #7
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	461a      	mov	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	e017      	b.n	8000826 <Set_Servo_Speed+0x72>
		} else if (command.servo < 0 && servo_speed >= -SERVO_MAX_SPEED) {
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <Set_Servo_Speed+0x80>)
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da0f      	bge.n	800081e <Set_Servo_Speed+0x6a>
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000804:	db0b      	blt.n	800081e <Set_Servo_Speed+0x6a>
			*channel_a = command.servo * -SERVO_CO + SERVO_OUT_MIN_CCR;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <Set_Servo_Speed+0x80>)
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	f2a3 42e2 	subw	r2, r3, #1250	; 0x4e2
 800080e:	4613      	mov	r3, r2
 8000810:	079b      	lsls	r3, r3, #30
 8000812:	1a9b      	subs	r3, r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	e003      	b.n	8000826 <Set_Servo_Speed+0x72>
		} else {
			*channel_a = 0;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000824:	e7ff      	b.n	8000826 <Set_Servo_Speed+0x72>
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000544 	.word	0x20000544

08000838 <Calculate_PID>:

Motor motor1;
Motor motor2;
Motor motor3;

inline void Calculate_PID(Motor *motor) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	// based on "PID Without a PhD" by Tim Wescott
	// https://www.embeddedrelated.com/showarticle/943.php
	if (motor->target_speed > 0.1 || motor->target_speed < -0.1) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe4b 	bl	80004e0 <__aeabi_f2d>
 800084a:	a380      	add	r3, pc, #512	; (adr r3, 8000a4c <Calculate_PID+0x214>)
 800084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000850:	f7ff ff1c 	bl	800068c <__aeabi_dcmpgt>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10d      	bne.n	8000876 <Calculate_PID+0x3e>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe3e 	bl	80004e0 <__aeabi_f2d>
 8000864:	a37b      	add	r3, pc, #492	; (adr r3, 8000a54 <Calculate_PID+0x21c>)
 8000866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800086a:	f7ff fef1 	bl	8000650 <__aeabi_dcmplt>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	f000 80c7 	beq.w	8000a04 <Calculate_PID+0x1cc>
		float pTerm, iTerm, dTerm;
		if (command.pid_type == 0) {
 8000876:	4b68      	ldr	r3, [pc, #416]	; (8000a18 <Calculate_PID+0x1e0>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10a      	bne.n	8000894 <Calculate_PID+0x5c>
			pGain = 1;
 800087e:	4b67      	ldr	r3, [pc, #412]	; (8000a1c <Calculate_PID+0x1e4>)
 8000880:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000884:	601a      	str	r2, [r3, #0]
			iGain = 0.005;
 8000886:	4b66      	ldr	r3, [pc, #408]	; (8000a20 <Calculate_PID+0x1e8>)
 8000888:	4a66      	ldr	r2, [pc, #408]	; (8000a24 <Calculate_PID+0x1ec>)
 800088a:	601a      	str	r2, [r3, #0]
			dGain = 5;
 800088c:	4b66      	ldr	r3, [pc, #408]	; (8000a28 <Calculate_PID+0x1f0>)
 800088e:	4a67      	ldr	r2, [pc, #412]	; (8000a2c <Calculate_PID+0x1f4>)
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	e009      	b.n	80008a8 <Calculate_PID+0x70>
		} else {
			pGain = 1;
 8000894:	4b61      	ldr	r3, [pc, #388]	; (8000a1c <Calculate_PID+0x1e4>)
 8000896:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089a:	601a      	str	r2, [r3, #0]
			iGain = 0.001;
 800089c:	4b60      	ldr	r3, [pc, #384]	; (8000a20 <Calculate_PID+0x1e8>)
 800089e:	4a64      	ldr	r2, [pc, #400]	; (8000a30 <Calculate_PID+0x1f8>)
 80008a0:	601a      	str	r2, [r3, #0]
			dGain = 10;
 80008a2:	4b61      	ldr	r3, [pc, #388]	; (8000a28 <Calculate_PID+0x1f0>)
 80008a4:	4a63      	ldr	r2, [pc, #396]	; (8000a34 <Calculate_PID+0x1fc>)
 80008a6:	601a      	str	r2, [r3, #0]
		}

		int error = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
		if (command.pid_type == 0) {
 80008ac:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <Calculate_PID+0x1e0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d110      	bne.n	80008d6 <Calculate_PID+0x9e>
			error = motor->target_speed - motor->cur_enc_speed;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ce:	ee17 3a90 	vmov	r3, s15
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00c      	b.n	80008f0 <Calculate_PID+0xb8>
		} else {
			error = motor->target_speed - motor->enc_speed_hist_avg;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80008e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ea:	ee17 3a90 	vmov	r3, s15
 80008ee:	617b      	str	r3, [r7, #20]
		}
		pTerm = error * pGain;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008fa:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <Calculate_PID+0x1e4>)
 80008fc:	edd3 7a00 	vldr	s15, [r3]
 8000900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000904:	edc7 7a04 	vstr	s15, [r7, #16]

		motor->err_sum += error;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	441a      	add	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	645a      	str	r2, [r3, #68]	; 0x44
		motor->err_sum = clamp(-1000, 1000, motor->err_sum);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800091c:	db07      	blt.n	800092e <Calculate_PID+0xf6>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000926:	bfa8      	it	ge
 8000928:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800092c:	e000      	b.n	8000930 <Calculate_PID+0xf8>
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <Calculate_PID+0x200>)
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	6453      	str	r3, [r2, #68]	; 0x44
		iTerm = iGain * motor->err_sum;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000938:	ee07 3a90 	vmov	s15, r3
 800093c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <Calculate_PID+0x1e8>)
 8000942:	edd3 7a00 	vldr	s15, [r3]
 8000946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094a:	edc7 7a03 	vstr	s15, [r7, #12]

		dTerm = dGain * (motor->prev_speed - motor->cur_enc_speed);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	ee07 3a90 	vmov	s15, r3
 800095c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000960:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000964:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <Calculate_PID+0x1f0>)
 8000966:	edd3 7a00 	vldr	s15, [r3]
 800096a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800096e:	edc7 7a02 	vstr	s15, [r7, #8]
		motor->prev_speed = motor->cur_enc_speed;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		motor->cur_speed = motor->cur_speed + pTerm + iTerm + dTerm;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800098a:	edd7 7a04 	vldr	s15, [r7, #16]
 800098e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000992:	edd7 7a03 	vldr	s15, [r7, #12]
 8000996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800099a:	edd7 7a02 	vldr	s15, [r7, #8]
 800099e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		motor->cur_speed = clamp(-100, 100, motor->cur_speed);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80009ae:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000a3c <Calculate_PID+0x204>
 80009b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ba:	dd01      	ble.n	80009c0 <Calculate_PID+0x188>
 80009bc:	2300      	movs	r3, #0
 80009be:	e00c      	b.n	80009da <Calculate_PID+0x1a2>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80009c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000a40 <Calculate_PID+0x208>
 80009ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	bf4c      	ite	mi
 80009d4:	2301      	movmi	r3, #1
 80009d6:	2300      	movpl	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <Calculate_PID+0x1aa>
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <Calculate_PID+0x20c>)
 80009e0:	e00d      	b.n	80009fe <Calculate_PID+0x1c6>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80009e8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000a3c <Calculate_PID+0x204>
 80009ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f4:	dd01      	ble.n	80009fa <Calculate_PID+0x1c2>
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <Calculate_PID+0x210>)
 80009f8:	e001      	b.n	80009fe <Calculate_PID+0x1c6>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	63d3      	str	r3, [r2, #60]	; 0x3c
	if (motor->target_speed > 0.1 || motor->target_speed < -0.1) {
 8000a02:	e003      	b.n	8000a0c <Calculate_PID+0x1d4>
	} else {
		motor->cur_speed = 0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f04f 0200 	mov.w	r2, #0
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	f3af 8000 	nop.w
 8000a18:	20000544 	.word	0x20000544
 8000a1c:	200005b0 	.word	0x200005b0
 8000a20:	20000668 	.word	0x20000668
 8000a24:	3ba3d70a 	.word	0x3ba3d70a
 8000a28:	200001a4 	.word	0x200001a4
 8000a2c:	40a00000 	.word	0x40a00000
 8000a30:	3a83126f 	.word	0x3a83126f
 8000a34:	41200000 	.word	0x41200000
 8000a38:	fffffc18 	.word	0xfffffc18
 8000a3c:	42c80000 	.word	0x42c80000
 8000a40:	c2c80000 	.word	0xc2c80000
 8000a44:	c2c80000 	.word	0xc2c80000
 8000a48:	42c80000 	.word	0x42c80000
 8000a4c:	9999999a 	.word	0x9999999a
 8000a50:	3fb99999 	.word	0x3fb99999
 8000a54:	9999999a 	.word	0x9999999a
 8000a58:	bfb99999 	.word	0xbfb99999

08000a5c <Calculate_Encoder_Diff>:

inline int Calculate_Encoder_Diff(uint16_t prev_pos, uint16_t cur_pos) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	80bb      	strh	r3, [r7, #4]
	int diff = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
	if (prev_pos > ENCODER_QUADRANT_3 && cur_pos < ENCODER_QUADRANT) {
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d90c      	bls.n	8000a94 <Calculate_Encoder_Diff+0x38>
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d807      	bhi.n	8000a94 <Calculate_Encoder_Diff+0x38>
		// encoder counter overflow from high to low
		diff = 65535 - prev_pos + cur_pos;
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000a8a:	33ff      	adds	r3, #255	; 0xff
 8000a8c:	88ba      	ldrh	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e015      	b.n	8000ac0 <Calculate_Encoder_Diff+0x64>
	} else if (prev_pos < ENCODER_QUADRANT && cur_pos > ENCODER_QUADRANT_3) {
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d80c      	bhi.n	8000ab8 <Calculate_Encoder_Diff+0x5c>
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	f64b 72fd 	movw	r2, #49149	; 0xbffd
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d907      	bls.n	8000ab8 <Calculate_Encoder_Diff+0x5c>
		// encoder counter overflow from low to high
		diff = -65535 + cur_pos - prev_pos;
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000aae:	3bff      	subs	r3, #255	; 0xff
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e003      	b.n	8000ac0 <Calculate_Encoder_Diff+0x64>
	} else {
		// encoder didn't overflow
		diff = cur_pos - prev_pos;
 8000ab8:	88ba      	ldrh	r2, [r7, #4]
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	60fb      	str	r3, [r7, #12]
	}
	return clamp(-200, 200, diff) / 2;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8000ac6:	db07      	blt.n	8000ad8 <Calculate_Encoder_Diff+0x7c>
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2bc8      	cmp	r3, #200	; 0xc8
 8000acc:	bfa8      	it	ge
 8000ace:	23c8      	movge	r3, #200	; 0xc8
 8000ad0:	0fda      	lsrs	r2, r3, #31
 8000ad2:	4413      	add	r3, r2
 8000ad4:	105b      	asrs	r3, r3, #1
 8000ad6:	e001      	b.n	8000adc <Calculate_Encoder_Diff+0x80>
 8000ad8:	f06f 0363 	mvn.w	r3, #99	; 0x63
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <Handle_Encoder>:

void Handle_Encoder(Motor *motor, uint16_t count) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	807b      	strh	r3, [r7, #2]
	motor->cur_pos = count;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	887a      	ldrh	r2, [r7, #2]
 8000af8:	805a      	strh	r2, [r3, #2]
	motor->cur_enc_speed = Calculate_Encoder_Diff(motor->prev_pos,
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	881a      	ldrh	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	885b      	ldrh	r3, [r3, #2]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4610      	mov	r0, r2
 8000b06:	f7ff ffa9 	bl	8000a5c <Calculate_Encoder_Diff>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	605a      	str	r2, [r3, #4]
			motor->cur_pos);
	motor->prev_pos = motor->cur_pos;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	885a      	ldrh	r2, [r3, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	801a      	strh	r2, [r3, #0]

	motor->enc_speed_hist[motor->enc_speed_hist_cnt] = motor->cur_enc_speed;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6859      	ldr	r1, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3202      	adds	r2, #2
 8000b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (motor->enc_speed_hist_cnt >= 9) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	dd03      	ble.n	8000b38 <Handle_Encoder+0x50>
		motor->enc_speed_hist_cnt = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	631a      	str	r2, [r3, #48]	; 0x30
 8000b36:	e004      	b.n	8000b42 <Handle_Encoder+0x5a>
	} else {
		motor->enc_speed_hist_cnt += 1;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
	}

	int sum = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e00a      	b.n	8000b62 <Handle_Encoder+0x7a>
		sum += motor->enc_speed_hist[i];
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	3202      	adds	r2, #2
 8000b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 10; i++) {
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	ddf1      	ble.n	8000b4c <Handle_Encoder+0x64>
	}
	motor->enc_speed_hist_avg = sum / 10;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <Handle_Encoder+0xa4>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	1092      	asrs	r2, r2, #2
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	ee07 3a90 	vmov	s15, r3
 8000b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	66666667 	.word	0x66666667

08000b90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b90:	b598      	push	{r3, r4, r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b94:	f001 f993 	bl	8001ebe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b98:	f000 f936 	bl	8000e08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b9c:	f000 fd8a 	bl	80016b4 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000ba0:	f000 fb12 	bl	80011c8 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000ba4:	f000 fb9c 	bl	80012e0 <MX_TIM8_Init>
	MX_TIM15_Init();
 8000ba8:	f000 fc0a 	bl	80013c0 <MX_TIM15_Init>
	MX_TIM16_Init();
 8000bac:	f000 fc8e 	bl	80014cc <MX_TIM16_Init>
	MX_TIM1_Init();
 8000bb0:	f000 f992 	bl	8000ed8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000bb4:	f000 fa40 	bl	8001038 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000bb8:	f000 fa92 	bl	80010e0 <MX_TIM3_Init>
	MX_TIM7_Init();
 8000bbc:	f000 fb5a 	bl	8001274 <MX_TIM7_Init>
	MX_TIM17_Init();
 8000bc0:	f000 fcfe 	bl	80015c0 <MX_TIM17_Init>
	MX_USB_Device_Init();
 8000bc4:	f008 ff92 	bl	8009aec <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4875      	ldr	r0, [pc, #468]	; (8000da0 <main+0x210>)
 8000bcc:	f004 fa8c 	bl	80050e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4874      	ldr	r0, [pc, #464]	; (8000da4 <main+0x214>)
 8000bd4:	f004 fa88 	bl	80050e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4873      	ldr	r0, [pc, #460]	; (8000da8 <main+0x218>)
 8000bdc:	f004 fa84 	bl	80050e8 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000be0:	2100      	movs	r1, #0
 8000be2:	4872      	ldr	r0, [pc, #456]	; (8000dac <main+0x21c>)
 8000be4:	f004 f8da 	bl	8004d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000be8:	2104      	movs	r1, #4
 8000bea:	4870      	ldr	r0, [pc, #448]	; (8000dac <main+0x21c>)
 8000bec:	f004 f8d6 	bl	8004d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	486e      	ldr	r0, [pc, #440]	; (8000dac <main+0x21c>)
 8000bf4:	f004 f8d2 	bl	8004d9c <HAL_TIM_PWM_Start>
	TIM1->CCR1 = 0;
 8000bf8:	4b6d      	ldr	r3, [pc, #436]	; (8000db0 <main+0x220>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <main+0x220>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000c04:	4b6a      	ldr	r3, [pc, #424]	; (8000db0 <main+0x220>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4869      	ldr	r0, [pc, #420]	; (8000db4 <main+0x224>)
 8000c0e:	f004 f8c5 	bl	8004d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c12:	2104      	movs	r1, #4
 8000c14:	4867      	ldr	r0, [pc, #412]	; (8000db4 <main+0x224>)
 8000c16:	f004 f8c1 	bl	8004d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c1a:	2108      	movs	r1, #8
 8000c1c:	4865      	ldr	r0, [pc, #404]	; (8000db4 <main+0x224>)
 8000c1e:	f004 f8bd 	bl	8004d9c <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 8000c22:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <main+0x228>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8000c28:	4b63      	ldr	r3, [pc, #396]	; (8000db8 <main+0x228>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 8000c2e:	4b62      	ldr	r3, [pc, #392]	; (8000db8 <main+0x228>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000c34:	2100      	movs	r1, #0
 8000c36:	4861      	ldr	r0, [pc, #388]	; (8000dbc <main+0x22c>)
 8000c38:	f004 f8b0 	bl	8004d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4860      	ldr	r0, [pc, #384]	; (8000dc0 <main+0x230>)
 8000c40:	f004 f8ac 	bl	8004d9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	485f      	ldr	r0, [pc, #380]	; (8000dc4 <main+0x234>)
 8000c48:	f004 f8a8 	bl	8004d9c <HAL_TIM_PWM_Start>
	TIM15->CCR1 = 0;
 8000c4c:	4b5e      	ldr	r3, [pc, #376]	; (8000dc8 <main+0x238>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = ESC_IDLE_CCR;
 8000c52:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <main+0x23c>)
 8000c54:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = 0;
 8000c5a:	4b5d      	ldr	r3, [pc, #372]	; (8000dd0 <main+0x240>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_Base_Start_IT(&htim7);
 8000c60:	485c      	ldr	r0, [pc, #368]	; (8000dd4 <main+0x244>)
 8000c62:	f003 ffd9 	bl	8004c18 <HAL_TIM_Base_Start_IT>

	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c66:	4b5c      	ldr	r3, [pc, #368]	; (8000dd8 <main+0x248>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	4a5b      	ldr	r2, [pc, #364]	; (8000dd8 <main+0x248>)
 8000c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c70:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8000c72:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <main+0x24c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c78:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <main+0x24c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <main+0x24c>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (command_received == 1) {
 8000c84:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <main+0x250>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d1fa      	bne.n	8000c84 <main+0xf4>
			command_received = 0;
 8000c8e:	4b54      	ldr	r3, [pc, #336]	; (8000de0 <main+0x250>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
			command_received_ticker = 70;
 8000c94:	4b53      	ldr	r3, [pc, #332]	; (8000de4 <main+0x254>)
 8000c96:	2246      	movs	r2, #70	; 0x46
 8000c98:	701a      	strb	r2, [r3, #0]

			// toggle led
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4852      	ldr	r0, [pc, #328]	; (8000de8 <main+0x258>)
 8000c9e:	f001 fc41 	bl	8002524 <HAL_GPIO_TogglePin>

			feedback.ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4850      	ldr	r0, [pc, #320]	; (8000de8 <main+0x258>)
 8000ca6:	f001 fc0d 	bl	80024c4 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <main+0x25c>)
 8000cb0:	615a      	str	r2, [r3, #20]

			if (fabs(motor1.target_speed - command.motor1) > 0.1) {
 8000cb2:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <main+0x260>)
 8000cb4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000cb8:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <main+0x264>)
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc2:	eef0 7ae7 	vabs.f32	s15, s15
 8000cc6:	ee17 0a90 	vmov	r0, s15
 8000cca:	f7ff fc09 	bl	80004e0 <__aeabi_f2d>
 8000cce:	a332      	add	r3, pc, #200	; (adr r3, 8000d98 <main+0x208>)
 8000cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd4:	f7ff fcda 	bl	800068c <__aeabi_dcmpgt>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <main+0x154>
				motor1.err_sum = 0;
 8000cde:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <main+0x260>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	645a      	str	r2, [r3, #68]	; 0x44
			}
			if (fabs(motor2.target_speed - command.motor2) > 0.1) {
 8000ce4:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <main+0x268>)
 8000ce6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <main+0x264>)
 8000cec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf4:	eef0 7ae7 	vabs.f32	s15, s15
 8000cf8:	ee17 0a90 	vmov	r0, s15
 8000cfc:	f7ff fbf0 	bl	80004e0 <__aeabi_f2d>
 8000d00:	a325      	add	r3, pc, #148	; (adr r3, 8000d98 <main+0x208>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fcc1 	bl	800068c <__aeabi_dcmpgt>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <main+0x186>
				motor2.err_sum = 0;
 8000d10:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <main+0x268>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
			}
			if (fabs(motor3.target_speed - command.motor3) > 0.1) {
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <main+0x26c>)
 8000d18:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000d1c:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <main+0x264>)
 8000d1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d26:	eef0 7ae7 	vabs.f32	s15, s15
 8000d2a:	ee17 0a90 	vmov	r0, s15
 8000d2e:	f7ff fbd7 	bl	80004e0 <__aeabi_f2d>
 8000d32:	a319      	add	r3, pc, #100	; (adr r3, 8000d98 <main+0x208>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fca8 	bl	800068c <__aeabi_dcmpgt>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <main+0x1b8>
				motor3.err_sum = 0;
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <main+0x26c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	645a      	str	r2, [r3, #68]	; 0x44
			}
			motor1.target_speed = command.motor1;
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <main+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <main+0x260>)
 8000d4e:	6393      	str	r3, [r2, #56]	; 0x38
			motor2.target_speed = command.motor2;
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <main+0x264>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a28      	ldr	r2, [pc, #160]	; (8000df8 <main+0x268>)
 8000d56:	6393      	str	r3, [r2, #56]	; 0x38
			motor3.target_speed = command.motor3;
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <main+0x264>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <main+0x26c>)
 8000d5e:	6393      	str	r3, [r2, #56]	; 0x38
//			pGain = command.pGain;
//			iGain = command.iGain;
//			dGain = command.dGain;

			Set_Thrower_Speed(&(TIM16->CCR1), command.thrower);
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <main+0x264>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4826      	ldr	r0, [pc, #152]	; (8000e00 <main+0x270>)
 8000d68:	f7ff fd02 	bl	8000770 <Set_Thrower_Speed>

			Set_Servo_Speed(&(TIM17->CCR1), command.servo,
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <main+0x264>)
 8000d6e:	691c      	ldr	r4, [r3, #16]
 8000d70:	2108      	movs	r1, #8
 8000d72:	481d      	ldr	r0, [pc, #116]	; (8000de8 <main+0x258>)
 8000d74:	f001 fba6 	bl	80024c4 <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <main+0x264>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	4621      	mov	r1, r4
 8000d82:	4820      	ldr	r0, [pc, #128]	; (8000e04 <main+0x274>)
 8000d84:	f7ff fd16 	bl	80007b4 <Set_Servo_Speed>
					HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3), command.ir);

			CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <main+0x25c>)
 8000d8c:	f008 ff70 	bl	8009c70 <CDC_Transmit_FS>
		if (command_received == 1) {
 8000d90:	e778      	b.n	8000c84 <main+0xf4>
 8000d92:	bf00      	nop
 8000d94:	f3af 8000 	nop.w
 8000d98:	9999999a 	.word	0x9999999a
 8000d9c:	3fb99999 	.word	0x3fb99999
 8000da0:	2000066c 	.word	0x2000066c
 8000da4:	20000460 	.word	0x20000460
 8000da8:	20000414 	.word	0x20000414
 8000dac:	200005d4 	.word	0x200005d4
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	20000564 	.word	0x20000564
 8000db8:	40000400 	.word	0x40000400
 8000dbc:	200004ac 	.word	0x200004ac
 8000dc0:	20000700 	.word	0x20000700
 8000dc4:	200004f8 	.word	0x200004f8
 8000dc8:	40014000 	.word	0x40014000
 8000dcc:	40014400 	.word	0x40014400
 8000dd0:	40014800 	.word	0x40014800
 8000dd4:	2000074c 	.word	0x2000074c
 8000dd8:	e000edf0 	.word	0xe000edf0
 8000ddc:	e0001000 	.word	0xe0001000
 8000de0:	200001a0 	.word	0x200001a0
 8000de4:	200001a1 	.word	0x200001a1
 8000de8:	48000400 	.word	0x48000400
 8000dec:	200005b4 	.word	0x200005b4
 8000df0:	20000620 	.word	0x20000620
 8000df4:	20000544 	.word	0x20000544
 8000df8:	200003cc 	.word	0x200003cc
 8000dfc:	200006b8 	.word	0x200006b8
 8000e00:	40014434 	.word	0x40014434
 8000e04:	40014834 	.word	0x40014834

08000e08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0a4      	sub	sp, #144	; 0x90
 8000e0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e12:	2238      	movs	r2, #56	; 0x38
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f009 fb8f 	bl	800a53a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2244      	movs	r2, #68	; 0x44
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f009 fb81 	bl	800a53a <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f002 fef5 	bl	8003c28 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000e3e:	2322      	movs	r3, #34	; 0x22
 8000e40:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_OSCILLATORTYPE_HSI48;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e48:	2340      	movs	r3, #64	; 0x40
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	2302      	movs	r3, #2
 8000e52:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000e5c:	2314      	movs	r3, #20
 8000e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 ff89 	bl	8003d90 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x80>
		Error_Handler();
 8000e84:	f000 fd2e 	bl	80018e4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e88:	230f      	movs	r3, #15
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000e9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 fa8c 	bl	80043c0 <HAL_RCC_ClockConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0xaa>
		Error_Handler();
 8000eae:	f000 fd19 	bl	80018e4 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	603b      	str	r3, [r7, #0]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fc62 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xc6>
		Error_Handler();
 8000eca:	f000 fd0b 	bl	80018e4 <Error_Handler>
	}
}
 8000ece:	bf00      	nop
 8000ed0:	3790      	adds	r7, #144	; 0x90
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b098      	sub	sp, #96	; 0x60
 8000edc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000eea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2234      	movs	r2, #52	; 0x34
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f009 fb18 	bl	800a53a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000f0a:	4b49      	ldr	r3, [pc, #292]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f0c:	4a49      	ldr	r2, [pc, #292]	; (8001034 <MX_TIM1_Init+0x15c>)
 8000f0e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000f10:	4b47      	ldr	r3, [pc, #284]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b46      	ldr	r3, [pc, #280]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f22:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000f36:	483e      	ldr	r0, [pc, #248]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f38:	f003 fed8 	bl	8004cec <HAL_TIM_PWM_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000f42:	f000 fccf 	bl	80018e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000f52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f56:	4619      	mov	r1, r3
 8000f58:	4835      	ldr	r0, [pc, #212]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f5a:	f004 ffb5 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000f64:	f000 fcbe 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	; 0x60
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4828      	ldr	r0, [pc, #160]	; (8001030 <MX_TIM1_Init+0x158>)
 8000f8e:	f004 fab7 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8000f98:	f000 fca4 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <MX_TIM1_Init+0x158>)
 8000faa:	f004 faa9 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8000fb4:	f000 fc96 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000fbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <MX_TIM1_Init+0x158>)
 8000fc6:	f004 fa9b 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8000fd0:	f000 fc88 	bl	80018e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM1_Init+0x158>)
 8001012:	f004 ffdb 	bl	8005fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0x148>
			!= HAL_OK) {
		Error_Handler();
 800101c:	f000 fc62 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM1_Init+0x158>)
 8001022:	f000 fde3 	bl	8001bec <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3760      	adds	r7, #96	; 0x60
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200005d4 	.word	0x200005d4
 8001034:	40012c00 	.word	0x40012c00

08001038 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2224      	movs	r2, #36	; 0x24
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f009 fa77 	bl	800a53a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_TIM2_Init+0xa4>)
 8001058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_TIM2_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_TIM2_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_TIM2_Init+0xa4>)
 800106c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001070:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_TIM2_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_TIM2_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800107e:	2303      	movs	r3, #3
 8001080:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_TIM2_Init+0xa4>)
 80010aa:	f003 ff77 	bl	8004f9c <HAL_TIM_Encoder_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x80>
		Error_Handler();
 80010b4:	f000 fc16 	bl	80018e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_TIM2_Init+0xa4>)
 80010c6:	f004 feff 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80010d0:	f000 fc08 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	; 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000066c 	.word	0x2000066c

080010e0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <MX_TIM3_Init+0xe0>)
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <MX_TIM3_Init+0xe4>)
 8001108:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MX_TIM3_Init+0xe0>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_TIM3_Init+0xe0>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MX_TIM3_Init+0xe0>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_TIM3_Init+0xe0>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_TIM3_Init+0xe0>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800112a:	4825      	ldr	r0, [pc, #148]	; (80011c0 <MX_TIM3_Init+0xe0>)
 800112c:	f003 fdde 	bl	8004cec <HAL_TIM_PWM_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM3_Init+0x5a>
		Error_Handler();
 8001136:	f000 fbd5 	bl	80018e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	481d      	ldr	r0, [pc, #116]	; (80011c0 <MX_TIM3_Init+0xe0>)
 800114a:	f004 febd 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001154:	f000 fbc6 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	; (80011c0 <MX_TIM3_Init+0xe0>)
 8001170:	f004 f9c6 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800117a:	f000 fbb3 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001182:	463b      	mov	r3, r7
 8001184:	2204      	movs	r2, #4
 8001186:	4619      	mov	r1, r3
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_TIM3_Init+0xe0>)
 800118a:	f004 f9b9 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8001194:	f000 fba6 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 800119c:	463b      	mov	r3, r7
 800119e:	2208      	movs	r2, #8
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM3_Init+0xe0>)
 80011a4:	f004 f9ac 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 80011ae:	f000 fb99 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM3_Init+0xe0>)
 80011b4:	f000 fd1a 	bl	8001bec <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000564 	.word	0x20000564
 80011c4:	40000400 	.word	0x40000400

080011c8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2224      	movs	r2, #36	; 0x24
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f009 f9af 	bl	800a53a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_TIM4_Init+0xa4>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_TIM4_Init+0xa8>)
 80011ea:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM4_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM4_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM4_Init+0xa4>)
 80011fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fe:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM4_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM4_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800120c:	2303      	movs	r3, #3
 800120e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM4_Init+0xa4>)
 8001238:	f003 feb0 	bl	8004f9c <HAL_TIM_Encoder_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8001242:	f000 fb4f 	bl	80018e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM4_Init+0xa4>)
 8001254:	f004 fe38 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800125e:	f000 fb41 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000460 	.word	0x20000460
 8001270:	40000800 	.word	0x40000800

08001274 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_TIM7_Init+0x64>)
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_TIM7_Init+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 40;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_TIM7_Init+0x64>)
 800128c:	2228      	movs	r2, #40	; 0x28
 800128e:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_TIM7_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65044;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_TIM7_Init+0x64>)
 8001298:	f64f 6214 	movw	r2, #65044	; 0xfe14
 800129c:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_TIM7_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_TIM7_Init+0x64>)
 80012a6:	f003 fc5f 	bl	8004b68 <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM7_Init+0x40>
		Error_Handler();
 80012b0:	f000 fb18 	bl	80018e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_TIM7_Init+0x64>)
 80012c2:	f004 fe01 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80012cc:	f000 fb0a 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000074c 	.word	0x2000074c
 80012dc:	40001400 	.word	0x40001400

080012e0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b09a      	sub	sp, #104	; 0x68
 80012e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ea:	2224      	movs	r2, #36	; 0x24
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f009 f923 	bl	800a53a <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2234      	movs	r2, #52	; 0x34
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f009 f917 	bl	800a53a <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_TIM8_Init+0xd8>)
 800130e:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <MX_TIM8_Init+0xdc>)
 8001310:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001312:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <MX_TIM8_Init+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_TIM8_Init+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_TIM8_Init+0xd8>)
 8001320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001324:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_TIM8_Init+0xd8>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_TIM8_Init+0xd8>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_TIM8_Init+0xd8>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001338:	2303      	movs	r3, #3
 800133a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800133c:	2300      	movs	r3, #0
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001340:	2301      	movs	r3, #1
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	653b      	str	r3, [r7, #80]	; 0x50
	sConfig.IC1Filter = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	657b      	str	r3, [r7, #84]	; 0x54
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800134c:	2300      	movs	r3, #0
 800134e:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001350:	2301      	movs	r3, #1
 8001352:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
	sConfig.IC2Filter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 800135c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001360:	4619      	mov	r1, r3
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <MX_TIM8_Init+0xd8>)
 8001364:	f003 fe1a 	bl	8004f9c <HAL_TIM_Encoder_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM8_Init+0x92>
		Error_Handler();
 800136e:	f000 fab9 	bl	80018e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800137e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM8_Init+0xd8>)
 8001386:	f004 fd9f 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM8_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001390:	f000 faa8 	bl	80018e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM8_Init+0xd8>)
 80013a2:	f004 fe13 	bl	8005fcc <HAL_TIMEx_ConfigBreakDeadTime>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM8_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 80013ac:	f000 fa9a 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3768      	adds	r7, #104	; 0x68
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000414 	.word	0x20000414
 80013bc:	40013400 	.word	0x40013400

080013c0 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b098      	sub	sp, #96	; 0x60
 80013c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2234      	movs	r2, #52	; 0x34
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f009 f8a4 	bl	800a53a <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 80013f2:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <MX_TIM15_Init+0x104>)
 80013f4:	4a34      	ldr	r2, [pc, #208]	; (80014c8 <MX_TIM15_Init+0x108>)
 80013f6:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 80013f8:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <MX_TIM15_Init+0x104>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <MX_TIM15_Init+0x104>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <MX_TIM15_Init+0x104>)
 8001406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140a:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <MX_TIM15_Init+0x104>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <MX_TIM15_Init+0x104>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_TIM15_Init+0x104>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 800141e:	4829      	ldr	r0, [pc, #164]	; (80014c4 <MX_TIM15_Init+0x104>)
 8001420:	f003 fc64 	bl	8004cec <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM15_Init+0x6e>
		Error_Handler();
 800142a:	f000 fa5b 	bl	80018e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8001436:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800143a:	4619      	mov	r1, r3
 800143c:	4821      	ldr	r0, [pc, #132]	; (80014c4 <MX_TIM15_Init+0x104>)
 800143e:	f004 fd43 	bl	8005ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM15_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001448:	f000 fa4c 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001458:	2300      	movs	r3, #0
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8001468:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_TIM15_Init+0x104>)
 8001472:	f004 f845 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM15_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 800147c:	f000 fa32 	bl	80018e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001498:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_TIM15_Init+0x104>)
 80014a8:	f004 fd90 	bl	8005fcc <HAL_TIMEx_ConfigBreakDeadTime>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM15_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 80014b2:	f000 fa17 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 80014b6:	4803      	ldr	r0, [pc, #12]	; (80014c4 <MX_TIM15_Init+0x104>)
 80014b8:	f000 fb98 	bl	8001bec <HAL_TIM_MspPostInit>

}
 80014bc:	bf00      	nop
 80014be:	3760      	adds	r7, #96	; 0x60
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200004ac 	.word	0x200004ac
 80014c8:	40014000 	.word	0x40014000

080014cc <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80014e6:	463b      	mov	r3, r7
 80014e8:	2234      	movs	r2, #52	; 0x34
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f009 f824 	bl	800a53a <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <MX_TIM16_Init+0xec>)
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <MX_TIM16_Init+0xf0>)
 80014f6:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_TIM16_Init+0xec>)
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <MX_TIM16_Init+0xec>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65300;
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <MX_TIM16_Init+0xec>)
 8001506:	f64f 7214 	movw	r2, #65300	; 0xff14
 800150a:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <MX_TIM16_Init+0xec>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <MX_TIM16_Init+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <MX_TIM16_Init+0xec>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800151e:	4826      	ldr	r0, [pc, #152]	; (80015b8 <MX_TIM16_Init+0xec>)
 8001520:	f003 fb22 	bl	8004b68 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM16_Init+0x62>
		Error_Handler();
 800152a:	f000 f9db 	bl	80018e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 800152e:	4822      	ldr	r0, [pc, #136]	; (80015b8 <MX_TIM16_Init+0xec>)
 8001530:	f003 fbdc 	bl	8004cec <HAL_TIM_PWM_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM16_Init+0x72>
		Error_Handler();
 800153a:	f000 f9d3 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	; 0x60
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800154a:	2300      	movs	r3, #0
 800154c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 800155a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4815      	ldr	r0, [pc, #84]	; (80015b8 <MX_TIM16_Init+0xec>)
 8001564:	f003 ffcc 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM16_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 800156e:	f000 f9b9 	bl	80018e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM16_Init+0xec>)
 800159a:	f004 fd17 	bl	8005fcc <HAL_TIMEx_ConfigBreakDeadTime>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM16_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 80015a4:	f000 f99e 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
	HAL_TIM_MspPostInit(&htim16);
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM16_Init+0xec>)
 80015aa:	f000 fb1f 	bl	8001bec <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3750      	adds	r7, #80	; 0x50
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000700 	.word	0x20000700
 80015bc:	40014400 	.word	0x40014400

080015c0 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	; 0x50
 80015c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80015da:	463b      	mov	r3, r7
 80015dc:	2234      	movs	r2, #52	; 0x34
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f008 ffaa 	bl	800a53a <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <MX_TIM17_Init+0xec>)
 80015e8:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <MX_TIM17_Init+0xf0>)
 80015ea:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48;
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <MX_TIM17_Init+0xec>)
 80015ee:	2230      	movs	r2, #48	; 0x30
 80015f0:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <MX_TIM17_Init+0xec>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 65300;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <MX_TIM17_Init+0xec>)
 80015fa:	f64f 7214 	movw	r2, #65300	; 0xff14
 80015fe:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <MX_TIM17_Init+0xec>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <MX_TIM17_Init+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MX_TIM17_Init+0xec>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8001612:	4826      	ldr	r0, [pc, #152]	; (80016ac <MX_TIM17_Init+0xec>)
 8001614:	f003 faa8 	bl	8004b68 <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM17_Init+0x62>
		Error_Handler();
 800161e:	f000 f961 	bl	80018e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 8001622:	4822      	ldr	r0, [pc, #136]	; (80016ac <MX_TIM17_Init+0xec>)
 8001624:	f003 fb62 	bl	8004cec <HAL_TIM_PWM_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM17_Init+0x72>
		Error_Handler();
 800162e:	f000 f959 	bl	80018e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001632:	2360      	movs	r3, #96	; 0x60
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163a:	2300      	movs	r3, #0
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 800164e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <MX_TIM17_Init+0xec>)
 8001658:	f003 ff52 	bl	8005500 <HAL_TIM_PWM_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM17_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8001662:	f000 f93f 	bl	80018e4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <MX_TIM17_Init+0xec>)
 800168e:	f004 fc9d 	bl	8005fcc <HAL_TIMEx_ConfigBreakDeadTime>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM17_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8001698:	f000 f924 	bl	80018e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <MX_TIM17_Init+0xec>)
 800169e:	f000 faa5 	bl	8001bec <HAL_TIM_MspPostInit>

}
 80016a2:	bf00      	nop
 80016a4:	3750      	adds	r7, #80	; 0x50
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200004f8 	.word	0x200004f8
 80016b0:	40014800 	.word	0x40014800

080016b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_GPIO_Init+0x8c>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <MX_GPIO_Init+0x8c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_GPIO_Init+0x8c>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_GPIO_Init+0x8c>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a16      	ldr	r2, [pc, #88]	; (8001740 <MX_GPIO_Init+0x8c>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_GPIO_Init+0x8c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	4811      	ldr	r0, [pc, #68]	; (8001744 <MX_GPIO_Init+0x90>)
 8001700:	f000 fef8 	bl	80024f4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001704:	2308      	movs	r3, #8
 8001706:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <MX_GPIO_Init+0x90>)
 8001718:	f000 fd52 	bl	80021c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800171c:	2320      	movs	r3, #32
 800171e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_GPIO_Init+0x90>)
 8001734:	f000 fd44 	bl	80021c0 <HAL_GPIO_Init>

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
//	unsigned long t1 = DWT->CYCCNT;

	Handle_Encoder(&motor1, TIM2->CNT);
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	b29b      	uxth	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	484f      	ldr	r0, [pc, #316]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800175c:	f7ff f9c4 	bl	8000ae8 <Handle_Encoder>
	Handle_Encoder(&motor2, TIM4->CNT);
 8001760:	4b4e      	ldr	r3, [pc, #312]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	b29b      	uxth	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	484d      	ldr	r0, [pc, #308]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800176a:	f7ff f9bd 	bl	8000ae8 <Handle_Encoder>
	Handle_Encoder(&motor3, TIM8->CNT);
 800176e:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	b29b      	uxth	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	484c      	ldr	r0, [pc, #304]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001778:	f7ff f9b6 	bl	8000ae8 <Handle_Encoder>
	if (command.pid_type == 0) {
 800177c:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d11b      	bne.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x74>
		feedback.motor1 = motor1.cur_enc_speed;
 8001784:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001790:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001792:	edc3 7a00 	vstr	s15, [r3]
		feedback.motor2 = motor2.cur_enc_speed;
 8001796:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80017a4:	edc3 7a01 	vstr	s15, [r3, #4]
		feedback.motor3 = motor3.cur_enc_speed;
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b4:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80017b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80017ba:	e00b      	b.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x8c>
	} else {
		feedback.motor1 = motor1.enc_speed_hist_avg;
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80017c2:	6013      	str	r3, [r2, #0]
		feedback.motor2 = motor2.enc_speed_hist_avg;
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	4a39      	ldr	r2, [pc, #228]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80017ca:	6053      	str	r3, [r2, #4]
		feedback.motor3 = motor3.enc_speed_hist_avg;
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	4a37      	ldr	r2, [pc, #220]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80017d2:	6093      	str	r3, [r2, #8]
	}

	Calculate_PID(&motor1);
 80017d4:	4830      	ldr	r0, [pc, #192]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017d6:	f7ff f82f 	bl	8000838 <Calculate_PID>
	Calculate_PID(&motor2);
 80017da:	4831      	ldr	r0, [pc, #196]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017dc:	f7ff f82c 	bl	8000838 <Calculate_PID>
	Calculate_PID(&motor3);
 80017e0:	4831      	ldr	r0, [pc, #196]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017e2:	f7ff f829 	bl	8000838 <Calculate_PID>
	Set_Motor_Speed(&(TIM1->CCR2), &(TIM1->CCR3), motor1.cur_speed);
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80017e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80017ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f0:	ee17 2a90 	vmov	r2, s15
 80017f4:	492f      	ldr	r1, [pc, #188]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80017f6:	4830      	ldr	r0, [pc, #192]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80017f8:	f7fe ff72 	bl	80006e0 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM1->CCR1), &(TIM3->CCR3), motor2.cur_speed);
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80017fe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001806:	ee17 2a90 	vmov	r2, s15
 800180a:	492c      	ldr	r1, [pc, #176]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800180c:	482c      	ldr	r0, [pc, #176]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800180e:	f7fe ff67 	bl	80006e0 <Set_Motor_Speed>
	Set_Motor_Speed(&(TIM3->CCR1), &(TIM3->CCR2), motor3.cur_speed);
 8001812:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001814:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181c:	ee17 2a90 	vmov	r2, s15
 8001820:	4928      	ldr	r1, [pc, #160]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001822:	4829      	ldr	r0, [pc, #164]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001824:	f7fe ff5c 	bl	80006e0 <Set_Motor_Speed>

	// servo stopper
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) && !command.ir) {
 8001828:	2108      	movs	r1, #8
 800182a:	4828      	ldr	r0, [pc, #160]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800182c:	f000 fe4a 	bl	80024c4 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <HAL_TIM_PeriodElapsedCallback+0xfc>
		TIM17->CCR1 = 0;
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001840:	2200      	movs	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// timeout
	if (command_received_ticker > 0) {
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_TIM_PeriodElapsedCallback+0x116>
		command_received_ticker -= 1;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800185a:	701a      	strb	r2, [r3, #0]
		// stop servo
		TIM17->CCR1 = 0;
	}
//	unsigned long t2 = DWT->CYCCNT;
//	unsigned long diff = t2 - t1;
}
 800185c:	e018      	b.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x148>
		TIM1->CCR1 = 0;
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001860:	2200      	movs	r2, #0
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001866:	2200      	movs	r2, #0
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800186c:	2200      	movs	r2, #0
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR1 = 0;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001878:	2200      	movs	r2, #0
 800187a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 800187e:	2200      	movs	r2, #0
 8001880:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM16->CCR1 = ESC_IDLE_CCR;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001884:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001888:	635a      	str	r2, [r3, #52]	; 0x34
		TIM17->CCR1 = 0;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800188c:	2200      	movs	r2, #0
 800188e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000620 	.word	0x20000620
 800189c:	40000800 	.word	0x40000800
 80018a0:	200003cc 	.word	0x200003cc
 80018a4:	40013400 	.word	0x40013400
 80018a8:	200006b8 	.word	0x200006b8
 80018ac:	20000544 	.word	0x20000544
 80018b0:	200005b4 	.word	0x200005b4
 80018b4:	40012c3c 	.word	0x40012c3c
 80018b8:	40012c38 	.word	0x40012c38
 80018bc:	4000043c 	.word	0x4000043c
 80018c0:	40012c34 	.word	0x40012c34
 80018c4:	40000438 	.word	0x40000438
 80018c8:	40000434 	.word	0x40000434
 80018cc:	48000400 	.word	0x48000400
 80018d0:	40014800 	.word	0x40014800
 80018d4:	200001a1 	.word	0x200001a1
 80018d8:	40012c00 	.word	0x40012c00
 80018dc:	40000400 	.word	0x40000400
 80018e0:	40014400 	.word	0x40014400

080018e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x44>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_MspInit+0x44>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6613      	str	r3, [r2, #96]	; 0x60
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x44>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x44>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800192a:	f002 fa21 	bl	8003d70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_TIM_PWM_MspInit+0x80>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10c      	bne.n	8001968 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 8001954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001958:	6613      	str	r3, [r2, #96]	; 0x60
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001966:	e022      	b.n	80019ae <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_TIM_PWM_MspInit+0x88>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d10c      	bne.n	800198c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	e010      	b.n	80019ae <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_TIM_PWM_MspInit+0x84>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40014000 	.word	0x40014000

080019cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08e      	sub	sp, #56	; 0x38
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d129      	bne.n	8001a42 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ee:	4b54      	ldr	r3, [pc, #336]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a53      	ldr	r2, [pc, #332]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f000 fbc0 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a40:	e079      	b.n	8001b36 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	; (8001b44 <HAL_TIM_Encoder_MspInit+0x178>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d128      	bne.n	8001a9e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	4a3b      	ldr	r2, [pc, #236]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6593      	str	r3, [r2, #88]	; 0x58
 8001a58:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	4a35      	ldr	r2, [pc, #212]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	4619      	mov	r1, r3
 8001a96:	482c      	ldr	r0, [pc, #176]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001a98:	f000 fb92 	bl	80021c0 <HAL_GPIO_Init>
}
 8001a9c:	e04b      	b.n	8001b36 <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <HAL_TIM_Encoder_MspInit+0x180>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d146      	bne.n	8001b36 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aac:	4a24      	ldr	r2, [pc, #144]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac4:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x174>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001b02:	2302      	movs	r3, #2
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f000 fb56 	bl	80021c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8001b26:	230a      	movs	r3, #10
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001b32:	f000 fb45 	bl	80021c0 <HAL_GPIO_Init>
}
 8001b36:	bf00      	nop
 8001b38:	3738      	adds	r7, #56	; 0x38
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40000800 	.word	0x40000800
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	40013400 	.word	0x40013400

08001b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_TIM_Base_MspInit+0x8c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d114      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001b68:	f043 0320 	orr.w	r3, r3, #32
 8001b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2037      	movs	r0, #55	; 0x37
 8001b80:	f000 fae9 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b84:	2037      	movs	r0, #55	; 0x37
 8001b86:	f000 fb00 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001b8a:	e022      	b.n	8001bd2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_TIM_Base_MspInit+0x94>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10c      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
}
 8001bae:	e010      	b.n	8001bd2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40001400 	.word	0x40001400
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40014400 	.word	0x40014400
 8001be8:	40014800 	.word	0x40014800

08001bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a65      	ldr	r2, [pc, #404]	; (8001da0 <HAL_TIM_MspPostInit+0x1b4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d11e      	bne.n	8001c4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a64      	ldr	r2, [pc, #400]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b62      	ldr	r3, [pc, #392]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	623b      	str	r3, [r7, #32]
 8001c24:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001c26:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c38:	2306      	movs	r3, #6
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f000 fabb 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001c4a:	e0a5      	b.n	8001d98 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <HAL_TIM_MspPostInit+0x1bc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d139      	bne.n	8001cca <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a52      	ldr	r2, [pc, #328]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c86:	2350      	movs	r3, #80	; 0x50
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c96:	2302      	movs	r3, #2
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f000 fa8c 	bl	80021c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	483a      	ldr	r0, [pc, #232]	; (8001dac <HAL_TIM_MspPostInit+0x1c0>)
 8001cc4:	f000 fa7c 	bl	80021c0 <HAL_GPIO_Init>
}
 8001cc8:	e066      	b.n	8001d98 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <HAL_TIM_MspPostInit+0x1c4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d11d      	bne.n	8001d10 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cec:	2304      	movs	r3, #4
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001cfc:	2309      	movs	r3, #9
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d0a:	f000 fa59 	bl	80021c0 <HAL_GPIO_Init>
}
 8001d0e:	e043      	b.n	8001d98 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <HAL_TIM_MspPostInit+0x1c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d11c      	bne.n	8001d54 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d32:	2310      	movs	r3, #16
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001d42:	2301      	movs	r3, #1
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4817      	ldr	r0, [pc, #92]	; (8001dac <HAL_TIM_MspPostInit+0x1c0>)
 8001d4e:	f000 fa37 	bl	80021c0 <HAL_GPIO_Init>
}
 8001d52:	e021      	b.n	8001d98 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_TIM_MspPostInit+0x1cc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d11c      	bne.n	8001d98 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_TIM_MspPostInit+0x1b8>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001d86:	2301      	movs	r3, #1
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f000 fa14 	bl	80021c0 <HAL_GPIO_Init>
}
 8001d98:	bf00      	nop
 8001d9a:	3738      	adds	r7, #56	; 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40000400 	.word	0x40000400
 8001dac:	48000400 	.word	0x48000400
 8001db0:	40014000 	.word	0x40014000
 8001db4:	40014400 	.word	0x40014400
 8001db8:	40014800 	.word	0x40014800

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e10:	f000 f8a8 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <USB_LP_IRQHandler+0x10>)
 8001e1e:	f000 fca2 	bl	8002766 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000143c 	.word	0x2000143c

08001e2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM7_IRQHandler+0x10>)
 8001e32:	f003 f9e6 	bl	8005202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000074c 	.word	0x2000074c

08001e40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <SystemInit+0x28>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <SystemInit+0x28>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SystemInit+0x28>)
 8001e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <LoopForever+0xe>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <LoopForever+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e96:	f7ff ffd3 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f008 fb1f 	bl	800a4dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e9e:	f7fe fe77 	bl	8000b90 <main>

08001ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ea2:	e7fe      	b.n	8001ea2 <LoopForever>
  ldr   r0, =_estack
 8001ea4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001eb0:	0800a5c4 	.word	0x0800a5c4
  ldr r2, =_sbss
 8001eb4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001eb8:	20001730 	.word	0x20001730

08001ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC1_2_IRQHandler>

08001ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f939 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f80e 	bl	8001ef0 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	71fb      	strb	r3, [r7, #7]
 8001ede:	e001      	b.n	8001ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee0:	f7ff fd08 	bl	80018f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_InitTick+0x68>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d022      	beq.n	8001f4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_InitTick+0x6c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_InitTick+0x68>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f944 	bl	80021a6 <HAL_SYSTICK_Config>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10f      	bne.n	8001f44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b0f      	cmp	r3, #15
 8001f28:	d809      	bhi.n	8001f3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f32:	f000 f910 	bl	8002156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_InitTick+0x70>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e007      	b.n	8001f4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e004      	b.n	8001f4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_IncTick+0x1c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <HAL_IncTick+0x1c>)
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	20000798 	.word	0x20000798
 8001f84:	20000008 	.word	0x20000008

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000798 	.word	0x20000798

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff40 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff90 	bl	8002094 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5f 	bl	8002040 <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff33 	bl	8002004 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa4 	bl	80020fc <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021ce:	e15a      	b.n	8002486 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 814c 	beq.w	8002480 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d00b      	beq.n	8002208 <HAL_GPIO_Init+0x48>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021fc:	2b11      	cmp	r3, #17
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b12      	cmp	r3, #18
 8002206:	d130      	bne.n	800226a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223e:	2201      	movs	r2, #1
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0201 	and.w	r2, r3, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0xea>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b12      	cmp	r3, #18
 80022a8:	d123      	bne.n	80022f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	08da      	lsrs	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3208      	adds	r2, #8
 80022ec:	6939      	ldr	r1, [r7, #16]
 80022ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0203 	and.w	r2, r3, #3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80a6 	beq.w	8002480 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002334:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <HAL_GPIO_Init+0x2e4>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002338:	4a5a      	ldr	r2, [pc, #360]	; (80024a4 <HAL_GPIO_Init+0x2e4>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6613      	str	r3, [r2, #96]	; 0x60
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_GPIO_Init+0x2e4>)
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234c:	4a56      	ldr	r2, [pc, #344]	; (80024a8 <HAL_GPIO_Init+0x2e8>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002376:	d01f      	beq.n	80023b8 <HAL_GPIO_Init+0x1f8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <HAL_GPIO_Init+0x2ec>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d019      	beq.n	80023b4 <HAL_GPIO_Init+0x1f4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a4b      	ldr	r2, [pc, #300]	; (80024b0 <HAL_GPIO_Init+0x2f0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d013      	beq.n	80023b0 <HAL_GPIO_Init+0x1f0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <HAL_GPIO_Init+0x2f4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00d      	beq.n	80023ac <HAL_GPIO_Init+0x1ec>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a49      	ldr	r2, [pc, #292]	; (80024b8 <HAL_GPIO_Init+0x2f8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <HAL_GPIO_Init+0x1e8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a48      	ldr	r2, [pc, #288]	; (80024bc <HAL_GPIO_Init+0x2fc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <HAL_GPIO_Init+0x1e4>
 80023a0:	2305      	movs	r3, #5
 80023a2:	e00a      	b.n	80023ba <HAL_GPIO_Init+0x1fa>
 80023a4:	2306      	movs	r3, #6
 80023a6:	e008      	b.n	80023ba <HAL_GPIO_Init+0x1fa>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e006      	b.n	80023ba <HAL_GPIO_Init+0x1fa>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e004      	b.n	80023ba <HAL_GPIO_Init+0x1fa>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e002      	b.n	80023ba <HAL_GPIO_Init+0x1fa>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_GPIO_Init+0x1fa>
 80023b8:	2300      	movs	r3, #0
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	f002 0203 	and.w	r2, r2, #3
 80023c0:	0092      	lsls	r2, r2, #2
 80023c2:	4093      	lsls	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ca:	4937      	ldr	r1, [pc, #220]	; (80024a8 <HAL_GPIO_Init+0x2e8>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_GPIO_Init+0x300>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023fc:	4a30      	ldr	r2, [pc, #192]	; (80024c0 <HAL_GPIO_Init+0x300>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <HAL_GPIO_Init+0x300>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002426:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <HAL_GPIO_Init+0x300>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_GPIO_Init+0x300>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_GPIO_Init+0x300>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_GPIO_Init+0x300>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800247a:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <HAL_GPIO_Init+0x300>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f ae9d 	bne.w	80021d0 <HAL_GPIO_Init+0x10>
  }
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	48001000 	.word	0x48001000
 80024bc:	48001400 	.word	0x48001400
 80024c0:	40010400 	.word	0x40010400

080024c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	887b      	ldrh	r3, [r7, #2]
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e001      	b.n	80024e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002510:	e002      	b.n	8002518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43d9      	mvns	r1, r3
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	400b      	ands	r3, r1
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	b08b      	sub	sp, #44	; 0x2c
 800255c:	af06      	add	r7, sp, #24
 800255e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0d7      	b.n	800271a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f007 fcbc 	bl	8009efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fe18 	bl	80061c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e04c      	b.n	8002636 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	3301      	adds	r3, #1
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	b298      	uxth	r0, r3
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3336      	adds	r3, #54	; 0x36
 80025da:	4602      	mov	r2, r0
 80025dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3303      	adds	r3, #3
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	3338      	adds	r3, #56	; 0x38
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	3340      	adds	r3, #64	; 0x40
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	3301      	adds	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d3ad      	bcc.n	800259c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e044      	b.n	80026d0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3301      	adds	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3b5      	bcc.n	8002646 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	687e      	ldr	r6, [r7, #4]
 80026e2:	466d      	mov	r5, sp
 80026e4:	f106 0410 	add.w	r4, r6, #16
 80026e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	602b      	str	r3, [r5, #0]
 80026f0:	1d33      	adds	r3, r6, #4
 80026f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f4:	6838      	ldr	r0, [r7, #0]
 80026f6:	f003 fd81 	bl	80061fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f001 fa5e 	bl	8003bd4 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002722 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_PCD_Start+0x16>
 8002734:	2302      	movs	r3, #2
 8002736:	e012      	b.n	800275e <HAL_PCD_Start+0x3c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fd27 	bl	8006198 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f005 fd13 	bl	800817a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fd18 	bl	80081a8 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002782:	d102      	bne.n	800278a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fb5b 	bl	8002e40 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f005 fd0a 	bl	80081a8 <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d112      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	b292      	uxth	r2, r2
 80027b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f007 fc1a 	bl	8009ff2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027be:	2100      	movs	r1, #0
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f91e 	bl	8002a02 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 fcec 	bl	80081a8 <USB_ReadInterrupts>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027da:	d10b      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ee:	b292      	uxth	r2, r2
 80027f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f005 fcd5 	bl	80081a8 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	d10b      	bne.n	8002822 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281c:	b292      	uxth	r2, r2
 800281e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f005 fcbe 	bl	80081a8 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d133      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0204 	bic.w	r2, r2, #4
 800284a:	b292      	uxth	r2, r2
 800284c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002858:	b29a      	uxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0208 	bic.w	r2, r2, #8
 8002862:	b292      	uxth	r2, r2
 8002864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800287a:	2100      	movs	r1, #0
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f007 fdad 	bl	800a3dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f007 fbee 	bl	800a064 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800289a:	b292      	uxth	r2, r2
 800289c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 fc7f 	bl	80081a8 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b4:	d126      	bne.n	8002904 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0208 	orr.w	r2, r2, #8
 80028c8:	b292      	uxth	r2, r2
 80028ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e0:	b292      	uxth	r2, r2
 80028e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0204 	orr.w	r2, r2, #4
 80028f8:	b292      	uxth	r2, r2
 80028fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f007 fb96 	bl	800a030 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fc4d 	bl	80081a8 <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d13f      	bne.n	8002998 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292a:	b292      	uxth	r2, r2
 800292c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d12b      	bne.n	8002992 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0204 	orr.w	r2, r2, #4
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0208 	orr.w	r2, r2, #8
 8002964:	b292      	uxth	r2, r2
 8002966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800297a:	b29b      	uxth	r3, r3
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002988:	2101      	movs	r1, #1
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f007 fd26 	bl	800a3dc <HAL_PCDEx_LPM_Callback>
 8002990:	e002      	b.n	8002998 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f007 fb4c 	bl	800a030 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f005 fc03 	bl	80081a8 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ac:	d10e      	bne.n	80029cc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029c0:	b292      	uxth	r2, r2
 80029c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f007 fb05 	bl	8009fd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f005 fbe9 	bl	80081a8 <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e0:	d10b      	bne.n	80029fa <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f4:	b292      	uxth	r2, r2
 80029f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_PCD_SetAddress+0x1a>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e013      	b.n	8002a44 <HAL_PCD_SetAddress+0x42>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 fb8c 	bl	8008152 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	70fb      	strb	r3, [r7, #3]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	803b      	strh	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da0e      	bge.n	8002a90 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	705a      	strb	r2, [r3, #1]
 8002a8e:	e00e      	b.n	8002aae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 0207 	and.w	r2, r3, #7
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aba:	883a      	ldrh	r2, [r7, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	78ba      	ldrb	r2, [r7, #2]
 8002ac4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ad8:	78bb      	ldrb	r3, [r7, #2]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d102      	bne.n	8002ae4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_PCD_EP_Open+0xa6>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e00e      	b.n	8002b10 <HAL_PCD_EP_Open+0xc4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fb9d 	bl	8006240 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da0e      	bge.n	8002b4a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	705a      	strb	r2, [r3, #1]
 8002b48:	e00e      	b.n	8002b68 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 0207 	and.w	r2, r3, #7
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_EP_Close+0x6a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e00e      	b.n	8002ba0 <HAL_PCD_EP_Close+0x88>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 fec3 	bl	800691c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f003 0207 	and.w	r2, r3, #7
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be8:	7afb      	ldrb	r3, [r7, #11]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 f876 	bl	8006cf6 <USB_EPStartXfer>
 8002c0a:	e005      	b.n	8002c18 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6979      	ldr	r1, [r7, #20]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 f86f 	bl	8006cf6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 0207 	and.w	r2, r3, #7
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002c44:	681b      	ldr	r3, [r3, #0]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4413      	add	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002caa:	7afb      	ldrb	r3, [r7, #11]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6979      	ldr	r1, [r7, #20]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 f81b 	bl	8006cf6 <USB_EPStartXfer>
 8002cc0:	e005      	b.n	8002cce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6979      	ldr	r1, [r7, #20]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 f814 	bl	8006cf6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 0207 	and.w	r2, r3, #7
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d901      	bls.n	8002cf6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e04c      	b.n	8002d90 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da0e      	bge.n	8002d1c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	705a      	strb	r2, [r3, #1]
 8002d1a:	e00c      	b.n	8002d36 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_PCD_EP_SetStall+0x7e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e01c      	b.n	8002d90 <HAL_PCD_EP_SetStall+0xb8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68f9      	ldr	r1, [r7, #12]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f005 f8f5 	bl	8007f54 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d108      	bne.n	8002d86 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f005 fa21 	bl	80081c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 020f 	and.w	r2, r3, #15
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d901      	bls.n	8002db6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e040      	b.n	8002e38 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002db6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	da0e      	bge.n	8002ddc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	705a      	strb	r2, [r3, #1]
 8002dda:	e00e      	b.n	8002dfa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	f003 0207 	and.w	r2, r3, #7
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_PCD_EP_ClrStall+0x82>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e00e      	b.n	8002e38 <HAL_PCD_EP_ClrStall+0xa0>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f005 f8e4 	bl	8007ff6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08e      	sub	sp, #56	; 0x38
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e48:	e2d1      	b.n	80033ee <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e52:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002e60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 8152 	bne.w	800310e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d150      	bne.n	8002f16 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e84:	81fb      	strh	r3, [r7, #14]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	89fb      	ldrh	r3, [r7, #14]
 8002e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3328      	adds	r3, #40	; 0x28
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	441a      	add	r2, r3
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f007 f863 	bl	8009fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8282 	beq.w	80033ee <PCD_EP_ISR_Handler+0x5ae>
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 827d 	bne.w	80033ee <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f14:	e26b      	b.n	80033ee <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d032      	beq.n	8002f96 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f005 f979 	bl	8008262 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	823b      	strh	r3, [r7, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	8a3a      	ldrh	r2, [r7, #16]
 8002f86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f006 ffda 	bl	8009f48 <HAL_PCD_SetupStageCallback>
 8002f94:	e22b      	b.n	80033ee <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f280 8227 	bge.w	80033ee <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fac:	4013      	ands	r3, r2
 8002fae:	83bb      	strh	r3, [r7, #28]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	8bba      	ldrh	r2, [r7, #28]
 8002fb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d019      	beq.n	8003022 <PCD_EP_ISR_Handler+0x1e2>
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	6959      	ldr	r1, [r3, #20]
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003006:	b29b      	uxth	r3, r3
 8003008:	f005 f92b 	bl	8008262 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	441a      	add	r2, r3
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800301a:	2100      	movs	r1, #0
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f006 ffa5 	bl	8009f6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003030:	b29b      	uxth	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d112      	bne.n	8003070 <PCD_EP_ISR_Handler+0x230>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003054:	b29a      	uxth	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	801a      	strh	r2, [r3, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003068:	b29a      	uxth	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	e02f      	b.n	80030d0 <PCD_EP_ISR_Handler+0x290>
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b3e      	cmp	r3, #62	; 0x3e
 8003076:	d813      	bhi.n	80030a0 <PCD_EP_ISR_Handler+0x260>
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	633b      	str	r3, [r7, #48]	; 0x30
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <PCD_EP_ISR_Handler+0x252>
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	3301      	adds	r3, #1
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	b29b      	uxth	r3, r3
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	b29a      	uxth	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e017      	b.n	80030d0 <PCD_EP_ISR_Handler+0x290>
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <PCD_EP_ISR_Handler+0x27a>
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	3b01      	subs	r3, #1
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	b29b      	uxth	r3, r3
 80030be:	029b      	lsls	r3, r3, #10
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	827b      	strh	r3, [r7, #18]
 80030e2:	8a7b      	ldrh	r3, [r7, #18]
 80030e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030e8:	827b      	strh	r3, [r7, #18]
 80030ea:	8a7b      	ldrh	r3, [r7, #18]
 80030ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030f0:	827b      	strh	r3, [r7, #18]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	8a7b      	ldrh	r3, [r7, #18]
 80030f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003108:	b29b      	uxth	r3, r3
 800310a:	8013      	strh	r3, [r2, #0]
 800310c:	e16f      	b.n	80033ee <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003120:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003124:	2b00      	cmp	r3, #0
 8003126:	f280 80e4 	bge.w	80032f2 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29a      	uxth	r2, r3
 800313c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003140:	4013      	ands	r3, r2
 8003142:	853b      	strh	r3, [r7, #40]	; 0x28
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003158:	b292      	uxth	r2, r2
 800315a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800315c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	7b1b      	ldrb	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d120      	bne.n	80031bc <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4413      	add	r3, r2
 8003194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80031a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8083 	beq.w	80032ae <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	6959      	ldr	r1, [r3, #20]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	88da      	ldrh	r2, [r3, #6]
 80031b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b6:	f005 f854 	bl	8008262 <USB_ReadPMA>
 80031ba:	e078      	b.n	80032ae <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	78db      	ldrb	r3, [r3, #3]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d108      	bne.n	80031d6 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031c6:	461a      	mov	r2, r3
 80031c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f91d 	bl	800340a <HAL_PCD_EP_DB_Receive>
 80031d0:	4603      	mov	r3, r0
 80031d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031d4:	e06b      	b.n	80032ae <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01f      	beq.n	8003270 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4413      	add	r3, r2
 800324a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003254:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003258:	2b00      	cmp	r3, #0
 800325a:	d028      	beq.n	80032ae <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	6959      	ldr	r1, [r3, #20]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	891a      	ldrh	r2, [r3, #8]
 8003268:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800326a:	f004 fffa 	bl	8008262 <USB_ReadPMA>
 800326e:	e01e      	b.n	80032ae <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003278:	b29b      	uxth	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	4413      	add	r3, r2
 800328a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003294:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003296:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	6959      	ldr	r1, [r3, #20]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	895a      	ldrh	r2, [r3, #10]
 80032a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032aa:	f004 ffda 	bl	8008262 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032b4:	441a      	add	r2, r3
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032c0:	441a      	add	r2, r3
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <PCD_EP_ISR_Handler+0x498>
 80032ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d206      	bcs.n	80032e6 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f006 fe44 	bl	8009f6c <HAL_PCD_DataOutStageCallback>
 80032e4:	e005      	b.n	80032f2 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fd02 	bl	8006cf6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80032f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d078      	beq.n	80033ee <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80032fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	843b      	strh	r3, [r7, #32]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	8c3b      	ldrh	r3, [r7, #32]
 800333c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003344:	b29b      	uxth	r3, r3
 8003346:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	78db      	ldrb	r3, [r3, #3]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d108      	bne.n	8003362 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003354:	2b02      	cmp	r3, #2
 8003356:	d144      	bne.n	80033e2 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003358:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d13f      	bne.n	80033e2 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4413      	add	r3, r2
 800337c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	8bfb      	ldrh	r3, [r7, #30]
 800338e:	429a      	cmp	r2, r3
 8003390:	d906      	bls.n	80033a0 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	8bfb      	ldrh	r3, [r7, #30]
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	619a      	str	r2, [r3, #24]
 800339e:	e002      	b.n	80033a6 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f006 fdf4 	bl	8009fa2 <HAL_PCD_DataInStageCallback>
 80033ba:	e018      	b.n	80033ee <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	8bfb      	ldrh	r3, [r7, #30]
 80033c2:	441a      	add	r2, r3
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	8bfb      	ldrh	r3, [r7, #30]
 80033ce:	441a      	add	r2, r3
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 fc8b 	bl	8006cf6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80033e0:	e005      	b.n	80033ee <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80033e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033e4:	461a      	mov	r2, r3
 80033e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f917 	bl	800361c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	b21b      	sxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f6ff ad25 	blt.w	8002e4a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3738      	adds	r7, #56	; 0x38
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b088      	sub	sp, #32
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	4613      	mov	r3, r2
 8003416:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d07c      	beq.n	800351c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	4413      	add	r3, r2
 800343c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003446:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	8b7b      	ldrh	r3, [r7, #26]
 800344e:	429a      	cmp	r2, r3
 8003450:	d306      	bcc.n	8003460 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	8b7b      	ldrh	r3, [r7, #26]
 8003458:	1ad2      	subs	r2, r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	619a      	str	r2, [r3, #24]
 800345e:	e002      	b.n	8003466 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d123      	bne.n	80034b6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003488:	833b      	strh	r3, [r7, #24]
 800348a:	8b3b      	ldrh	r3, [r7, #24]
 800348c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003490:	833b      	strh	r3, [r7, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	441a      	add	r2, r3
 80034a0:	8b3b      	ldrh	r3, [r7, #24]
 80034a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01f      	beq.n	8003500 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	82fb      	strh	r3, [r7, #22]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	8afb      	ldrh	r3, [r7, #22]
 80034ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003500:	8b7b      	ldrh	r3, [r7, #26]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8085 	beq.w	8003612 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6959      	ldr	r1, [r3, #20]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	891a      	ldrh	r2, [r3, #8]
 8003514:	8b7b      	ldrh	r3, [r7, #26]
 8003516:	f004 fea4 	bl	8008262 <USB_ReadPMA>
 800351a:	e07a      	b.n	8003612 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003524:	b29b      	uxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	4413      	add	r3, r2
 8003536:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003540:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	8b7b      	ldrh	r3, [r7, #26]
 8003548:	429a      	cmp	r2, r3
 800354a:	d306      	bcc.n	800355a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	1ad2      	subs	r2, r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	619a      	str	r2, [r3, #24]
 8003558:	e002      	b.n	8003560 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d123      	bne.n	80035b0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	83fb      	strh	r3, [r7, #30]
 8003584:	8bfb      	ldrh	r3, [r7, #30]
 8003586:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800358a:	83fb      	strh	r3, [r7, #30]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	8bfb      	ldrh	r3, [r7, #30]
 800359c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d11f      	bne.n	80035fa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	83bb      	strh	r3, [r7, #28]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	441a      	add	r2, r3
 80035e4:	8bbb      	ldrh	r3, [r7, #28]
 80035e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035fa:	8b7b      	ldrh	r3, [r7, #26]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6959      	ldr	r1, [r3, #20]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	895a      	ldrh	r2, [r3, #10]
 800360c:	8b7b      	ldrh	r3, [r7, #26]
 800360e:	f004 fe28 	bl	8008262 <USB_ReadPMA>
    }
  }

  return count;
 8003612:	8b7b      	ldrh	r3, [r7, #26]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b092      	sub	sp, #72	; 0x48
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8130 	beq.w	8003896 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	4413      	add	r3, r2
 8003650:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800365a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003662:	429a      	cmp	r2, r3
 8003664:	d906      	bls.n	8003674 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	619a      	str	r2, [r3, #24]
 8003672:	e002      	b.n	800367a <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d12c      	bne.n	80036dc <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f006 fc8a 	bl	8009fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 822d 	beq.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b4:	827b      	strh	r3, [r7, #18]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	441a      	add	r2, r3
 80036c4:	8a7b      	ldrh	r3, [r7, #18]
 80036c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	8013      	strh	r3, [r2, #0]
 80036da:	e20b      	b.n	8003af4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01f      	beq.n	8003726 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003700:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	441a      	add	r2, r3
 8003710:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003722:	b29b      	uxth	r3, r3
 8003724:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 81e1 	bne.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003738:	441a      	add	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003744:	441a      	add	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d309      	bcc.n	800376a <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6a1a      	ldr	r2, [r3, #32]
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	1ad2      	subs	r2, r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	621a      	str	r2, [r3, #32]
 8003768:	e014      	b.n	8003794 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8003772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800377e:	e009      	b.n	8003794 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2200      	movs	r2, #0
 8003792:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d155      	bne.n	8003848 <HAL_PCD_EP_DB_Transmit+0x22c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4413      	add	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	00da      	lsls	r2, r3, #3
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4413      	add	r3, r2
 80037be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d112      	bne.n	80037f0 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	e047      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x264>
 80037f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f2:	2b3e      	cmp	r3, #62	; 0x3e
 80037f4:	d811      	bhi.n	800381a <HAL_PCD_EP_DB_Transmit+0x1fe>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_PCD_EP_DB_Transmit+0x1f0>
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	3301      	adds	r3, #1
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	b29b      	uxth	r3, r3
 8003810:	029b      	lsls	r3, r3, #10
 8003812:	b29a      	uxth	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	801a      	strh	r2, [r3, #0]
 8003818:	e032      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x264>
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_PCD_EP_DB_Transmit+0x214>
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	b29b      	uxth	r3, r3
 8003834:	029b      	lsls	r3, r3, #10
 8003836:	b29b      	uxth	r3, r3
 8003838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003840:	b29a      	uxth	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	e01b      	b.n	8003880 <HAL_PCD_EP_DB_Transmit+0x264>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d117      	bne.n	8003880 <HAL_PCD_EP_DB_Transmit+0x264>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	4413      	add	r3, r2
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	00da      	lsls	r2, r3, #3
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	4413      	add	r3, r2
 8003872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	b29a      	uxth	r2, r3
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	6959      	ldr	r1, [r3, #20]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	891a      	ldrh	r2, [r3, #8]
 800388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388e:	b29b      	uxth	r3, r3
 8003890:	f004 fca6 	bl	80081e0 <USB_WritePMA>
 8003894:	e12e      	b.n	8003af4 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ba:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d306      	bcc.n	80038d4 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038cc:	1ad2      	subs	r2, r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	619a      	str	r2, [r3, #24]
 80038d2:	e002      	b.n	80038da <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12c      	bne.n	800393c <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	4619      	mov	r1, r3
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f006 fb5a 	bl	8009fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 80fd 	bne.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	441a      	add	r2, r3
 8003924:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800392a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800392e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003936:	b29b      	uxth	r3, r3
 8003938:	8013      	strh	r3, [r2, #0]
 800393a:	e0db      	b.n	8003af4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d11f      	bne.n	8003986 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003960:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	441a      	add	r2, r3
 8003970:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800397e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800398c:	2b01      	cmp	r3, #1
 800398e:	f040 80b1 	bne.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003998:	441a      	add	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039a4:	441a      	add	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d309      	bcc.n	80039ca <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	1ad2      	subs	r2, r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	621a      	str	r2, [r3, #32]
 80039c8:	e014      	b.n	80039f4 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80039d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039de:	e009      	b.n	80039f4 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2200      	movs	r2, #0
 80039ea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d155      	bne.n	8003aae <HAL_PCD_EP_DB_Transmit+0x492>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a16:	4413      	add	r3, r2
 8003a18:	647b      	str	r3, [r7, #68]	; 0x44
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	00da      	lsls	r2, r3, #3
 8003a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a22:	4413      	add	r3, r2
 8003a24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a28:	643b      	str	r3, [r7, #64]	; 0x40
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d112      	bne.n	8003a56 <HAL_PCD_EP_DB_Transmit+0x43a>
 8003a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3e:	801a      	strh	r2, [r3, #0]
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a52:	801a      	strh	r2, [r3, #0]
 8003a54:	e044      	b.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	2b3e      	cmp	r3, #62	; 0x3e
 8003a5a:	d811      	bhi.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x464>
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x456>
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6e:	3301      	adds	r3, #1
 8003a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	029b      	lsls	r3, r3, #10
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	e02f      	b.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	3b01      	subs	r3, #1
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	029b      	lsls	r3, r3, #10
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	e018      	b.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d114      	bne.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac4:	4413      	add	r3, r2
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	00da      	lsls	r2, r3, #3
 8003ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	6959      	ldr	r1, [r3, #20]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	895a      	ldrh	r2, [r3, #10]
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f004 fb76 	bl	80081e0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0e:	823b      	strh	r3, [r7, #16]
 8003b10:	8a3b      	ldrh	r3, [r7, #16]
 8003b12:	f083 0310 	eor.w	r3, r3, #16
 8003b16:	823b      	strh	r3, [r7, #16]
 8003b18:	8a3b      	ldrh	r3, [r7, #16]
 8003b1a:	f083 0320 	eor.w	r3, r3, #32
 8003b1e:	823b      	strh	r3, [r7, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	441a      	add	r2, r3
 8003b2e:	8a3b      	ldrh	r3, [r7, #16]
 8003b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3748      	adds	r7, #72	; 0x48
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	817b      	strh	r3, [r7, #10]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b60:	897b      	ldrh	r3, [r7, #10]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	897b      	ldrh	r3, [r7, #10]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e009      	b.n	8003b98 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b84:	897a      	ldrh	r2, [r7, #10]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	80da      	strh	r2, [r3, #6]
 8003bac:	e00b      	b.n	8003bc6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f043 0302 	orr.w	r3, r3, #2
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d141      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c36:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d131      	bne.n	8003ca8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c44:	4b47      	ldr	r3, [pc, #284]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4a:	4a46      	ldr	r2, [pc, #280]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c54:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c5c:	4a41      	ldr	r2, [pc, #260]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c64:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2232      	movs	r2, #50	; 0x32
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a3f      	ldr	r2, [pc, #252]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	0c9b      	lsrs	r3, r3, #18
 8003c76:	3301      	adds	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7a:	e002      	b.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c82:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d102      	bne.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f2      	bne.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c96:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d158      	bne.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e057      	b.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cae:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cb8:	e04d      	b.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc0:	d141      	bne.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d131      	bne.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2232      	movs	r2, #50	; 0x32
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	0c9b      	lsrs	r3, r3, #18
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d06:	e002      	b.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d102      	bne.n	8003d22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f2      	bne.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2e:	d112      	bne.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e011      	b.n	8003d58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d44:	e007      	b.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d4e:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40007000 	.word	0x40007000
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	431bde83 	.word	0x431bde83

08003d70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d7e:	6093      	str	r3, [r2, #8]
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40007000 	.word	0x40007000

08003d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e308      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d075      	beq.n	8003e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dae:	4ba3      	ldr	r3, [pc, #652]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db8:	4ba0      	ldr	r3, [pc, #640]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d102      	bne.n	8003dce <HAL_RCC_OscConfig+0x3e>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x44>
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d10b      	bne.n	8003dec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	4b99      	ldr	r3, [pc, #612]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d05b      	beq.n	8003e98 <HAL_RCC_OscConfig+0x108>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d157      	bne.n	8003e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e2e3      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_OscConfig+0x74>
 8003df6:	4b91      	ldr	r3, [pc, #580]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a90      	ldr	r2, [pc, #576]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e01d      	b.n	8003e40 <HAL_RCC_OscConfig+0xb0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x98>
 8003e0e:	4b8b      	ldr	r3, [pc, #556]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a8a      	ldr	r2, [pc, #552]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a87      	ldr	r2, [pc, #540]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e00b      	b.n	8003e40 <HAL_RCC_OscConfig+0xb0>
 8003e28:	4b84      	ldr	r3, [pc, #528]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a83      	ldr	r2, [pc, #524]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b81      	ldr	r3, [pc, #516]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a80      	ldr	r2, [pc, #512]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe f89e 	bl	8001f88 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fe f89a 	bl	8001f88 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	; 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e2a8      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e62:	4b76      	ldr	r3, [pc, #472]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0xc0>
 8003e6e:	e014      	b.n	8003e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe f88a 	bl	8001f88 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe f886 	bl	8001f88 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e294      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e8a:	4b6c      	ldr	r3, [pc, #432]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0xe8>
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d075      	beq.n	8003f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea6:	4b65      	ldr	r3, [pc, #404]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb0:	4b62      	ldr	r3, [pc, #392]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	d102      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x136>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_OscConfig+0x13c>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11f      	bne.n	8003f0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ecc:	4b5b      	ldr	r3, [pc, #364]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x154>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e267      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee4:	4b55      	ldr	r3, [pc, #340]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	4952      	ldr	r1, [pc, #328]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ef8:	4b51      	ldr	r3, [pc, #324]	; (8004040 <HAL_RCC_OscConfig+0x2b0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fd fff7 	bl	8001ef0 <HAL_InitTick>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d043      	beq.n	8003f90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e253      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f14:	4b49      	ldr	r3, [pc, #292]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe f832 	bl	8001f88 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f28:	f7fe f82e 	bl	8001f88 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e23c      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f3a:	4b40      	ldr	r3, [pc, #256]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	4939      	ldr	r1, [pc, #228]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
 8003f5a:	e01a      	b.n	8003f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5c:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a36      	ldr	r2, [pc, #216]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fe f80e 	bl	8001f88 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fe f80a 	bl	8001f88 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e218      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f82:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1e0>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d03c      	beq.n	8004018 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fac:	4a23      	ldr	r2, [pc, #140]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb6:	f7fd ffe7 	bl	8001f88 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbe:	f7fd ffe3 	bl	8001f88 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1f1      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0ef      	beq.n	8003fbe <HAL_RCC_OscConfig+0x22e>
 8003fde:	e01b      	b.n	8004018 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fd ffca 	bl	8001f88 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff8:	f7fd ffc6 	bl	8001f88 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1d4      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 800400c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ef      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80ab 	beq.w	800417c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <HAL_RCC_OscConfig+0x2ac>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x2b4>
 8004036:	2301      	movs	r3, #1
 8004038:	e005      	b.n	8004046 <HAL_RCC_OscConfig+0x2b6>
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
 8004040:	20000004 	.word	0x20000004
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	4baf      	ldr	r3, [pc, #700]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	4aae      	ldr	r2, [pc, #696]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004054:	6593      	str	r3, [r2, #88]	; 0x58
 8004056:	4bac      	ldr	r3, [pc, #688]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004062:	2301      	movs	r3, #1
 8004064:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004066:	4ba9      	ldr	r3, [pc, #676]	; (800430c <HAL_RCC_OscConfig+0x57c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d118      	bne.n	80040a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004072:	4ba6      	ldr	r3, [pc, #664]	; (800430c <HAL_RCC_OscConfig+0x57c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4aa5      	ldr	r2, [pc, #660]	; (800430c <HAL_RCC_OscConfig+0x57c>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407e:	f7fd ff83 	bl	8001f88 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7fd ff7f 	bl	8001f88 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e18d      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004098:	4b9c      	ldr	r3, [pc, #624]	; (800430c <HAL_RCC_OscConfig+0x57c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d108      	bne.n	80040be <HAL_RCC_OscConfig+0x32e>
 80040ac:	4b96      	ldr	r3, [pc, #600]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	4a95      	ldr	r2, [pc, #596]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040bc:	e024      	b.n	8004108 <HAL_RCC_OscConfig+0x378>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d110      	bne.n	80040e8 <HAL_RCC_OscConfig+0x358>
 80040c6:	4b90      	ldr	r3, [pc, #576]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	4a8e      	ldr	r2, [pc, #568]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040d6:	4b8c      	ldr	r3, [pc, #560]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	4a8a      	ldr	r2, [pc, #552]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e6:	e00f      	b.n	8004108 <HAL_RCC_OscConfig+0x378>
 80040e8:	4b87      	ldr	r3, [pc, #540]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a86      	ldr	r2, [pc, #536]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f8:	4b83      	ldr	r3, [pc, #524]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	4a82      	ldr	r2, [pc, #520]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004100:	f023 0304 	bic.w	r3, r3, #4
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d016      	beq.n	800413e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd ff3a 	bl	8001f88 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fd ff36 	bl	8001f88 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e142      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412e:	4b76      	ldr	r3, [pc, #472]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ed      	beq.n	8004118 <HAL_RCC_OscConfig+0x388>
 800413c:	e015      	b.n	800416a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd ff23 	bl	8001f88 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004144:	e00a      	b.n	800415c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fd ff1f 	bl	8001f88 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e12b      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800415c:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ed      	bne.n	8004146 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	4a64      	ldr	r2, [pc, #400]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d03c      	beq.n	8004202 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01c      	beq.n	80041ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004190:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004196:	4a5c      	ldr	r2, [pc, #368]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd fef2 	bl	8001f88 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041a8:	f7fd feee 	bl	8001f88 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0fc      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ba:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80041bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ef      	beq.n	80041a8 <HAL_RCC_OscConfig+0x418>
 80041c8:	e01b      	b.n	8004202 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ca:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80041cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d0:	4a4d      	ldr	r2, [pc, #308]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7fd fed5 	bl	8001f88 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e2:	f7fd fed1 	bl	8001f88 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0df      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041f4:	4b44      	ldr	r3, [pc, #272]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80041f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ef      	bne.n	80041e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80d3 	beq.w	80043b2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420c:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b0c      	cmp	r3, #12
 8004216:	f000 808d 	beq.w	8004334 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d15a      	bne.n	80042d8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a38      	ldr	r2, [pc, #224]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fd feab 	bl	8001f88 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd fea7 	bl	8001f88 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0b5      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004248:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004254:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <HAL_RCC_OscConfig+0x580>)
 800425a:	4013      	ands	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6a11      	ldr	r1, [r2, #32]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004264:	3a01      	subs	r2, #1
 8004266:	0112      	lsls	r2, r2, #4
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800426e:	0212      	lsls	r2, r2, #8
 8004270:	4311      	orrs	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004276:	0852      	lsrs	r2, r2, #1
 8004278:	3a01      	subs	r2, #1
 800427a:	0552      	lsls	r2, r2, #21
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004282:	0852      	lsrs	r2, r2, #1
 8004284:	3a01      	subs	r2, #1
 8004286:	0652      	lsls	r2, r2, #25
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800428e:	06d2      	lsls	r2, r2, #27
 8004290:	430a      	orrs	r2, r1
 8004292:	491d      	ldr	r1, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 8004294:	4313      	orrs	r3, r2
 8004296:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 800429e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd fe6a 	bl	8001f88 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fd fe66 	bl	8001f88 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e074      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x528>
 80042d6:	e06c      	b.n	80043b2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a07      	ldr	r2, [pc, #28]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <HAL_RCC_OscConfig+0x578>)
 80042f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd fe42 	bl	8001f88 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004306:	e00e      	b.n	8004326 <HAL_RCC_OscConfig+0x596>
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
 8004310:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7fd fe38 	bl	8001f88 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e046      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004326:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_RCC_OscConfig+0x62c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x584>
 8004332:	e03e      	b.n	80043b2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e039      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004340:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <HAL_RCC_OscConfig+0x62c>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	429a      	cmp	r2, r3
 8004352:	d12c      	bne.n	80043ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	3b01      	subs	r3, #1
 8004360:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d123      	bne.n	80043ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d11b      	bne.n	80043ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d113      	bne.n	80043ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	3b01      	subs	r3, #1
 8004394:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d109      	bne.n	80043ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	085b      	lsrs	r3, r3, #1
 80043a6:	3b01      	subs	r3, #1
 80043a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e11e      	b.n	8004616 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b91      	ldr	r3, [pc, #580]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d910      	bls.n	8004408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b8e      	ldr	r3, [pc, #568]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 020f 	bic.w	r2, r3, #15
 80043ee:	498c      	ldr	r1, [pc, #560]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e106      	b.n	8004616 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d073      	beq.n	80044fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d129      	bne.n	8004470 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441c:	4b81      	ldr	r3, [pc, #516]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0f4      	b.n	8004616 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800442c:	f000 f966 	bl	80046fc <RCC_GetSysClockFreqFromPLLSource>
 8004430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <HAL_RCC_ClockConfig+0x268>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d93f      	bls.n	80044ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800443a:	4b7a      	ldr	r3, [pc, #488]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800444e:	2b00      	cmp	r3, #0
 8004450:	d033      	beq.n	80044ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004456:	2b00      	cmp	r3, #0
 8004458:	d12f      	bne.n	80044ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800445a:	4b72      	ldr	r3, [pc, #456]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004462:	4a70      	ldr	r2, [pc, #448]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 8004464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004468:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e024      	b.n	80044ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d107      	bne.n	8004488 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004478:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0c6      	b.n	8004616 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0be      	b.n	8004616 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004498:	f000 f8ce 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 800449c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4a61      	ldr	r2, [pc, #388]	; (8004628 <HAL_RCC_ClockConfig+0x268>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d909      	bls.n	80044ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044a6:	4b5f      	ldr	r3, [pc, #380]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ae:	4a5d      	ldr	r2, [pc, #372]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80044b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044ba:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4957      	ldr	r1, [pc, #348]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fd fd5c 	bl	8001f88 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fd fd58 	bl	8001f88 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e095      	b.n	8004616 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b4e      	ldr	r3, [pc, #312]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 020c 	and.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1eb      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d023      	beq.n	8004550 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004514:	4b43      	ldr	r3, [pc, #268]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a42      	ldr	r2, [pc, #264]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800451a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800451e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800452c:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004534:	4a3b      	ldr	r2, [pc, #236]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 8004536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800453a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b39      	ldr	r3, [pc, #228]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4936      	ldr	r1, [pc, #216]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
 800454e:	e008      	b.n	8004562 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b80      	cmp	r3, #128	; 0x80
 8004554:	d105      	bne.n	8004562 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004556:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4a32      	ldr	r2, [pc, #200]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 800455c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004560:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004562:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d21d      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 020f 	bic.w	r2, r3, #15
 8004578:	4929      	ldr	r1, [pc, #164]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004580:	f7fd fd02 	bl	8001f88 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	e00a      	b.n	800459e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004588:	f7fd fcfe 	bl	8001f88 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	; 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e03b      	b.n	8004616 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCC_ClockConfig+0x260>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1ed      	bne.n	8004588 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4917      	ldr	r1, [pc, #92]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	490f      	ldr	r1, [pc, #60]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045ea:	f000 f825 	bl	8004638 <HAL_RCC_GetSysClockFreq>
 80045ee:	4601      	mov	r1, r0
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_RCC_ClockConfig+0x264>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <HAL_RCC_ClockConfig+0x26c>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	fa21 f303 	lsr.w	r3, r1, r3
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x270>)
 8004608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <HAL_RCC_ClockConfig+0x274>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fd fc6e 	bl	8001ef0 <HAL_InitTick>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40022000 	.word	0x40022000
 8004624:	40021000 	.word	0x40021000
 8004628:	04c4b400 	.word	0x04c4b400
 800462c:	0800a5ac 	.word	0x0800a5ac
 8004630:	20000000 	.word	0x20000000
 8004634:	20000004 	.word	0x20000004

08004638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800463e:	4b2c      	ldr	r3, [pc, #176]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b04      	cmp	r3, #4
 8004648:	d102      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800464a:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e047      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d102      	bne.n	8004662 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800465c:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e03e      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004662:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d136      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	3301      	adds	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d10c      	bne.n	80046a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800468c:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004696:	68d2      	ldr	r2, [r2, #12]
 8004698:	0a12      	lsrs	r2, r2, #8
 800469a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	617b      	str	r3, [r7, #20]
      break;
 80046a4:	e00c      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b0:	68d2      	ldr	r2, [r2, #12]
 80046b2:	0a12      	lsrs	r2, r2, #8
 80046b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
      break;
 80046be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	0e5b      	lsrs	r3, r3, #25
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	3301      	adds	r3, #1
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e001      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046e0:	693b      	ldr	r3, [r7, #16]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	00f42400 	.word	0x00f42400
 80046f8:	007a1200 	.word	0x007a1200

080046fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d10c      	bne.n	800473a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004720:	4a17      	ldr	r2, [pc, #92]	; (8004780 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	4a14      	ldr	r2, [pc, #80]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800472a:	68d2      	ldr	r2, [r2, #12]
 800472c:	0a12      	lsrs	r2, r2, #8
 800472e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	617b      	str	r3, [r7, #20]
    break;
 8004738:	e00c      	b.n	8004754 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	0a12      	lsrs	r2, r2, #8
 8004748:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]
    break;
 8004752:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0e5b      	lsrs	r3, r3, #25
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800476e:	687b      	ldr	r3, [r7, #4]
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40021000 	.word	0x40021000
 8004780:	007a1200 	.word	0x007a1200
 8004784:	00f42400 	.word	0x00f42400

08004788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004790:	2300      	movs	r3, #0
 8004792:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004794:	2300      	movs	r3, #0
 8004796:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8098 	beq.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047aa:	4b43      	ldr	r3, [pc, #268]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ba:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6593      	str	r3, [r2, #88]	; 0x58
 80047c2:	4b3d      	ldr	r3, [pc, #244]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d2:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a39      	ldr	r2, [pc, #228]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047de:	f7fd fbd3 	bl	8001f88 <HAL_GetTick>
 80047e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e4:	e009      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fd fbcf 	bl	8001f88 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d902      	bls.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	74fb      	strb	r3, [r7, #19]
        break;
 80047f8:	e005      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fa:	4b30      	ldr	r3, [pc, #192]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ef      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d159      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800480c:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01e      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	429a      	cmp	r2, r3
 8004826:	d019      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004828:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004844:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd fb8f 	bl	8001f88 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486c:	e00b      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fd fb8b 	bl	8001f88 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d902      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	74fb      	strb	r3, [r7, #19]
            break;
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ec      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	4903      	ldr	r1, [pc, #12]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048b0:	e008      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	74bb      	strb	r3, [r7, #18]
 80048b6:	e005      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c4:	7c7b      	ldrb	r3, [r7, #17]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d105      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ca:	4ba6      	ldr	r3, [pc, #664]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	4aa5      	ldr	r2, [pc, #660]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e2:	4ba0      	ldr	r3, [pc, #640]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f023 0203 	bic.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	499c      	ldr	r1, [pc, #624]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004904:	4b97      	ldr	r3, [pc, #604]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f023 020c 	bic.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4994      	ldr	r1, [pc, #592]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004926:	4b8f      	ldr	r3, [pc, #572]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	498b      	ldr	r1, [pc, #556]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004948:	4b86      	ldr	r3, [pc, #536]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	4983      	ldr	r1, [pc, #524]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800496a:	4b7e      	ldr	r3, [pc, #504]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	497a      	ldr	r1, [pc, #488]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800498c:	4b75      	ldr	r3, [pc, #468]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	4972      	ldr	r1, [pc, #456]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ae:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	4969      	ldr	r1, [pc, #420]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049d0:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4961      	ldr	r1, [pc, #388]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f2:	4b5c      	ldr	r3, [pc, #368]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	4958      	ldr	r1, [pc, #352]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d015      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	4950      	ldr	r1, [pc, #320]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a32:	d105      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a34:	4b4b      	ldr	r3, [pc, #300]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a4a      	ldr	r2, [pc, #296]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d015      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a4c:	4b45      	ldr	r3, [pc, #276]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	4942      	ldr	r1, [pc, #264]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6c:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a84:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	4934      	ldr	r1, [pc, #208]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a2e      	ldr	r2, [pc, #184]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004abc:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	4926      	ldr	r1, [pc, #152]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004adc:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004af4:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	4918      	ldr	r1, [pc, #96]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b12:	d105      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b14:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d015      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	490a      	ldr	r1, [pc, #40]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b58:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000

08004b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e049      	b.n	8004c0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc ffde 	bl	8001b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f000 fde2 	bl	8005770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e04a      	b.n	8004cc6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a21      	ldr	r2, [pc, #132]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d013      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_TIM_Base_Start_IT+0xc4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d115      	bne.n	8004cb0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d015      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0xaa>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d011      	beq.n	8004cc2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	e008      	b.n	8004cc2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e000      	b.n	8004cc4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	00010007 	.word	0x00010007

08004cec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e049      	b.n	8004d92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fc fe12 	bl	800193c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f000 fd20 	bl	8005770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d109      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0x24>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e03c      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d109      	bne.n	8004dda <HAL_TIM_PWM_Start+0x3e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e02f      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d109      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x58>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e022      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d109      	bne.n	8004e0e <HAL_TIM_PWM_Start+0x72>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	e015      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x8c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e008      	b.n	8004e3a <HAL_TIM_PWM_Start+0x9e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e097      	b.n	8004f72 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Start+0xb6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e50:	e023      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d104      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xc6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	e01b      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d104      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xd6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e70:	e013      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d104      	bne.n	8004e82 <HAL_TIM_PWM_Start+0xe6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e80:	e00b      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d104      	bne.n	8004e92 <HAL_TIM_PWM_Start+0xf6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	e003      	b.n	8004e9a <HAL_TIM_PWM_Start+0xfe>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 ffea 	bl	8005e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a33      	ldr	r2, [pc, #204]	; (8004f7c <HAL_TIM_PWM_Start+0x1e0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a32      	ldr	r2, [pc, #200]	; (8004f80 <HAL_TIM_PWM_Start+0x1e4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a30      	ldr	r2, [pc, #192]	; (8004f84 <HAL_TIM_PWM_Start+0x1e8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d009      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <HAL_TIM_PWM_Start+0x1ec>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIM_PWM_Start+0x13e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <HAL_TIM_PWM_Start+0x1f0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <HAL_TIM_PWM_Start+0x142>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_TIM_PWM_Start+0x144>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <HAL_TIM_PWM_Start+0x1e0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_TIM_PWM_Start+0x194>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d013      	beq.n	8004f30 <HAL_TIM_PWM_Start+0x194>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_TIM_PWM_Start+0x1f4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIM_PWM_Start+0x194>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <HAL_TIM_PWM_Start+0x1f8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIM_PWM_Start+0x194>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <HAL_TIM_PWM_Start+0x1e4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_PWM_Start+0x194>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIM_PWM_Start+0x1e8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d115      	bne.n	8004f5c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <HAL_TIM_PWM_Start+0x1fc>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d015      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x1d2>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f48:	d011      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	e008      	b.n	8004f6e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e000      	b.n	8004f70 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40013400 	.word	0x40013400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	00010007 	.word	0x00010007

08004f9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e097      	b.n	80050e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fc fd01 	bl	80019cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004fe0:	f023 0307 	bic.w	r3, r3, #7
 8004fe4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f000 fbbd 	bl	8005770 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	4313      	orrs	r3, r2
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800503c:	f023 030c 	bic.w	r3, r3, #12
 8005040:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	4313      	orrs	r3, r2
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	011a      	lsls	r2, r3, #4
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	031b      	lsls	r3, r3, #12
 800506c:	4313      	orrs	r3, r2
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	4313      	orrs	r3, r2
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005100:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005108:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005110:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d110      	bne.n	800513a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d102      	bne.n	8005124 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800511e:	7b7b      	ldrb	r3, [r7, #13]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d001      	beq.n	8005128 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e068      	b.n	80051fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005138:	e031      	b.n	800519e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d110      	bne.n	8005162 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005146:	7b3b      	ldrb	r3, [r7, #12]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e054      	b.n	80051fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005160:	e01d      	b.n	800519e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d108      	bne.n	800517a <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005168:	7bbb      	ldrb	r3, [r7, #14]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800516e:	7b7b      	ldrb	r3, [r7, #13]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005174:	7b3b      	ldrb	r3, [r7, #12]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e03d      	b.n	80051fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_TIM_Encoder_Start+0xc2>
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d008      	beq.n	80051ba <HAL_TIM_Encoder_Start+0xd2>
 80051a8:	e00f      	b.n	80051ca <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fe62 	bl	8005e7c <TIM_CCxChannelCmd>
      break;
 80051b8:	e016      	b.n	80051e8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	2104      	movs	r1, #4
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fe5a 	bl	8005e7c <TIM_CCxChannelCmd>
      break;
 80051c8:	e00e      	b.n	80051e8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fe52 	bl	8005e7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	2104      	movs	r1, #4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fe4b 	bl	8005e7c <TIM_CCxChannelCmd>
      break;
 80051e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d122      	bne.n	800525e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d11b      	bne.n	800525e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0202 	mvn.w	r2, #2
 800522e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fa75 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 800524a:	e005      	b.n	8005258 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa67 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa78 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d122      	bne.n	80052b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b04      	cmp	r3, #4
 8005278:	d11b      	bne.n	80052b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f06f 0204 	mvn.w	r2, #4
 8005282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fa4b 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 800529e:	e005      	b.n	80052ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa3d 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa4e 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d122      	bne.n	8005306 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d11b      	bne.n	8005306 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0208 	mvn.w	r2, #8
 80052d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa21 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 80052f2:	e005      	b.n	8005300 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fa13 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fa24 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d122      	bne.n	800535a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d11b      	bne.n	800535a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f06f 0210 	mvn.w	r2, #16
 800532a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2208      	movs	r2, #8
 8005330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9f7 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 8005346:	e005      	b.n	8005354 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f9e9 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9fa 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10e      	bne.n	8005386 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0201 	mvn.w	r2, #1
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fc f9e1 	bl	8001748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d10e      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 feb7 	bl	8006120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 feaa 	bl	8006134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d10e      	bne.n	800540c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d107      	bne.n	800540c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f9a8 	bl	800575c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b20      	cmp	r3, #32
 8005418:	d10e      	bne.n	8005438 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d107      	bne.n	8005438 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0220 	mvn.w	r2, #32
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fe6a 	bl	800610c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005446:	d10f      	bne.n	8005468 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fe70 	bl	8006148 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005476:	d10f      	bne.n	8005498 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fe62 	bl	800615c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a6:	d10f      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fe54 	bl	8006170 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d6:	d10f      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fe46 	bl	8006184 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005516:	2302      	movs	r3, #2
 8005518:	e0fd      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x216>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b14      	cmp	r3, #20
 8005526:	f200 80f0 	bhi.w	800570a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005585 	.word	0x08005585
 8005534:	0800570b 	.word	0x0800570b
 8005538:	0800570b 	.word	0x0800570b
 800553c:	0800570b 	.word	0x0800570b
 8005540:	080055c5 	.word	0x080055c5
 8005544:	0800570b 	.word	0x0800570b
 8005548:	0800570b 	.word	0x0800570b
 800554c:	0800570b 	.word	0x0800570b
 8005550:	08005607 	.word	0x08005607
 8005554:	0800570b 	.word	0x0800570b
 8005558:	0800570b 	.word	0x0800570b
 800555c:	0800570b 	.word	0x0800570b
 8005560:	08005647 	.word	0x08005647
 8005564:	0800570b 	.word	0x0800570b
 8005568:	0800570b 	.word	0x0800570b
 800556c:	0800570b 	.word	0x0800570b
 8005570:	08005689 	.word	0x08005689
 8005574:	0800570b 	.word	0x0800570b
 8005578:	0800570b 	.word	0x0800570b
 800557c:	0800570b 	.word	0x0800570b
 8005580:	080056c9 	.word	0x080056c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f980 	bl	8005890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0208 	orr.w	r2, r2, #8
 800559e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0204 	bic.w	r2, r2, #4
 80055ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6999      	ldr	r1, [r3, #24]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	619a      	str	r2, [r3, #24]
      break;
 80055c2:	e0a3      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f9f0 	bl	80059b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6999      	ldr	r1, [r3, #24]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	619a      	str	r2, [r3, #24]
      break;
 8005604:	e082      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fa59 	bl	8005ac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0208 	orr.w	r2, r2, #8
 8005620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0204 	bic.w	r2, r2, #4
 8005630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69d9      	ldr	r1, [r3, #28]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	61da      	str	r2, [r3, #28]
      break;
 8005644:	e062      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fac1 	bl	8005bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69d9      	ldr	r1, [r3, #28]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	021a      	lsls	r2, r3, #8
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	61da      	str	r2, [r3, #28]
      break;
 8005686:	e041      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fb2a 	bl	8005ce8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056c6:	e021      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fb6e 	bl	8005db0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005708:	e000      	b.n	800570c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800570a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop

08005720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a3c      	ldr	r2, [pc, #240]	; (8005874 <TIM_Base_SetConfig+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00f      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578e:	d00b      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a39      	ldr	r2, [pc, #228]	; (8005878 <TIM_Base_SetConfig+0x108>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a38      	ldr	r2, [pc, #224]	; (800587c <TIM_Base_SetConfig+0x10c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a37      	ldr	r2, [pc, #220]	; (8005880 <TIM_Base_SetConfig+0x110>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <TIM_Base_SetConfig+0x104>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01b      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c8:	d017      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <TIM_Base_SetConfig+0x108>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a29      	ldr	r2, [pc, #164]	; (800587c <TIM_Base_SetConfig+0x10c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00f      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <TIM_Base_SetConfig+0x110>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00b      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <TIM_Base_SetConfig+0x114>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a26      	ldr	r2, [pc, #152]	; (8005888 <TIM_Base_SetConfig+0x118>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a25      	ldr	r2, [pc, #148]	; (800588c <TIM_Base_SetConfig+0x11c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d108      	bne.n	800580c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a10      	ldr	r2, [pc, #64]	; (8005874 <TIM_Base_SetConfig+0x104>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00f      	beq.n	8005858 <TIM_Base_SetConfig+0xe8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a11      	ldr	r2, [pc, #68]	; (8005880 <TIM_Base_SetConfig+0x110>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_Base_SetConfig+0xe8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <TIM_Base_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_Base_SetConfig+0xe8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a0f      	ldr	r2, [pc, #60]	; (8005888 <TIM_Base_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0xe8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0e      	ldr	r2, [pc, #56]	; (800588c <TIM_Base_SetConfig+0x11c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d103      	bne.n	8005860 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	615a      	str	r2, [r3, #20]
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40013400 	.word	0x40013400
 8005884:	40014000 	.word	0x40014000
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800

08005890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f023 0302 	bic.w	r3, r3, #2
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a2c      	ldr	r2, [pc, #176]	; (800599c <TIM_OC1_SetConfig+0x10c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_OC1_SetConfig+0x80>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <TIM_OC1_SetConfig+0x110>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_OC1_SetConfig+0x80>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <TIM_OC1_SetConfig+0x114>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_OC1_SetConfig+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <TIM_OC1_SetConfig+0x118>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC1_SetConfig+0x80>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a28      	ldr	r2, [pc, #160]	; (80059ac <TIM_OC1_SetConfig+0x11c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10c      	bne.n	800592a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0308 	bic.w	r3, r3, #8
 8005916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <TIM_OC1_SetConfig+0x10c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00f      	beq.n	8005952 <TIM_OC1_SetConfig+0xc2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <TIM_OC1_SetConfig+0x110>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_OC1_SetConfig+0xc2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <TIM_OC1_SetConfig+0x114>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_OC1_SetConfig+0xc2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <TIM_OC1_SetConfig+0x118>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC1_SetConfig+0xc2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a17      	ldr	r2, [pc, #92]	; (80059ac <TIM_OC1_SetConfig+0x11c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d111      	bne.n	8005976 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	621a      	str	r2, [r3, #32]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40013400 	.word	0x40013400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800

080059b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0210 	bic.w	r2, r3, #16
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <TIM_OC2_SetConfig+0x100>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC2_SetConfig+0x6c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <TIM_OC2_SetConfig+0x104>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10d      	bne.n	8005a38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <TIM_OC2_SetConfig+0x100>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_OC2_SetConfig+0xb0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <TIM_OC2_SetConfig+0x104>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_OC2_SetConfig+0xb0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <TIM_OC2_SetConfig+0x108>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC2_SetConfig+0xb0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <TIM_OC2_SetConfig+0x10c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC2_SetConfig+0xb0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <TIM_OC2_SetConfig+0x110>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d113      	bne.n	8005a88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40013400 	.word	0x40013400
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400
 8005ac0:	40014800 	.word	0x40014800

08005ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <TIM_OC3_SetConfig+0xfc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_OC3_SetConfig+0x6a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a26      	ldr	r2, [pc, #152]	; (8005bc4 <TIM_OC3_SetConfig+0x100>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10d      	bne.n	8005b4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <TIM_OC3_SetConfig+0xfc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_OC3_SetConfig+0xae>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <TIM_OC3_SetConfig+0x100>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_OC3_SetConfig+0xae>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <TIM_OC3_SetConfig+0x104>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_OC3_SetConfig+0xae>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <TIM_OC3_SetConfig+0x108>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC3_SetConfig+0xae>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <TIM_OC3_SetConfig+0x10c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d113      	bne.n	8005b9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	621a      	str	r2, [r3, #32]
}
 8005bb4:	bf00      	nop
 8005bb6:	371c      	adds	r7, #28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40013400 	.word	0x40013400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800

08005bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <TIM_OC4_SetConfig+0x100>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC4_SetConfig+0x6c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <TIM_OC4_SetConfig+0x104>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10d      	bne.n	8005c5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	031b      	lsls	r3, r3, #12
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <TIM_OC4_SetConfig+0x100>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00f      	beq.n	8005c84 <TIM_OC4_SetConfig+0xb0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <TIM_OC4_SetConfig+0x104>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <TIM_OC4_SetConfig+0xb0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <TIM_OC4_SetConfig+0x108>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_OC4_SetConfig+0xb0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a1a      	ldr	r2, [pc, #104]	; (8005ce0 <TIM_OC4_SetConfig+0x10c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC4_SetConfig+0xb0>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <TIM_OC4_SetConfig+0x110>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d113      	bne.n	8005cac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40013400 	.word	0x40013400
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40014400 	.word	0x40014400
 8005ce4:	40014800 	.word	0x40014800

08005ce8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <TIM_OC5_SetConfig+0xb4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00f      	beq.n	8005d62 <TIM_OC5_SetConfig+0x7a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <TIM_OC5_SetConfig+0xb8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00b      	beq.n	8005d62 <TIM_OC5_SetConfig+0x7a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <TIM_OC5_SetConfig+0xbc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d007      	beq.n	8005d62 <TIM_OC5_SetConfig+0x7a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <TIM_OC5_SetConfig+0xc0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_OC5_SetConfig+0x7a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a13      	ldr	r2, [pc, #76]	; (8005dac <TIM_OC5_SetConfig+0xc4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d109      	bne.n	8005d76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40014000 	.word	0x40014000
 8005da8:	40014400 	.word	0x40014400
 8005dac:	40014800 	.word	0x40014800

08005db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <TIM_OC6_SetConfig+0xb8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_OC6_SetConfig+0x7c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <TIM_OC6_SetConfig+0xbc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_OC6_SetConfig+0x7c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a16      	ldr	r2, [pc, #88]	; (8005e70 <TIM_OC6_SetConfig+0xc0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_OC6_SetConfig+0x7c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <TIM_OC6_SetConfig+0xc4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC6_SetConfig+0x7c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <TIM_OC6_SetConfig+0xc8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d109      	bne.n	8005e40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	029b      	lsls	r3, r3, #10
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40013400 	.word	0x40013400
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40014400 	.word	0x40014400
 8005e78:	40014800 	.word	0x40014800

08005e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2201      	movs	r2, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1a      	ldr	r2, [r3, #32]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e065      	b.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2c      	ldr	r2, [pc, #176]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a2b      	ldr	r2, [pc, #172]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d108      	bne.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1b      	ldr	r2, [pc, #108]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d013      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a17      	ldr	r2, [pc, #92]	; (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10c      	bne.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	40013400 	.word	0x40013400
 8005fc0:	40000400 	.word	0x40000400
 8005fc4:	40000800 	.word	0x40000800
 8005fc8:	40014000 	.word	0x40014000

08005fcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e087      	b.n	80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	041b      	lsls	r3, r3, #16
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a27      	ldr	r2, [pc, #156]	; (8006104 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a25      	ldr	r2, [pc, #148]	; (8006108 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d106      	bne.n	8006084 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d126      	bne.n	80060e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	051b      	lsls	r3, r3, #20
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a0e      	ldr	r2, [pc, #56]	; (8006104 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a0d      	ldr	r2, [pc, #52]	; (8006108 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d106      	bne.n	80060e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40013400 	.word	0x40013400

0800610c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80061ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80061d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4013      	ands	r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061fc:	b084      	sub	sp, #16
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	f107 0014 	add.w	r0, r7, #20
 800620a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	b004      	add	sp, #16
 800623c:	4770      	bx	lr
	...

08006240 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006240:	b480      	push	{r7}
 8006242:	b09b      	sub	sp, #108	; 0x6c
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006266:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	78db      	ldrb	r3, [r3, #3]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d81f      	bhi.n	80062b2 <USB_ActivateEndpoint+0x72>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <USB_ActivateEndpoint+0x38>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006289 	.word	0x08006289
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062bb 	.word	0x080062bb
 8006284:	08006297 	.word	0x08006297
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006288:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800628c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006290:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006294:	e012      	b.n	80062bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006296:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800629a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800629e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80062a2:	e00b      	b.n	80062bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80062b0:	e004      	b.n	80062bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80062b8:	e000      	b.n	80062bc <USB_ActivateEndpoint+0x7c>
      break;
 80062ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	b21b      	sxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	b21a      	sxth	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	b21b      	sxth	r3, r3
 80062fe:	4313      	orrs	r3, r2
 8006300:	b21b      	sxth	r3, r3
 8006302:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	441a      	add	r2, r3
 8006310:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	7b1b      	ldrb	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 8149 	bne.w	80065c4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8084 	beq.w	8006444 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006346:	b29b      	uxth	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	4413      	add	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	00da      	lsls	r2, r3, #3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	88db      	ldrh	r3, [r3, #6]
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	b29b      	uxth	r3, r3
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	81fb      	strh	r3, [r7, #14]
 800637e:	89fb      	ldrh	r3, [r7, #14]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01b      	beq.n	80063c0 <USB_ActivateEndpoint+0x180>
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	81bb      	strh	r3, [r7, #12]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	89bb      	ldrh	r3, [r7, #12]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	78db      	ldrb	r3, [r3, #3]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d020      	beq.n	800640a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063de:	813b      	strh	r3, [r7, #8]
 80063e0:	893b      	ldrh	r3, [r7, #8]
 80063e2:	f083 0320 	eor.w	r3, r3, #32
 80063e6:	813b      	strh	r3, [r7, #8]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	441a      	add	r2, r3
 80063f2:	893b      	ldrh	r3, [r7, #8]
 80063f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006404:	b29b      	uxth	r3, r3
 8006406:	8013      	strh	r3, [r2, #0]
 8006408:	e27f      	b.n	800690a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006420:	817b      	strh	r3, [r7, #10]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	441a      	add	r2, r3
 800642c:	897b      	ldrh	r3, [r7, #10]
 800642e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643e:	b29b      	uxth	r3, r3
 8006440:	8013      	strh	r3, [r2, #0]
 8006442:	e262      	b.n	800690a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644e:	b29b      	uxth	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	4413      	add	r3, r2
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	00da      	lsls	r2, r3, #3
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	4413      	add	r3, r2
 8006462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	88db      	ldrh	r3, [r3, #6]
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	b29b      	uxth	r3, r3
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006482:	b29b      	uxth	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	4413      	add	r3, r2
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	00da      	lsls	r2, r3, #3
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	4413      	add	r3, r2
 8006496:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d112      	bne.n	80064ca <USB_ActivateEndpoint+0x28a>
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	e02f      	b.n	800652a <USB_ActivateEndpoint+0x2ea>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b3e      	cmp	r3, #62	; 0x3e
 80064d0:	d813      	bhi.n	80064fa <USB_ActivateEndpoint+0x2ba>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	663b      	str	r3, [r7, #96]	; 0x60
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <USB_ActivateEndpoint+0x2ac>
 80064e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e8:	3301      	adds	r3, #1
 80064ea:	663b      	str	r3, [r7, #96]	; 0x60
 80064ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	029b      	lsls	r3, r3, #10
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e017      	b.n	800652a <USB_ActivateEndpoint+0x2ea>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	663b      	str	r3, [r7, #96]	; 0x60
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <USB_ActivateEndpoint+0x2d4>
 800650e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006510:	3b01      	subs	r3, #1
 8006512:	663b      	str	r3, [r7, #96]	; 0x60
 8006514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006516:	b29b      	uxth	r3, r3
 8006518:	029b      	lsls	r3, r3, #10
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006524:	b29a      	uxth	r2, r3
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	83fb      	strh	r3, [r7, #30]
 8006538:	8bfb      	ldrh	r3, [r7, #30]
 800653a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01b      	beq.n	800657a <USB_ActivateEndpoint+0x33a>
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006558:	83bb      	strh	r3, [r7, #28]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	8bbb      	ldrh	r3, [r7, #28]
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	837b      	strh	r3, [r7, #26]
 8006592:	8b7b      	ldrh	r3, [r7, #26]
 8006594:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006598:	837b      	strh	r3, [r7, #26]
 800659a:	8b7b      	ldrh	r3, [r7, #26]
 800659c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065a0:	837b      	strh	r3, [r7, #26]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	8b7b      	ldrh	r3, [r7, #26]
 80065ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065be:	b29b      	uxth	r3, r3
 80065c0:	8013      	strh	r3, [r2, #0]
 80065c2:	e1a2      	b.n	800690a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80065ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	65bb      	str	r3, [r7, #88]	; 0x58
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006610:	4413      	add	r3, r2
 8006612:	65bb      	str	r3, [r7, #88]	; 0x58
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800661c:	4413      	add	r3, r2
 800661e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006622:	657b      	str	r3, [r7, #84]	; 0x54
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	891b      	ldrh	r3, [r3, #8]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	653b      	str	r3, [r7, #80]	; 0x50
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006644:	4413      	add	r3, r2
 8006646:	653b      	str	r3, [r7, #80]	; 0x50
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	00da      	lsls	r2, r3, #3
 800664e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006650:	4413      	add	r3, r2
 8006652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	895b      	ldrh	r3, [r3, #10]
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	b29b      	uxth	r3, r3
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006666:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 8091 	bne.w	8006794 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006680:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01b      	beq.n	80066c2 <USB_ActivateEndpoint+0x482>
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80066d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01b      	beq.n	8006712 <USB_ActivateEndpoint+0x4d2>
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006728:	86bb      	strh	r3, [r7, #52]	; 0x34
 800672a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800672c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006730:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006732:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006734:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006738:	86bb      	strh	r3, [r7, #52]	; 0x34
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006770:	867b      	strh	r3, [r7, #50]	; 0x32
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	441a      	add	r2, r3
 800677c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]
 8006792:	e0ba      	b.n	800690a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80067a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01d      	beq.n	80067ec <USB_ActivateEndpoint+0x5ac>
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80067fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01d      	beq.n	8006844 <USB_ActivateEndpoint+0x604>
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006840:	b29b      	uxth	r3, r3
 8006842:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	78db      	ldrb	r3, [r3, #3]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d024      	beq.n	8006896 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006862:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006866:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800686a:	f083 0320 	eor.w	r3, r3, #32
 800686e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]
 8006894:	e01d      	b.n	80068d2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	441a      	add	r2, r3
 80068ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80068be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800690a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800690e:	4618      	mov	r0, r3
 8006910:	376c      	adds	r7, #108	; 0x6c
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop

0800691c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800691c:	b480      	push	{r7}
 800691e:	b08d      	sub	sp, #52	; 0x34
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	7b1b      	ldrb	r3, [r3, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 808e 	bne.w	8006a4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d044      	beq.n	80069c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	81bb      	strh	r3, [r7, #12]
 8006946:	89bb      	ldrh	r3, [r7, #12]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01b      	beq.n	8006988 <USB_DeactivateEndpoint+0x6c>
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	817b      	strh	r3, [r7, #10]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	897b      	ldrh	r3, [r7, #10]
 8006974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006984:	b29b      	uxth	r3, r3
 8006986:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	813b      	strh	r3, [r7, #8]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	893b      	ldrh	r3, [r7, #8]
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
 80069c0:	e192      	b.n	8006ce8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	827b      	strh	r3, [r7, #18]
 80069d0:	8a7b      	ldrh	r3, [r7, #18]
 80069d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01b      	beq.n	8006a12 <USB_DeactivateEndpoint+0xf6>
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f0:	823b      	strh	r3, [r7, #16]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	8a3b      	ldrh	r3, [r7, #16]
 80069fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a28:	81fb      	strh	r3, [r7, #14]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	89fb      	ldrh	r3, [r7, #14]
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
 8006a4a:	e14d      	b.n	8006ce8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 80a5 	bne.w	8006ba0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	843b      	strh	r3, [r7, #32]
 8006a64:	8c3b      	ldrh	r3, [r7, #32]
 8006a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01b      	beq.n	8006aa6 <USB_DeactivateEndpoint+0x18a>
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	83fb      	strh	r3, [r7, #30]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	8bfb      	ldrh	r3, [r7, #30]
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	83bb      	strh	r3, [r7, #28]
 8006ab4:	8bbb      	ldrh	r3, [r7, #28]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01b      	beq.n	8006af6 <USB_DeactivateEndpoint+0x1da>
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad4:	837b      	strh	r3, [r7, #26]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	8b7b      	ldrh	r3, [r7, #26]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0c:	833b      	strh	r3, [r7, #24]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	8b3b      	ldrh	r3, [r7, #24]
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	82fb      	strh	r3, [r7, #22]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8afb      	ldrh	r3, [r7, #22]
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7c:	82bb      	strh	r3, [r7, #20]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8abb      	ldrh	r3, [r7, #20]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
 8006b9e:	e0a3      	b.n	8006ce8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006bae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01b      	beq.n	8006bf0 <USB_DeactivateEndpoint+0x2d4>
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006bfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01b      	beq.n	8006c40 <USB_DeactivateEndpoint+0x324>
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	441a      	add	r2, r3
 8006c2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	441a      	add	r2, r3
 8006cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3734      	adds	r7, #52	; 0x34
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b0c4      	sub	sp, #272	; 0x110
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	6018      	str	r0, [r3, #0]
 8006d00:	463b      	mov	r3, r7
 8006d02:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d04:	463b      	mov	r3, r7
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	f040 8566 	bne.w	80077dc <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d10:	463b      	mov	r3, r7
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	463b      	mov	r3, r7
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d905      	bls.n	8006d2c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006d20:	463b      	mov	r3, r7
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006d2a:	e004      	b.n	8006d36 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d36:	463b      	mov	r3, r7
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	7b1b      	ldrb	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d12c      	bne.n	8006d9a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d40:	463b      	mov	r3, r7
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6959      	ldr	r1, [r3, #20]
 8006d46:	463b      	mov	r3, r7
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	88da      	ldrh	r2, [r3, #6]
 8006d4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	1d38      	adds	r0, r7, #4
 8006d54:	6800      	ldr	r0, [r0, #0]
 8006d56:	f001 fa43 	bl	80081e0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	4413      	add	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	463b      	mov	r3, r7
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	00da      	lsls	r2, r3, #3
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006d82:	f107 0310 	add.w	r3, r7, #16
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	f107 0310 	add.w	r3, r7, #16
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	f000 bcec 	b.w	8007772 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	78db      	ldrb	r3, [r3, #3]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	f040 8356 	bne.w	8007452 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006da6:	463b      	mov	r3, r7
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	463b      	mov	r3, r7
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	f240 82fa 	bls.w	80073ac <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006db8:	1d3b      	adds	r3, r7, #4
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006dfc:	463b      	mov	r3, r7
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	463b      	mov	r3, r7
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e18:	1d3b      	adds	r3, r7, #4
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 815e 	beq.w	80070f0 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e34:	1d3b      	adds	r3, r7, #4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d164      	bne.n	8006f0e <USB_EPStartXfer+0x218>
 8006e44:	1d3b      	adds	r3, r7, #4
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4a:	1d3b      	adds	r3, r7, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	4413      	add	r3, r2
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	00da      	lsls	r2, r3, #3
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	4413      	add	r3, r2
 8006e68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d112      	bne.n	8006e9c <USB_EPStartXfer+0x1a6>
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e054      	b.n	8006f46 <USB_EPStartXfer+0x250>
 8006e9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea2:	d817      	bhi.n	8006ed4 <USB_EPStartXfer+0x1de>
 8006ea4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006eae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <USB_EPStartXfer+0x1ce>
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	029b      	lsls	r3, r3, #10
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	801a      	strh	r2, [r3, #0]
 8006ed2:	e038      	b.n	8006f46 <USB_EPStartXfer+0x250>
 8006ed4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ede:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d104      	bne.n	8006ef4 <USB_EPStartXfer+0x1fe>
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	029b      	lsls	r3, r3, #10
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e01b      	b.n	8006f46 <USB_EPStartXfer+0x250>
 8006f0e:	463b      	mov	r3, r7
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d116      	bne.n	8006f46 <USB_EPStartXfer+0x250>
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f26:	4413      	add	r3, r2
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	00da      	lsls	r2, r3, #3
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	4413      	add	r3, r2
 8006f36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f46:	463b      	mov	r3, r7
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	895b      	ldrh	r3, [r3, #10]
 8006f4c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f50:	463b      	mov	r3, r7
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6959      	ldr	r1, [r3, #20]
 8006f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006f60:	1d38      	adds	r0, r7, #4
 8006f62:	6800      	ldr	r0, [r0, #0]
 8006f64:	f001 f93c 	bl	80081e0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f68:	463b      	mov	r3, r7
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695a      	ldr	r2, [r3, #20]
 8006f6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f72:	441a      	add	r2, r3
 8006f74:	463b      	mov	r3, r7
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d90e      	bls.n	8006fa8 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	621a      	str	r2, [r3, #32]
 8006fa6:	e008      	b.n	8006fba <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fa8:	463b      	mov	r3, r7
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fba:	463b      	mov	r3, r7
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d164      	bne.n	800708e <USB_EPStartXfer+0x398>
 8006fc4:	1d3b      	adds	r3, r7, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	1d3b      	adds	r3, r7, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	00da      	lsls	r2, r3, #3
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d112      	bne.n	800701c <USB_EPStartXfer+0x326>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007000:	b29a      	uxth	r2, r3
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007014:	b29a      	uxth	r2, r3
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	e057      	b.n	80070cc <USB_EPStartXfer+0x3d6>
 800701c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007020:	2b3e      	cmp	r3, #62	; 0x3e
 8007022:	d817      	bhi.n	8007054 <USB_EPStartXfer+0x35e>
 8007024:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800702e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <USB_EPStartXfer+0x34e>
 800703a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800703e:	3301      	adds	r3, #1
 8007040:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007044:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007048:	b29b      	uxth	r3, r3
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	b29a      	uxth	r2, r3
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	e03b      	b.n	80070cc <USB_EPStartXfer+0x3d6>
 8007054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800705e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <USB_EPStartXfer+0x37e>
 800706a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800706e:	3b01      	subs	r3, #1
 8007070:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007074:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007078:	b29b      	uxth	r3, r3
 800707a:	029b      	lsls	r3, r3, #10
 800707c:	b29b      	uxth	r3, r3
 800707e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007086:	b29a      	uxth	r2, r3
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	e01e      	b.n	80070cc <USB_EPStartXfer+0x3d6>
 800708e:	463b      	mov	r3, r7
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	785b      	ldrb	r3, [r3, #1]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d119      	bne.n	80070cc <USB_EPStartXfer+0x3d6>
 8007098:	1d3b      	adds	r3, r7, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	4413      	add	r3, r2
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
 80070b0:	463b      	mov	r3, r7
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	00da      	lsls	r2, r3, #3
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	4413      	add	r3, r2
 80070bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070c0:	623b      	str	r3, [r7, #32]
 80070c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	891b      	ldrh	r3, [r3, #8]
 80070d2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070d6:	463b      	mov	r3, r7
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6959      	ldr	r1, [r3, #20]
 80070dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80070e6:	1d38      	adds	r0, r7, #4
 80070e8:	6800      	ldr	r0, [r0, #0]
 80070ea:	f001 f879 	bl	80081e0 <USB_WritePMA>
 80070ee:	e340      	b.n	8007772 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070f0:	463b      	mov	r3, r7
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	785b      	ldrb	r3, [r3, #1]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d164      	bne.n	80071c4 <USB_EPStartXfer+0x4ce>
 80070fa:	1d3b      	adds	r3, r7, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007100:	1d3b      	adds	r3, r7, #4
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007108:	b29b      	uxth	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710e:	4413      	add	r3, r2
 8007110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007112:	463b      	mov	r3, r7
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	00da      	lsls	r2, r3, #3
 800711a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711c:	4413      	add	r3, r2
 800711e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007122:	64bb      	str	r3, [r7, #72]	; 0x48
 8007124:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007128:	2b00      	cmp	r3, #0
 800712a:	d112      	bne.n	8007152 <USB_EPStartXfer+0x45c>
 800712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007136:	b29a      	uxth	r2, r3
 8007138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800713e:	881b      	ldrh	r3, [r3, #0]
 8007140:	b29b      	uxth	r3, r3
 8007142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714a:	b29a      	uxth	r2, r3
 800714c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714e:	801a      	strh	r2, [r3, #0]
 8007150:	e057      	b.n	8007202 <USB_EPStartXfer+0x50c>
 8007152:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007156:	2b3e      	cmp	r3, #62	; 0x3e
 8007158:	d817      	bhi.n	800718a <USB_EPStartXfer+0x494>
 800715a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800715e:	085b      	lsrs	r3, r3, #1
 8007160:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007164:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <USB_EPStartXfer+0x484>
 8007170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007174:	3301      	adds	r3, #1
 8007176:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800717a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800717e:	b29b      	uxth	r3, r3
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	b29a      	uxth	r2, r3
 8007184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	e03b      	b.n	8007202 <USB_EPStartXfer+0x50c>
 800718a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007194:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007198:	f003 031f 	and.w	r3, r3, #31
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <USB_EPStartXfer+0x4b4>
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a4:	3b01      	subs	r3, #1
 80071a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	029b      	lsls	r3, r3, #10
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071bc:	b29a      	uxth	r2, r3
 80071be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	e01e      	b.n	8007202 <USB_EPStartXfer+0x50c>
 80071c4:	463b      	mov	r3, r7
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d119      	bne.n	8007202 <USB_EPStartXfer+0x50c>
 80071ce:	1d3b      	adds	r3, r7, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	657b      	str	r3, [r7, #84]	; 0x54
 80071d4:	1d3b      	adds	r3, r7, #4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071dc:	b29b      	uxth	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e2:	4413      	add	r3, r2
 80071e4:	657b      	str	r3, [r7, #84]	; 0x54
 80071e6:	463b      	mov	r3, r7
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	00da      	lsls	r2, r3, #3
 80071ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071f6:	653b      	str	r3, [r7, #80]	; 0x50
 80071f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007200:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007202:	463b      	mov	r3, r7
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	891b      	ldrh	r3, [r3, #8]
 8007208:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720c:	463b      	mov	r3, r7
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6959      	ldr	r1, [r3, #20]
 8007212:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007216:	b29b      	uxth	r3, r3
 8007218:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800721c:	1d38      	adds	r0, r7, #4
 800721e:	6800      	ldr	r0, [r0, #0]
 8007220:	f000 ffde 	bl	80081e0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007224:	463b      	mov	r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800722e:	441a      	add	r2, r3
 8007230:	463b      	mov	r3, r7
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007236:	463b      	mov	r3, r7
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6a1a      	ldr	r2, [r3, #32]
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d90e      	bls.n	8007264 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8007246:	463b      	mov	r3, r7
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6a1a      	ldr	r2, [r3, #32]
 8007256:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	463b      	mov	r3, r7
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	621a      	str	r2, [r3, #32]
 8007262:	e008      	b.n	8007276 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8007264:	463b      	mov	r3, r7
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800726e:	463b      	mov	r3, r7
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2200      	movs	r2, #0
 8007274:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007276:	1d3b      	adds	r3, r7, #4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	647b      	str	r3, [r7, #68]	; 0x44
 800727c:	463b      	mov	r3, r7
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d164      	bne.n	8007350 <USB_EPStartXfer+0x65a>
 8007286:	1d3b      	adds	r3, r7, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007294:	b29b      	uxth	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	4413      	add	r3, r2
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00da      	lsls	r2, r3, #3
 80072a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80072b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d112      	bne.n	80072de <USB_EPStartXfer+0x5e8>
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	e054      	b.n	8007388 <USB_EPStartXfer+0x692>
 80072de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072e2:	2b3e      	cmp	r3, #62	; 0x3e
 80072e4:	d817      	bhi.n	8007316 <USB_EPStartXfer+0x620>
 80072e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <USB_EPStartXfer+0x610>
 80072fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007300:	3301      	adds	r3, #1
 8007302:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800730a:	b29b      	uxth	r3, r3
 800730c:	029b      	lsls	r3, r3, #10
 800730e:	b29a      	uxth	r2, r3
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e038      	b.n	8007388 <USB_EPStartXfer+0x692>
 8007316:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007320:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <USB_EPStartXfer+0x640>
 800732c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007330:	3b01      	subs	r3, #1
 8007332:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800733a:	b29b      	uxth	r3, r3
 800733c:	029b      	lsls	r3, r3, #10
 800733e:	b29b      	uxth	r3, r3
 8007340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007348:	b29a      	uxth	r2, r3
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e01b      	b.n	8007388 <USB_EPStartXfer+0x692>
 8007350:	463b      	mov	r3, r7
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d116      	bne.n	8007388 <USB_EPStartXfer+0x692>
 800735a:	1d3b      	adds	r3, r7, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007362:	b29b      	uxth	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007368:	4413      	add	r3, r2
 800736a:	647b      	str	r3, [r7, #68]	; 0x44
 800736c:	463b      	mov	r3, r7
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	00da      	lsls	r2, r3, #3
 8007374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007376:	4413      	add	r3, r2
 8007378:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800737c:	643b      	str	r3, [r7, #64]	; 0x40
 800737e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007382:	b29a      	uxth	r2, r3
 8007384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007386:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	895b      	ldrh	r3, [r3, #10]
 800738e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007392:	463b      	mov	r3, r7
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6959      	ldr	r1, [r3, #20]
 8007398:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800739c:	b29b      	uxth	r3, r3
 800739e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80073a2:	1d38      	adds	r0, r7, #4
 80073a4:	6800      	ldr	r0, [r0, #0]
 80073a6:	f000 ff1b 	bl	80081e0 <USB_WritePMA>
 80073aa:	e1e2      	b.n	8007772 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80073b6:	1d3b      	adds	r3, r7, #4
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	463b      	mov	r3, r7
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80073cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	463b      	mov	r3, r7
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	441a      	add	r2, r3
 80073e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073fa:	1d3b      	adds	r3, r7, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	663b      	str	r3, [r7, #96]	; 0x60
 8007400:	1d3b      	adds	r3, r7, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007408:	b29b      	uxth	r3, r3
 800740a:	461a      	mov	r2, r3
 800740c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800740e:	4413      	add	r3, r2
 8007410:	663b      	str	r3, [r7, #96]	; 0x60
 8007412:	463b      	mov	r3, r7
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	00da      	lsls	r2, r3, #3
 800741a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741c:	4413      	add	r3, r2
 800741e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007424:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007428:	b29a      	uxth	r2, r3
 800742a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800742c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800742e:	463b      	mov	r3, r7
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	891b      	ldrh	r3, [r3, #8]
 8007434:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007438:	463b      	mov	r3, r7
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6959      	ldr	r1, [r3, #20]
 800743e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007442:	b29b      	uxth	r3, r3
 8007444:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007448:	1d38      	adds	r0, r7, #4
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	f000 fec8 	bl	80081e0 <USB_WritePMA>
 8007450:	e18f      	b.n	8007772 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	463b      	mov	r3, r7
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 808f 	beq.w	800758c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	67bb      	str	r3, [r7, #120]	; 0x78
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d164      	bne.n	8007548 <USB_EPStartXfer+0x852>
 800747e:	1d3b      	adds	r3, r7, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	673b      	str	r3, [r7, #112]	; 0x70
 8007484:	1d3b      	adds	r3, r7, #4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748c:	b29b      	uxth	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007492:	4413      	add	r3, r2
 8007494:	673b      	str	r3, [r7, #112]	; 0x70
 8007496:	463b      	mov	r3, r7
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	00da      	lsls	r2, r3, #3
 800749e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074a0:	4413      	add	r3, r2
 80074a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d112      	bne.n	80074d6 <USB_EPStartXfer+0x7e0>
 80074b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074be:	801a      	strh	r2, [r3, #0]
 80074c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e054      	b.n	8007580 <USB_EPStartXfer+0x88a>
 80074d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074da:	2b3e      	cmp	r3, #62	; 0x3e
 80074dc:	d817      	bhi.n	800750e <USB_EPStartXfer+0x818>
 80074de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <USB_EPStartXfer+0x808>
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f8:	3301      	adds	r3, #1
 80074fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	b29b      	uxth	r3, r3
 8007504:	029b      	lsls	r3, r3, #10
 8007506:	b29a      	uxth	r2, r3
 8007508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	e038      	b.n	8007580 <USB_EPStartXfer+0x88a>
 800750e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007518:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <USB_EPStartXfer+0x838>
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	3b01      	subs	r3, #1
 800752a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800752e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007532:	b29b      	uxth	r3, r3
 8007534:	029b      	lsls	r3, r3, #10
 8007536:	b29b      	uxth	r3, r3
 8007538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007540:	b29a      	uxth	r2, r3
 8007542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e01b      	b.n	8007580 <USB_EPStartXfer+0x88a>
 8007548:	463b      	mov	r3, r7
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d116      	bne.n	8007580 <USB_EPStartXfer+0x88a>
 8007552:	1d3b      	adds	r3, r7, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007560:	4413      	add	r3, r2
 8007562:	67bb      	str	r3, [r7, #120]	; 0x78
 8007564:	463b      	mov	r3, r7
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	00da      	lsls	r2, r3, #3
 800756c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756e:	4413      	add	r3, r2
 8007570:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007574:	677b      	str	r3, [r7, #116]	; 0x74
 8007576:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800757a:	b29a      	uxth	r2, r3
 800757c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007580:	463b      	mov	r3, r7
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	895b      	ldrh	r3, [r3, #10]
 8007586:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800758a:	e097      	b.n	80076bc <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800758c:	463b      	mov	r3, r7
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d168      	bne.n	8007668 <USB_EPStartXfer+0x972>
 8007596:	1d3b      	adds	r3, r7, #4
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800759e:	1d3b      	adds	r3, r7, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075ae:	4413      	add	r3, r2
 80075b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075b4:	463b      	mov	r3, r7
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00da      	lsls	r2, r3, #3
 80075bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d112      	bne.n	80075f6 <USB_EPStartXfer+0x900>
 80075d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075da:	b29a      	uxth	r2, r3
 80075dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e05d      	b.n	80076b2 <USB_EPStartXfer+0x9bc>
 80075f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075fa:	2b3e      	cmp	r3, #62	; 0x3e
 80075fc:	d817      	bhi.n	800762e <USB_EPStartXfer+0x938>
 80075fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007608:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <USB_EPStartXfer+0x928>
 8007614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007618:	3301      	adds	r3, #1
 800761a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800761e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007622:	b29b      	uxth	r3, r3
 8007624:	029b      	lsls	r3, r3, #10
 8007626:	b29a      	uxth	r2, r3
 8007628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800762a:	801a      	strh	r2, [r3, #0]
 800762c:	e041      	b.n	80076b2 <USB_EPStartXfer+0x9bc>
 800762e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <USB_EPStartXfer+0x958>
 8007644:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007648:	3b01      	subs	r3, #1
 800764a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800764e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007652:	b29b      	uxth	r3, r3
 8007654:	029b      	lsls	r3, r3, #10
 8007656:	b29b      	uxth	r3, r3
 8007658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007660:	b29a      	uxth	r2, r3
 8007662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e024      	b.n	80076b2 <USB_EPStartXfer+0x9bc>
 8007668:	463b      	mov	r3, r7
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d11f      	bne.n	80076b2 <USB_EPStartXfer+0x9bc>
 8007672:	1d3b      	adds	r3, r7, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800767a:	1d3b      	adds	r3, r7, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800768a:	4413      	add	r3, r2
 800768c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007690:	463b      	mov	r3, r7
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	00da      	lsls	r2, r3, #3
 8007698:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800769c:	4413      	add	r3, r2
 800769e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076b2:	463b      	mov	r3, r7
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	891b      	ldrh	r3, [r3, #8]
 80076b8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076bc:	463b      	mov	r3, r7
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6959      	ldr	r1, [r3, #20]
 80076c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80076cc:	1d38      	adds	r0, r7, #4
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	f000 fd86 	bl	80081e0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80076d4:	463b      	mov	r3, r7
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	785b      	ldrb	r3, [r3, #1]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d122      	bne.n	8007724 <USB_EPStartXfer+0xa2e>
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	463b      	mov	r3, r7
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	463b      	mov	r3, r7
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	441a      	add	r2, r3
 800770a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800770e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800771e:	b29b      	uxth	r3, r3
 8007720:	8013      	strh	r3, [r2, #0]
 8007722:	e026      	b.n	8007772 <USB_EPStartXfer+0xa7c>
 8007724:	463b      	mov	r3, r7
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d121      	bne.n	8007772 <USB_EPStartXfer+0xa7c>
 800772e:	1d3b      	adds	r3, r7, #4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	463b      	mov	r3, r7
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007748:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800774c:	1d3b      	adds	r3, r7, #4
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	463b      	mov	r3, r7
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	441a      	add	r2, r3
 800775a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800775e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800776a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776e:	b29b      	uxth	r3, r3
 8007770:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	463b      	mov	r3, r7
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f107 020e 	add.w	r2, r7, #14
 8007788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007790:	8013      	strh	r3, [r2, #0]
 8007792:	f107 030e 	add.w	r3, r7, #14
 8007796:	f107 020e 	add.w	r2, r7, #14
 800779a:	8812      	ldrh	r2, [r2, #0]
 800779c:	f082 0210 	eor.w	r2, r2, #16
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	f107 030e 	add.w	r3, r7, #14
 80077a6:	f107 020e 	add.w	r2, r7, #14
 80077aa:	8812      	ldrh	r2, [r2, #0]
 80077ac:	f082 0220 	eor.w	r2, r2, #32
 80077b0:	801a      	strh	r2, [r3, #0]
 80077b2:	1d3b      	adds	r3, r7, #4
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	463b      	mov	r3, r7
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	441a      	add	r2, r3
 80077c0:	f107 030e 	add.w	r3, r7, #14
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	8013      	strh	r3, [r2, #0]
 80077da:	e3b5      	b.n	8007f48 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80077dc:	463b      	mov	r3, r7
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	7b1b      	ldrb	r3, [r3, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 8090 	bne.w	8007908 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80077e8:	463b      	mov	r3, r7
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	463b      	mov	r3, r7
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d90e      	bls.n	8007816 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699a      	ldr	r2, [r3, #24]
 8007808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800780c:	1ad2      	subs	r2, r2, r3
 800780e:	463b      	mov	r3, r7
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	619a      	str	r2, [r3, #24]
 8007814:	e008      	b.n	8007828 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8007816:	463b      	mov	r3, r7
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2200      	movs	r2, #0
 8007826:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007828:	1d3b      	adds	r3, r7, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007830:	1d3b      	adds	r3, r7, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007838:	b29b      	uxth	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007840:	4413      	add	r3, r2
 8007842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	00da      	lsls	r2, r3, #3
 800784e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007852:	4413      	add	r3, r2
 8007854:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800785c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007860:	2b00      	cmp	r3, #0
 8007862:	d116      	bne.n	8007892 <USB_EPStartXfer+0xb9c>
 8007864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007870:	b29a      	uxth	r2, r3
 8007872:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007876:	801a      	strh	r2, [r3, #0]
 8007878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007888:	b29a      	uxth	r2, r3
 800788a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800788e:	801a      	strh	r2, [r3, #0]
 8007890:	e32c      	b.n	8007eec <USB_EPStartXfer+0x11f6>
 8007892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007896:	2b3e      	cmp	r3, #62	; 0x3e
 8007898:	d818      	bhi.n	80078cc <USB_EPStartXfer+0xbd6>
 800789a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800789e:	085b      	lsrs	r3, r3, #1
 80078a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d004      	beq.n	80078ba <USB_EPStartXfer+0xbc4>
 80078b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078b4:	3301      	adds	r3, #1
 80078b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078be:	b29b      	uxth	r3, r3
 80078c0:	029b      	lsls	r3, r3, #10
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	e30f      	b.n	8007eec <USB_EPStartXfer+0x11f6>
 80078cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <USB_EPStartXfer+0xbf6>
 80078e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078e6:	3b01      	subs	r3, #1
 80078e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80078ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	029b      	lsls	r3, r3, #10
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078fe:	b29a      	uxth	r2, r3
 8007900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	e2f1      	b.n	8007eec <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007908:	463b      	mov	r3, r7
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	78db      	ldrb	r3, [r3, #3]
 800790e:	2b02      	cmp	r3, #2
 8007910:	f040 818f 	bne.w	8007c32 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007914:	463b      	mov	r3, r7
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d175      	bne.n	8007a0a <USB_EPStartXfer+0xd14>
 800791e:	1d3b      	adds	r3, r7, #4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007926:	1d3b      	adds	r3, r7, #4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800792e:	b29b      	uxth	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007936:	4413      	add	r3, r2
 8007938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	00da      	lsls	r2, r3, #3
 8007944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007948:	4413      	add	r3, r2
 800794a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800794e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007952:	463b      	mov	r3, r7
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d116      	bne.n	800798a <USB_EPStartXfer+0xc94>
 800795c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007968:	b29a      	uxth	r2, r3
 800796a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007980:	b29a      	uxth	r2, r3
 8007982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007986:	801a      	strh	r2, [r3, #0]
 8007988:	e065      	b.n	8007a56 <USB_EPStartXfer+0xd60>
 800798a:	463b      	mov	r3, r7
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b3e      	cmp	r3, #62	; 0x3e
 8007992:	d81a      	bhi.n	80079ca <USB_EPStartXfer+0xcd4>
 8007994:	463b      	mov	r3, r7
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079a0:	463b      	mov	r3, r7
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <USB_EPStartXfer+0xcc2>
 80079ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079b2:	3301      	adds	r3, #1
 80079b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079bc:	b29b      	uxth	r3, r3
 80079be:	029b      	lsls	r3, r3, #10
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	e045      	b.n	8007a56 <USB_EPStartXfer+0xd60>
 80079ca:	463b      	mov	r3, r7
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079d6:	463b      	mov	r3, r7
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <USB_EPStartXfer+0xcf8>
 80079e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079e8:	3b01      	subs	r3, #1
 80079ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	029b      	lsls	r3, r3, #10
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	e025      	b.n	8007a56 <USB_EPStartXfer+0xd60>
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d120      	bne.n	8007a56 <USB_EPStartXfer+0xd60>
 8007a14:	1d3b      	adds	r3, r7, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a1c:	1d3b      	adds	r3, r7, #4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a32:	463b      	mov	r3, r7
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	00da      	lsls	r2, r3, #3
 8007a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3e:	4413      	add	r3, r2
 8007a40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a48:	463b      	mov	r3, r7
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a5e:	463b      	mov	r3, r7
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d175      	bne.n	8007b54 <USB_EPStartXfer+0xe5e>
 8007a68:	1d3b      	adds	r3, r7, #4
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a70:	1d3b      	adds	r3, r7, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a80:	4413      	add	r3, r2
 8007a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a86:	463b      	mov	r3, r7
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	00da      	lsls	r2, r3, #3
 8007a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a92:	4413      	add	r3, r2
 8007a94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a9c:	463b      	mov	r3, r7
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d116      	bne.n	8007ad4 <USB_EPStartXfer+0xdde>
 8007aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e061      	b.n	8007b98 <USB_EPStartXfer+0xea2>
 8007ad4:	463b      	mov	r3, r7
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b3e      	cmp	r3, #62	; 0x3e
 8007adc:	d81a      	bhi.n	8007b14 <USB_EPStartXfer+0xe1e>
 8007ade:	463b      	mov	r3, r7
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007aea:	463b      	mov	r3, r7
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <USB_EPStartXfer+0xe0c>
 8007af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afc:	3301      	adds	r3, #1
 8007afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	029b      	lsls	r3, r3, #10
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b10:	801a      	strh	r2, [r3, #0]
 8007b12:	e041      	b.n	8007b98 <USB_EPStartXfer+0xea2>
 8007b14:	463b      	mov	r3, r7
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b20:	463b      	mov	r3, r7
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 031f 	and.w	r3, r3, #31
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <USB_EPStartXfer+0xe42>
 8007b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b32:	3b01      	subs	r3, #1
 8007b34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	029b      	lsls	r3, r3, #10
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e021      	b.n	8007b98 <USB_EPStartXfer+0xea2>
 8007b54:	463b      	mov	r3, r7
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d11c      	bne.n	8007b98 <USB_EPStartXfer+0xea2>
 8007b5e:	1d3b      	adds	r3, r7, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b6e:	4413      	add	r3, r2
 8007b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b74:	463b      	mov	r3, r7
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	00da      	lsls	r2, r3, #3
 8007b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b80:	4413      	add	r3, r2
 8007b82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b96:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007b98:	463b      	mov	r3, r7
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 81a4 	beq.w	8007eec <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ba4:	1d3b      	adds	r3, r7, #4
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	463b      	mov	r3, r7
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bb8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <USB_EPStartXfer+0xeda>
 8007bc4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10d      	bne.n	8007bec <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bd0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 8187 	bne.w	8007eec <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007bde:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 8180 	bne.w	8007eec <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007bec:	1d3b      	adds	r3, r7, #4
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007c0a:	1d3b      	adds	r3, r7, #4
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	463b      	mov	r3, r7
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	8013      	strh	r3, [r2, #0]
 8007c30:	e15c      	b.n	8007eec <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	78db      	ldrb	r3, [r3, #3]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	f040 8155 	bne.w	8007ee8 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007c3e:	463b      	mov	r3, r7
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	463b      	mov	r3, r7
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d90e      	bls.n	8007c6c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007c4e:	463b      	mov	r3, r7
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007c58:	463b      	mov	r3, r7
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699a      	ldr	r2, [r3, #24]
 8007c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	463b      	mov	r3, r7
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	619a      	str	r2, [r3, #24]
 8007c6a:	e008      	b.n	8007c7e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c7e:	463b      	mov	r3, r7
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d16f      	bne.n	8007d68 <USB_EPStartXfer+0x1072>
 8007c88:	1d3b      	adds	r3, r7, #4
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c90:	1d3b      	adds	r3, r7, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	00da      	lsls	r2, r3, #3
 8007cae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d116      	bne.n	8007cf2 <USB_EPStartXfer+0xffc>
 8007cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	e05f      	b.n	8007db2 <USB_EPStartXfer+0x10bc>
 8007cf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8007cf8:	d818      	bhi.n	8007d2c <USB_EPStartXfer+0x1036>
 8007cfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <USB_EPStartXfer+0x1024>
 8007d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d14:	3301      	adds	r3, #1
 8007d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	029b      	lsls	r3, r3, #10
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	e042      	b.n	8007db2 <USB_EPStartXfer+0x10bc>
 8007d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d3a:	f003 031f 	and.w	r3, r3, #31
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d104      	bne.n	8007d4c <USB_EPStartXfer+0x1056>
 8007d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d46:	3b01      	subs	r3, #1
 8007d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	029b      	lsls	r3, r3, #10
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e024      	b.n	8007db2 <USB_EPStartXfer+0x10bc>
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	785b      	ldrb	r3, [r3, #1]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d11f      	bne.n	8007db2 <USB_EPStartXfer+0x10bc>
 8007d72:	1d3b      	adds	r3, r7, #4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d7a:	1d3b      	adds	r3, r7, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d90:	463b      	mov	r3, r7
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	00da      	lsls	r2, r3, #3
 8007d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	1d3b      	adds	r3, r7, #4
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d16f      	bne.n	8007ea4 <USB_EPStartXfer+0x11ae>
 8007dc4:	1d3b      	adds	r3, r7, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dcc:	1d3b      	adds	r3, r7, #4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ddc:	4413      	add	r3, r2
 8007dde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007de2:	463b      	mov	r3, r7
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	00da      	lsls	r2, r3, #3
 8007dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dee:	4413      	add	r3, r2
 8007df0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007df8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d116      	bne.n	8007e2e <USB_EPStartXfer+0x1138>
 8007e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e2a:	801a      	strh	r2, [r3, #0]
 8007e2c:	e05e      	b.n	8007eec <USB_EPStartXfer+0x11f6>
 8007e2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e32:	2b3e      	cmp	r3, #62	; 0x3e
 8007e34:	d818      	bhi.n	8007e68 <USB_EPStartXfer+0x1172>
 8007e36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e3a:	085b      	lsrs	r3, r3, #1
 8007e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <USB_EPStartXfer+0x1160>
 8007e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e50:	3301      	adds	r3, #1
 8007e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	029b      	lsls	r3, r3, #10
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	e041      	b.n	8007eec <USB_EPStartXfer+0x11f6>
 8007e68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <USB_EPStartXfer+0x1192>
 8007e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e82:	3b01      	subs	r3, #1
 8007e84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	029b      	lsls	r3, r3, #10
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	e023      	b.n	8007eec <USB_EPStartXfer+0x11f6>
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d11e      	bne.n	8007eec <USB_EPStartXfer+0x11f6>
 8007eae:	1d3b      	adds	r3, r7, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	00da      	lsls	r2, r3, #3
 8007ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ee4:	801a      	strh	r2, [r3, #0]
 8007ee6:	e001      	b.n	8007eec <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e02e      	b.n	8007f4a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eec:	1d3b      	adds	r3, r7, #4
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007f0a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007f16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	463b      	mov	r3, r7
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	441a      	add	r2, r3
 8007f30:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d020      	beq.n	8007fa8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7c:	81bb      	strh	r3, [r7, #12]
 8007f7e:	89bb      	ldrh	r3, [r7, #12]
 8007f80:	f083 0310 	eor.w	r3, r3, #16
 8007f84:	81bb      	strh	r3, [r7, #12]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	441a      	add	r2, r3
 8007f90:	89bb      	ldrh	r3, [r7, #12]
 8007f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	8013      	strh	r3, [r2, #0]
 8007fa6:	e01f      	b.n	8007fe8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbe:	81fb      	strh	r3, [r7, #14]
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fc6:	81fb      	strh	r3, [r7, #14]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	441a      	add	r2, r3
 8007fd2:	89fb      	ldrh	r3, [r7, #14]
 8007fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	7b1b      	ldrb	r3, [r3, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f040 809d 	bne.w	8008144 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d04c      	beq.n	80080ac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	823b      	strh	r3, [r7, #16]
 8008020:	8a3b      	ldrh	r3, [r7, #16]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01b      	beq.n	8008062 <USB_EPClearStall+0x6c>
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008040:	81fb      	strh	r3, [r7, #14]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	441a      	add	r2, r3
 800804c:	89fb      	ldrh	r3, [r7, #14]
 800804e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800805e:	b29b      	uxth	r3, r3
 8008060:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	78db      	ldrb	r3, [r3, #3]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d06c      	beq.n	8008144 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008080:	81bb      	strh	r3, [r7, #12]
 8008082:	89bb      	ldrh	r3, [r7, #12]
 8008084:	f083 0320 	eor.w	r3, r3, #32
 8008088:	81bb      	strh	r3, [r7, #12]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	441a      	add	r2, r3
 8008094:	89bb      	ldrh	r3, [r7, #12]
 8008096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800809a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	8013      	strh	r3, [r2, #0]
 80080aa:	e04b      	b.n	8008144 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	82fb      	strh	r3, [r7, #22]
 80080ba:	8afb      	ldrh	r3, [r7, #22]
 80080bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01b      	beq.n	80080fc <USB_EPClearStall+0x106>
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080da:	82bb      	strh	r3, [r7, #20]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	8abb      	ldrh	r3, [r7, #20]
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	827b      	strh	r3, [r7, #18]
 8008114:	8a7b      	ldrh	r3, [r7, #18]
 8008116:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800811a:	827b      	strh	r3, [r7, #18]
 800811c:	8a7b      	ldrh	r3, [r7, #18]
 800811e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008122:	827b      	strh	r3, [r7, #18]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	441a      	add	r2, r3
 800812e:	8a7b      	ldrh	r3, [r7, #18]
 8008130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800813c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008140:	b29b      	uxth	r3, r3
 8008142:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2280      	movs	r2, #128	; 0x80
 8008168:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008188:	b29b      	uxth	r3, r3
 800818a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008192:	b29a      	uxth	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081ba:	68fb      	ldr	r3, [r7, #12]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b08d      	sub	sp, #52	; 0x34
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	460b      	mov	r3, r1
 80081f0:	80fb      	strh	r3, [r7, #6]
 80081f2:	4613      	mov	r3, r2
 80081f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081f6:	88bb      	ldrh	r3, [r7, #4]
 80081f8:	3301      	adds	r3, #1
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008206:	88fa      	ldrh	r2, [r7, #6]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008216:	e01b      	b.n	8008250 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	3301      	adds	r3, #1
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	b29b      	uxth	r3, r3
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	b29b      	uxth	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	b29a      	uxth	r2, r3
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	3302      	adds	r3, #2
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	3301      	adds	r3, #1
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	3b01      	subs	r3, #1
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e0      	bne.n	8008218 <USB_WritePMA+0x38>
  }
}
 8008256:	bf00      	nop
 8008258:	3734      	adds	r7, #52	; 0x34
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008262:	b480      	push	{r7}
 8008264:	b08b      	sub	sp, #44	; 0x2c
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	4611      	mov	r1, r2
 800826e:	461a      	mov	r2, r3
 8008270:	460b      	mov	r3, r1
 8008272:	80fb      	strh	r3, [r7, #6]
 8008274:	4613      	mov	r3, r2
 8008276:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008278:	88bb      	ldrh	r3, [r7, #4]
 800827a:	085b      	lsrs	r3, r3, #1
 800827c:	b29b      	uxth	r3, r3
 800827e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008292:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
 8008298:	e018      	b.n	80082cc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	3302      	adds	r3, #2
 80082a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	3301      	adds	r3, #1
 80082b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	0a1b      	lsrs	r3, r3, #8
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	3301      	adds	r3, #1
 80082c4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	3b01      	subs	r3, #1
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e3      	bne.n	800829a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80082d2:	88bb      	ldrh	r3, [r7, #4]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	b29b      	uxth	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	701a      	strb	r2, [r3, #0]
  }
}
 80082ee:	bf00      	nop
 80082f0:	372c      	adds	r7, #44	; 0x2c
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	460b      	mov	r3, r1
 8008304:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008306:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800830a:	f002 f89d 	bl	800a448 <USBD_static_malloc>
 800830e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d105      	bne.n	8008322 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800831e:	2302      	movs	r3, #2
 8008320:	e066      	b.n	80083f0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	7c1b      	ldrb	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d119      	bne.n	8008366 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008336:	2202      	movs	r2, #2
 8008338:	2181      	movs	r1, #129	; 0x81
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 ff29 	bl	800a192 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800834a:	2202      	movs	r2, #2
 800834c:	2101      	movs	r1, #1
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 ff1f 	bl	800a192 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2210      	movs	r2, #16
 8008360:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008364:	e016      	b.n	8008394 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008366:	2340      	movs	r3, #64	; 0x40
 8008368:	2202      	movs	r2, #2
 800836a:	2181      	movs	r1, #129	; 0x81
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 ff10 	bl	800a192 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008378:	2340      	movs	r3, #64	; 0x40
 800837a:	2202      	movs	r2, #2
 800837c:	2101      	movs	r1, #1
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 ff07 	bl	800a192 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2210      	movs	r2, #16
 8008390:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008394:	2308      	movs	r3, #8
 8008396:	2203      	movs	r2, #3
 8008398:	2182      	movs	r1, #130	; 0x82
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fef9 	bl	800a192 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	7c1b      	ldrb	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d109      	bne.n	80083de <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d4:	2101      	movs	r1, #1
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 ffcb 	bl	800a372 <USBD_LL_PrepareReceive>
 80083dc:	e007      	b.n	80083ee <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083e4:	2340      	movs	r3, #64	; 0x40
 80083e6:	2101      	movs	r1, #1
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 ffc2 	bl	800a372 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008404:	2181      	movs	r1, #129	; 0x81
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 fee9 	bl	800a1de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008412:	2101      	movs	r1, #1
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 fee2 	bl	800a1de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008422:	2182      	movs	r1, #130	; 0x82
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 feda 	bl	800a1de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00e      	beq.n	8008462 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008454:	4618      	mov	r0, r3
 8008456:	f002 f805 	bl	800a464 <USBD_static_free>
    pdev->pClassData = NULL;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800847c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008492:	2b00      	cmp	r3, #0
 8008494:	d03a      	beq.n	800850c <USBD_CDC_Setup+0xa0>
 8008496:	2b20      	cmp	r3, #32
 8008498:	f040 8097 	bne.w	80085ca <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	88db      	ldrh	r3, [r3, #6]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d029      	beq.n	80084f8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	b25b      	sxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da11      	bge.n	80084d2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80084ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	88d2      	ldrh	r2, [r2, #6]
 80084c0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80084c2:	6939      	ldr	r1, [r7, #16]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	88db      	ldrh	r3, [r3, #6]
 80084c8:	461a      	mov	r2, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 fa8d 	bl	80099ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80084d0:	e082      	b.n	80085d8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	785a      	ldrb	r2, [r3, #1]
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	88db      	ldrh	r3, [r3, #6]
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80084e8:	6939      	ldr	r1, [r7, #16]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	88db      	ldrh	r3, [r3, #6]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 faa6 	bl	8009a42 <USBD_CtlPrepareRx>
      break;
 80084f6:	e06f      	b.n	80085d8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	7850      	ldrb	r0, [r2, #1]
 8008504:	2200      	movs	r2, #0
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	4798      	blx	r3
      break;
 800850a:	e065      	b.n	80085d8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b0b      	cmp	r3, #11
 8008512:	d84f      	bhi.n	80085b4 <USBD_CDC_Setup+0x148>
 8008514:	a201      	add	r2, pc, #4	; (adr r2, 800851c <USBD_CDC_Setup+0xb0>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	0800854d 	.word	0x0800854d
 8008520:	080085c3 	.word	0x080085c3
 8008524:	080085b5 	.word	0x080085b5
 8008528:	080085b5 	.word	0x080085b5
 800852c:	080085b5 	.word	0x080085b5
 8008530:	080085b5 	.word	0x080085b5
 8008534:	080085b5 	.word	0x080085b5
 8008538:	080085b5 	.word	0x080085b5
 800853c:	080085b5 	.word	0x080085b5
 8008540:	080085b5 	.word	0x080085b5
 8008544:	08008575 	.word	0x08008575
 8008548:	0800859d 	.word	0x0800859d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008552:	2b03      	cmp	r3, #3
 8008554:	d107      	bne.n	8008566 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008556:	f107 030c 	add.w	r3, r7, #12
 800855a:	2202      	movs	r2, #2
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fa43 	bl	80099ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008564:	e030      	b.n	80085c8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 f9cd 	bl	8009908 <USBD_CtlError>
            ret = USBD_FAIL;
 800856e:	2303      	movs	r3, #3
 8008570:	75fb      	strb	r3, [r7, #23]
          break;
 8008572:	e029      	b.n	80085c8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857a:	2b03      	cmp	r3, #3
 800857c:	d107      	bne.n	800858e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800857e:	f107 030f 	add.w	r3, r7, #15
 8008582:	2201      	movs	r2, #1
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 fa2f 	bl	80099ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800858c:	e01c      	b.n	80085c8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 f9b9 	bl	8009908 <USBD_CtlError>
            ret = USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	75fb      	strb	r3, [r7, #23]
          break;
 800859a:	e015      	b.n	80085c8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d00f      	beq.n	80085c6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f9ad 	bl	8009908 <USBD_CtlError>
            ret = USBD_FAIL;
 80085ae:	2303      	movs	r3, #3
 80085b0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085b2:	e008      	b.n	80085c6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 f9a6 	bl	8009908 <USBD_CtlError>
          ret = USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	75fb      	strb	r3, [r7, #23]
          break;
 80085c0:	e002      	b.n	80085c8 <USBD_CDC_Setup+0x15c>
          break;
 80085c2:	bf00      	nop
 80085c4:	e008      	b.n	80085d8 <USBD_CDC_Setup+0x16c>
          break;
 80085c6:	bf00      	nop
      }
      break;
 80085c8:	e006      	b.n	80085d8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 f99b 	bl	8009908 <USBD_CtlError>
      ret = USBD_FAIL;
 80085d2:	2303      	movs	r3, #3
 80085d4:	75fb      	strb	r3, [r7, #23]
      break;
 80085d6:	bf00      	nop
  }

  return (uint8_t)ret;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop

080085e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008602:	2303      	movs	r3, #3
 8008604:	e04f      	b.n	80086a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800860c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	440b      	add	r3, r1
 800861c:	3318      	adds	r3, #24
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d029      	beq.n	8008678 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	3318      	adds	r3, #24
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	78f9      	ldrb	r1, [r7, #3]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	460b      	mov	r3, r1
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	4403      	add	r3, r0
 8008644:	3338      	adds	r3, #56	; 0x38
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	fbb2 f1f3 	udiv	r1, r2, r3
 800864c:	fb03 f301 	mul.w	r3, r3, r1
 8008650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008652:	2b00      	cmp	r3, #0
 8008654:	d110      	bne.n	8008678 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008656:	78fa      	ldrb	r2, [r7, #3]
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	3318      	adds	r3, #24
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800866a:	78f9      	ldrb	r1, [r7, #3]
 800866c:	2300      	movs	r3, #0
 800866e:	2200      	movs	r2, #0
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 fe5d 	bl	800a330 <USBD_LL_Transmit>
 8008676:	e015      	b.n	80086a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e015      	b.n	80086fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 fe6d 	bl	800a3b4 <USBD_LL_GetRxDataSize>
 80086da:	4602      	mov	r2, r0
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086f6:	4611      	mov	r1, r2
 80086f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008712:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d015      	beq.n	800874a <USBD_CDC_EP0_RxReady+0x46>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008724:	2bff      	cmp	r3, #255	; 0xff
 8008726:	d010      	beq.n	800874a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008736:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800873e:	b292      	uxth	r2, r2
 8008740:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	22ff      	movs	r2, #255	; 0xff
 8008746:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2243      	movs	r2, #67	; 0x43
 8008760:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008762:	4b03      	ldr	r3, [pc, #12]	; (8008770 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	20000094 	.word	0x20000094

08008774 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2243      	movs	r2, #67	; 0x43
 8008780:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008782:	4b03      	ldr	r3, [pc, #12]	; (8008790 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	20000050 	.word	0x20000050

08008794 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2243      	movs	r2, #67	; 0x43
 80087a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80087a2:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	200000d8 	.word	0x200000d8

080087b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	220a      	movs	r2, #10
 80087c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80087c2:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	2000000c 	.word	0x2000000c

080087d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e004      	b.n	80087f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087fe:	b480      	push	{r7}
 8008800:	b087      	sub	sp, #28
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008810:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	371c      	adds	r7, #28
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008840:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008866:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008868:	2301      	movs	r3, #1
 800886a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	e01a      	b.n	80088b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008880:	2b00      	cmp	r3, #0
 8008882:	d114      	bne.n	80088ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2201      	movs	r2, #1
 8008888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80088a2:	2181      	movs	r1, #129	; 0x81
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 fd43 	bl	800a330 <USBD_LL_Transmit>

    ret = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e016      	b.n	8008904 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7c1b      	ldrb	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e8:	2101      	movs	r1, #1
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 fd41 	bl	800a372 <USBD_LL_PrepareReceive>
 80088f0:	e007      	b.n	8008902 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	2101      	movs	r1, #1
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fd38 	bl	800a372 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	e01f      	b.n	8008964 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	79fa      	ldrb	r2, [r7, #7]
 8008956:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f001 fb9f 	bl	800a09c <USBD_LL_Init>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	e016      	b.n	80089b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	f107 020e 	add.w	r2, r7, #14
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	4602      	mov	r2, r0
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 fbca 	bl	800a15c <USBD_LL_Start>
 80089c8:	4603      	mov	r3, r0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	78fa      	ldrb	r2, [r7, #3]
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	4798      	blx	r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d007      	beq.n	8008a46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	4611      	mov	r1, r2
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
  }

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 ff16 	bl	8009894 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a76:	461a      	mov	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d00e      	beq.n	8008aaa <USBD_LL_SetupStage+0x5a>
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d302      	bcc.n	8008a96 <USBD_LL_SetupStage+0x46>
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d014      	beq.n	8008abe <USBD_LL_SetupStage+0x6e>
 8008a94:	e01d      	b.n	8008ad2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f9d6 	bl	8008e50 <USBD_StdDevReq>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa8:	e020      	b.n	8008aec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fa3a 	bl	8008f2c <USBD_StdItfReq>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]
      break;
 8008abc:	e016      	b.n	8008aec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa76 	bl	8008fb8 <USBD_StdEPReq>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad0:	e00c      	b.n	8008aec <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 fb9b 	bl	800a21c <USBD_LL_StallEP>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aea:	bf00      	nop
  }

  return ret;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b086      	sub	sp, #24
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	460b      	mov	r3, r1
 8008b00:	607a      	str	r2, [r7, #4]
 8008b02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d137      	bne.n	8008b7a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d14a      	bne.n	8008bb2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d913      	bls.n	8008b50 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	bf28      	it	cs
 8008b42:	4613      	movcs	r3, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 ff97 	bl	8009a7c <USBD_CtlContinueRx>
 8008b4e:	e030      	b.n	8008bb2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d105      	bne.n	8008b72 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 ff93 	bl	8009a9e <USBD_CtlSendStatus>
 8008b78:	e01b      	b.n	8008bb2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d013      	beq.n	8008bae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d10e      	bne.n	8008bae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	7afa      	ldrb	r2, [r7, #11]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	4798      	blx	r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	e002      	b.n	8008bb4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e000      	b.n	8008bb4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bca:	7afb      	ldrb	r3, [r7, #11]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d16a      	bne.n	8008ca6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3314      	adds	r3, #20
 8008bd4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d155      	bne.n	8008c8c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d914      	bls.n	8008c16 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 ff0c 	bl	8009a20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f001 fbaf 	bl	800a372 <USBD_LL_PrepareReceive>
 8008c14:	e03a      	b.n	8008c8c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d11c      	bne.n	8008c5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d316      	bcc.n	8008c5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d20f      	bcs.n	8008c5c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 feed 	bl	8009a20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f001 fb8c 	bl	800a372 <USBD_LL_PrepareReceive>
 8008c5a:	e017      	b.n	8008c8c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d105      	bne.n	8008c7e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f001 facb 	bl	800a21c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 ff1c 	bl	8009ac4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d123      	bne.n	8008cde <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fe9b 	bl	80089d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ca4:	e01b      	b.n	8008cde <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d013      	beq.n	8008cda <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d10e      	bne.n	8008cda <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	7afa      	ldrb	r2, [r7, #11]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	4798      	blx	r3
 8008ccc:	4603      	mov	r3, r0
 8008cce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	e002      	b.n	8008ce0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e000      	b.n	8008ce0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d009      	beq.n	8008d2c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6852      	ldr	r2, [r2, #4]
 8008d24:	b2d2      	uxtb	r2, r2
 8008d26:	4611      	mov	r1, r2
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d2c:	2340      	movs	r3, #64	; 0x40
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 fa2d 	bl	800a192 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2240      	movs	r2, #64	; 0x40
 8008d44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d48:	2340      	movs	r3, #64	; 0x40
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2180      	movs	r1, #128	; 0x80
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fa1f 	bl	800a192 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2240      	movs	r2, #64	; 0x40
 8008d5e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2204      	movs	r2, #4
 8008da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d105      	bne.n	8008dd2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d10b      	bne.n	8008e0a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e32:	8a3b      	ldrh	r3, [r7, #16]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	b21a      	sxth	r2, r3
 8008e38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	b21b      	sxth	r3, r3
 8008e40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e42:	89fb      	ldrh	r3, [r7, #14]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e66:	2b20      	cmp	r3, #32
 8008e68:	d004      	beq.n	8008e74 <USBD_StdDevReq+0x24>
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
 8008e6c:	d002      	beq.n	8008e74 <USBD_StdDevReq+0x24>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <USBD_StdDevReq+0x38>
 8008e72:	e050      	b.n	8008f16 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	4798      	blx	r3
 8008e82:	4603      	mov	r3, r0
 8008e84:	73fb      	strb	r3, [r7, #15]
    break;
 8008e86:	e04b      	b.n	8008f20 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	785b      	ldrb	r3, [r3, #1]
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d83c      	bhi.n	8008f0a <USBD_StdDevReq+0xba>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <USBD_StdDevReq+0x48>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008eed 	.word	0x08008eed
 8008e9c:	08008f01 	.word	0x08008f01
 8008ea0:	08008f0b 	.word	0x08008f0b
 8008ea4:	08008ef7 	.word	0x08008ef7
 8008ea8:	08008f0b 	.word	0x08008f0b
 8008eac:	08008ecb 	.word	0x08008ecb
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008f0b 	.word	0x08008f0b
 8008eb8:	08008ee3 	.word	0x08008ee3
 8008ebc:	08008ed5 	.word	0x08008ed5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9d0 	bl	8009268 <USBD_GetDescriptor>
      break;
 8008ec8:	e024      	b.n	8008f14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fb5f 	bl	8009590 <USBD_SetAddress>
      break;
 8008ed2:	e01f      	b.n	8008f14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fb9c 	bl	8009614 <USBD_SetConfig>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee0:	e018      	b.n	8008f14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fc39 	bl	800975c <USBD_GetConfig>
      break;
 8008eea:	e013      	b.n	8008f14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fc68 	bl	80097c4 <USBD_GetStatus>
      break;
 8008ef4:	e00e      	b.n	8008f14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fc96 	bl	800982a <USBD_SetFeature>
      break;
 8008efe:	e009      	b.n	8008f14 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fca5 	bl	8009852 <USBD_ClrFeature>
      break;
 8008f08:	e004      	b.n	8008f14 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fcfb 	bl	8009908 <USBD_CtlError>
      break;
 8008f12:	bf00      	nop
    }
    break;
 8008f14:	e004      	b.n	8008f20 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fcf5 	bl	8009908 <USBD_CtlError>
    break;
 8008f1e:	bf00      	nop
  }

  return ret;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop

08008f2c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d003      	beq.n	8008f4e <USBD_StdItfReq+0x22>
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	d001      	beq.n	8008f4e <USBD_StdItfReq+0x22>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d12a      	bne.n	8008fa4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f54:	3b01      	subs	r3, #1
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d81d      	bhi.n	8008f96 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	889b      	ldrh	r3, [r3, #4]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d813      	bhi.n	8008f8c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	88db      	ldrh	r3, [r3, #6]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d110      	bne.n	8008fa0 <USBD_StdItfReq+0x74>
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10d      	bne.n	8008fa0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fd8a 	bl	8009a9e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008f8a:	e009      	b.n	8008fa0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fcba 	bl	8009908 <USBD_CtlError>
      break;
 8008f94:	e004      	b.n	8008fa0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fcb5 	bl	8009908 <USBD_CtlError>
      break;
 8008f9e:	e000      	b.n	8008fa2 <USBD_StdItfReq+0x76>
      break;
 8008fa0:	bf00      	nop
    }
    break;
 8008fa2:	e004      	b.n	8008fae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fcae 	bl	8009908 <USBD_CtlError>
    break;
 8008fac:	bf00      	nop
  }

  return ret;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	889b      	ldrh	r3, [r3, #4]
 8008fca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fd4:	2b20      	cmp	r3, #32
 8008fd6:	d004      	beq.n	8008fe2 <USBD_StdEPReq+0x2a>
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d002      	beq.n	8008fe2 <USBD_StdEPReq+0x2a>
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <USBD_StdEPReq+0x3e>
 8008fe0:	e137      	b.n	8009252 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff4:	e132      	b.n	800925c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	785b      	ldrb	r3, [r3, #1]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d03e      	beq.n	800907c <USBD_StdEPReq+0xc4>
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d002      	beq.n	8009008 <USBD_StdEPReq+0x50>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d079      	beq.n	80090fa <USBD_StdEPReq+0x142>
 8009006:	e11e      	b.n	8009246 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900e:	2b02      	cmp	r3, #2
 8009010:	d002      	beq.n	8009018 <USBD_StdEPReq+0x60>
 8009012:	2b03      	cmp	r3, #3
 8009014:	d015      	beq.n	8009042 <USBD_StdEPReq+0x8a>
 8009016:	e02b      	b.n	8009070 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00c      	beq.n	8009038 <USBD_StdEPReq+0x80>
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b80      	cmp	r3, #128	; 0x80
 8009022:	d009      	beq.n	8009038 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 f8f7 	bl	800a21c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800902e:	2180      	movs	r1, #128	; 0x80
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 f8f3 	bl	800a21c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009036:	e020      	b.n	800907a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fc64 	bl	8009908 <USBD_CtlError>
        break;
 8009040:	e01b      	b.n	800907a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	885b      	ldrh	r3, [r3, #2]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10e      	bne.n	8009068 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <USBD_StdEPReq+0xb0>
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b80      	cmp	r3, #128	; 0x80
 8009054:	d008      	beq.n	8009068 <USBD_StdEPReq+0xb0>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	88db      	ldrh	r3, [r3, #6]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f001 f8da 	bl	800a21c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fd18 	bl	8009a9e <USBD_CtlSendStatus>

        break;
 800906e:	e004      	b.n	800907a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fc48 	bl	8009908 <USBD_CtlError>
        break;
 8009078:	bf00      	nop
      }
      break;
 800907a:	e0e9      	b.n	8009250 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009082:	2b02      	cmp	r3, #2
 8009084:	d002      	beq.n	800908c <USBD_StdEPReq+0xd4>
 8009086:	2b03      	cmp	r3, #3
 8009088:	d015      	beq.n	80090b6 <USBD_StdEPReq+0xfe>
 800908a:	e02f      	b.n	80090ec <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00c      	beq.n	80090ac <USBD_StdEPReq+0xf4>
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	2b80      	cmp	r3, #128	; 0x80
 8009096:	d009      	beq.n	80090ac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f8bd 	bl	800a21c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090a2:	2180      	movs	r1, #128	; 0x80
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 f8b9 	bl	800a21c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80090aa:	e025      	b.n	80090f8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fc2a 	bl	8009908 <USBD_CtlError>
        break;
 80090b4:	e020      	b.n	80090f8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	885b      	ldrh	r3, [r3, #2]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d11b      	bne.n	80090f6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d004      	beq.n	80090d2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 f8c4 	bl	800a25a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fce3 	bl	8009a9e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090ea:	e004      	b.n	80090f6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fc0a 	bl	8009908 <USBD_CtlError>
        break;
 80090f4:	e000      	b.n	80090f8 <USBD_StdEPReq+0x140>
        break;
 80090f6:	bf00      	nop
      }
      break;
 80090f8:	e0aa      	b.n	8009250 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009100:	2b02      	cmp	r3, #2
 8009102:	d002      	beq.n	800910a <USBD_StdEPReq+0x152>
 8009104:	2b03      	cmp	r3, #3
 8009106:	d032      	beq.n	800916e <USBD_StdEPReq+0x1b6>
 8009108:	e097      	b.n	800923a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <USBD_StdEPReq+0x168>
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b80      	cmp	r3, #128	; 0x80
 8009114:	d004      	beq.n	8009120 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fbf5 	bl	8009908 <USBD_CtlError>
          break;
 800911e:	e091      	b.n	8009244 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009124:	2b00      	cmp	r3, #0
 8009126:	da0b      	bge.n	8009140 <USBD_StdEPReq+0x188>
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	3310      	adds	r3, #16
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	4413      	add	r3, r2
 800913c:	3304      	adds	r3, #4
 800913e:	e00b      	b.n	8009158 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	3304      	adds	r3, #4
 8009158:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2200      	movs	r2, #0
 800915e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2202      	movs	r2, #2
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fc3f 	bl	80099ea <USBD_CtlSendData>
        break;
 800916c:	e06a      	b.n	8009244 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800916e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009172:	2b00      	cmp	r3, #0
 8009174:	da11      	bge.n	800919a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	3324      	adds	r3, #36	; 0x24
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d117      	bne.n	80091c0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fbb8 	bl	8009908 <USBD_CtlError>
            break;
 8009198:	e054      	b.n	8009244 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	f003 020f 	and.w	r2, r3, #15
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fba5 	bl	8009908 <USBD_CtlError>
            break;
 80091be:	e041      	b.n	8009244 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	da0b      	bge.n	80091e0 <USBD_StdEPReq+0x228>
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	3310      	adds	r3, #16
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	4413      	add	r3, r2
 80091dc:	3304      	adds	r3, #4
 80091de:	e00b      	b.n	80091f8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	4413      	add	r3, r2
 80091f6:	3304      	adds	r3, #4
 80091f8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <USBD_StdEPReq+0x24e>
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2b80      	cmp	r3, #128	; 0x80
 8009204:	d103      	bne.n	800920e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	e00e      	b.n	800922c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 f840 	bl	800a298 <USBD_LL_IsStallEP>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e002      	b.n	800922c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2202      	movs	r2, #2
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fbd9 	bl	80099ea <USBD_CtlSendData>
          break;
 8009238:	e004      	b.n	8009244 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fb63 	bl	8009908 <USBD_CtlError>
        break;
 8009242:	bf00      	nop
      }
      break;
 8009244:	e004      	b.n	8009250 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fb5d 	bl	8009908 <USBD_CtlError>
      break;
 800924e:	bf00      	nop
    }
    break;
 8009250:	e004      	b.n	800925c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fb57 	bl	8009908 <USBD_CtlError>
    break;
 800925a:	bf00      	nop
  }

  return ret;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	885b      	ldrh	r3, [r3, #2]
 8009282:	0a1b      	lsrs	r3, r3, #8
 8009284:	b29b      	uxth	r3, r3
 8009286:	3b01      	subs	r3, #1
 8009288:	2b0e      	cmp	r3, #14
 800928a:	f200 8152 	bhi.w	8009532 <USBD_GetDescriptor+0x2ca>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <USBD_GetDescriptor+0x2c>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	08009305 	.word	0x08009305
 8009298:	0800931d 	.word	0x0800931d
 800929c:	0800935d 	.word	0x0800935d
 80092a0:	08009533 	.word	0x08009533
 80092a4:	08009533 	.word	0x08009533
 80092a8:	080094d3 	.word	0x080094d3
 80092ac:	080094ff 	.word	0x080094ff
 80092b0:	08009533 	.word	0x08009533
 80092b4:	08009533 	.word	0x08009533
 80092b8:	08009533 	.word	0x08009533
 80092bc:	08009533 	.word	0x08009533
 80092c0:	08009533 	.word	0x08009533
 80092c4:	08009533 	.word	0x08009533
 80092c8:	08009533 	.word	0x08009533
 80092cc:	080092d1 	.word	0x080092d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7c12      	ldrb	r2, [r2, #16]
 80092e8:	f107 0108 	add.w	r1, r7, #8
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80092f2:	e126      	b.n	8009542 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fb06 	bl	8009908 <USBD_CtlError>
      err++;
 80092fc:	7afb      	ldrb	r3, [r7, #11]
 80092fe:	3301      	adds	r3, #1
 8009300:	72fb      	strb	r3, [r7, #11]
    break;
 8009302:	e11e      	b.n	8009542 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	7c12      	ldrb	r2, [r2, #16]
 8009310:	f107 0108 	add.w	r1, r7, #8
 8009314:	4610      	mov	r0, r2
 8009316:	4798      	blx	r3
 8009318:	60f8      	str	r0, [r7, #12]
    break;
 800931a:	e112      	b.n	8009542 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	7c1b      	ldrb	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10d      	bne.n	8009340 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	f107 0208 	add.w	r2, r7, #8
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
 8009334:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3301      	adds	r3, #1
 800933a:	2202      	movs	r2, #2
 800933c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800933e:	e100      	b.n	8009542 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	f107 0208 	add.w	r2, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3301      	adds	r3, #1
 8009356:	2202      	movs	r2, #2
 8009358:	701a      	strb	r2, [r3, #0]
    break;
 800935a:	e0f2      	b.n	8009542 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	885b      	ldrh	r3, [r3, #2]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b05      	cmp	r3, #5
 8009364:	f200 80ac 	bhi.w	80094c0 <USBD_GetDescriptor+0x258>
 8009368:	a201      	add	r2, pc, #4	; (adr r2, 8009370 <USBD_GetDescriptor+0x108>)
 800936a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936e:	bf00      	nop
 8009370:	08009389 	.word	0x08009389
 8009374:	080093bd 	.word	0x080093bd
 8009378:	080093f1 	.word	0x080093f1
 800937c:	08009425 	.word	0x08009425
 8009380:	08009459 	.word	0x08009459
 8009384:	0800948d 	.word	0x0800948d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	7c12      	ldrb	r2, [r2, #16]
 80093a0:	f107 0108 	add.w	r1, r7, #8
 80093a4:	4610      	mov	r0, r2
 80093a6:	4798      	blx	r3
 80093a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093aa:	e091      	b.n	80094d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 faaa 	bl	8009908 <USBD_CtlError>
        err++;
 80093b4:	7afb      	ldrb	r3, [r7, #11]
 80093b6:	3301      	adds	r3, #1
 80093b8:	72fb      	strb	r3, [r7, #11]
      break;
 80093ba:	e089      	b.n	80094d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	7c12      	ldrb	r2, [r2, #16]
 80093d4:	f107 0108 	add.w	r1, r7, #8
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
 80093dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093de:	e077      	b.n	80094d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa90 	bl	8009908 <USBD_CtlError>
        err++;
 80093e8:	7afb      	ldrb	r3, [r7, #11]
 80093ea:	3301      	adds	r3, #1
 80093ec:	72fb      	strb	r3, [r7, #11]
      break;
 80093ee:	e06f      	b.n	80094d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	7c12      	ldrb	r2, [r2, #16]
 8009408:	f107 0108 	add.w	r1, r7, #8
 800940c:	4610      	mov	r0, r2
 800940e:	4798      	blx	r3
 8009410:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009412:	e05d      	b.n	80094d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa76 	bl	8009908 <USBD_CtlError>
        err++;
 800941c:	7afb      	ldrb	r3, [r7, #11]
 800941e:	3301      	adds	r3, #1
 8009420:	72fb      	strb	r3, [r7, #11]
      break;
 8009422:	e055      	b.n	80094d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	7c12      	ldrb	r2, [r2, #16]
 800943c:	f107 0108 	add.w	r1, r7, #8
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009446:	e043      	b.n	80094d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa5c 	bl	8009908 <USBD_CtlError>
        err++;
 8009450:	7afb      	ldrb	r3, [r7, #11]
 8009452:	3301      	adds	r3, #1
 8009454:	72fb      	strb	r3, [r7, #11]
      break;
 8009456:	e03b      	b.n	80094d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	7c12      	ldrb	r2, [r2, #16]
 8009470:	f107 0108 	add.w	r1, r7, #8
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800947a:	e029      	b.n	80094d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa42 	bl	8009908 <USBD_CtlError>
        err++;
 8009484:	7afb      	ldrb	r3, [r7, #11]
 8009486:	3301      	adds	r3, #1
 8009488:	72fb      	strb	r3, [r7, #11]
      break;
 800948a:	e021      	b.n	80094d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	7c12      	ldrb	r2, [r2, #16]
 80094a4:	f107 0108 	add.w	r1, r7, #8
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
 80094ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094ae:	e00f      	b.n	80094d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa28 	bl	8009908 <USBD_CtlError>
        err++;
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	3301      	adds	r3, #1
 80094bc:	72fb      	strb	r3, [r7, #11]
      break;
 80094be:	e007      	b.n	80094d0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa20 	bl	8009908 <USBD_CtlError>
      err++;
 80094c8:	7afb      	ldrb	r3, [r7, #11]
 80094ca:	3301      	adds	r3, #1
 80094cc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80094ce:	bf00      	nop
    }
    break;
 80094d0:	e037      	b.n	8009542 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7c1b      	ldrb	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	f107 0208 	add.w	r2, r7, #8
 80094e6:	4610      	mov	r0, r2
 80094e8:	4798      	blx	r3
 80094ea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80094ec:	e029      	b.n	8009542 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa09 	bl	8009908 <USBD_CtlError>
      err++;
 80094f6:	7afb      	ldrb	r3, [r7, #11]
 80094f8:	3301      	adds	r3, #1
 80094fa:	72fb      	strb	r3, [r7, #11]
    break;
 80094fc:	e021      	b.n	8009542 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7c1b      	ldrb	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10d      	bne.n	8009522 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	f107 0208 	add.w	r2, r7, #8
 8009512:	4610      	mov	r0, r2
 8009514:	4798      	blx	r3
 8009516:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	2207      	movs	r2, #7
 800951e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009520:	e00f      	b.n	8009542 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f9ef 	bl	8009908 <USBD_CtlError>
      err++;
 800952a:	7afb      	ldrb	r3, [r7, #11]
 800952c:	3301      	adds	r3, #1
 800952e:	72fb      	strb	r3, [r7, #11]
    break;
 8009530:	e007      	b.n	8009542 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f9e7 	bl	8009908 <USBD_CtlError>
    err++;
 800953a:	7afb      	ldrb	r3, [r7, #11]
 800953c:	3301      	adds	r3, #1
 800953e:	72fb      	strb	r3, [r7, #11]
    break;
 8009540:	bf00      	nop
  }

  if (err != 0U)
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11e      	bne.n	8009586 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	88db      	ldrh	r3, [r3, #6]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d016      	beq.n	800957e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8009550:	893b      	ldrh	r3, [r7, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00e      	beq.n	8009574 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	88da      	ldrh	r2, [r3, #6]
 800955a:	893b      	ldrh	r3, [r7, #8]
 800955c:	4293      	cmp	r3, r2
 800955e:	bf28      	it	cs
 8009560:	4613      	movcs	r3, r2
 8009562:	b29b      	uxth	r3, r3
 8009564:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009566:	893b      	ldrh	r3, [r7, #8]
 8009568:	461a      	mov	r2, r3
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fa3c 	bl	80099ea <USBD_CtlSendData>
 8009572:	e009      	b.n	8009588 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f9c6 	bl	8009908 <USBD_CtlError>
 800957c:	e004      	b.n	8009588 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa8d 	bl	8009a9e <USBD_CtlSendStatus>
 8009584:	e000      	b.n	8009588 <USBD_GetDescriptor+0x320>
    return;
 8009586:	bf00      	nop
    }
  }
}
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop

08009590 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	889b      	ldrh	r3, [r3, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d130      	bne.n	8009604 <USBD_SetAddress+0x74>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	88db      	ldrh	r3, [r3, #6]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d12c      	bne.n	8009604 <USBD_SetAddress+0x74>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	885b      	ldrh	r3, [r3, #2]
 80095ae:	2b7f      	cmp	r3, #127	; 0x7f
 80095b0:	d828      	bhi.n	8009604 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	885b      	ldrh	r3, [r3, #2]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d104      	bne.n	80095d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f99c 	bl	8009908 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d0:	e01c      	b.n	800960c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fe87 	bl	800a2f2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fa5a 	bl	8009a9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f8:	e008      	b.n	800960c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009602:	e003      	b.n	800960c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f97e 	bl	8009908 <USBD_CtlError>
  }
}
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	885b      	ldrh	r3, [r3, #2]
 8009626:	b2da      	uxtb	r2, r3
 8009628:	4b4b      	ldr	r3, [pc, #300]	; (8009758 <USBD_SetConfig+0x144>)
 800962a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800962c:	4b4a      	ldr	r3, [pc, #296]	; (8009758 <USBD_SetConfig+0x144>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d905      	bls.n	8009640 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f966 	bl	8009908 <USBD_CtlError>
    return USBD_FAIL;
 800963c:	2303      	movs	r3, #3
 800963e:	e087      	b.n	8009750 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009646:	2b02      	cmp	r3, #2
 8009648:	d002      	beq.n	8009650 <USBD_SetConfig+0x3c>
 800964a:	2b03      	cmp	r3, #3
 800964c:	d025      	beq.n	800969a <USBD_SetConfig+0x86>
 800964e:	e071      	b.n	8009734 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009650:	4b41      	ldr	r3, [pc, #260]	; (8009758 <USBD_SetConfig+0x144>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d01c      	beq.n	8009692 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009658:	4b3f      	ldr	r3, [pc, #252]	; (8009758 <USBD_SetConfig+0x144>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	461a      	mov	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009662:	4b3d      	ldr	r3, [pc, #244]	; (8009758 <USBD_SetConfig+0x144>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff f9bd 	bl	80089e8 <USBD_SetClassConfig>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f944 	bl	8009908 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009680:	e065      	b.n	800974e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fa0b 	bl	8009a9e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2203      	movs	r2, #3
 800968c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009690:	e05d      	b.n	800974e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fa03 	bl	8009a9e <USBD_CtlSendStatus>
    break;
 8009698:	e059      	b.n	800974e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800969a:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <USBD_SetConfig+0x144>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d112      	bne.n	80096c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2202      	movs	r2, #2
 80096a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80096aa:	4b2b      	ldr	r3, [pc, #172]	; (8009758 <USBD_SetConfig+0x144>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096b4:	4b28      	ldr	r3, [pc, #160]	; (8009758 <USBD_SetConfig+0x144>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff f9b0 	bl	8008a20 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f9ec 	bl	8009a9e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80096c6:	e042      	b.n	800974e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80096c8:	4b23      	ldr	r3, [pc, #140]	; (8009758 <USBD_SetConfig+0x144>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d02a      	beq.n	800972c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff f99e 	bl	8008a20 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80096e4:	4b1c      	ldr	r3, [pc, #112]	; (8009758 <USBD_SetConfig+0x144>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80096ee:	4b1a      	ldr	r3, [pc, #104]	; (8009758 <USBD_SetConfig+0x144>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff f977 	bl	80089e8 <USBD_SetClassConfig>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00f      	beq.n	8009724 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f8fe 	bl	8009908 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff f983 	bl	8008a20 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2202      	movs	r2, #2
 800971e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009722:	e014      	b.n	800974e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f9ba 	bl	8009a9e <USBD_CtlSendStatus>
    break;
 800972a:	e010      	b.n	800974e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f9b6 	bl	8009a9e <USBD_CtlSendStatus>
    break;
 8009732:	e00c      	b.n	800974e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f8e6 	bl	8009908 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <USBD_SetConfig+0x144>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff f96c 	bl	8008a20 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009748:	2303      	movs	r3, #3
 800974a:	73fb      	strb	r3, [r7, #15]
    break;
 800974c:	bf00      	nop
  }

  return ret;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	200001a8 	.word	0x200001a8

0800975c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	88db      	ldrh	r3, [r3, #6]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d004      	beq.n	8009778 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f8c9 	bl	8009908 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009776:	e021      	b.n	80097bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977e:	2b01      	cmp	r3, #1
 8009780:	db17      	blt.n	80097b2 <USBD_GetConfig+0x56>
 8009782:	2b02      	cmp	r3, #2
 8009784:	dd02      	ble.n	800978c <USBD_GetConfig+0x30>
 8009786:	2b03      	cmp	r3, #3
 8009788:	d00b      	beq.n	80097a2 <USBD_GetConfig+0x46>
 800978a:	e012      	b.n	80097b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3308      	adds	r3, #8
 8009796:	2201      	movs	r2, #1
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f925 	bl	80099ea <USBD_CtlSendData>
      break;
 80097a0:	e00c      	b.n	80097bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3304      	adds	r3, #4
 80097a6:	2201      	movs	r2, #1
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f91d 	bl	80099ea <USBD_CtlSendData>
      break;
 80097b0:	e004      	b.n	80097bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f8a7 	bl	8009908 <USBD_CtlError>
      break;
 80097ba:	bf00      	nop
}
 80097bc:	bf00      	nop
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d4:	3b01      	subs	r3, #1
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d81e      	bhi.n	8009818 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	88db      	ldrh	r3, [r3, #6]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d004      	beq.n	80097ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f88f 	bl	8009908 <USBD_CtlError>
      break;
 80097ea:	e01a      	b.n	8009822 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f043 0202 	orr.w	r2, r3, #2
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	330c      	adds	r3, #12
 800980c:	2202      	movs	r2, #2
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f8ea 	bl	80099ea <USBD_CtlSendData>
    break;
 8009816:	e004      	b.n	8009822 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f874 	bl	8009908 <USBD_CtlError>
    break;
 8009820:	bf00      	nop
  }
}
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	885b      	ldrh	r3, [r3, #2]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d106      	bne.n	800984a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f92a 	bl	8009a9e <USBD_CtlSendStatus>
  }
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009862:	3b01      	subs	r3, #1
 8009864:	2b02      	cmp	r3, #2
 8009866:	d80b      	bhi.n	8009880 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	885b      	ldrh	r3, [r3, #2]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10c      	bne.n	800988a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f910 	bl	8009a9e <USBD_CtlSendStatus>
      }
      break;
 800987e:	e004      	b.n	800988a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f840 	bl	8009908 <USBD_CtlError>
      break;
 8009888:	e000      	b.n	800988c <USBD_ClrFeature+0x3a>
      break;
 800988a:	bf00      	nop
  }
}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	781a      	ldrb	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff faa8 	bl	8008e14 <SWAPBYTE>
 80098c4:	4603      	mov	r3, r0
 80098c6:	461a      	mov	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3301      	adds	r3, #1
 80098d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f7ff fa9b 	bl	8008e14 <SWAPBYTE>
 80098de:	4603      	mov	r3, r0
 80098e0:	461a      	mov	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	3301      	adds	r3, #1
 80098f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f7ff fa8e 	bl	8008e14 <SWAPBYTE>
 80098f8:	4603      	mov	r3, r0
 80098fa:	461a      	mov	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	80da      	strh	r2, [r3, #6]
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009912:	2180      	movs	r1, #128	; 0x80
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc81 	bl	800a21c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800991a:	2100      	movs	r1, #0
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fc7d 	bl	800a21c <USBD_LL_StallEP>
}
 8009922:	bf00      	nop
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b086      	sub	sp, #24
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d036      	beq.n	80099ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009944:	6938      	ldr	r0, [r7, #16]
 8009946:	f000 f836 	bl	80099b6 <USBD_GetLen>
 800994a:	4603      	mov	r3, r0
 800994c:	3301      	adds	r3, #1
 800994e:	b29b      	uxth	r3, r3
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4413      	add	r3, r2
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	7812      	ldrb	r2, [r2, #0]
 8009962:	701a      	strb	r2, [r3, #0]
  idx++;
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	3301      	adds	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	4413      	add	r3, r2
 8009970:	2203      	movs	r2, #3
 8009972:	701a      	strb	r2, [r3, #0]
  idx++;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
 8009976:	3301      	adds	r3, #1
 8009978:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800997a:	e013      	b.n	80099a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4413      	add	r3, r2
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	7812      	ldrb	r2, [r2, #0]
 8009986:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	3301      	adds	r3, #1
 800998c:	613b      	str	r3, [r7, #16]
    idx++;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	3301      	adds	r3, #1
 8009992:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	4413      	add	r3, r2
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
    idx++;
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	3301      	adds	r3, #1
 80099a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e7      	bne.n	800997c <USBD_GetString+0x52>
 80099ac:	e000      	b.n	80099b0 <USBD_GetString+0x86>
    return;
 80099ae:	bf00      	nop
  }
}
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099c6:	e005      	b.n	80099d4 <USBD_GetLen+0x1e>
  {
    len++;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	3301      	adds	r3, #1
 80099cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1f5      	bne.n	80099c8 <USBD_GetLen+0x12>
  }

  return len;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2202      	movs	r2, #2
 80099fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	2100      	movs	r1, #0
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 fc8d 	bl	800a330 <USBD_LL_Transmit>

  return USBD_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	2100      	movs	r1, #0
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 fc7c 	bl	800a330 <USBD_LL_Transmit>

  return USBD_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2203      	movs	r2, #3
 8009a52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 fc80 	bl	800a372 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 fc6f 	bl	800a372 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2204      	movs	r2, #4
 8009aaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009aae:	2300      	movs	r3, #0
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fc3b 	bl	800a330 <USBD_LL_Transmit>

  return USBD_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2205      	movs	r2, #5
 8009ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2100      	movs	r1, #0
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc49 	bl	800a372 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
	...

08009aec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009af0:	2200      	movs	r2, #0
 8009af2:	4912      	ldr	r1, [pc, #72]	; (8009b3c <MX_USB_Device_Init+0x50>)
 8009af4:	4812      	ldr	r0, [pc, #72]	; (8009b40 <MX_USB_Device_Init+0x54>)
 8009af6:	f7fe ff09 	bl	800890c <USBD_Init>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009b00:	f7f7 fef0 	bl	80018e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009b04:	490f      	ldr	r1, [pc, #60]	; (8009b44 <MX_USB_Device_Init+0x58>)
 8009b06:	480e      	ldr	r0, [pc, #56]	; (8009b40 <MX_USB_Device_Init+0x54>)
 8009b08:	f7fe ff30 	bl	800896c <USBD_RegisterClass>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009b12:	f7f7 fee7 	bl	80018e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009b16:	490c      	ldr	r1, [pc, #48]	; (8009b48 <MX_USB_Device_Init+0x5c>)
 8009b18:	4809      	ldr	r0, [pc, #36]	; (8009b40 <MX_USB_Device_Init+0x54>)
 8009b1a:	f7fe fe5b 	bl	80087d4 <USBD_CDC_RegisterInterface>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009b24:	f7f7 fede 	bl	80018e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009b28:	4805      	ldr	r0, [pc, #20]	; (8009b40 <MX_USB_Device_Init+0x54>)
 8009b2a:	f7fe ff46 	bl	80089ba <USBD_Start>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009b34:	f7f7 fed6 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009b38:	bf00      	nop
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000130 	.word	0x20000130
 8009b40:	2000079c 	.word	0x2000079c
 8009b44:	20000018 	.word	0x20000018
 8009b48:	2000011c 	.word	0x2000011c

08009b4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b50:	2200      	movs	r2, #0
 8009b52:	4905      	ldr	r1, [pc, #20]	; (8009b68 <CDC_Init_FS+0x1c>)
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <CDC_Init_FS+0x20>)
 8009b56:	f7fe fe52 	bl	80087fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b5a:	4905      	ldr	r1, [pc, #20]	; (8009b70 <CDC_Init_FS+0x24>)
 8009b5c:	4803      	ldr	r0, [pc, #12]	; (8009b6c <CDC_Init_FS+0x20>)
 8009b5e:	f7fe fe67 	bl	8008830 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000e54 	.word	0x20000e54
 8009b6c:	2000079c 	.word	0x2000079c
 8009b70:	20000a6c 	.word	0x20000a6c

08009b74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
 8009b90:	4613      	mov	r3, r2
 8009b92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b23      	cmp	r3, #35	; 0x23
 8009b98:	d84a      	bhi.n	8009c30 <CDC_Control_FS+0xac>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <CDC_Control_FS+0x1c>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009c31 	.word	0x08009c31
 8009ba4:	08009c31 	.word	0x08009c31
 8009ba8:	08009c31 	.word	0x08009c31
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009c31 	.word	0x08009c31
 8009bb4:	08009c31 	.word	0x08009c31
 8009bb8:	08009c31 	.word	0x08009c31
 8009bbc:	08009c31 	.word	0x08009c31
 8009bc0:	08009c31 	.word	0x08009c31
 8009bc4:	08009c31 	.word	0x08009c31
 8009bc8:	08009c31 	.word	0x08009c31
 8009bcc:	08009c31 	.word	0x08009c31
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	08009c31 	.word	0x08009c31
 8009bd8:	08009c31 	.word	0x08009c31
 8009bdc:	08009c31 	.word	0x08009c31
 8009be0:	08009c31 	.word	0x08009c31
 8009be4:	08009c31 	.word	0x08009c31
 8009be8:	08009c31 	.word	0x08009c31
 8009bec:	08009c31 	.word	0x08009c31
 8009bf0:	08009c31 	.word	0x08009c31
 8009bf4:	08009c31 	.word	0x08009c31
 8009bf8:	08009c31 	.word	0x08009c31
 8009bfc:	08009c31 	.word	0x08009c31
 8009c00:	08009c31 	.word	0x08009c31
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c31 	.word	0x08009c31
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c31 	.word	0x08009c31
 8009c28:	08009c31 	.word	0x08009c31
 8009c2c:	08009c31 	.word	0x08009c31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c30:	bf00      	nop
  }

  return (USBD_OK);
 8009c32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7f6 fd27 	bl	80006a0 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c52:	6879      	ldr	r1, [r7, #4]
 8009c54:	4805      	ldr	r0, [pc, #20]	; (8009c6c <CDC_Receive_FS+0x2c>)
 8009c56:	f7fe fdeb 	bl	8008830 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c5a:	4804      	ldr	r0, [pc, #16]	; (8009c6c <CDC_Receive_FS+0x2c>)
 8009c5c:	f7fe fe2c 	bl	80088b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2000079c 	.word	0x2000079c

08009c70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c80:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <CDC_Transmit_FS+0x48>)
 8009c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e00b      	b.n	8009cae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c96:	887b      	ldrh	r3, [r7, #2]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	4806      	ldr	r0, [pc, #24]	; (8009cb8 <CDC_Transmit_FS+0x48>)
 8009c9e:	f7fe fdae 	bl	80087fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ca2:	4805      	ldr	r0, [pc, #20]	; (8009cb8 <CDC_Transmit_FS+0x48>)
 8009ca4:	f7fe fdd8 	bl	8008858 <USBD_CDC_TransmitPacket>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2000079c 	.word	0x2000079c

08009cbc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
	...

08009ce0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	6039      	str	r1, [r7, #0]
 8009cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	2212      	movs	r2, #18
 8009cf0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009cf2:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	20000150 	.word	0x20000150

08009d04 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	6039      	str	r1, [r7, #0]
 8009d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2204      	movs	r2, #4
 8009d14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d16:	4b03      	ldr	r3, [pc, #12]	; (8009d24 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	20000164 	.word	0x20000164

08009d28 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d105      	bne.n	8009d46 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4907      	ldr	r1, [pc, #28]	; (8009d5c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d3e:	4808      	ldr	r0, [pc, #32]	; (8009d60 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d40:	f7ff fdf3 	bl	800992a <USBD_GetString>
 8009d44:	e004      	b.n	8009d50 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	4904      	ldr	r1, [pc, #16]	; (8009d5c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d4a:	4805      	ldr	r0, [pc, #20]	; (8009d60 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d4c:	f7ff fded 	bl	800992a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d50:	4b02      	ldr	r3, [pc, #8]	; (8009d5c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	2000123c 	.word	0x2000123c
 8009d60:	0800a564 	.word	0x0800a564

08009d64 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	6039      	str	r1, [r7, #0]
 8009d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	4904      	ldr	r1, [pc, #16]	; (8009d84 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009d74:	4804      	ldr	r0, [pc, #16]	; (8009d88 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009d76:	f7ff fdd8 	bl	800992a <USBD_GetString>
  return USBD_StrDesc;
 8009d7a:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	2000123c 	.word	0x2000123c
 8009d88:	0800a57c 	.word	0x0800a57c

08009d8c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	6039      	str	r1, [r7, #0]
 8009d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	221a      	movs	r2, #26
 8009d9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d9e:	f000 f843 	bl	8009e28 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009da2:	4b02      	ldr	r3, [pc, #8]	; (8009dac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20000168 	.word	0x20000168

08009db0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	6039      	str	r1, [r7, #0]
 8009dba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d105      	bne.n	8009dce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	4907      	ldr	r1, [pc, #28]	; (8009de4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009dc6:	4808      	ldr	r0, [pc, #32]	; (8009de8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009dc8:	f7ff fdaf 	bl	800992a <USBD_GetString>
 8009dcc:	e004      	b.n	8009dd8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	4904      	ldr	r1, [pc, #16]	; (8009de4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009dd2:	4805      	ldr	r0, [pc, #20]	; (8009de8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009dd4:	f7ff fda9 	bl	800992a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dd8:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	2000123c 	.word	0x2000123c
 8009de8:	0800a590 	.word	0x0800a590

08009dec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	6039      	str	r1, [r7, #0]
 8009df6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d105      	bne.n	8009e0a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4907      	ldr	r1, [pc, #28]	; (8009e20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e02:	4808      	ldr	r0, [pc, #32]	; (8009e24 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e04:	f7ff fd91 	bl	800992a <USBD_GetString>
 8009e08:	e004      	b.n	8009e14 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	4904      	ldr	r1, [pc, #16]	; (8009e20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e0e:	4805      	ldr	r0, [pc, #20]	; (8009e24 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e10:	f7ff fd8b 	bl	800992a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e14:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	2000123c 	.word	0x2000123c
 8009e24:	0800a59c 	.word	0x0800a59c

08009e28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e2e:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <Get_SerialNum+0x44>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e34:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <Get_SerialNum+0x48>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e3a:	4b0e      	ldr	r3, [pc, #56]	; (8009e74 <Get_SerialNum+0x4c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4413      	add	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d009      	beq.n	8009e62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e4e:	2208      	movs	r2, #8
 8009e50:	4909      	ldr	r1, [pc, #36]	; (8009e78 <Get_SerialNum+0x50>)
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f814 	bl	8009e80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e58:	2204      	movs	r2, #4
 8009e5a:	4908      	ldr	r1, [pc, #32]	; (8009e7c <Get_SerialNum+0x54>)
 8009e5c:	68b8      	ldr	r0, [r7, #8]
 8009e5e:	f000 f80f 	bl	8009e80 <IntToUnicode>
  }
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	1fff7590 	.word	0x1fff7590
 8009e70:	1fff7594 	.word	0x1fff7594
 8009e74:	1fff7598 	.word	0x1fff7598
 8009e78:	2000016a 	.word	0x2000016a
 8009e7c:	2000017a 	.word	0x2000017a

08009e80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e92:	2300      	movs	r3, #0
 8009e94:	75fb      	strb	r3, [r7, #23]
 8009e96:	e027      	b.n	8009ee8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	0f1b      	lsrs	r3, r3, #28
 8009e9c:	2b09      	cmp	r3, #9
 8009e9e:	d80b      	bhi.n	8009eb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	0f1b      	lsrs	r3, r3, #28
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	4619      	mov	r1, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	440b      	add	r3, r1
 8009eb0:	3230      	adds	r2, #48	; 0x30
 8009eb2:	b2d2      	uxtb	r2, r2
 8009eb4:	701a      	strb	r2, [r3, #0]
 8009eb6:	e00a      	b.n	8009ece <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	0f1b      	lsrs	r3, r3, #28
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	440b      	add	r3, r1
 8009ec8:	3237      	adds	r2, #55	; 0x37
 8009eca:	b2d2      	uxtb	r2, r2
 8009ecc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	3301      	adds	r3, #1
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	4413      	add	r3, r2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
 8009ee8:	7dfa      	ldrb	r2, [r7, #23]
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d3d3      	bcc.n	8009e98 <IntToUnicode+0x18>
  }
}
 8009ef0:	bf00      	nop
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a0d      	ldr	r2, [pc, #52]	; (8009f40 <HAL_PCD_MspInit+0x44>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d113      	bne.n	8009f36 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f0e:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <HAL_PCD_MspInit+0x48>)
 8009f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f12:	4a0c      	ldr	r2, [pc, #48]	; (8009f44 <HAL_PCD_MspInit+0x48>)
 8009f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f18:	6593      	str	r3, [r2, #88]	; 0x58
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <HAL_PCD_MspInit+0x48>)
 8009f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009f26:	2200      	movs	r2, #0
 8009f28:	2100      	movs	r1, #0
 8009f2a:	2014      	movs	r0, #20
 8009f2c:	f7f8 f913 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009f30:	2014      	movs	r0, #20
 8009f32:	f7f8 f92a 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f36:	bf00      	nop
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	40005c00 	.word	0x40005c00
 8009f44:	40021000 	.word	0x40021000

08009f48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	f7fe fd76 	bl	8008a50 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009f7e:	78fa      	ldrb	r2, [r7, #3]
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4613      	mov	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	00db      	lsls	r3, r3, #3
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	4619      	mov	r1, r3
 8009f96:	f7fe fdae 	bl	8008af6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	460b      	mov	r3, r1
 8009fac:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009fb4:	78fa      	ldrb	r2, [r7, #3]
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	440b      	add	r3, r1
 8009fc2:	333c      	adds	r3, #60	; 0x3c
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	f7fe fdf7 	bl	8008bbc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b082      	sub	sp, #8
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe fefb 	bl	8008de0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	2b02      	cmp	r3, #2
 800a004:	d001      	beq.n	800a00a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a006:	f7f7 fc6d 	bl	80018e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a010:	7bfa      	ldrb	r2, [r7, #15]
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fea8 	bl	8008d6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe fe61 	bl	8008ce8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a026:	bf00      	nop
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fea3 	bl	8008d8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d005      	beq.n	800a058 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a04c:	4b04      	ldr	r3, [pc, #16]	; (800a060 <HAL_PCD_SuspendCallback+0x30>)
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	4a03      	ldr	r2, [pc, #12]	; (800a060 <HAL_PCD_SuspendCallback+0x30>)
 800a052:	f043 0306 	orr.w	r3, r3, #6
 800a056:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	e000ed00 	.word	0xe000ed00

0800a064 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d007      	beq.n	800a084 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a074:	4b08      	ldr	r3, [pc, #32]	; (800a098 <HAL_PCD_ResumeCallback+0x34>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4a07      	ldr	r2, [pc, #28]	; (800a098 <HAL_PCD_ResumeCallback+0x34>)
 800a07a:	f023 0306 	bic.w	r3, r3, #6
 800a07e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a080:	f000 f9fa 	bl	800a478 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe fe92 	bl	8008db4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	e000ed00 	.word	0xe000ed00

0800a09c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a0a4:	4a2b      	ldr	r2, [pc, #172]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a29      	ldr	r2, [pc, #164]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a0b4:	4b27      	ldr	r3, [pc, #156]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0b6:	4a28      	ldr	r2, [pc, #160]	; (800a158 <USBD_LL_Init+0xbc>)
 800a0b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a0ba:	4b26      	ldr	r3, [pc, #152]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0bc:	2208      	movs	r2, #8
 800a0be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a0c0:	4b24      	ldr	r3, [pc, #144]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0c6:	4b23      	ldr	r3, [pc, #140]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a0cc:	4b21      	ldr	r3, [pc, #132]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a0d2:	4b20      	ldr	r3, [pc, #128]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a0d8:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0de:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0e4:	481b      	ldr	r0, [pc, #108]	; (800a154 <USBD_LL_Init+0xb8>)
 800a0e6:	f7f8 fa37 	bl	8002558 <HAL_PCD_Init>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a0f0:	f7f7 fbf8 	bl	80018e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0fa:	2318      	movs	r3, #24
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2100      	movs	r1, #0
 800a100:	f7f9 fd25 	bl	8003b4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a10a:	2358      	movs	r3, #88	; 0x58
 800a10c:	2200      	movs	r2, #0
 800a10e:	2180      	movs	r1, #128	; 0x80
 800a110:	f7f9 fd1d 	bl	8003b4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a11a:	23c0      	movs	r3, #192	; 0xc0
 800a11c:	2200      	movs	r2, #0
 800a11e:	2181      	movs	r1, #129	; 0x81
 800a120:	f7f9 fd15 	bl	8003b4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a12a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a12e:	2200      	movs	r2, #0
 800a130:	2101      	movs	r1, #1
 800a132:	f7f9 fd0c 	bl	8003b4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a13c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a140:	2200      	movs	r2, #0
 800a142:	2182      	movs	r1, #130	; 0x82
 800a144:	f7f9 fd03 	bl	8003b4e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	2000143c 	.word	0x2000143c
 800a158:	40005c00 	.word	0x40005c00

0800a15c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a172:	4618      	mov	r0, r3
 800a174:	f7f8 fad5 	bl	8002722 <HAL_PCD_Start>
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f980 	bl	800a484 <USBD_Get_USB_Status>
 800a184:	4603      	mov	r3, r0
 800a186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a188:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	4608      	mov	r0, r1
 800a19c:	4611      	mov	r1, r2
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	70fb      	strb	r3, [r7, #3]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70bb      	strb	r3, [r7, #2]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1ba:	78bb      	ldrb	r3, [r7, #2]
 800a1bc:	883a      	ldrh	r2, [r7, #0]
 800a1be:	78f9      	ldrb	r1, [r7, #3]
 800a1c0:	f7f8 fc44 	bl	8002a4c <HAL_PCD_EP_Open>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f95a 	bl	800a484 <USBD_Get_USB_Status>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f8 fc8b 	bl	8002b18 <HAL_PCD_EP_Close>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f93b 	bl	800a484 <USBD_Get_USB_Status>
 800a20e:	4603      	mov	r3, r0
 800a210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a212:	7bbb      	ldrb	r3, [r7, #14]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a236:	78fa      	ldrb	r2, [r7, #3]
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f8 fd4c 	bl	8002cd8 <HAL_PCD_EP_SetStall>
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f91c 	bl	800a484 <USBD_Get_USB_Status>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a250:	7bbb      	ldrb	r3, [r7, #14]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	460b      	mov	r3, r1
 800a264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a274:	78fa      	ldrb	r2, [r7, #3]
 800a276:	4611      	mov	r1, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	f7f8 fd8d 	bl	8002d98 <HAL_PCD_EP_ClrStall>
 800a27e:	4603      	mov	r3, r0
 800a280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	4618      	mov	r0, r3
 800a286:	f000 f8fd 	bl	800a484 <USBD_Get_USB_Status>
 800a28a:	4603      	mov	r3, r0
 800a28c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a28e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	da0c      	bge.n	800a2ce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ba:	68f9      	ldr	r1, [r7, #12]
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3302      	adds	r3, #2
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	e00b      	b.n	800a2e6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2d4:	68f9      	ldr	r1, [r7, #12]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	440b      	add	r3, r1
 800a2e0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a2e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a30c:	78fa      	ldrb	r2, [r7, #3]
 800a30e:	4611      	mov	r1, r2
 800a310:	4618      	mov	r0, r3
 800a312:	f7f8 fb76 	bl	8002a02 <HAL_PCD_SetAddress>
 800a316:	4603      	mov	r3, r0
 800a318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 f8b1 	bl	800a484 <USBD_Get_USB_Status>
 800a322:	4603      	mov	r3, r0
 800a324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a326:	7bbb      	ldrb	r3, [r7, #14]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	607a      	str	r2, [r7, #4]
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	460b      	mov	r3, r1
 800a33e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a34e:	7af9      	ldrb	r1, [r7, #11]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	f7f8 fc7d 	bl	8002c52 <HAL_PCD_EP_Transmit>
 800a358:	4603      	mov	r3, r0
 800a35a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 f890 	bl	800a484 <USBD_Get_USB_Status>
 800a364:	4603      	mov	r3, r0
 800a366:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a368:	7dbb      	ldrb	r3, [r7, #22]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b086      	sub	sp, #24
 800a376:	af00      	add	r7, sp, #0
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	460b      	mov	r3, r1
 800a380:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a390:	7af9      	ldrb	r1, [r7, #11]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	f7f8 fc07 	bl	8002ba8 <HAL_PCD_EP_Receive>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 f86f 	bl	800a484 <USBD_Get_USB_Status>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f8 fc29 	bl	8002c22 <HAL_PCD_EP_GetRxCount>
 800a3d0:	4603      	mov	r3, r0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <HAL_PCDEx_LPM_Callback+0x18>
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d013      	beq.n	800a41a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a3f2:	e023      	b.n	800a43c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a3fc:	f000 f83c 	bl	800a478 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a400:	4b10      	ldr	r3, [pc, #64]	; (800a444 <HAL_PCDEx_LPM_Callback+0x68>)
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	4a0f      	ldr	r2, [pc, #60]	; (800a444 <HAL_PCDEx_LPM_Callback+0x68>)
 800a406:	f023 0306 	bic.w	r3, r3, #6
 800a40a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fcce 	bl	8008db4 <USBD_LL_Resume>
    break;
 800a418:	e010      	b.n	800a43c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a420:	4618      	mov	r0, r3
 800a422:	f7fe fcb2 	bl	8008d8a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d005      	beq.n	800a43a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <HAL_PCDEx_LPM_Callback+0x68>)
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	4a04      	ldr	r2, [pc, #16]	; (800a444 <HAL_PCDEx_LPM_Callback+0x68>)
 800a434:	f043 0306 	orr.w	r3, r3, #6
 800a438:	6113      	str	r3, [r2, #16]
    break;
 800a43a:	bf00      	nop
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	e000ed00 	.word	0xe000ed00

0800a448 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a450:	4b03      	ldr	r3, [pc, #12]	; (800a460 <USBD_static_malloc+0x18>)
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	200001ac 	.word	0x200001ac

0800a464 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a47c:	f7f6 fcc4 	bl	8000e08 <SystemClock_Config>
}
 800a480:	bf00      	nop
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	2b03      	cmp	r3, #3
 800a496:	d817      	bhi.n	800a4c8 <USBD_Get_USB_Status+0x44>
 800a498:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <USBD_Get_USB_Status+0x1c>)
 800a49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49e:	bf00      	nop
 800a4a0:	0800a4b1 	.word	0x0800a4b1
 800a4a4:	0800a4b7 	.word	0x0800a4b7
 800a4a8:	0800a4bd 	.word	0x0800a4bd
 800a4ac:	0800a4c3 	.word	0x0800a4c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	e00b      	b.n	800a4ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ba:	e008      	b.n	800a4ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c0:	e005      	b.n	800a4ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c6:	e002      	b.n	800a4ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a4cc:	bf00      	nop
  }
  return usb_status;
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <__libc_init_array>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4e0d      	ldr	r6, [pc, #52]	; (800a514 <__libc_init_array+0x38>)
 800a4e0:	4c0d      	ldr	r4, [pc, #52]	; (800a518 <__libc_init_array+0x3c>)
 800a4e2:	1ba4      	subs	r4, r4, r6
 800a4e4:	10a4      	asrs	r4, r4, #2
 800a4e6:	2500      	movs	r5, #0
 800a4e8:	42a5      	cmp	r5, r4
 800a4ea:	d109      	bne.n	800a500 <__libc_init_array+0x24>
 800a4ec:	4e0b      	ldr	r6, [pc, #44]	; (800a51c <__libc_init_array+0x40>)
 800a4ee:	4c0c      	ldr	r4, [pc, #48]	; (800a520 <__libc_init_array+0x44>)
 800a4f0:	f000 f82c 	bl	800a54c <_init>
 800a4f4:	1ba4      	subs	r4, r4, r6
 800a4f6:	10a4      	asrs	r4, r4, #2
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	42a5      	cmp	r5, r4
 800a4fc:	d105      	bne.n	800a50a <__libc_init_array+0x2e>
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}
 800a500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a504:	4798      	blx	r3
 800a506:	3501      	adds	r5, #1
 800a508:	e7ee      	b.n	800a4e8 <__libc_init_array+0xc>
 800a50a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a50e:	4798      	blx	r3
 800a510:	3501      	adds	r5, #1
 800a512:	e7f2      	b.n	800a4fa <__libc_init_array+0x1e>
 800a514:	0800a5bc 	.word	0x0800a5bc
 800a518:	0800a5bc 	.word	0x0800a5bc
 800a51c:	0800a5bc 	.word	0x0800a5bc
 800a520:	0800a5c0 	.word	0x0800a5c0

0800a524 <memcpy>:
 800a524:	b510      	push	{r4, lr}
 800a526:	1e43      	subs	r3, r0, #1
 800a528:	440a      	add	r2, r1
 800a52a:	4291      	cmp	r1, r2
 800a52c:	d100      	bne.n	800a530 <memcpy+0xc>
 800a52e:	bd10      	pop	{r4, pc}
 800a530:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a534:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a538:	e7f7      	b.n	800a52a <memcpy+0x6>

0800a53a <memset>:
 800a53a:	4402      	add	r2, r0
 800a53c:	4603      	mov	r3, r0
 800a53e:	4293      	cmp	r3, r2
 800a540:	d100      	bne.n	800a544 <memset+0xa>
 800a542:	4770      	bx	lr
 800a544:	f803 1b01 	strb.w	r1, [r3], #1
 800a548:	e7f9      	b.n	800a53e <memset+0x4>
	...

0800a54c <_init>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	bf00      	nop
 800a550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a552:	bc08      	pop	{r3}
 800a554:	469e      	mov	lr, r3
 800a556:	4770      	bx	lr

0800a558 <_fini>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	bf00      	nop
 800a55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55e:	bc08      	pop	{r3}
 800a560:	469e      	mov	lr, r3
 800a562:	4770      	bx	lr
