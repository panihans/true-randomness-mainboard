
delta x mainboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000926c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800949c  0800949c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800949c  0800949c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800949c  0800949c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080094a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000184  08009628  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  08009628  00021620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abf6  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000343a  00000000  00000000  0003adaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003e1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003f570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  00040780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b7d  00000000  00000000  00060d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c41e2  00000000  00000000  00072890  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  00136af0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800942c 	.word	0x0800942c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800942c 	.word	0x0800942c

08000218 <CDC_On_Receive>:
Command command = {.motor1 = 0, .motor2 = 0, .motor3 = 0, .thrower = 0, .led = 0, .delimiter = 0};
Command feedback = {.motor1 = 0, .motor2 = 0, .motor3 = 0, .thrower = 0, .led = 0, .delimiter = 0};

volatile uint8_t command_received = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length  == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0c      	cmp	r3, #12
 8000228:	d10e      	bne.n	8000248 <CDC_On_Receive+0x30>
		memcpy(&command, buffer, sizeof(Command));
 800022a:	220c      	movs	r2, #12
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 f8e8 	bl	8009404 <memcpy>

		if (command.delimiter == 0xBAD) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800023a:	f640 32ad 	movw	r2, #2989	; 0xbad
 800023e:	4293      	cmp	r3, r2
 8000240:	d102      	bne.n	8000248 <CDC_On_Receive+0x30>
			command_received = 1;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200001a0 	.word	0x200001a0
 8000254:	200001b8 	.word	0x200001b8

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025c:	f000 ffcb 	bl	80011f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f83c 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 fc90 	bl	8000b88 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000268:	f000 fa18 	bl	800069c <MX_TIM4_Init>
  MX_TIM8_Init();
 800026c:	f000 faa2 	bl	80007b4 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000270:	f000 fb10 	bl	8000894 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000274:	f000 fb94 	bl	80009a0 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000278:	f000 f898 	bl	80003ac <MX_TIM1_Init>
  MX_TIM2_Init();
 800027c:	f000 f946 	bl	800050c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000280:	f000 f998 	bl	80005b4 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000284:	f000 fa60 	bl	8000748 <MX_TIM7_Init>
  MX_TIM17_Init();
 8000288:	f000 fc04 	bl	8000a94 <MX_TIM17_Init>
  MX_USB_Device_Init();
 800028c:	f008 fb9e 	bl	80089cc <MX_USB_Device_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_received == 1) {
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <main+0x78>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b01      	cmp	r3, #1
 8000298:	d1fa      	bne.n	8000290 <main+0x38>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800029a:	2120      	movs	r1, #32
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <main+0x7c>)
 800029e:	f001 fac5 	bl	800182c <HAL_GPIO_TogglePin>
		command_received = 0;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0x78>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]

		feedback.motor1 = 5;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0x80>)
 80002aa:	2205      	movs	r2, #5
 80002ac:	801a      	strh	r2, [r3, #0]
		feedback.motor2 = 4;
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <main+0x80>)
 80002b0:	2204      	movs	r2, #4
 80002b2:	805a      	strh	r2, [r3, #2]
		feedback.motor3 = 3;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0x80>)
 80002b6:	2203      	movs	r2, #3
 80002b8:	809a      	strh	r2, [r3, #4]
		feedback.thrower = 2;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <main+0x80>)
 80002bc:	2202      	movs	r2, #2
 80002be:	80da      	strh	r2, [r3, #6]
		feedback.led = 1;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <main+0x80>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	811a      	strh	r2, [r3, #8]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80002c6:	210c      	movs	r1, #12
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <main+0x80>)
 80002ca:	f008 fc41 	bl	8008b50 <CDC_Transmit_FS>
	if (command_received == 1) {
 80002ce:	e7df      	b.n	8000290 <main+0x38>
 80002d0:	200001b8 	.word	0x200001b8
 80002d4:	48000400 	.word	0x48000400
 80002d8:	200001ac 	.word	0x200001ac

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b0a4      	sub	sp, #144	; 0x90
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002e6:	2238      	movs	r2, #56	; 0x38
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f009 f895 	bl	800941a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2244      	movs	r2, #68	; 0x44
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f009 f887 	bl	800941a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800030c:	2000      	movs	r0, #0
 800030e:	f002 fe0f 	bl	8002f30 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000312:	2322      	movs	r3, #34	; 0x22
 8000314:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	2340      	movs	r3, #64	; 0x40
 800031e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000328:	2302      	movs	r3, #2
 800032a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800032c:	2301      	movs	r3, #1
 800032e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000330:	2314      	movs	r3, #20
 8000332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800033c:	2302      	movs	r3, #2
 800033e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800034c:	4618      	mov	r0, r3
 800034e:	f002 fea3 	bl	8003098 <HAL_RCC_OscConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000358:	f000 fc60 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035c:	230f      	movs	r3, #15
 800035e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000360:	2303      	movs	r3, #3
 8000362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000370:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000374:	2104      	movs	r1, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f003 f9a6 	bl	80036c8 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000382:	f000 fc4b 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800038c:	2300      	movs	r3, #0
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fb7c 	bl	8003a90 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800039e:	f000 fc3d 	bl	8000c1c <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3790      	adds	r7, #144	; 0x90
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b098      	sub	sp, #96	; 0x60
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2234      	movs	r2, #52	; 0x34
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f009 f81e 	bl	800941a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003de:	4b49      	ldr	r3, [pc, #292]	; (8000504 <MX_TIM1_Init+0x158>)
 80003e0:	4a49      	ldr	r2, [pc, #292]	; (8000508 <MX_TIM1_Init+0x15c>)
 80003e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 80003e4:	4b47      	ldr	r3, [pc, #284]	; (8000504 <MX_TIM1_Init+0x158>)
 80003e6:	2264      	movs	r2, #100	; 0x64
 80003e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ea:	4b46      	ldr	r3, [pc, #280]	; (8000504 <MX_TIM1_Init+0x158>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003f0:	4b44      	ldr	r3, [pc, #272]	; (8000504 <MX_TIM1_Init+0x158>)
 80003f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f8:	4b42      	ldr	r3, [pc, #264]	; (8000504 <MX_TIM1_Init+0x158>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003fe:	4b41      	ldr	r3, [pc, #260]	; (8000504 <MX_TIM1_Init+0x158>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b3f      	ldr	r3, [pc, #252]	; (8000504 <MX_TIM1_Init+0x158>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800040a:	483e      	ldr	r0, [pc, #248]	; (8000504 <MX_TIM1_Init+0x158>)
 800040c:	f003 fd87 	bl	8003f1e <HAL_TIM_PWM_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000416:	f000 fc01 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000426:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800042a:	4619      	mov	r1, r3
 800042c:	4835      	ldr	r0, [pc, #212]	; (8000504 <MX_TIM1_Init+0x158>)
 800042e:	f004 fcbb 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000438:	f000 fbf0 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800043c:	2360      	movs	r3, #96	; 0x60
 800043e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000444:	2300      	movs	r3, #0
 8000446:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000448:	2300      	movs	r3, #0
 800044a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000454:	2300      	movs	r3, #0
 8000456:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000458:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800045c:	2200      	movs	r2, #0
 800045e:	4619      	mov	r1, r3
 8000460:	4828      	ldr	r0, [pc, #160]	; (8000504 <MX_TIM1_Init+0x158>)
 8000462:	f003 ffd9 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800046c:	f000 fbd6 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000474:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000478:	2204      	movs	r2, #4
 800047a:	4619      	mov	r1, r3
 800047c:	4821      	ldr	r0, [pc, #132]	; (8000504 <MX_TIM1_Init+0x158>)
 800047e:	f003 ffcb 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000488:	f000 fbc8 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000490:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000494:	2208      	movs	r2, #8
 8000496:	4619      	mov	r1, r3
 8000498:	481a      	ldr	r0, [pc, #104]	; (8000504 <MX_TIM1_Init+0x158>)
 800049a:	f003 ffbd 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80004a4:	f000 fbba 	bl	8000c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80004d8:	2300      	movs	r3, #0
 80004da:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	4619      	mov	r1, r3
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <MX_TIM1_Init+0x158>)
 80004e6:	f004 fce1 	bl	8004eac <HAL_TIMEx_ConfigBreakDeadTime>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80004f0:	f000 fb94 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <MX_TIM1_Init+0x158>)
 80004f6:	f000 fd15 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 80004fa:	bf00      	nop
 80004fc:	3760      	adds	r7, #96	; 0x60
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000558 	.word	0x20000558
 8000508:	40012c00 	.word	0x40012c00

0800050c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2224      	movs	r2, #36	; 0x24
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f008 ff7d 	bl	800941a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <MX_TIM2_Init+0xa4>)
 800052c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000530:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_TIM2_Init+0xa4>)
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <MX_TIM2_Init+0xa4>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <MX_TIM2_Init+0xa4>)
 8000540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000544:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_TIM2_Init+0xa4>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_TIM2_Init+0xa4>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000552:	2301      	movs	r3, #1
 8000554:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800056a:	2301      	movs	r3, #1
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4619      	mov	r1, r3
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <MX_TIM2_Init+0xa4>)
 800057e:	f003 fd25 	bl	8003fcc <HAL_TIM_Encoder_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000588:	f000 fb48 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_TIM2_Init+0xa4>)
 800059a:	f004 fc05 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80005a4:	f000 fb3a 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	3730      	adds	r7, #48	; 0x30
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200005a4 	.word	0x200005a4

080005b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]
 80005d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005d8:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_TIM3_Init+0xe0>)
 80005da:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <MX_TIM3_Init+0xe4>)
 80005dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <MX_TIM3_Init+0xe0>)
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_TIM3_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_TIM3_Init+0xe0>)
 80005ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_TIM3_Init+0xe0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <MX_TIM3_Init+0xe0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005fe:	4825      	ldr	r0, [pc, #148]	; (8000694 <MX_TIM3_Init+0xe0>)
 8000600:	f003 fc8d 	bl	8003f1e <HAL_TIM_PWM_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800060a:	f000 fb07 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	481d      	ldr	r0, [pc, #116]	; (8000694 <MX_TIM3_Init+0xe0>)
 800061e:	f004 fbc3 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000628:	f000 faf8 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062c:	2360      	movs	r3, #96	; 0x60
 800062e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_TIM3_Init+0xe0>)
 8000644:	f003 fee8 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800064e:	f000 fae5 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	2204      	movs	r2, #4
 800065a:	4619      	mov	r1, r3
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_TIM3_Init+0xe0>)
 800065e:	f003 fedb 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000668:	f000 fad8 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	2208      	movs	r2, #8
 8000674:	4619      	mov	r1, r3
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <MX_TIM3_Init+0xe0>)
 8000678:	f003 fece 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000682:	f000 facb 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <MX_TIM3_Init+0xe0>)
 8000688:	f000 fc4c 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000050c 	.word	0x2000050c
 8000698:	40000400 	.word	0x40000400

0800069c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2224      	movs	r2, #36	; 0x24
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f008 feb5 	bl	800941a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	463b      	mov	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_TIM4_Init+0xa4>)
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <MX_TIM4_Init+0xa8>)
 80006be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_TIM4_Init+0xa4>)
 80006c2:	2264      	movs	r2, #100	; 0x64
 80006c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_TIM4_Init+0xa4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_TIM4_Init+0xa4>)
 80006ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_TIM4_Init+0xa4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_TIM4_Init+0xa4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006f8:	2301      	movs	r3, #1
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4619      	mov	r1, r3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_TIM4_Init+0xa4>)
 800070c:	f003 fc5e 	bl	8003fcc <HAL_TIM_Encoder_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000716:	f000 fa81 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_TIM4_Init+0xa4>)
 8000728:	f004 fb3e 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000732:	f000 fa73 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3730      	adds	r7, #48	; 0x30
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000428 	.word	0x20000428
 8000744:	40000800 	.word	0x40000800

08000748 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_TIM7_Init+0x64>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_TIM7_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_TIM7_Init+0x64>)
 8000760:	2264      	movs	r2, #100	; 0x64
 8000762:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_TIM7_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_TIM7_Init+0x64>)
 800076c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000770:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_TIM7_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_TIM7_Init+0x64>)
 800077a:	f003 fb79 	bl	8003e70 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000784:	f000 fa4a 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM7_Init+0x64>)
 8000796:	f004 fb07 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 fa3c 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000063c 	.word	0x2000063c
 80007b0:	40001400 	.word	0x40001400

080007b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09a      	sub	sp, #104	; 0x68
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007be:	2224      	movs	r2, #36	; 0x24
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 fe29 	bl	800941a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2234      	movs	r2, #52	; 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f008 fe1d 	bl	800941a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_TIM8_Init+0xd8>)
 80007e2:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <MX_TIM8_Init+0xdc>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 100;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_TIM8_Init+0xd8>)
 80007e8:	2264      	movs	r2, #100	; 0x64
 80007ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_TIM8_Init+0xd8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_TIM8_Init+0xd8>)
 80007f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_TIM8_Init+0xd8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_TIM8_Init+0xd8>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_TIM8_Init+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800080c:	2301      	movs	r3, #1
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000810:	2300      	movs	r3, #0
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000814:	2301      	movs	r3, #1
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000820:	2300      	movs	r3, #0
 8000822:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000824:	2301      	movs	r3, #1
 8000826:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000830:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000834:	4619      	mov	r1, r3
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <MX_TIM8_Init+0xd8>)
 8000838:	f003 fbc8 	bl	8003fcc <HAL_TIM_Encoder_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000842:	f000 f9eb 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000852:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_TIM8_Init+0xd8>)
 800085a:	f004 faa5 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 8000864:	f000 f9da 	bl	8000c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_TIM8_Init+0xd8>)
 8000876:	f004 fb19 	bl	8004eac <HAL_TIMEx_ConfigBreakDeadTime>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8000880:	f000 f9cc 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3768      	adds	r7, #104	; 0x68
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200003dc 	.word	0x200003dc
 8000890:	40013400 	.word	0x40013400

08000894 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b098      	sub	sp, #96	; 0x60
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2234      	movs	r2, #52	; 0x34
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f008 fdaa 	bl	800941a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_TIM15_Init+0x104>)
 80008c8:	4a34      	ldr	r2, [pc, #208]	; (800099c <MX_TIM15_Init+0x108>)
 80008ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 100;
 80008cc:	4b32      	ldr	r3, [pc, #200]	; (8000998 <MX_TIM15_Init+0x104>)
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <MX_TIM15_Init+0x104>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <MX_TIM15_Init+0x104>)
 80008da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_TIM15_Init+0x104>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_TIM15_Init+0x104>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_TIM15_Init+0x104>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80008f2:	4829      	ldr	r0, [pc, #164]	; (8000998 <MX_TIM15_Init+0x104>)
 80008f4:	f003 fb13 	bl	8003f1e <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f98d 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800090a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800090e:	4619      	mov	r1, r3
 8000910:	4821      	ldr	r0, [pc, #132]	; (8000998 <MX_TIM15_Init+0x104>)
 8000912:	f004 fa49 	bl	8004da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800091c:	f000 f97e 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000920:	2360      	movs	r3, #96	; 0x60
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	4814      	ldr	r0, [pc, #80]	; (8000998 <MX_TIM15_Init+0x104>)
 8000946:	f003 fd67 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000950:	f000 f964 	bl	8000c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM15_Init+0x104>)
 800097c:	f004 fa96 	bl	8004eac <HAL_TIMEx_ConfigBreakDeadTime>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000986:	f000 f949 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM15_Init+0x104>)
 800098c:	f000 faca 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000990:	bf00      	nop
 8000992:	3760      	adds	r7, #96	; 0x60
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000474 	.word	0x20000474
 800099c:	40014000 	.word	0x40014000

080009a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2234      	movs	r2, #52	; 0x34
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f008 fd2a 	bl	800941a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009c8:	4a31      	ldr	r2, [pc, #196]	; (8000a90 <MX_TIM16_Init+0xf0>)
 80009ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009f2:	4826      	ldr	r0, [pc, #152]	; (8000a8c <MX_TIM16_Init+0xec>)
 80009f4:	f003 fa3c 	bl	8003e70 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80009fe:	f000 f90d 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <MX_TIM16_Init+0xec>)
 8000a04:	f003 fa8b 	bl	8003f1e <HAL_TIM_PWM_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000a0e:	f000 f905 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a12:	2360      	movs	r3, #96	; 0x60
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4815      	ldr	r0, [pc, #84]	; (8000a8c <MX_TIM16_Init+0xec>)
 8000a38:	f003 fcee 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000a42:	f000 f8eb 	bl	8000c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_TIM16_Init+0xec>)
 8000a6e:	f004 fa1d 	bl	8004eac <HAL_TIMEx_ConfigBreakDeadTime>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000a78:	f000 f8d0 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <MX_TIM16_Init+0xec>)
 8000a7e:	f000 fa51 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200005f0 	.word	0x200005f0
 8000a90:	40014400 	.word	0x40014400

08000a94 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	; 0x50
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2234      	movs	r2, #52	; 0x34
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f008 fcb0 	bl	800941a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000abc:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <MX_TIM17_Init+0xf0>)
 8000abe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 100;
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000ac2:	2264      	movs	r2, #100	; 0x64
 8000ac4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ae6:	4826      	ldr	r0, [pc, #152]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000ae8:	f003 f9c2 	bl	8003e70 <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000af2:	f000 f893 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000af6:	4822      	ldr	r0, [pc, #136]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000af8:	f003 fa11 	bl	8003f1e <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000b02:	f000 f88b 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b06:	2360      	movs	r3, #96	; 0x60
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b12:	2300      	movs	r3, #0
 8000b14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4815      	ldr	r0, [pc, #84]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000b2c:	f003 fc74 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000b36:	f000 f871 	bl	8000c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000b62:	f004 f9a3 	bl	8004eac <HAL_TIMEx_ConfigBreakDeadTime>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000b6c:	f000 f856 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <MX_TIM17_Init+0xec>)
 8000b72:	f000 f9d7 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200004c0 	.word	0x200004c0
 8000b84:	40014800 	.word	0x40014800

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_GPIO_Init+0x8c>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <MX_GPIO_Init+0x8c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_GPIO_Init+0x8c>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_GPIO_Init+0x8c>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <MX_GPIO_Init+0x8c>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_GPIO_Init+0x8c>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_GPIO_Init+0x90>)
 8000bd4:	f000 fe12 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4619      	mov	r1, r3
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <MX_GPIO_Init+0x90>)
 8000bec:	f000 fc84 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_GPIO_Init+0x90>)
 8000c08:	f000 fc76 	bl	80014f8 <HAL_GPIO_Init>

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x44>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c62:	f002 fa09 	bl	8003078 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_TIM_PWM_MspInit+0x80>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10c      	bne.n	8000ca0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c90:	6613      	str	r3, [r2, #96]	; 0x60
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000c9e:	e022      	b.n	8000ce6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <HAL_TIM_PWM_MspInit+0x88>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
}
 8000cc2:	e010      	b.n	8000ce6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_TIM_PWM_MspInit+0x8c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <HAL_TIM_PWM_MspInit+0x84>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
}
 8000ce6:	bf00      	nop
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40014000 	.word	0x40014000

08000d04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d24:	d129      	bne.n	8000d7a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d26:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a53      	ldr	r2, [pc, #332]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
 8000d3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a4d      	ldr	r2, [pc, #308]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d56:	2303      	movs	r3, #3
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d66:	2301      	movs	r3, #1
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f000 fbc0 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d78:	e079      	b.n	8000e6e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM4)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a3f      	ldr	r2, [pc, #252]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x178>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d128      	bne.n	8000dd6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d84:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d88:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	4a35      	ldr	r2, [pc, #212]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482c      	ldr	r0, [pc, #176]	; (8000e80 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000dd0:	f000 fb92 	bl	80014f8 <HAL_GPIO_Init>
}
 8000dd4:	e04b      	b.n	8000e6e <HAL_TIM_Encoder_MspInit+0x16a>
  else if(htim_encoder->Instance==TIM8)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <HAL_TIM_Encoder_MspInit+0x180>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d146      	bne.n	8000e6e <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de4:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000de6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dea:	6613      	str	r3, [r2, #96]	; 0x60
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x174>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f000 fb56 	bl	80014f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8000e5e:	230a      	movs	r3, #10
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_TIM_Encoder_MspInit+0x17c>)
 8000e6a:	f000 fb45 	bl	80014f8 <HAL_GPIO_Init>
}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	; 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40000800 	.word	0x40000800
 8000e80:	48000400 	.word	0x48000400
 8000e84:	40013400 	.word	0x40013400

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <HAL_TIM_Base_MspInit+0x8c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d114      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2037      	movs	r0, #55	; 0x37
 8000eb8:	f000 fae9 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ebc:	2037      	movs	r0, #55	; 0x37
 8000ebe:	f000 fb00 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000ec2:	e022      	b.n	8000f0a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_TIM_Base_MspInit+0x94>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
}
 8000ee6:	e010      	b.n	8000f0a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_TIM_Base_MspInit+0x98>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10b      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6613      	str	r3, [r2, #96]	; 0x60
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_TIM_Base_MspInit+0x90>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40001400 	.word	0x40001400
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40014400 	.word	0x40014400
 8000f20:	40014800 	.word	0x40014800

08000f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a65      	ldr	r2, [pc, #404]	; (80010d8 <HAL_TIM_MspPostInit+0x1b4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d11e      	bne.n	8000f84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b65      	ldr	r3, [pc, #404]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a64      	ldr	r2, [pc, #400]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b62      	ldr	r3, [pc, #392]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f5e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f70:	2306      	movs	r3, #6
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f000 fabb 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000f82:	e0a5      	b.n	80010d0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a55      	ldr	r2, [pc, #340]	; (80010e0 <HAL_TIM_MspPostInit+0x1bc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d139      	bne.n	8001002 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a52      	ldr	r2, [pc, #328]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b50      	ldr	r3, [pc, #320]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b4d      	ldr	r3, [pc, #308]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000fbe:	2350      	movs	r3, #80	; 0x50
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f000 fa8c 	bl	80014f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	483a      	ldr	r0, [pc, #232]	; (80010e4 <HAL_TIM_MspPostInit+0x1c0>)
 8000ffc:	f000 fa7c 	bl	80014f8 <HAL_GPIO_Init>
}
 8001000:	e066      	b.n	80010d0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM15)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a38      	ldr	r2, [pc, #224]	; (80010e8 <HAL_TIM_MspPostInit+0x1c4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d11d      	bne.n	8001048 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	4a32      	ldr	r2, [pc, #200]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001024:	2304      	movs	r3, #4
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001034:	2309      	movs	r3, #9
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f000 fa59 	bl	80014f8 <HAL_GPIO_Init>
}
 8001046:	e043      	b.n	80010d0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM16)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <HAL_TIM_MspPostInit+0x1c8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11c      	bne.n	800108c <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800106a:	2310      	movs	r3, #16
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800107a:	2301      	movs	r3, #1
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4817      	ldr	r0, [pc, #92]	; (80010e4 <HAL_TIM_MspPostInit+0x1c0>)
 8001086:	f000 fa37 	bl	80014f8 <HAL_GPIO_Init>
}
 800108a:	e021      	b.n	80010d0 <HAL_TIM_MspPostInit+0x1ac>
  else if(htim->Instance==TIM17)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_TIM_MspPostInit+0x1cc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d11c      	bne.n	80010d0 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_TIM_MspPostInit+0x1b8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80010be:	2301      	movs	r3, #1
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f000 fa14 	bl	80014f8 <HAL_GPIO_Init>
}
 80010d0:	bf00      	nop
 80010d2:	3738      	adds	r7, #56	; 0x38
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40012c00 	.word	0x40012c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40000400 	.word	0x40000400
 80010e4:	48000400 	.word	0x48000400
 80010e8:	40014000 	.word	0x40014000
 80010ec:	40014400 	.word	0x40014400
 80010f0:	40014800 	.word	0x40014800

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f8a8 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <USB_LP_IRQHandler+0x10>)
 8001156:	f000 fc8a 	bl	8001a6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000132c 	.word	0x2000132c

08001164 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <TIM7_IRQHandler+0x10>)
 800116a:	f002 ffd5 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000063c 	.word	0x2000063c

08001178 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <SystemInit+0x28>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <SystemInit+0x28>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SystemInit+0x28>)
 800118e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001192:	609a      	str	r2, [r3, #8]
#endif
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011aa:	490e      	ldr	r1, [pc, #56]	; (80011e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <LoopForever+0xe>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c0:	4c0b      	ldr	r4, [pc, #44]	; (80011f0 <LoopForever+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ce:	f7ff ffd3 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f008 f8f3 	bl	80093bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011d6:	f7ff f83f 	bl	8000258 <main>

080011da <LoopForever>:

LoopForever:
    b LoopForever
 80011da:	e7fe      	b.n	80011da <LoopForever>
  ldr   r0, =_estack
 80011dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80011e8:	080094a4 	.word	0x080094a4
  ldr r2, =_sbss
 80011ec:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80011f0:	20001620 	.word	0x20001620

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>

080011f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f939 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f80e 	bl	8001228 <HAL_InitTick>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	e001      	b.n	800121c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001218:	f7ff fd08 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800121c:	79fb      	ldrb	r3, [r7, #7]

}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_InitTick+0x68>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d022      	beq.n	8001282 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_InitTick+0x6c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_InitTick+0x68>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001248:	fbb1 f3f3 	udiv	r3, r1, r3
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f944 	bl	80014de <HAL_SYSTICK_Config>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10f      	bne.n	800127c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	d809      	bhi.n	8001276 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001262:	2200      	movs	r2, #0
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	f000 f910 	bl	800148e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_InitTick+0x70>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	e007      	b.n	8001286 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e004      	b.n	8001286 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e001      	b.n	8001286 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000008 	.word	0x20000008
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_IncTick+0x1c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_IncTick+0x20>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <HAL_IncTick+0x1c>)
 80012ac:	6013      	str	r3, [r2, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	20000688 	.word	0x20000688
 80012bc:	20000008 	.word	0x20000008

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000688 	.word	0x20000688

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff40 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff90 	bl	80013cc <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5f 	bl	8001378 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff33 	bl	800133c <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa4 	bl	8001434 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001506:	e15a      	b.n	80017be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 814c 	beq.w	80017b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d00b      	beq.n	8001540 <HAL_GPIO_Init+0x48>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001534:	2b11      	cmp	r3, #17
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b12      	cmp	r3, #18
 800153e:	d130      	bne.n	80015a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001576:	2201      	movs	r2, #1
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f003 0201 	and.w	r2, r3, #1
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0xea>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d123      	bne.n	800162a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	6939      	ldr	r1, [r7, #16]
 8001626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0203 	and.w	r2, r3, #3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80a6 	beq.w	80017b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166c:	4b5b      	ldr	r3, [pc, #364]	; (80017dc <HAL_GPIO_Init+0x2e4>)
 800166e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001670:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <HAL_GPIO_Init+0x2e4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6613      	str	r3, [r2, #96]	; 0x60
 8001678:	4b58      	ldr	r3, [pc, #352]	; (80017dc <HAL_GPIO_Init+0x2e4>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001684:	4a56      	ldr	r2, [pc, #344]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ae:	d01f      	beq.n	80016f0 <HAL_GPIO_Init+0x1f8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <HAL_GPIO_Init+0x2ec>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d019      	beq.n	80016ec <HAL_GPIO_Init+0x1f4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a4b      	ldr	r2, [pc, #300]	; (80017e8 <HAL_GPIO_Init+0x2f0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d013      	beq.n	80016e8 <HAL_GPIO_Init+0x1f0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <HAL_GPIO_Init+0x2f4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00d      	beq.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_GPIO_Init+0x2f8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d007      	beq.n	80016e0 <HAL_GPIO_Init+0x1e8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a48      	ldr	r2, [pc, #288]	; (80017f4 <HAL_GPIO_Init+0x2fc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_GPIO_Init+0x1e4>
 80016d8:	2305      	movs	r3, #5
 80016da:	e00a      	b.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016dc:	2306      	movs	r3, #6
 80016de:	e008      	b.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016e0:	2304      	movs	r3, #4
 80016e2:	e006      	b.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016e4:	2303      	movs	r3, #3
 80016e6:	e004      	b.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e002      	b.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016f0:	2300      	movs	r3, #0
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	f002 0203 	and.w	r2, r2, #3
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	4093      	lsls	r3, r2
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001702:	4937      	ldr	r1, [pc, #220]	; (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001710:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001734:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_GPIO_Init+0x300>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800175e:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_GPIO_Init+0x300>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_GPIO_Init+0x300>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_GPIO_Init+0x300>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f47f ae9d 	bne.w	8001508 <HAL_GPIO_Init+0x10>
  }
}
 80017ce:	bf00      	nop
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010000 	.word	0x40010000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	48000800 	.word	0x48000800
 80017ec:	48000c00 	.word	0x48000c00
 80017f0:	48001000 	.word	0x48001000
 80017f4:	48001400 	.word	0x48001400
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001818:	e002      	b.n	8001820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4013      	ands	r3, r2
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43d9      	mvns	r1, r3
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	400b      	ands	r3, r1
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	b08b      	sub	sp, #44	; 0x2c
 8001864:	af06      	add	r7, sp, #24
 8001866:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e0d7      	b.n	8001a22 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f007 faa8 	bl	8008ddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2203      	movs	r2, #3
 8001890:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fc04 	bl	80050a6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	e04c      	b.n	800193e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3301      	adds	r3, #1
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	b298      	uxth	r0, r3
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3336      	adds	r3, #54	; 0x36
 80018e2:	4602      	mov	r2, r0
 80018e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3303      	adds	r3, #3
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	3338      	adds	r3, #56	; 0x38
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	333c      	adds	r3, #60	; 0x3c
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3340      	adds	r3, #64	; 0x40
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	d3ad      	bcc.n	80018a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e044      	b.n	80019d8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019bc:	7bfa      	ldrb	r2, [r7, #15]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	440b      	add	r3, r1
 80019ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	3301      	adds	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3b5      	bcc.n	800194e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	687e      	ldr	r6, [r7, #4]
 80019ea:	466d      	mov	r5, sp
 80019ec:	f106 0410 	add.w	r4, r6, #16
 80019f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	602b      	str	r3, [r5, #0]
 80019f8:	1d33      	adds	r3, r6, #4
 80019fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fc:	6838      	ldr	r0, [r7, #0]
 80019fe:	f003 fb6d 	bl	80050dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d102      	bne.n	8001a20 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f001 fa5e 	bl	8002edc <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_PCD_Start+0x16>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e012      	b.n	8001a66 <HAL_PCD_Start+0x3c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 fb13 	bl	8005078 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 faff 	bl	800705a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fb04 	bl	8007088 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a8a:	d102      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fb5b 	bl	8002148 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 faf6 	bl	8007088 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa6:	d112      	bne.n	8001ace <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aba:	b292      	uxth	r2, r2
 8001abc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f007 fa06 	bl	8008ed2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f91e 	bl	8001d0a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f005 fad8 	bl	8007088 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ae2:	d10b      	bne.n	8001afc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001af6:	b292      	uxth	r2, r2
 8001af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f005 fac1 	bl	8007088 <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b10:	d10b      	bne.n	8001b2a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b24:	b292      	uxth	r2, r2
 8001b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f005 faaa 	bl	8007088 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3e:	d133      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0204 	bic.w	r2, r2, #4
 8001b52:	b292      	uxth	r2, r2
 8001b54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0208 	bic.w	r2, r2, #8
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b82:	2100      	movs	r1, #0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f007 fb99 	bl	80092bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f007 f9da 	bl	8008f44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 fa6b 	bl	8007088 <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bbc:	d126      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0208 	orr.w	r2, r2, #8
 8001bd0:	b292      	uxth	r2, r2
 8001bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0204 	orr.w	r2, r2, #4
 8001c00:	b292      	uxth	r2, r2
 8001c02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f007 f982 	bl	8008f10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fa39 	bl	8007088 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	2b80      	cmp	r3, #128	; 0x80
 8001c1e:	d13f      	bne.n	8001ca0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c32:	b292      	uxth	r2, r2
 8001c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d12b      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	b292      	uxth	r2, r2
 8001c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0208 	orr.w	r2, r2, #8
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c90:	2101      	movs	r1, #1
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f007 fb12 	bl	80092bc <HAL_PCDEx_LPM_Callback>
 8001c98:	e002      	b.n	8001ca0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f007 f938 	bl	8008f10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f005 f9ef 	bl	8007088 <USB_ReadInterrupts>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb4:	d10e      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cc8:	b292      	uxth	r2, r2
 8001cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f007 f8f1 	bl	8008eb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f005 f9d5 	bl	8007088 <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce8:	d10b      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_SetAddress+0x1a>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e013      	b.n	8001d4c <HAL_PCD_SetAddress+0x42>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f005 f978 	bl	8007032 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	70fb      	strb	r3, [r7, #3]
 8001d66:	460b      	mov	r3, r1
 8001d68:	803b      	strh	r3, [r7, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da0e      	bge.n	8001d98 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	705a      	strb	r2, [r3, #1]
 8001d96:	e00e      	b.n	8001db6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 0207 	and.w	r2, r3, #7
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dc2:	883a      	ldrh	r2, [r7, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	78ba      	ldrb	r2, [r7, #2]
 8001dcc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001de0:	78bb      	ldrb	r3, [r7, #2]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d102      	bne.n	8001dec <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_PCD_EP_Open+0xa6>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e00e      	b.n	8001e18 <HAL_PCD_EP_Open+0xc4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 f989 	bl	8005120 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e16:	7afb      	ldrb	r3, [r7, #11]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da0e      	bge.n	8001e52 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	705a      	strb	r2, [r3, #1]
 8001e50:	e00e      	b.n	8001e70 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 0207 	and.w	r2, r3, #7
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_EP_Close+0x6a>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e00e      	b.n	8001ea8 <HAL_PCD_EP_Close+0x88>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fcaf 	bl	80057fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
 8001ec2:	f003 0207 	and.w	r2, r3, #7
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2200      	movs	r2, #0
 8001eee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6979      	ldr	r1, [r7, #20]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fe62 	bl	8005bd6 <USB_EPStartXfer>
 8001f12:	e005      	b.n	8001f20 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6979      	ldr	r1, [r7, #20]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fe5b 	bl	8005bd6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 0207 	and.w	r2, r3, #7
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f4c:	681b      	ldr	r3, [r3, #0]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	460b      	mov	r3, r1
 8001f68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fe07 	bl	8005bd6 <USB_EPStartXfer>
 8001fc8:	e005      	b.n	8001fd6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fe00 	bl	8005bd6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d901      	bls.n	8001ffe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e04c      	b.n	8002098 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da0e      	bge.n	8002024 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	705a      	strb	r2, [r3, #1]
 8002022:	e00c      	b.n	800203e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_PCD_EP_SetStall+0x7e>
 800205a:	2302      	movs	r3, #2
 800205c:	e01c      	b.n	8002098 <HAL_PCD_EP_SetStall+0xb8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	4618      	mov	r0, r3
 800206e:	f004 fee1 	bl	8006e34 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f005 f80d 	bl	80070a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 020f 	and.w	r2, r3, #15
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d901      	bls.n	80020be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e040      	b.n	8002140 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da0e      	bge.n	80020e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	705a      	strb	r2, [r3, #1]
 80020e2:	e00e      	b.n	8002102 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 0207 	and.w	r2, r3, #7
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_PCD_EP_ClrStall+0x82>
 800211e:	2302      	movs	r3, #2
 8002120:	e00e      	b.n	8002140 <HAL_PCD_EP_ClrStall+0xa0>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68f9      	ldr	r1, [r7, #12]
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fed0 	bl	8006ed6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	; 0x38
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002150:	e2d1      	b.n	80026f6 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800215a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800215c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002168:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 8152 	bne.w	8002416 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d150      	bne.n	800221e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218c:	81fb      	strh	r3, [r7, #14]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219c:	b29b      	uxth	r3, r3
 800219e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3328      	adds	r3, #40	; 0x28
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	441a      	add	r2, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021dc:	2100      	movs	r1, #0
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f006 fe4f 	bl	8008e82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8282 	beq.w	80026f6 <PCD_EP_ISR_Handler+0x5ae>
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 827d 	bne.w	80026f6 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002208:	b2da      	uxtb	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b292      	uxth	r2, r2
 8002210:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800221c:	e26b      	b.n	80026f6 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800222e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002234:	2b00      	cmp	r3, #0
 8002236:	d032      	beq.n	800229e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002240:	b29b      	uxth	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002272:	b29b      	uxth	r3, r3
 8002274:	f004 ff65 	bl	8007142 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29a      	uxth	r2, r3
 8002280:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002284:	4013      	ands	r3, r2
 8002286:	823b      	strh	r3, [r7, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	8a3a      	ldrh	r2, [r7, #16]
 800228e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f006 fdc6 	bl	8008e28 <HAL_PCD_SetupStageCallback>
 800229c:	e22b      	b.n	80026f6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800229e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f280 8227 	bge.w	80026f6 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022b4:	4013      	ands	r3, r2
 80022b6:	83bb      	strh	r3, [r7, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	8bba      	ldrh	r2, [r7, #28]
 80022be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022c2:	b292      	uxth	r2, r2
 80022c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <PCD_EP_ISR_Handler+0x1e2>
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	6959      	ldr	r1, [r3, #20]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800230e:	b29b      	uxth	r3, r3
 8002310:	f004 ff17 	bl	8007142 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	441a      	add	r2, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002322:	2100      	movs	r1, #0
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 fd91 	bl	8008e4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d112      	bne.n	8002378 <PCD_EP_ISR_Handler+0x230>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800235c:	b29a      	uxth	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002370:	b29a      	uxth	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	801a      	strh	r2, [r3, #0]
 8002376:	e02f      	b.n	80023d8 <PCD_EP_ISR_Handler+0x290>
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b3e      	cmp	r3, #62	; 0x3e
 800237e:	d813      	bhi.n	80023a8 <PCD_EP_ISR_Handler+0x260>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <PCD_EP_ISR_Handler+0x252>
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	3301      	adds	r3, #1
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	b29b      	uxth	r3, r3
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e017      	b.n	80023d8 <PCD_EP_ISR_Handler+0x290>
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <PCD_EP_ISR_Handler+0x27a>
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	3b01      	subs	r3, #1
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	029b      	lsls	r3, r3, #10
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e8:	827b      	strh	r3, [r7, #18]
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023f0:	827b      	strh	r3, [r7, #18]
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023f8:	827b      	strh	r3, [r7, #18]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	8a7b      	ldrh	r3, [r7, #18]
 8002400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002410:	b29b      	uxth	r3, r3
 8002412:	8013      	strh	r3, [r2, #0]
 8002414:	e16f      	b.n	80026f6 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002428:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800242c:	2b00      	cmp	r3, #0
 800242e:	f280 80e4 	bge.w	80025fa <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002448:	4013      	ands	r3, r2
 800244a:	853b      	strh	r3, [r7, #40]	; 0x28
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800245c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002460:	b292      	uxth	r2, r2
 8002462:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002464:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	7b1b      	ldrb	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d120      	bne.n	80024c4 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4413      	add	r3, r2
 800249c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8083 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	88da      	ldrh	r2, [r3, #6]
 80024bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024be:	f004 fe40 	bl	8007142 <USB_ReadPMA>
 80024c2:	e078      	b.n	80025b6 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d108      	bne.n	80024de <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ce:	461a      	mov	r2, r3
 80024d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f91d 	bl	8002712 <HAL_PCD_EP_DB_Receive>
 80024d8:	4603      	mov	r3, r0
 80024da:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024dc:	e06b      	b.n	80025b6 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f8:	847b      	strh	r3, [r7, #34]	; 0x22
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	441a      	add	r2, r3
 8002508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800250a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800250e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800251a:	b29b      	uxth	r3, r3
 800251c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01f      	beq.n	8002578 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4413      	add	r3, r2
 8002552:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800255e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002560:	2b00      	cmp	r3, #0
 8002562:	d028      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	6959      	ldr	r1, [r3, #20]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	891a      	ldrh	r2, [r3, #8]
 8002570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002572:	f004 fde6 	bl	8007142 <USB_ReadPMA>
 8002576:	e01e      	b.n	80025b6 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002580:	b29b      	uxth	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4413      	add	r3, r2
 8002592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800259e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	6959      	ldr	r1, [r3, #20]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	895a      	ldrh	r2, [r3, #10]
 80025b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b2:	f004 fdc6 	bl	8007142 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025bc:	441a      	add	r2, r3
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c8:	441a      	add	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <PCD_EP_ISR_Handler+0x498>
 80025d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d206      	bcs.n	80025ee <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f006 fc30 	bl	8008e4c <HAL_PCD_DataOutStageCallback>
 80025ec:	e005      	b.n	80025fa <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 faee 	bl	8005bd6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d078      	beq.n	80026f6 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002632:	843b      	strh	r3, [r7, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	8c3b      	ldrh	r3, [r7, #32]
 8002644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264c:	b29b      	uxth	r3, r3
 800264e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	78db      	ldrb	r3, [r3, #3]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d108      	bne.n	800266a <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800265c:	2b02      	cmp	r3, #2
 800265e:	d144      	bne.n	80026ea <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d13f      	bne.n	80026ea <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4413      	add	r3, r2
 8002684:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	8bfb      	ldrh	r3, [r7, #30]
 8002696:	429a      	cmp	r2, r3
 8002698:	d906      	bls.n	80026a8 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	8bfb      	ldrh	r3, [r7, #30]
 80026a0:	1ad2      	subs	r2, r2, r3
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	619a      	str	r2, [r3, #24]
 80026a6:	e002      	b.n	80026ae <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f006 fbe0 	bl	8008e82 <HAL_PCD_DataInStageCallback>
 80026c2:	e018      	b.n	80026f6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	8bfb      	ldrh	r3, [r7, #30]
 80026ca:	441a      	add	r2, r3
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	8bfb      	ldrh	r3, [r7, #30]
 80026d6:	441a      	add	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fa77 	bl	8005bd6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026e8:	e005      	b.n	80026f6 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ec:	461a      	mov	r2, r3
 80026ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f917 	bl	8002924 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b21b      	sxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	f6ff ad25 	blt.w	8002152 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3738      	adds	r7, #56	; 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b088      	sub	sp, #32
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d07c      	beq.n	8002824 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002732:	b29b      	uxth	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	4413      	add	r3, r2
 8002744:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	8b7b      	ldrh	r3, [r7, #26]
 8002756:	429a      	cmp	r2, r3
 8002758:	d306      	bcc.n	8002768 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	8b7b      	ldrh	r3, [r7, #26]
 8002760:	1ad2      	subs	r2, r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	619a      	str	r2, [r3, #24]
 8002766:	e002      	b.n	800276e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d123      	bne.n	80027be <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800278c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002790:	833b      	strh	r3, [r7, #24]
 8002792:	8b3b      	ldrh	r3, [r7, #24]
 8002794:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002798:	833b      	strh	r3, [r7, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	441a      	add	r2, r3
 80027a8:	8b3b      	ldrh	r3, [r7, #24]
 80027aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01f      	beq.n	8002808 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	82fb      	strh	r3, [r7, #22]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	8afb      	ldrh	r3, [r7, #22]
 80027f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002800:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002804:	b29b      	uxth	r3, r3
 8002806:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002808:	8b7b      	ldrh	r3, [r7, #26]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8085 	beq.w	800291a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6959      	ldr	r1, [r3, #20]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	891a      	ldrh	r2, [r3, #8]
 800281c:	8b7b      	ldrh	r3, [r7, #26]
 800281e:	f004 fc90 	bl	8007142 <USB_ReadPMA>
 8002822:	e07a      	b.n	800291a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282c:	b29b      	uxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	8b7b      	ldrh	r3, [r7, #26]
 8002850:	429a      	cmp	r2, r3
 8002852:	d306      	bcc.n	8002862 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	8b7b      	ldrh	r3, [r7, #26]
 800285a:	1ad2      	subs	r2, r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	619a      	str	r2, [r3, #24]
 8002860:	e002      	b.n	8002868 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d123      	bne.n	80028b8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288a:	83fb      	strh	r3, [r7, #30]
 800288c:	8bfb      	ldrh	r3, [r7, #30]
 800288e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002892:	83fb      	strh	r3, [r7, #30]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	441a      	add	r2, r3
 80028a2:	8bfb      	ldrh	r3, [r7, #30]
 80028a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11f      	bne.n	8002902 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	83bb      	strh	r3, [r7, #28]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	441a      	add	r2, r3
 80028ec:	8bbb      	ldrh	r3, [r7, #28]
 80028ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028fe:	b29b      	uxth	r3, r3
 8002900:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002902:	8b7b      	ldrh	r3, [r7, #26]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6959      	ldr	r1, [r3, #20]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	895a      	ldrh	r2, [r3, #10]
 8002914:	8b7b      	ldrh	r3, [r7, #26]
 8002916:	f004 fc14 	bl	8007142 <USB_ReadPMA>
    }
  }

  return count;
 800291a:	8b7b      	ldrh	r3, [r7, #26]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b092      	sub	sp, #72	; 0x48
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8130 	beq.w	8002b9e <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002946:	b29b      	uxth	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	4413      	add	r3, r2
 8002958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002962:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800296a:	429a      	cmp	r2, r3
 800296c:	d906      	bls.n	800297c <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	e002      	b.n	8002982 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12c      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f006 fa76 	bl	8008e82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 822d 	beq.w	8002dfc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029bc:	827b      	strh	r3, [r7, #18]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	441a      	add	r2, r3
 80029cc:	8a7b      	ldrh	r3, [r7, #18]
 80029ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029de:	b29b      	uxth	r3, r3
 80029e0:	8013      	strh	r3, [r2, #0]
 80029e2:	e20b      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01f      	beq.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 81e1 	bne.w	8002dfc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a40:	441a      	add	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d309      	bcc.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	621a      	str	r2, [r3, #32]
 8002a70:	e014      	b.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a86:	e009      	b.n	8002a9c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d155      	bne.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00da      	lsls	r2, r3, #3
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d112      	bne.n	8002af8 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	e047      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x264>
 8002af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afa:	2b3e      	cmp	r3, #62	; 0x3e
 8002afc:	d811      	bhi.n	8002b22 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	3301      	adds	r3, #1
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e032      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x264>
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x214>
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	e01b      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x264>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d117      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x264>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	00da      	lsls	r2, r3, #3
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6959      	ldr	r1, [r3, #20]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	891a      	ldrh	r2, [r3, #8]
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f004 fa92 	bl	80070c0 <USB_WritePMA>
 8002b9c:	e12e      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d306      	bcc.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bd4:	1ad2      	subs	r2, r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	619a      	str	r2, [r3, #24]
 8002bda:	e002      	b.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d12c      	bne.n	8002c44 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f006 f946 	bl	8008e82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 80fd 	bne.w	8002dfc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]
 8002c42:	e0db      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11f      	bne.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	441a      	add	r2, r3
 8002c78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	f040 80b1 	bne.w	8002dfc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cac:	441a      	add	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d309      	bcc.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	1ad2      	subs	r2, r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	621a      	str	r2, [r3, #32]
 8002cd0:	e014      	b.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002cda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cdc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ce6:	e009      	b.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d155      	bne.n	8002db6 <HAL_PCD_EP_DB_Transmit+0x492>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1e:	4413      	add	r3, r2
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	00da      	lsls	r2, r3, #3
 8002d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d30:	643b      	str	r3, [r7, #64]	; 0x40
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d112      	bne.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x43a>
 8002d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d46:	801a      	strh	r2, [r3, #0]
 8002d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	e044      	b.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	2b3e      	cmp	r3, #62	; 0x3e
 8002d62:	d811      	bhi.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x464>
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_PCD_EP_DB_Transmit+0x456>
 8002d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d76:	3301      	adds	r3, #1
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	e02f      	b.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x47a>
 8002d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	e018      	b.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	785b      	ldrb	r3, [r3, #1]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d114      	bne.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	4413      	add	r3, r2
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00da      	lsls	r2, r3, #3
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	4413      	add	r3, r2
 8002dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6959      	ldr	r1, [r3, #20]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	895a      	ldrh	r2, [r3, #10]
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f004 f962 	bl	80070c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e16:	823b      	strh	r3, [r7, #16]
 8002e18:	8a3b      	ldrh	r3, [r7, #16]
 8002e1a:	f083 0310 	eor.w	r3, r3, #16
 8002e1e:	823b      	strh	r3, [r7, #16]
 8002e20:	8a3b      	ldrh	r3, [r7, #16]
 8002e22:	f083 0320 	eor.w	r3, r3, #32
 8002e26:	823b      	strh	r3, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	8a3b      	ldrh	r3, [r7, #16]
 8002e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3748      	adds	r7, #72	; 0x48
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	817b      	strh	r3, [r7, #10]
 8002e64:	4613      	mov	r3, r2
 8002e66:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e009      	b.n	8002ea0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e8c:	897a      	ldrh	r2, [r7, #10]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d107      	bne.n	8002eb6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	80da      	strh	r2, [r3, #6]
 8002eb4:	e00b      	b.n	8002ece <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d141      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f3e:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d131      	bne.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	4a46      	ldr	r2, [pc, #280]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f64:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6c:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2232      	movs	r2, #50	; 0x32
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9b      	lsrs	r3, r3, #18
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f82:	e002      	b.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d102      	bne.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f2      	bne.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9e:	4b33      	ldr	r3, [pc, #204]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d158      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e057      	b.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb0:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb6:	4a2d      	ldr	r2, [pc, #180]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fc0:	e04d      	b.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d141      	bne.n	800304e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fca:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d131      	bne.n	800303c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fde:	4a23      	ldr	r2, [pc, #140]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ff0:	4a1e      	ldr	r2, [pc, #120]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2232      	movs	r2, #50	; 0x32
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	0c9b      	lsrs	r3, r3, #18
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800300e:	e002      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3b01      	subs	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d102      	bne.n	800302a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f2      	bne.n	8003010 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003036:	d112      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e011      	b.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800304c:	e007      	b.n	800305e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40007000 	.word	0x40007000
 8003070:	20000000 	.word	0x20000000
 8003074:	431bde83 	.word	0x431bde83

08003078 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003086:	6093      	str	r3, [r2, #8]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40007000 	.word	0x40007000

08003098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e308      	b.n	80036bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	4ba3      	ldr	r3, [pc, #652]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c0:	4ba0      	ldr	r3, [pc, #640]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b0c      	cmp	r3, #12
 80030ce:	d102      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3e>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b99      	ldr	r3, [pc, #612]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e2e3      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b91      	ldr	r3, [pc, #580]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a90      	ldr	r2, [pc, #576]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a8a      	ldr	r2, [pc, #552]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a87      	ldr	r2, [pc, #540]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b84      	ldr	r3, [pc, #528]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a83      	ldr	r2, [pc, #524]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b81      	ldr	r3, [pc, #516]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a80      	ldr	r2, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f8b6 	bl	80012c0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe f8b2 	bl	80012c0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e2a8      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316a:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe f8a2 	bl	80012c0 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe f89e 	bl	80012c0 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e294      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003192:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d075      	beq.n	800329a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b8:	4b62      	ldr	r3, [pc, #392]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_OscConfig+0x136>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_OscConfig+0x13c>
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11f      	bne.n	8003214 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d4:	4b5b      	ldr	r3, [pc, #364]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x154>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e267      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b55      	ldr	r3, [pc, #340]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	4952      	ldr	r1, [pc, #328]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003200:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_RCC_OscConfig+0x2b0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe f80f 	bl	8001228 <HAL_InitTick>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d043      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e253      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b49      	ldr	r3, [pc, #292]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a48      	ldr	r2, [pc, #288]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe f84a 	bl	80012c0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe f846 	bl	80012c0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e23c      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003242:	4b40      	ldr	r3, [pc, #256]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	061b      	lsls	r3, r3, #24
 800325c:	4939      	ldr	r1, [pc, #228]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
 8003262:	e01a      	b.n	800329a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003264:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a36      	ldr	r2, [pc, #216]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe f826 	bl	80012c0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7fe f822 	bl	80012c0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e218      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800328a:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1e0>
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03c      	beq.n	8003320 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b4:	4a23      	ldr	r2, [pc, #140]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fd ffff 	bl	80012c0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fd fffb 	bl	80012c0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1f1      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ef      	beq.n	80032c6 <HAL_RCC_OscConfig+0x22e>
 80032e6:	e01b      	b.n	8003320 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ee:	4a15      	ldr	r2, [pc, #84]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fd ffe2 	bl	80012c0 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fd ffde 	bl	80012c0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1d4      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ef      	bne.n	8003300 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80ab 	beq.w	8003484 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003332:	4b04      	ldr	r3, [pc, #16]	; (8003344 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_RCC_OscConfig+0x2b4>
 800333e:	2301      	movs	r3, #1
 8003340:	e005      	b.n	800334e <HAL_RCC_OscConfig+0x2b6>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	20000004 	.word	0x20000004
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	4baf      	ldr	r3, [pc, #700]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	4aae      	ldr	r2, [pc, #696]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
 800335e:	4bac      	ldr	r3, [pc, #688]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336e:	4ba9      	ldr	r3, [pc, #676]	; (8003614 <HAL_RCC_OscConfig+0x57c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337a:	4ba6      	ldr	r3, [pc, #664]	; (8003614 <HAL_RCC_OscConfig+0x57c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4aa5      	ldr	r2, [pc, #660]	; (8003614 <HAL_RCC_OscConfig+0x57c>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fd ff9b 	bl	80012c0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fd ff97 	bl	80012c0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e18d      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	4b9c      	ldr	r3, [pc, #624]	; (8003614 <HAL_RCC_OscConfig+0x57c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d108      	bne.n	80033c6 <HAL_RCC_OscConfig+0x32e>
 80033b4:	4b96      	ldr	r3, [pc, #600]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	4a95      	ldr	r2, [pc, #596]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c4:	e024      	b.n	8003410 <HAL_RCC_OscConfig+0x378>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d110      	bne.n	80033f0 <HAL_RCC_OscConfig+0x358>
 80033ce:	4b90      	ldr	r3, [pc, #576]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	4a8e      	ldr	r2, [pc, #568]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033de:	4b8c      	ldr	r3, [pc, #560]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	4a8a      	ldr	r2, [pc, #552]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x378>
 80033f0:	4b87      	ldr	r3, [pc, #540]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a86      	ldr	r2, [pc, #536]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003400:	4b83      	ldr	r3, [pc, #524]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a82      	ldr	r2, [pc, #520]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d016      	beq.n	8003446 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fd ff52 	bl	80012c0 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fd ff4e 	bl	80012c0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e142      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ed      	beq.n	8003420 <HAL_RCC_OscConfig+0x388>
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fd ff3b 	bl	80012c0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fd ff37 	bl	80012c0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e12b      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003464:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ed      	bne.n	800344e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b65      	ldr	r3, [pc, #404]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4a64      	ldr	r2, [pc, #400]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03c      	beq.n	800350a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003498:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349e:	4a5c      	ldr	r2, [pc, #368]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fd ff0a 	bl	80012c0 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b0:	f7fd ff06 	bl	80012c0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0fc      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034c2:	4b53      	ldr	r3, [pc, #332]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <HAL_RCC_OscConfig+0x418>
 80034d0:	e01b      	b.n	800350a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034d2:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d8:	4a4d      	ldr	r2, [pc, #308]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fd feed 	bl	80012c0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ea:	f7fd fee9 	bl	80012c0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0df      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034fc:	4b44      	ldr	r3, [pc, #272]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80034fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ef      	bne.n	80034ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80d3 	beq.w	80036ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003514:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b0c      	cmp	r3, #12
 800351e:	f000 808d 	beq.w	800363c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d15a      	bne.n	80035e0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b39      	ldr	r3, [pc, #228]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a38      	ldr	r2, [pc, #224]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd fec3 	bl	80012c0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd febf 	bl	80012c0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0b5      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003550:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800355c:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_OscConfig+0x580>)
 8003562:	4013      	ands	r3, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6a11      	ldr	r1, [r2, #32]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800356c:	3a01      	subs	r2, #1
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003576:	0212      	lsls	r2, r2, #8
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800357e:	0852      	lsrs	r2, r2, #1
 8003580:	3a01      	subs	r2, #1
 8003582:	0552      	lsls	r2, r2, #21
 8003584:	4311      	orrs	r1, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800358a:	0852      	lsrs	r2, r2, #1
 800358c:	3a01      	subs	r2, #1
 800358e:	0652      	lsls	r2, r2, #25
 8003590:	4311      	orrs	r1, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003596:	06d2      	lsls	r2, r2, #27
 8003598:	430a      	orrs	r2, r1
 800359a:	491d      	ldr	r1, [pc, #116]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 800359c:	4313      	orrs	r3, r2
 800359e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035ac:	4b18      	ldr	r3, [pc, #96]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd fe82 	bl	80012c0 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fd fe7e 	bl	80012c0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e074      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x528>
 80035de:	e06c      	b.n	80036ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a07      	ldr	r2, [pc, #28]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035f2:	f023 0303 	bic.w	r3, r3, #3
 80035f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_RCC_OscConfig+0x578>)
 80035fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003606:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fd fe5a 	bl	80012c0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	e00e      	b.n	800362e <HAL_RCC_OscConfig+0x596>
 8003610:	40021000 	.word	0x40021000
 8003614:	40007000 	.word	0x40007000
 8003618:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fd fe50 	bl	80012c0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e046      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362e:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_RCC_OscConfig+0x62c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x584>
 800363a:	e03e      	b.n	80036ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e039      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_RCC_OscConfig+0x62c>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0203 	and.w	r2, r3, #3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	429a      	cmp	r2, r3
 800365a:	d12c      	bne.n	80036b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	3b01      	subs	r3, #1
 8003668:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d123      	bne.n	80036b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d11b      	bne.n	80036b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d113      	bne.n	80036b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	3b01      	subs	r3, #1
 80036b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e11e      	b.n	800391e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b91      	ldr	r3, [pc, #580]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b8e      	ldr	r3, [pc, #568]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 020f 	bic.w	r2, r3, #15
 80036f6:	498c      	ldr	r1, [pc, #560]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b8a      	ldr	r3, [pc, #552]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e106      	b.n	800391e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d073      	beq.n	8003804 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d129      	bne.n	8003778 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003724:	4b81      	ldr	r3, [pc, #516]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0f4      	b.n	800391e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003734:	f000 f966 	bl	8003a04 <RCC_GetSysClockFreqFromPLLSource>
 8003738:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_RCC_ClockConfig+0x268>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d93f      	bls.n	80037c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003742:	4b7a      	ldr	r3, [pc, #488]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003756:	2b00      	cmp	r3, #0
 8003758:	d033      	beq.n	80037c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800375e:	2b00      	cmp	r3, #0
 8003760:	d12f      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003762:	4b72      	ldr	r3, [pc, #456]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376a:	4a70      	ldr	r2, [pc, #448]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e024      	b.n	80037c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d107      	bne.n	8003790 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003780:	4b6a      	ldr	r3, [pc, #424]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0c6      	b.n	800391e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003790:	4b66      	ldr	r3, [pc, #408]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0be      	b.n	800391e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037a0:	f000 f8ce 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4a61      	ldr	r2, [pc, #388]	; (8003930 <HAL_RCC_ClockConfig+0x268>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d909      	bls.n	80037c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ae:	4b5f      	ldr	r3, [pc, #380]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b6:	4a5d      	ldr	r2, [pc, #372]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80037b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b5a      	ldr	r3, [pc, #360]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4957      	ldr	r1, [pc, #348]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fd fd74 	bl	80012c0 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fd fd70 	bl	80012c0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e095      	b.n	800391e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b4e      	ldr	r3, [pc, #312]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d023      	beq.n	8003858 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800381c:	4b43      	ldr	r3, [pc, #268]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a42      	ldr	r2, [pc, #264]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003826:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003834:	4b3d      	ldr	r3, [pc, #244]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800383c:	4a3b      	ldr	r2, [pc, #236]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 800383e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003842:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4936      	ldr	r1, [pc, #216]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
 8003856:	e008      	b.n	800386a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d105      	bne.n	800386a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800385e:	4b33      	ldr	r3, [pc, #204]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4a32      	ldr	r2, [pc, #200]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 8003864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003868:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800386a:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d21d      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 020f 	bic.w	r2, r3, #15
 8003880:	4929      	ldr	r1, [pc, #164]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003888:	f7fd fd1a 	bl	80012c0 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fd fd16 	bl	80012c0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e03b      	b.n	800391e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1ed      	bne.n	8003890 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4917      	ldr	r1, [pc, #92]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	490f      	ldr	r1, [pc, #60]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f2:	f000 f825 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038f6:	4601      	mov	r1, r0
 80038f8:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_RCC_ClockConfig+0x264>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_RCC_ClockConfig+0x26c>)
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	fa21 f303 	lsr.w	r3, r1, r3
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x270>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x274>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd fc86 	bl	8001228 <HAL_InitTick>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
 8003930:	04c4b400 	.word	0x04c4b400
 8003934:	0800948c 	.word	0x0800948c
 8003938:	20000000 	.word	0x20000000
 800393c:	20000004 	.word	0x20000004

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b04      	cmp	r3, #4
 8003950:	d102      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e047      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d102      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003964:	4b26      	ldr	r3, [pc, #152]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	e03e      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d136      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	3301      	adds	r3, #1
 800398c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d10c      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003994:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800399e:	68d2      	ldr	r2, [r2, #12]
 80039a0:	0a12      	lsrs	r2, r2, #8
 80039a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	617b      	str	r3, [r7, #20]
      break;
 80039ac:	e00c      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b8:	68d2      	ldr	r2, [r2, #12]
 80039ba:	0a12      	lsrs	r2, r2, #8
 80039bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]
      break;
 80039c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	0e5b      	lsrs	r3, r3, #25
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	3301      	adds	r3, #1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e001      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039e8:	693b      	ldr	r3, [r7, #16]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d10c      	bne.n	8003a42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a32:	68d2      	ldr	r2, [r2, #12]
 8003a34:	0a12      	lsrs	r2, r2, #8
 8003a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
    break;
 8003a40:	e00c      	b.n	8003a5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a4c:	68d2      	ldr	r2, [r2, #12]
 8003a4e:	0a12      	lsrs	r2, r2, #8
 8003a50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]
    break;
 8003a5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0e5b      	lsrs	r3, r3, #25
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a76:	687b      	ldr	r3, [r7, #4]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	00f42400 	.word	0x00f42400

08003a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8098 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b40      	ldr	r3, [pc, #256]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	4a3f      	ldr	r2, [pc, #252]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aca:	4b3d      	ldr	r3, [pc, #244]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ada:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a39      	ldr	r2, [pc, #228]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae6:	f7fd fbeb 	bl	80012c0 <HAL_GetTick>
 8003aea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aec:	e009      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fd fbe7 	bl	80012c0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d902      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	74fb      	strb	r3, [r7, #19]
        break;
 8003b00:	e005      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b02:	4b30      	ldr	r3, [pc, #192]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ef      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d159      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b14:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01e      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d019      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b30:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b3c:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b42:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b5c:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fba7 	bl	80012c0 <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b74:	e00b      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fd fba3 	bl	80012c0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d902      	bls.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	74fb      	strb	r3, [r7, #19]
            break;
 8003b8c:	e006      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ec      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	4903      	ldr	r1, [pc, #12]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bb8:	e008      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bba:	7cfb      	ldrb	r3, [r7, #19]
 8003bbc:	74bb      	strb	r3, [r7, #18]
 8003bbe:	e005      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bcc:	7c7b      	ldrb	r3, [r7, #17]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4aa5      	ldr	r2, [pc, #660]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bea:	4ba0      	ldr	r3, [pc, #640]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f023 0203 	bic.w	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	499c      	ldr	r1, [pc, #624]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0c:	4b97      	ldr	r3, [pc, #604]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f023 020c 	bic.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	4994      	ldr	r1, [pc, #592]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2e:	4b8f      	ldr	r3, [pc, #572]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	498b      	ldr	r1, [pc, #556]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c50:	4b86      	ldr	r3, [pc, #536]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	4983      	ldr	r1, [pc, #524]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c72:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	497a      	ldr	r1, [pc, #488]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c94:	4b75      	ldr	r3, [pc, #468]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	4972      	ldr	r1, [pc, #456]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4969      	ldr	r1, [pc, #420]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cd8:	4b64      	ldr	r3, [pc, #400]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4961      	ldr	r1, [pc, #388]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	4958      	ldr	r1, [pc, #352]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	4950      	ldr	r1, [pc, #320]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a4a      	ldr	r2, [pc, #296]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d54:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	4942      	ldr	r1, [pc, #264]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d74:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d015      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d8c:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4934      	ldr	r1, [pc, #208]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003daa:	d105      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dac:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc4:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	4926      	ldr	r1, [pc, #152]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de2:	d105      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de4:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d015      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	4918      	ldr	r1, [pc, #96]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e34:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	490a      	ldr	r1, [pc, #40]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e52:	d105      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e60:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000

08003e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e049      	b.n	8003f16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fff6 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f000 fbf4 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e049      	b.n	8003fc4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fc fe95 	bl	8000c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 fb9d 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e097      	b.n	8004110 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fc fe85 	bl	8000d04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004010:	f023 0307 	bic.w	r3, r3, #7
 8004014:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f000 fb3b 	bl	800469c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	4313      	orrs	r3, r2
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800406c:	f023 030c 	bic.w	r3, r3, #12
 8004070:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800407c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	4313      	orrs	r3, r2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	011a      	lsls	r2, r3, #4
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	031b      	lsls	r3, r3, #12
 800409c:	4313      	orrs	r3, r2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4313      	orrs	r3, r2
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0202 	mvn.w	r2, #2
 8004144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fa80 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fa72 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fa83 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b04      	cmp	r3, #4
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0204 	mvn.w	r2, #4
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa56 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fa48 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fa59 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d122      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d11b      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0208 	mvn.w	r2, #8
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2204      	movs	r2, #4
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa2c 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa1e 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa2f 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d122      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b10      	cmp	r3, #16
 8004236:	d11b      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa02 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9f4 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa05 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10e      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d107      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0201 	mvn.w	r2, #1
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9ce 	bl	8004638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d10e      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d107      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fe9c 	bl	8005000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d6:	d10e      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d107      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fe8f 	bl	8005014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d10e      	bne.n	8004322 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d107      	bne.n	8004322 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f9b3 	bl	8004688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b20      	cmp	r3, #32
 800432e:	d10e      	bne.n	800434e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b20      	cmp	r3, #32
 800433c:	d107      	bne.n	800434e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0220 	mvn.w	r2, #32
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fe4f 	bl	8004fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435c:	d10f      	bne.n	800437e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436c:	d107      	bne.n	800437e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fe55 	bl	8005028 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800438c:	d10f      	bne.n	80043ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439c:	d107      	bne.n	80043ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80043a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fe47 	bl	800503c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043bc:	d10f      	bne.n	80043de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043cc:	d107      	bne.n	80043de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80043d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fe39 	bl	8005050 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043ec:	d10f      	bne.n	800440e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fc:	d107      	bne.n	800440e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fe2b 	bl	8005064 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800442e:	2302      	movs	r3, #2
 8004430:	e0fd      	b.n	800462e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b14      	cmp	r3, #20
 800443e:	f200 80f0 	bhi.w	8004622 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	0800449d 	.word	0x0800449d
 800444c:	08004623 	.word	0x08004623
 8004450:	08004623 	.word	0x08004623
 8004454:	08004623 	.word	0x08004623
 8004458:	080044dd 	.word	0x080044dd
 800445c:	08004623 	.word	0x08004623
 8004460:	08004623 	.word	0x08004623
 8004464:	08004623 	.word	0x08004623
 8004468:	0800451f 	.word	0x0800451f
 800446c:	08004623 	.word	0x08004623
 8004470:	08004623 	.word	0x08004623
 8004474:	08004623 	.word	0x08004623
 8004478:	0800455f 	.word	0x0800455f
 800447c:	08004623 	.word	0x08004623
 8004480:	08004623 	.word	0x08004623
 8004484:	08004623 	.word	0x08004623
 8004488:	080045a1 	.word	0x080045a1
 800448c:	08004623 	.word	0x08004623
 8004490:	08004623 	.word	0x08004623
 8004494:	08004623 	.word	0x08004623
 8004498:	080045e1 	.word	0x080045e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f98a 	bl	80047bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	619a      	str	r2, [r3, #24]
      break;
 80044da:	e0a3      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f9fa 	bl	80048dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	619a      	str	r2, [r3, #24]
      break;
 800451c:	e082      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fa63 	bl	80049f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0208 	orr.w	r2, r2, #8
 8004538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0204 	bic.w	r2, r2, #4
 8004548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69d9      	ldr	r1, [r3, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	61da      	str	r2, [r3, #28]
      break;
 800455c:	e062      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 facb 	bl	8004b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	021a      	lsls	r2, r3, #8
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	61da      	str	r2, [r3, #28]
      break;
 800459e:	e041      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fb34 	bl	8004c14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80045de:	e021      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fb78 	bl	8004cdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	021a      	lsls	r2, r3, #8
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004620:	e000      	b.n	8004624 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004622:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop

08004638 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3c      	ldr	r2, [pc, #240]	; (80047a0 <TIM_Base_SetConfig+0x104>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00f      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d00b      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a39      	ldr	r2, [pc, #228]	; (80047a4 <TIM_Base_SetConfig+0x108>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a38      	ldr	r2, [pc, #224]	; (80047a8 <TIM_Base_SetConfig+0x10c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a37      	ldr	r2, [pc, #220]	; (80047ac <TIM_Base_SetConfig+0x110>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2d      	ldr	r2, [pc, #180]	; (80047a0 <TIM_Base_SetConfig+0x104>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <TIM_Base_SetConfig+0x108>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <TIM_Base_SetConfig+0x10c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <TIM_Base_SetConfig+0x110>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a27      	ldr	r2, [pc, #156]	; (80047b0 <TIM_Base_SetConfig+0x114>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <TIM_Base_SetConfig+0x118>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <TIM_Base_SetConfig+0x11c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a10      	ldr	r2, [pc, #64]	; (80047a0 <TIM_Base_SetConfig+0x104>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00f      	beq.n	8004784 <TIM_Base_SetConfig+0xe8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a11      	ldr	r2, [pc, #68]	; (80047ac <TIM_Base_SetConfig+0x110>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_Base_SetConfig+0xe8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <TIM_Base_SetConfig+0x114>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_Base_SetConfig+0xe8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <TIM_Base_SetConfig+0x118>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0xe8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <TIM_Base_SetConfig+0x11c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	615a      	str	r2, [r3, #20]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800

080047bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 0302 	bic.w	r3, r3, #2
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <TIM_OC1_SetConfig+0x10c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00f      	beq.n	800483c <TIM_OC1_SetConfig+0x80>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <TIM_OC1_SetConfig+0x110>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00b      	beq.n	800483c <TIM_OC1_SetConfig+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <TIM_OC1_SetConfig+0x114>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <TIM_OC1_SetConfig+0x80>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <TIM_OC1_SetConfig+0x118>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_OC1_SetConfig+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <TIM_OC1_SetConfig+0x11c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10c      	bne.n	8004856 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0308 	bic.w	r3, r3, #8
 8004842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1b      	ldr	r2, [pc, #108]	; (80048c8 <TIM_OC1_SetConfig+0x10c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00f      	beq.n	800487e <TIM_OC1_SetConfig+0xc2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <TIM_OC1_SetConfig+0x110>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <TIM_OC1_SetConfig+0xc2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <TIM_OC1_SetConfig+0x114>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_OC1_SetConfig+0xc2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <TIM_OC1_SetConfig+0x118>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC1_SetConfig+0xc2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <TIM_OC1_SetConfig+0x11c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40013400 	.word	0x40013400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40014800 	.word	0x40014800

080048dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0210 	bic.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0320 	bic.w	r3, r3, #32
 800492a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a28      	ldr	r2, [pc, #160]	; (80049dc <TIM_OC2_SetConfig+0x100>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC2_SetConfig+0x6c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <TIM_OC2_SetConfig+0x104>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10d      	bne.n	8004964 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <TIM_OC2_SetConfig+0x100>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00f      	beq.n	800498c <TIM_OC2_SetConfig+0xb0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <TIM_OC2_SetConfig+0x104>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00b      	beq.n	800498c <TIM_OC2_SetConfig+0xb0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a1b      	ldr	r2, [pc, #108]	; (80049e4 <TIM_OC2_SetConfig+0x108>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_OC2_SetConfig+0xb0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a1a      	ldr	r2, [pc, #104]	; (80049e8 <TIM_OC2_SetConfig+0x10c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC2_SetConfig+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a19      	ldr	r2, [pc, #100]	; (80049ec <TIM_OC2_SetConfig+0x110>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d113      	bne.n	80049b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800499a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40013400 	.word	0x40013400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a27      	ldr	r2, [pc, #156]	; (8004aec <TIM_OC3_SetConfig+0xfc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC3_SetConfig+0x6a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <TIM_OC3_SetConfig+0x100>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10d      	bne.n	8004a76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <TIM_OC3_SetConfig+0xfc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00f      	beq.n	8004a9e <TIM_OC3_SetConfig+0xae>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1b      	ldr	r2, [pc, #108]	; (8004af0 <TIM_OC3_SetConfig+0x100>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_OC3_SetConfig+0xae>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1a      	ldr	r2, [pc, #104]	; (8004af4 <TIM_OC3_SetConfig+0x104>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_OC3_SetConfig+0xae>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <TIM_OC3_SetConfig+0x108>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC3_SetConfig+0xae>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <TIM_OC3_SetConfig+0x10c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d113      	bne.n	8004ac6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <TIM_OC4_SetConfig+0x100>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_OC4_SetConfig+0x6c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <TIM_OC4_SetConfig+0x104>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d10d      	bne.n	8004b88 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	031b      	lsls	r3, r3, #12
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <TIM_OC4_SetConfig+0x100>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <TIM_OC4_SetConfig+0x104>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xb0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <TIM_OC4_SetConfig+0x108>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xb0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <TIM_OC4_SetConfig+0x10c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_OC4_SetConfig+0xb0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <TIM_OC4_SetConfig+0x110>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d113      	bne.n	8004bd8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40013400 	.word	0x40013400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800

08004c14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <TIM_OC5_SetConfig+0xb4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <TIM_OC5_SetConfig+0x7a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <TIM_OC5_SetConfig+0xb8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <TIM_OC5_SetConfig+0x7a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <TIM_OC5_SetConfig+0xbc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_OC5_SetConfig+0x7a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <TIM_OC5_SetConfig+0xc0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_OC5_SetConfig+0x7a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <TIM_OC5_SetConfig+0xc4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d109      	bne.n	8004ca2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800

08004cdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	051b      	lsls	r3, r3, #20
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <TIM_OC6_SetConfig+0xb8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00f      	beq.n	8004d58 <TIM_OC6_SetConfig+0x7c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <TIM_OC6_SetConfig+0xbc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_OC6_SetConfig+0x7c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <TIM_OC6_SetConfig+0xc0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_OC6_SetConfig+0x7c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <TIM_OC6_SetConfig+0xc4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC6_SetConfig+0x7c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a14      	ldr	r2, [pc, #80]	; (8004da4 <TIM_OC6_SetConfig+0xc8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d109      	bne.n	8004d6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	40013400 	.word	0x40013400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800

08004da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e065      	b.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d108      	bne.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d013      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10c      	bne.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40013400 	.word	0x40013400
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40014000 	.word	0x40014000

08004eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e087      	b.n	8004fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d106      	bne.n	8004f64 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d126      	bne.n	8004fc6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	051b      	lsls	r3, r3, #20
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a0d      	ldr	r2, [pc, #52]	; (8004fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d106      	bne.n	8004fc6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40013400 	.word	0x40013400

08004fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005088:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800508c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050ae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80050b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4013      	ands	r3, r2
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 0014 	add.w	r0, r7, #20
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	b004      	add	sp, #16
 800511c:	4770      	bx	lr
	...

08005120 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005120:	b480      	push	{r7}
 8005122:	b09b      	sub	sp, #108	; 0x6c
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	78db      	ldrb	r3, [r3, #3]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d81f      	bhi.n	8005192 <USB_ActivateEndpoint+0x72>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <USB_ActivateEndpoint+0x38>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	08005169 	.word	0x08005169
 800515c:	08005185 	.word	0x08005185
 8005160:	0800519b 	.word	0x0800519b
 8005164:	08005177 	.word	0x08005177
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005168:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800516c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005170:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005174:	e012      	b.n	800519c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005176:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800517a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800517e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005182:	e00b      	b.n	800519c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005184:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005188:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800518c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005190:	e004      	b.n	800519c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005198:	e000      	b.n	800519c <USB_ActivateEndpoint+0x7c>
      break;
 800519a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	b21b      	sxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	b21a      	sxth	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	b21b      	sxth	r3, r3
 80051de:	4313      	orrs	r3, r2
 80051e0:	b21b      	sxth	r3, r3
 80051e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80051f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005204:	b29b      	uxth	r3, r3
 8005206:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	7b1b      	ldrb	r3, [r3, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f040 8149 	bne.w	80054a4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8084 	beq.w	8005324 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005226:	b29b      	uxth	r3, r3
 8005228:	461a      	mov	r2, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	00da      	lsls	r2, r3, #3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	88db      	ldrh	r3, [r3, #6]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	b29b      	uxth	r3, r3
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	81fb      	strh	r3, [r7, #14]
 800525e:	89fb      	ldrh	r3, [r7, #14]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01b      	beq.n	80052a0 <USB_ActivateEndpoint+0x180>
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	81bb      	strh	r3, [r7, #12]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	89bb      	ldrh	r3, [r7, #12]
 800528c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005298:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800529c:	b29b      	uxth	r3, r3
 800529e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	78db      	ldrb	r3, [r3, #3]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d020      	beq.n	80052ea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052be:	813b      	strh	r3, [r7, #8]
 80052c0:	893b      	ldrh	r3, [r7, #8]
 80052c2:	f083 0320 	eor.w	r3, r3, #32
 80052c6:	813b      	strh	r3, [r7, #8]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	893b      	ldrh	r3, [r7, #8]
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]
 80052e8:	e27f      	b.n	80057ea <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	817b      	strh	r3, [r7, #10]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	441a      	add	r2, r3
 800530c:	897b      	ldrh	r3, [r7, #10]
 800530e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531e:	b29b      	uxth	r3, r3
 8005320:	8013      	strh	r3, [r2, #0]
 8005322:	e262      	b.n	80057ea <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532e:	b29b      	uxth	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	4413      	add	r3, r2
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	00da      	lsls	r2, r3, #3
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	4413      	add	r3, r2
 8005342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	88db      	ldrh	r3, [r3, #6]
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	b29b      	uxth	r3, r3
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005362:	b29b      	uxth	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	4413      	add	r3, r2
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	00da      	lsls	r2, r3, #3
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	4413      	add	r3, r2
 8005376:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d112      	bne.n	80053aa <USB_ActivateEndpoint+0x28a>
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800538e:	b29a      	uxth	r2, r3
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e02f      	b.n	800540a <USB_ActivateEndpoint+0x2ea>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b3e      	cmp	r3, #62	; 0x3e
 80053b0:	d813      	bhi.n	80053da <USB_ActivateEndpoint+0x2ba>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <USB_ActivateEndpoint+0x2ac>
 80053c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c8:	3301      	adds	r3, #1
 80053ca:	663b      	str	r3, [r7, #96]	; 0x60
 80053cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e017      	b.n	800540a <USB_ActivateEndpoint+0x2ea>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	663b      	str	r3, [r7, #96]	; 0x60
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <USB_ActivateEndpoint+0x2d4>
 80053ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053f0:	3b01      	subs	r3, #1
 80053f2:	663b      	str	r3, [r7, #96]	; 0x60
 80053f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	029b      	lsls	r3, r3, #10
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005404:	b29a      	uxth	r2, r3
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	83fb      	strh	r3, [r7, #30]
 8005418:	8bfb      	ldrh	r3, [r7, #30]
 800541a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01b      	beq.n	800545a <USB_ActivateEndpoint+0x33a>
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005438:	83bb      	strh	r3, [r7, #28]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	441a      	add	r2, r3
 8005444:	8bbb      	ldrh	r3, [r7, #28]
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	837b      	strh	r3, [r7, #26]
 8005472:	8b7b      	ldrh	r3, [r7, #26]
 8005474:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005478:	837b      	strh	r3, [r7, #26]
 800547a:	8b7b      	ldrh	r3, [r7, #26]
 800547c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005480:	837b      	strh	r3, [r7, #26]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	441a      	add	r2, r3
 800548c:	8b7b      	ldrh	r3, [r7, #26]
 800548e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]
 80054a2:	e1a2      	b.n	80057ea <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80054cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80054d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054dc:	b29b      	uxth	r3, r3
 80054de:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054f0:	4413      	add	r3, r2
 80054f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	00da      	lsls	r2, r3, #3
 80054fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005502:	657b      	str	r3, [r7, #84]	; 0x54
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	891b      	ldrh	r3, [r3, #8]
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	b29b      	uxth	r3, r3
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	653b      	str	r3, [r7, #80]	; 0x50
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005524:	4413      	add	r3, r2
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	00da      	lsls	r2, r3, #3
 800552e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005530:	4413      	add	r3, r2
 8005532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	895b      	ldrh	r3, [r3, #10]
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005546:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 8091 	bne.w	8005674 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005560:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01b      	beq.n	80055a2 <USB_ActivateEndpoint+0x482>
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800559a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80055b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01b      	beq.n	80055f2 <USB_ActivateEndpoint+0x4d2>
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005608:	86bb      	strh	r3, [r7, #52]	; 0x34
 800560a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800560c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005610:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005612:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005614:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005618:	86bb      	strh	r3, [r7, #52]	; 0x34
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005650:	867b      	strh	r3, [r7, #50]	; 0x32
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]
 8005672:	e0ba      	b.n	80057ea <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005684:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01d      	beq.n	80056cc <USB_ActivateEndpoint+0x5ac>
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80056dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01d      	beq.n	8005724 <USB_ActivateEndpoint+0x604>
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	441a      	add	r2, r3
 800570c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005720:	b29b      	uxth	r3, r3
 8005722:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	78db      	ldrb	r3, [r3, #3]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d024      	beq.n	8005776 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005742:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005746:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800574a:	f083 0320 	eor.w	r3, r3, #32
 800574e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]
 8005774:	e01d      	b.n	80057b2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800579e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	441a      	add	r2, r3
 80057d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80057d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80057ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	376c      	adds	r7, #108	; 0x6c
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop

080057fc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b08d      	sub	sp, #52	; 0x34
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	7b1b      	ldrb	r3, [r3, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 808e 	bne.w	800592c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	785b      	ldrb	r3, [r3, #1]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d044      	beq.n	80058a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	81bb      	strh	r3, [r7, #12]
 8005826:	89bb      	ldrh	r3, [r7, #12]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01b      	beq.n	8005868 <USB_DeactivateEndpoint+0x6c>
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	817b      	strh	r3, [r7, #10]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	897b      	ldrh	r3, [r7, #10]
 8005854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005860:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005864:	b29b      	uxth	r3, r3
 8005866:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587e:	813b      	strh	r3, [r7, #8]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	893b      	ldrh	r3, [r7, #8]
 800588c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589c:	b29b      	uxth	r3, r3
 800589e:	8013      	strh	r3, [r2, #0]
 80058a0:	e192      	b.n	8005bc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	827b      	strh	r3, [r7, #18]
 80058b0:	8a7b      	ldrh	r3, [r7, #18]
 80058b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01b      	beq.n	80058f2 <USB_DeactivateEndpoint+0xf6>
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d0:	823b      	strh	r3, [r7, #16]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	441a      	add	r2, r3
 80058dc:	8a3b      	ldrh	r3, [r7, #16]
 80058de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005908:	81fb      	strh	r3, [r7, #14]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	89fb      	ldrh	r3, [r7, #14]
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]
 800592a:	e14d      	b.n	8005bc8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 80a5 	bne.w	8005a80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	843b      	strh	r3, [r7, #32]
 8005944:	8c3b      	ldrh	r3, [r7, #32]
 8005946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01b      	beq.n	8005986 <USB_DeactivateEndpoint+0x18a>
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005964:	83fb      	strh	r3, [r7, #30]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	8bfb      	ldrh	r3, [r7, #30]
 8005972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800597e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005982:	b29b      	uxth	r3, r3
 8005984:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	83bb      	strh	r3, [r7, #28]
 8005994:	8bbb      	ldrh	r3, [r7, #28]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01b      	beq.n	80059d6 <USB_DeactivateEndpoint+0x1da>
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b4:	837b      	strh	r3, [r7, #26]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	8b7b      	ldrh	r3, [r7, #26]
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	833b      	strh	r3, [r7, #24]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	441a      	add	r2, r3
 80059f8:	8b3b      	ldrh	r3, [r7, #24]
 80059fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	82fb      	strh	r3, [r7, #22]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	8afb      	ldrh	r3, [r7, #22]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	82bb      	strh	r3, [r7, #20]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	8abb      	ldrh	r3, [r7, #20]
 8005a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	8013      	strh	r3, [r2, #0]
 8005a7e:	e0a3      	b.n	8005bc8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005a8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <USB_DeactivateEndpoint+0x2d4>
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ade:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <USB_DeactivateEndpoint+0x324>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3734      	adds	r7, #52	; 0x34
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b0c4      	sub	sp, #272	; 0x110
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	1d3b      	adds	r3, r7, #4
 8005bde:	6018      	str	r0, [r3, #0]
 8005be0:	463b      	mov	r3, r7
 8005be2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	f040 8566 	bne.w	80066bc <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d905      	bls.n	8005c0c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005c00:	463b      	mov	r3, r7
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c0a:	e004      	b.n	8005c16 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	7b1b      	ldrb	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d12c      	bne.n	8005c7a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6959      	ldr	r1, [r3, #20]
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	88da      	ldrh	r2, [r3, #6]
 8005c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	1d38      	adds	r0, r7, #4
 8005c34:	6800      	ldr	r0, [r0, #0]
 8005c36:	f001 fa43 	bl	80070c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c3a:	1d3b      	adds	r3, r7, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	463b      	mov	r3, r7
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	00da      	lsls	r2, r3, #3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005c62:	f107 0310 	add.w	r3, r7, #16
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f107 0310 	add.w	r3, r7, #16
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	f000 bcec 	b.w	8006652 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	78db      	ldrb	r3, [r3, #3]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	f040 8356 	bne.w	8006332 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	f240 82fa 	bls.w	800628c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005c98:	1d3b      	adds	r3, r7, #4
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6a1a      	ldr	r2, [r3, #32]
 8005cec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 815e 	beq.w	8005fd0 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d14:	1d3b      	adds	r3, r7, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d164      	bne.n	8005dee <USB_EPStartXfer+0x218>
 8005d24:	1d3b      	adds	r3, r7, #4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	4413      	add	r3, r2
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	00da      	lsls	r2, r3, #3
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d112      	bne.n	8005d7c <USB_EPStartXfer+0x1a6>
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e054      	b.n	8005e26 <USB_EPStartXfer+0x250>
 8005d7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d80:	2b3e      	cmp	r3, #62	; 0x3e
 8005d82:	d817      	bhi.n	8005db4 <USB_EPStartXfer+0x1de>
 8005d84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <USB_EPStartXfer+0x1ce>
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9e:	3301      	adds	r3, #1
 8005da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e038      	b.n	8005e26 <USB_EPStartXfer+0x250>
 8005db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <USB_EPStartXfer+0x1fe>
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	029b      	lsls	r3, r3, #10
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e01b      	b.n	8005e26 <USB_EPStartXfer+0x250>
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d116      	bne.n	8005e26 <USB_EPStartXfer+0x250>
 8005df8:	1d3b      	adds	r3, r7, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e06:	4413      	add	r3, r2
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	00da      	lsls	r2, r3, #3
 8005e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e14:	4413      	add	r3, r2
 8005e16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	895b      	ldrh	r3, [r3, #10]
 8005e2c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6959      	ldr	r1, [r3, #20]
 8005e36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005e40:	1d38      	adds	r0, r7, #4
 8005e42:	6800      	ldr	r0, [r0, #0]
 8005e44:	f001 f93c 	bl	80070c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695a      	ldr	r2, [r3, #20]
 8005e4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e52:	441a      	add	r2, r3
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90e      	bls.n	8005e88 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6a1a      	ldr	r2, [r3, #32]
 8005e7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e7e:	1ad2      	subs	r2, r2, r3
 8005e80:	463b      	mov	r3, r7
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	621a      	str	r2, [r3, #32]
 8005e86:	e008      	b.n	8005e9a <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005e92:	463b      	mov	r3, r7
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d164      	bne.n	8005f6e <USB_EPStartXfer+0x398>
 8005ea4:	1d3b      	adds	r3, r7, #4
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	1d3b      	adds	r3, r7, #4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	00da      	lsls	r2, r3, #3
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d112      	bne.n	8005efc <USB_EPStartXfer+0x326>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e057      	b.n	8005fac <USB_EPStartXfer+0x3d6>
 8005efc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f00:	2b3e      	cmp	r3, #62	; 0x3e
 8005f02:	d817      	bhi.n	8005f34 <USB_EPStartXfer+0x35e>
 8005f04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <USB_EPStartXfer+0x34e>
 8005f1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f1e:	3301      	adds	r3, #1
 8005f20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	029b      	lsls	r3, r3, #10
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	e03b      	b.n	8005fac <USB_EPStartXfer+0x3d6>
 8005f34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <USB_EPStartXfer+0x37e>
 8005f4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	029b      	lsls	r3, r3, #10
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	e01e      	b.n	8005fac <USB_EPStartXfer+0x3d6>
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d119      	bne.n	8005fac <USB_EPStartXfer+0x3d6>
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	4413      	add	r3, r2
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	463b      	mov	r3, r7
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	00da      	lsls	r2, r3, #3
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fa0:	623b      	str	r3, [r7, #32]
 8005fa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	891b      	ldrh	r3, [r3, #8]
 8005fb2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6959      	ldr	r1, [r3, #20]
 8005fbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005fc6:	1d38      	adds	r0, r7, #4
 8005fc8:	6800      	ldr	r0, [r0, #0]
 8005fca:	f001 f879 	bl	80070c0 <USB_WritePMA>
 8005fce:	e340      	b.n	8006652 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d164      	bne.n	80060a4 <USB_EPStartXfer+0x4ce>
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fee:	4413      	add	r3, r2
 8005ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	00da      	lsls	r2, r3, #3
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006002:	64bb      	str	r3, [r7, #72]	; 0x48
 8006004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006008:	2b00      	cmp	r3, #0
 800600a:	d112      	bne.n	8006032 <USB_EPStartXfer+0x45c>
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006016:	b29a      	uxth	r2, r3
 8006018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602a:	b29a      	uxth	r2, r3
 800602c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	e057      	b.n	80060e2 <USB_EPStartXfer+0x50c>
 8006032:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006036:	2b3e      	cmp	r3, #62	; 0x3e
 8006038:	d817      	bhi.n	800606a <USB_EPStartXfer+0x494>
 800603a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <USB_EPStartXfer+0x484>
 8006050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006054:	3301      	adds	r3, #1
 8006056:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800605a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605e:	b29b      	uxth	r3, r3
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	b29a      	uxth	r2, r3
 8006064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e03b      	b.n	80060e2 <USB_EPStartXfer+0x50c>
 800606a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006074:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <USB_EPStartXfer+0x4b4>
 8006080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006084:	3b01      	subs	r3, #1
 8006086:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800608a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608e:	b29b      	uxth	r3, r3
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	b29b      	uxth	r3, r3
 8006094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609c:	b29a      	uxth	r2, r3
 800609e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e01e      	b.n	80060e2 <USB_EPStartXfer+0x50c>
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d119      	bne.n	80060e2 <USB_EPStartXfer+0x50c>
 80060ae:	1d3b      	adds	r3, r7, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	657b      	str	r3, [r7, #84]	; 0x54
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060bc:	b29b      	uxth	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c2:	4413      	add	r3, r2
 80060c4:	657b      	str	r3, [r7, #84]	; 0x54
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	00da      	lsls	r2, r3, #3
 80060ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060d6:	653b      	str	r3, [r7, #80]	; 0x50
 80060d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060e2:	463b      	mov	r3, r7
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	891b      	ldrh	r3, [r3, #8]
 80060e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6959      	ldr	r1, [r3, #20]
 80060f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80060fc:	1d38      	adds	r0, r7, #4
 80060fe:	6800      	ldr	r0, [r0, #0]
 8006100:	f000 ffde 	bl	80070c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006104:	463b      	mov	r3, r7
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800610e:	441a      	add	r2, r3
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	d90e      	bls.n	8006144 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006130:	463b      	mov	r3, r7
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6a1a      	ldr	r2, [r3, #32]
 8006136:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	463b      	mov	r3, r7
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	621a      	str	r2, [r3, #32]
 8006142:	e008      	b.n	8006156 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006144:	463b      	mov	r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800614e:	463b      	mov	r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	647b      	str	r3, [r7, #68]	; 0x44
 800615c:	463b      	mov	r3, r7
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d164      	bne.n	8006230 <USB_EPStartXfer+0x65a>
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006174:	b29b      	uxth	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	4413      	add	r3, r2
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617e:	463b      	mov	r3, r7
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	00da      	lsls	r2, r3, #3
 8006186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006188:	4413      	add	r3, r2
 800618a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800618e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006194:	2b00      	cmp	r3, #0
 8006196:	d112      	bne.n	80061be <USB_EPStartXfer+0x5e8>
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e054      	b.n	8006268 <USB_EPStartXfer+0x692>
 80061be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061c2:	2b3e      	cmp	r3, #62	; 0x3e
 80061c4:	d817      	bhi.n	80061f6 <USB_EPStartXfer+0x620>
 80061c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <USB_EPStartXfer+0x610>
 80061dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061e0:	3301      	adds	r3, #1
 80061e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e038      	b.n	8006268 <USB_EPStartXfer+0x692>
 80061f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006200:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USB_EPStartXfer+0x640>
 800620c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006210:	3b01      	subs	r3, #1
 8006212:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800621a:	b29b      	uxth	r3, r3
 800621c:	029b      	lsls	r3, r3, #10
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006228:	b29a      	uxth	r2, r3
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e01b      	b.n	8006268 <USB_EPStartXfer+0x692>
 8006230:	463b      	mov	r3, r7
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d116      	bne.n	8006268 <USB_EPStartXfer+0x692>
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006248:	4413      	add	r3, r2
 800624a:	647b      	str	r3, [r7, #68]	; 0x44
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	00da      	lsls	r2, r3, #3
 8006254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006256:	4413      	add	r3, r2
 8006258:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800625c:	643b      	str	r3, [r7, #64]	; 0x40
 800625e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006262:	b29a      	uxth	r2, r3
 8006264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006266:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006268:	463b      	mov	r3, r7
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	895b      	ldrh	r3, [r3, #10]
 800626e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006272:	463b      	mov	r3, r7
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6959      	ldr	r1, [r3, #20]
 8006278:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800627c:	b29b      	uxth	r3, r3
 800627e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006282:	1d38      	adds	r0, r7, #4
 8006284:	6800      	ldr	r0, [r0, #0]
 8006286:	f000 ff1b 	bl	80070c0 <USB_WritePMA>
 800628a:	e1e2      	b.n	8006652 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800628c:	463b      	mov	r3, r7
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062b4:	1d3b      	adds	r3, r7, #4
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	441a      	add	r2, r3
 80062c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	663b      	str	r3, [r7, #96]	; 0x60
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ee:	4413      	add	r3, r2
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	00da      	lsls	r2, r3, #3
 80062fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fc:	4413      	add	r3, r2
 80062fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006304:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006308:	b29a      	uxth	r2, r3
 800630a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800630c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	891b      	ldrh	r3, [r3, #8]
 8006314:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006318:	463b      	mov	r3, r7
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6959      	ldr	r1, [r3, #20]
 800631e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006322:	b29b      	uxth	r3, r3
 8006324:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006328:	1d38      	adds	r0, r7, #4
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	f000 fec8 	bl	80070c0 <USB_WritePMA>
 8006330:	e18f      	b.n	8006652 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006332:	1d3b      	adds	r3, r7, #4
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	463b      	mov	r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 808f 	beq.w	800646c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800634e:	1d3b      	adds	r3, r7, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	67bb      	str	r3, [r7, #120]	; 0x78
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d164      	bne.n	8006428 <USB_EPStartXfer+0x852>
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	673b      	str	r3, [r7, #112]	; 0x70
 8006364:	1d3b      	adds	r3, r7, #4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636c:	b29b      	uxth	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006372:	4413      	add	r3, r2
 8006374:	673b      	str	r3, [r7, #112]	; 0x70
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	00da      	lsls	r2, r3, #3
 800637e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006380:	4413      	add	r3, r2
 8006382:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006388:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800638c:	2b00      	cmp	r3, #0
 800638e:	d112      	bne.n	80063b6 <USB_EPStartXfer+0x7e0>
 8006390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800639a:	b29a      	uxth	r2, r3
 800639c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b2:	801a      	strh	r2, [r3, #0]
 80063b4:	e054      	b.n	8006460 <USB_EPStartXfer+0x88a>
 80063b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063ba:	2b3e      	cmp	r3, #62	; 0x3e
 80063bc:	d817      	bhi.n	80063ee <USB_EPStartXfer+0x818>
 80063be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <USB_EPStartXfer+0x808>
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	3301      	adds	r3, #1
 80063da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	029b      	lsls	r3, r3, #10
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e038      	b.n	8006460 <USB_EPStartXfer+0x88a>
 80063ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <USB_EPStartXfer+0x838>
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006408:	3b01      	subs	r3, #1
 800640a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800640e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006412:	b29b      	uxth	r3, r3
 8006414:	029b      	lsls	r3, r3, #10
 8006416:	b29b      	uxth	r3, r3
 8006418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006420:	b29a      	uxth	r2, r3
 8006422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	e01b      	b.n	8006460 <USB_EPStartXfer+0x88a>
 8006428:	463b      	mov	r3, r7
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d116      	bne.n	8006460 <USB_EPStartXfer+0x88a>
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643a:	b29b      	uxth	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006440:	4413      	add	r3, r2
 8006442:	67bb      	str	r3, [r7, #120]	; 0x78
 8006444:	463b      	mov	r3, r7
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	00da      	lsls	r2, r3, #3
 800644c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800644e:	4413      	add	r3, r2
 8006450:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006454:	677b      	str	r3, [r7, #116]	; 0x74
 8006456:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645a:	b29a      	uxth	r2, r3
 800645c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800645e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006460:	463b      	mov	r3, r7
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	895b      	ldrh	r3, [r3, #10]
 8006466:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800646a:	e097      	b.n	800659c <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d168      	bne.n	8006548 <USB_EPStartXfer+0x972>
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800648e:	4413      	add	r3, r2
 8006490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	00da      	lsls	r2, r3, #3
 800649c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d112      	bne.n	80064d6 <USB_EPStartXfer+0x900>
 80064b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e05d      	b.n	8006592 <USB_EPStartXfer+0x9bc>
 80064d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064da:	2b3e      	cmp	r3, #62	; 0x3e
 80064dc:	d817      	bhi.n	800650e <USB_EPStartXfer+0x938>
 80064de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <USB_EPStartXfer+0x928>
 80064f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006502:	b29b      	uxth	r3, r3
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	b29a      	uxth	r2, r3
 8006508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	e041      	b.n	8006592 <USB_EPStartXfer+0x9bc>
 800650e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006518:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <USB_EPStartXfer+0x958>
 8006524:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006528:	3b01      	subs	r3, #1
 800652a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800652e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006532:	b29b      	uxth	r3, r3
 8006534:	029b      	lsls	r3, r3, #10
 8006536:	b29b      	uxth	r3, r3
 8006538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006540:	b29a      	uxth	r2, r3
 8006542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e024      	b.n	8006592 <USB_EPStartXfer+0x9bc>
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d11f      	bne.n	8006592 <USB_EPStartXfer+0x9bc>
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800656a:	4413      	add	r3, r2
 800656c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006570:	463b      	mov	r3, r7
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800657c:	4413      	add	r3, r2
 800657e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006586:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658a:	b29a      	uxth	r2, r3
 800658c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006590:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006592:	463b      	mov	r3, r7
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	891b      	ldrh	r3, [r3, #8]
 8006598:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6959      	ldr	r1, [r3, #20]
 80065a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80065ac:	1d38      	adds	r0, r7, #4
 80065ae:	6800      	ldr	r0, [r0, #0]
 80065b0:	f000 fd86 	bl	80070c0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d122      	bne.n	8006604 <USB_EPStartXfer+0xa2e>
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	441a      	add	r2, r3
 80065ea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80065ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065fe:	b29b      	uxth	r3, r3
 8006600:	8013      	strh	r3, [r2, #0]
 8006602:	e026      	b.n	8006652 <USB_EPStartXfer+0xa7c>
 8006604:	463b      	mov	r3, r7
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d121      	bne.n	8006652 <USB_EPStartXfer+0xa7c>
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006628:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800662c:	1d3b      	adds	r3, r7, #4
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	463b      	mov	r3, r7
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800663e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800664a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664e:	b29b      	uxth	r3, r3
 8006650:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	463b      	mov	r3, r7
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f107 020e 	add.w	r2, r7, #14
 8006668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006670:	8013      	strh	r3, [r2, #0]
 8006672:	f107 030e 	add.w	r3, r7, #14
 8006676:	f107 020e 	add.w	r2, r7, #14
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	f082 0210 	eor.w	r2, r2, #16
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	f107 030e 	add.w	r3, r7, #14
 8006686:	f107 020e 	add.w	r2, r7, #14
 800668a:	8812      	ldrh	r2, [r2, #0]
 800668c:	f082 0220 	eor.w	r2, r2, #32
 8006690:	801a      	strh	r2, [r3, #0]
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	463b      	mov	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	f107 030e 	add.w	r3, r7, #14
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	8013      	strh	r3, [r2, #0]
 80066ba:	e3b5      	b.n	8006e28 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066bc:	463b      	mov	r3, r7
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	7b1b      	ldrb	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 8090 	bne.w	80067e8 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	463b      	mov	r3, r7
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d90e      	bls.n	80066f6 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80066d8:	463b      	mov	r3, r7
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699a      	ldr	r2, [r3, #24]
 80066e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ec:	1ad2      	subs	r2, r2, r3
 80066ee:	463b      	mov	r3, r7
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	619a      	str	r2, [r3, #24]
 80066f4:	e008      	b.n	8006708 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2200      	movs	r2, #0
 8006706:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006710:	1d3b      	adds	r3, r7, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006718:	b29b      	uxth	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006720:	4413      	add	r3, r2
 8006722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	00da      	lsls	r2, r3, #3
 800672e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006732:	4413      	add	r3, r2
 8006734:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800673c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006740:	2b00      	cmp	r3, #0
 8006742:	d116      	bne.n	8006772 <USB_EPStartXfer+0xb9c>
 8006744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006768:	b29a      	uxth	r2, r3
 800676a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e32c      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
 8006772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006776:	2b3e      	cmp	r3, #62	; 0x3e
 8006778:	d818      	bhi.n	80067ac <USB_EPStartXfer+0xbd6>
 800677a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006784:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <USB_EPStartXfer+0xbc4>
 8006790:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006794:	3301      	adds	r3, #1
 8006796:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800679a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800679e:	b29b      	uxth	r3, r3
 80067a0:	029b      	lsls	r3, r3, #10
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e30f      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
 80067ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <USB_EPStartXfer+0xbf6>
 80067c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067c6:	3b01      	subs	r3, #1
 80067c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	029b      	lsls	r3, r3, #10
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e2f1      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	78db      	ldrb	r3, [r3, #3]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	f040 818f 	bne.w	8006b12 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d175      	bne.n	80068ea <USB_EPStartXfer+0xd14>
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006816:	4413      	add	r3, r2
 8006818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	00da      	lsls	r2, r3, #3
 8006824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006828:	4413      	add	r3, r2
 800682a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800682e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006832:	463b      	mov	r3, r7
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d116      	bne.n	800686a <USB_EPStartXfer+0xc94>
 800683c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e065      	b.n	8006936 <USB_EPStartXfer+0xd60>
 800686a:	463b      	mov	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b3e      	cmp	r3, #62	; 0x3e
 8006872:	d81a      	bhi.n	80068aa <USB_EPStartXfer+0xcd4>
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <USB_EPStartXfer+0xcc2>
 800688e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006892:	3301      	adds	r3, #1
 8006894:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800689c:	b29b      	uxth	r3, r3
 800689e:	029b      	lsls	r3, r3, #10
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	e045      	b.n	8006936 <USB_EPStartXfer+0xd60>
 80068aa:	463b      	mov	r3, r7
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068b6:	463b      	mov	r3, r7
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <USB_EPStartXfer+0xcf8>
 80068c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068c8:	3b01      	subs	r3, #1
 80068ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e025      	b.n	8006936 <USB_EPStartXfer+0xd60>
 80068ea:	463b      	mov	r3, r7
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d120      	bne.n	8006936 <USB_EPStartXfer+0xd60>
 80068f4:	1d3b      	adds	r3, r7, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006904:	b29b      	uxth	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800690c:	4413      	add	r3, r2
 800690e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006912:	463b      	mov	r3, r7
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	00da      	lsls	r2, r3, #3
 800691a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800691e:	4413      	add	r3, r2
 8006920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	b29a      	uxth	r2, r3
 8006930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d175      	bne.n	8006a34 <USB_EPStartXfer+0xe5e>
 8006948:	1d3b      	adds	r3, r7, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006958:	b29b      	uxth	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006960:	4413      	add	r3, r2
 8006962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	00da      	lsls	r2, r3, #3
 800696e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006972:	4413      	add	r3, r2
 8006974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d116      	bne.n	80069b4 <USB_EPStartXfer+0xdde>
 8006986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006992:	b29a      	uxth	r2, r3
 8006994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	e061      	b.n	8006a78 <USB_EPStartXfer+0xea2>
 80069b4:	463b      	mov	r3, r7
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b3e      	cmp	r3, #62	; 0x3e
 80069bc:	d81a      	bhi.n	80069f4 <USB_EPStartXfer+0xe1e>
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ca:	463b      	mov	r3, r7
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d004      	beq.n	80069e2 <USB_EPStartXfer+0xe0c>
 80069d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069dc:	3301      	adds	r3, #1
 80069de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	029b      	lsls	r3, r3, #10
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	e041      	b.n	8006a78 <USB_EPStartXfer+0xea2>
 80069f4:	463b      	mov	r3, r7
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a00:	463b      	mov	r3, r7
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <USB_EPStartXfer+0xe42>
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	3b01      	subs	r3, #1
 8006a14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	029b      	lsls	r3, r3, #10
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e021      	b.n	8006a78 <USB_EPStartXfer+0xea2>
 8006a34:	463b      	mov	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	785b      	ldrb	r3, [r3, #1]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d11c      	bne.n	8006a78 <USB_EPStartXfer+0xea2>
 8006a3e:	1d3b      	adds	r3, r7, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a4e:	4413      	add	r3, r2
 8006a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a54:	463b      	mov	r3, r7
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	00da      	lsls	r2, r3, #3
 8006a5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a76:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006a78:	463b      	mov	r3, r7
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 81a4 	beq.w	8006dcc <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a84:	1d3b      	adds	r3, r7, #4
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	463b      	mov	r3, r7
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a98:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <USB_EPStartXfer+0xeda>
 8006aa4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10d      	bne.n	8006acc <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ab0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 8187 	bne.w	8006dcc <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006abe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f040 8180 	bne.w	8006dcc <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006acc:	1d3b      	adds	r3, r7, #4
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	441a      	add	r2, r3
 8006af8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
 8006b10:	e15c      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b12:	463b      	mov	r3, r7
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	78db      	ldrb	r3, [r3, #3]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 8155 	bne.w	8006dc8 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8006b1e:	463b      	mov	r3, r7
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	463b      	mov	r3, r7
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d90e      	bls.n	8006b4c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006b2e:	463b      	mov	r3, r7
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	463b      	mov	r3, r7
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	619a      	str	r2, [r3, #24]
 8006b4a:	e008      	b.n	8006b5e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8006b56:	463b      	mov	r3, r7
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b5e:	463b      	mov	r3, r7
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d16f      	bne.n	8006c48 <USB_EPStartXfer+0x1072>
 8006b68:	1d3b      	adds	r3, r7, #4
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b70:	1d3b      	adds	r3, r7, #4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b80:	4413      	add	r3, r2
 8006b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b86:	463b      	mov	r3, r7
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	00da      	lsls	r2, r3, #3
 8006b8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b92:	4413      	add	r3, r2
 8006b94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d116      	bne.n	8006bd2 <USB_EPStartXfer+0xffc>
 8006ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e05f      	b.n	8006c92 <USB_EPStartXfer+0x10bc>
 8006bd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd8:	d818      	bhi.n	8006c0c <USB_EPStartXfer+0x1036>
 8006bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bde:	085b      	lsrs	r3, r3, #1
 8006be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <USB_EPStartXfer+0x1024>
 8006bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	029b      	lsls	r3, r3, #10
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c08:	801a      	strh	r2, [r3, #0]
 8006c0a:	e042      	b.n	8006c92 <USB_EPStartXfer+0x10bc>
 8006c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c1a:	f003 031f 	and.w	r3, r3, #31
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <USB_EPStartXfer+0x1056>
 8006c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c26:	3b01      	subs	r3, #1
 8006c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	029b      	lsls	r3, r3, #10
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e024      	b.n	8006c92 <USB_EPStartXfer+0x10bc>
 8006c48:	463b      	mov	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d11f      	bne.n	8006c92 <USB_EPStartXfer+0x10bc>
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c70:	463b      	mov	r3, r7
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	00da      	lsls	r2, r3, #3
 8006c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	1d3b      	adds	r3, r7, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d16f      	bne.n	8006d84 <USB_EPStartXfer+0x11ae>
 8006ca4:	1d3b      	adds	r3, r7, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cac:	1d3b      	adds	r3, r7, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	00da      	lsls	r2, r3, #3
 8006cca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d116      	bne.n	8006d0e <USB_EPStartXfer+0x1138>
 8006ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cf2:	801a      	strh	r2, [r3, #0]
 8006cf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e05e      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
 8006d0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d12:	2b3e      	cmp	r3, #62	; 0x3e
 8006d14:	d818      	bhi.n	8006d48 <USB_EPStartXfer+0x1172>
 8006d16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <USB_EPStartXfer+0x1160>
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	3301      	adds	r3, #1
 8006d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	029b      	lsls	r3, r3, #10
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e041      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
 8006d48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <USB_EPStartXfer+0x1192>
 8006d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d62:	3b01      	subs	r3, #1
 8006d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	e023      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d11e      	bne.n	8006dcc <USB_EPStartXfer+0x11f6>
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d9e:	4413      	add	r3, r2
 8006da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da4:	463b      	mov	r3, r7
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	00da      	lsls	r2, r3, #3
 8006dac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006db6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	e001      	b.n	8006dcc <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e02e      	b.n	8006e2a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dcc:	1d3b      	adds	r3, r7, #4
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006dea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006df2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006df6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006dfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dfe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5c:	81bb      	strh	r3, [r7, #12]
 8006e5e:	89bb      	ldrh	r3, [r7, #12]
 8006e60:	f083 0310 	eor.w	r3, r3, #16
 8006e64:	81bb      	strh	r3, [r7, #12]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	89bb      	ldrh	r3, [r7, #12]
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]
 8006e86:	e01f      	b.n	8006ec8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	81fb      	strh	r3, [r7, #14]
 8006ea0:	89fb      	ldrh	r3, [r7, #14]
 8006ea2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ea6:	81fb      	strh	r3, [r7, #14]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	441a      	add	r2, r3
 8006eb2:	89fb      	ldrh	r3, [r7, #14]
 8006eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	7b1b      	ldrb	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 809d 	bne.w	8007024 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d04c      	beq.n	8006f8c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	823b      	strh	r3, [r7, #16]
 8006f00:	8a3b      	ldrh	r3, [r7, #16]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01b      	beq.n	8006f42 <USB_EPClearStall+0x6c>
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f20:	81fb      	strh	r3, [r7, #14]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	441a      	add	r2, r3
 8006f2c:	89fb      	ldrh	r3, [r7, #14]
 8006f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	78db      	ldrb	r3, [r3, #3]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d06c      	beq.n	8007024 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f60:	81bb      	strh	r3, [r7, #12]
 8006f62:	89bb      	ldrh	r3, [r7, #12]
 8006f64:	f083 0320 	eor.w	r3, r3, #32
 8006f68:	81bb      	strh	r3, [r7, #12]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	89bb      	ldrh	r3, [r7, #12]
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]
 8006f8a:	e04b      	b.n	8007024 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	82fb      	strh	r3, [r7, #22]
 8006f9a:	8afb      	ldrh	r3, [r7, #22]
 8006f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01b      	beq.n	8006fdc <USB_EPClearStall+0x106>
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	82bb      	strh	r3, [r7, #20]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	441a      	add	r2, r3
 8006fc6:	8abb      	ldrh	r3, [r7, #20]
 8006fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	827b      	strh	r3, [r7, #18]
 8006ff4:	8a7b      	ldrh	r3, [r7, #18]
 8006ff6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ffa:	827b      	strh	r3, [r7, #18]
 8006ffc:	8a7b      	ldrh	r3, [r7, #18]
 8006ffe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007002:	827b      	strh	r3, [r7, #18]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	441a      	add	r2, r3
 800700e:	8a7b      	ldrh	r3, [r7, #18]
 8007010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007020:	b29b      	uxth	r3, r3
 8007022:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2280      	movs	r2, #128	; 0x80
 8007048:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007068:	b29b      	uxth	r3, r3
 800706a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007096:	b29b      	uxth	r3, r3
 8007098:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b08d      	sub	sp, #52	; 0x34
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4611      	mov	r1, r2
 80070cc:	461a      	mov	r2, r3
 80070ce:	460b      	mov	r3, r1
 80070d0:	80fb      	strh	r3, [r7, #6]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070d6:	88bb      	ldrh	r3, [r7, #4]
 80070d8:	3301      	adds	r3, #1
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f6:	e01b      	b.n	8007130 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	3301      	adds	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	b29b      	uxth	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	b29a      	uxth	r2, r3
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	3302      	adds	r3, #2
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	3301      	adds	r3, #1
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	3b01      	subs	r3, #1
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e0      	bne.n	80070f8 <USB_WritePMA+0x38>
  }
}
 8007136:	bf00      	nop
 8007138:	3734      	adds	r7, #52	; 0x34
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007142:	b480      	push	{r7}
 8007144:	b08b      	sub	sp, #44	; 0x2c
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	4611      	mov	r1, r2
 800714e:	461a      	mov	r2, r3
 8007150:	460b      	mov	r3, r1
 8007152:	80fb      	strh	r3, [r7, #6]
 8007154:	4613      	mov	r3, r2
 8007156:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007158:	88bb      	ldrh	r3, [r7, #4]
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	b29b      	uxth	r3, r3
 800715e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007168:	88fa      	ldrh	r2, [r7, #6]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007172:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
 8007178:	e018      	b.n	80071ac <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	3302      	adds	r3, #2
 8007186:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	b2da      	uxtb	r2, r3
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	3301      	adds	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	0a1b      	lsrs	r3, r3, #8
 800719a:	b2da      	uxtb	r2, r3
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	3301      	adds	r3, #1
 80071a4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	3b01      	subs	r3, #1
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e3      	bne.n	800717a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80071b2:	88bb      	ldrh	r3, [r7, #4]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	701a      	strb	r2, [r3, #0]
  }
}
 80071ce:	bf00      	nop
 80071d0:	372c      	adds	r7, #44	; 0x2c
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071e6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071ea:	f002 f89d 	bl	8009328 <USBD_static_malloc>
 80071ee:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80071fe:	2302      	movs	r3, #2
 8007200:	e066      	b.n	80072d0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7c1b      	ldrb	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d119      	bne.n	8007246 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007216:	2202      	movs	r2, #2
 8007218:	2181      	movs	r1, #129	; 0x81
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 ff29 	bl	8009072 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800722a:	2202      	movs	r2, #2
 800722c:	2101      	movs	r1, #1
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 ff1f 	bl	8009072 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2210      	movs	r2, #16
 8007240:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007244:	e016      	b.n	8007274 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007246:	2340      	movs	r3, #64	; 0x40
 8007248:	2202      	movs	r2, #2
 800724a:	2181      	movs	r1, #129	; 0x81
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 ff10 	bl	8009072 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007258:	2340      	movs	r3, #64	; 0x40
 800725a:	2202      	movs	r2, #2
 800725c:	2101      	movs	r1, #1
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 ff07 	bl	8009072 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2210      	movs	r2, #16
 8007270:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007274:	2308      	movs	r3, #8
 8007276:	2203      	movs	r2, #3
 8007278:	2182      	movs	r1, #130	; 0x82
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fef9 	bl	8009072 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7c1b      	ldrb	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b4:	2101      	movs	r1, #1
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 ffcb 	bl	8009252 <USBD_LL_PrepareReceive>
 80072bc:	e007      	b.n	80072ce <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	2101      	movs	r1, #1
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 ffc2 	bl	8009252 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072e4:	2181      	movs	r1, #129	; 0x81
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 fee9 	bl	80090be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072f2:	2101      	movs	r1, #1
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fee2 	bl	80090be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007302:	2182      	movs	r1, #130	; 0x82
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 feda 	bl	80090be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00e      	beq.n	8007342 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007334:	4618      	mov	r0, r3
 8007336:	f002 f805 	bl	8009344 <USBD_static_free>
    pdev->pClassData = NULL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800735c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03a      	beq.n	80073ec <USBD_CDC_Setup+0xa0>
 8007376:	2b20      	cmp	r3, #32
 8007378:	f040 8097 	bne.w	80074aa <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	88db      	ldrh	r3, [r3, #6]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d029      	beq.n	80073d8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	b25b      	sxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	da11      	bge.n	80073b2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800739a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	88d2      	ldrh	r2, [r2, #6]
 80073a0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80073a2:	6939      	ldr	r1, [r7, #16]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	88db      	ldrh	r3, [r3, #6]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fa8d 	bl	80088ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80073b0:	e082      	b.n	80074b8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	785a      	ldrb	r2, [r3, #1]
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	88db      	ldrh	r3, [r3, #6]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80073c8:	6939      	ldr	r1, [r7, #16]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	88db      	ldrh	r3, [r3, #6]
 80073ce:	461a      	mov	r2, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 faa6 	bl	8008922 <USBD_CtlPrepareRx>
      break;
 80073d6:	e06f      	b.n	80074b8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	7850      	ldrb	r0, [r2, #1]
 80073e4:	2200      	movs	r2, #0
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	4798      	blx	r3
      break;
 80073ea:	e065      	b.n	80074b8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b0b      	cmp	r3, #11
 80073f2:	d84f      	bhi.n	8007494 <USBD_CDC_Setup+0x148>
 80073f4:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <USBD_CDC_Setup+0xb0>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	0800742d 	.word	0x0800742d
 8007400:	080074a3 	.word	0x080074a3
 8007404:	08007495 	.word	0x08007495
 8007408:	08007495 	.word	0x08007495
 800740c:	08007495 	.word	0x08007495
 8007410:	08007495 	.word	0x08007495
 8007414:	08007495 	.word	0x08007495
 8007418:	08007495 	.word	0x08007495
 800741c:	08007495 	.word	0x08007495
 8007420:	08007495 	.word	0x08007495
 8007424:	08007455 	.word	0x08007455
 8007428:	0800747d 	.word	0x0800747d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007432:	2b03      	cmp	r3, #3
 8007434:	d107      	bne.n	8007446 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	2202      	movs	r2, #2
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 fa43 	bl	80088ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007444:	e030      	b.n	80074a8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f9cd 	bl	80087e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	75fb      	strb	r3, [r7, #23]
          break;
 8007452:	e029      	b.n	80074a8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745a:	2b03      	cmp	r3, #3
 800745c:	d107      	bne.n	800746e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800745e:	f107 030f 	add.w	r3, r7, #15
 8007462:	2201      	movs	r2, #1
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fa2f 	bl	80088ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800746c:	e01c      	b.n	80074a8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f9b9 	bl	80087e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	75fb      	strb	r3, [r7, #23]
          break;
 800747a:	e015      	b.n	80074a8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007482:	2b03      	cmp	r3, #3
 8007484:	d00f      	beq.n	80074a6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 f9ad 	bl	80087e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800748e:	2303      	movs	r3, #3
 8007490:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007492:	e008      	b.n	80074a6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 f9a6 	bl	80087e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800749c:	2303      	movs	r3, #3
 800749e:	75fb      	strb	r3, [r7, #23]
          break;
 80074a0:	e002      	b.n	80074a8 <USBD_CDC_Setup+0x15c>
          break;
 80074a2:	bf00      	nop
 80074a4:	e008      	b.n	80074b8 <USBD_CDC_Setup+0x16c>
          break;
 80074a6:	bf00      	nop
      }
      break;
 80074a8:	e006      	b.n	80074b8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 f99b 	bl	80087e8 <USBD_CtlError>
      ret = USBD_FAIL;
 80074b2:	2303      	movs	r3, #3
 80074b4:	75fb      	strb	r3, [r7, #23]
      break;
 80074b6:	bf00      	nop
  }

  return (uint8_t)ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop

080074c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e04f      	b.n	8007586 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80074ee:	78fa      	ldrb	r2, [r7, #3]
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3318      	adds	r3, #24
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d029      	beq.n	8007558 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	3318      	adds	r3, #24
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	78f9      	ldrb	r1, [r7, #3]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	460b      	mov	r3, r1
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	4403      	add	r3, r0
 8007524:	3338      	adds	r3, #56	; 0x38
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	fbb2 f1f3 	udiv	r1, r2, r3
 800752c:	fb03 f301 	mul.w	r3, r3, r1
 8007530:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007532:	2b00      	cmp	r3, #0
 8007534:	d110      	bne.n	8007558 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	3318      	adds	r3, #24
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800754a:	78f9      	ldrb	r1, [r7, #3]
 800754c:	2300      	movs	r3, #0
 800754e:	2200      	movs	r2, #0
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fe5d 	bl	8009210 <USBD_LL_Transmit>
 8007556:	e015      	b.n	8007584 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00b      	beq.n	8007584 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e015      	b.n	80075dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fe6d 	bl	8009294 <USBD_LL_GetRxDataSize>
 80075ba:	4602      	mov	r2, r0
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80075d6:	4611      	mov	r1, r2
 80075d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d015      	beq.n	800762a <USBD_CDC_EP0_RxReady+0x46>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007604:	2bff      	cmp	r3, #255	; 0xff
 8007606:	d010      	beq.n	800762a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007616:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800761e:	b292      	uxth	r2, r2
 8007620:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	22ff      	movs	r2, #255	; 0xff
 8007626:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2243      	movs	r2, #67	; 0x43
 8007640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007642:	4b03      	ldr	r3, [pc, #12]	; (8007650 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	20000094 	.word	0x20000094

08007654 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2243      	movs	r2, #67	; 0x43
 8007660:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007662:	4b03      	ldr	r3, [pc, #12]	; (8007670 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	20000050 	.word	0x20000050

08007674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2243      	movs	r2, #67	; 0x43
 8007680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007682:	4b03      	ldr	r3, [pc, #12]	; (8007690 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	200000d8 	.word	0x200000d8

08007694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	220a      	movs	r2, #10
 80076a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076a2:	4b03      	ldr	r3, [pc, #12]	; (80076b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	2000000c 	.word	0x2000000c

080076b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e004      	b.n	80076d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076de:	b480      	push	{r7}
 80076e0:	b087      	sub	sp, #28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	371c      	adds	r7, #28
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007720:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007746:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	e01a      	b.n	8007790 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007760:	2b00      	cmp	r3, #0
 8007762:	d114      	bne.n	800778e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2201      	movs	r2, #1
 8007768:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007782:	2181      	movs	r1, #129	; 0x81
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fd43 	bl	8009210 <USBD_LL_Transmit>

    ret = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e016      	b.n	80077e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7c1b      	ldrb	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077c8:	2101      	movs	r1, #1
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fd41 	bl	8009252 <USBD_LL_PrepareReceive>
 80077d0:	e007      	b.n	80077e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077d8:	2340      	movs	r3, #64	; 0x40
 80077da:	2101      	movs	r1, #1
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 fd38 	bl	8009252 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	e01f      	b.n	8007844 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	79fa      	ldrb	r2, [r7, #7]
 8007836:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f001 fb9f 	bl	8008f7c <USBD_LL_Init>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007860:	2303      	movs	r3, #3
 8007862:	e016      	b.n	8007892 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	f107 020e 	add.w	r2, r7, #14
 8007884:	4610      	mov	r0, r2
 8007886:	4798      	blx	r3
 8007888:	4602      	mov	r2, r0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 fbca 	bl	800903c <USBD_LL_Start>
 80078a8:	4603      	mov	r3, r0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078d4:	2303      	movs	r3, #3
 80078d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	4611      	mov	r1, r2
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	4611      	mov	r1, r2
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
  }

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 ff16 	bl	8008774 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	2b01      	cmp	r3, #1
 800796a:	d00e      	beq.n	800798a <USBD_LL_SetupStage+0x5a>
 800796c:	2b01      	cmp	r3, #1
 800796e:	d302      	bcc.n	8007976 <USBD_LL_SetupStage+0x46>
 8007970:	2b02      	cmp	r3, #2
 8007972:	d014      	beq.n	800799e <USBD_LL_SetupStage+0x6e>
 8007974:	e01d      	b.n	80079b2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f9d6 	bl	8007d30 <USBD_StdDevReq>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
      break;
 8007988:	e020      	b.n	80079cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa3a 	bl	8007e0c <USBD_StdItfReq>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
      break;
 800799c:	e016      	b.n	80079cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa76 	bl	8007e98 <USBD_StdEPReq>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
      break;
 80079b0:	e00c      	b.n	80079cc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fb9b 	bl	80090fc <USBD_LL_StallEP>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ca:	bf00      	nop
  }

  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	460b      	mov	r3, r1
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d137      	bne.n	8007a5a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d14a      	bne.n	8007a92 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d913      	bls.n	8007a30 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	1ad2      	subs	r2, r2, r3
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	bf28      	it	cs
 8007a22:	4613      	movcs	r3, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 ff97 	bl	800895c <USBD_CtlContinueRx>
 8007a2e:	e030      	b.n	8007a92 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d105      	bne.n	8007a52 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 ff93 	bl	800897e <USBD_CtlSendStatus>
 8007a58:	e01b      	b.n	8007a92 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d013      	beq.n	8007a8e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d10e      	bne.n	8007a8e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	7afa      	ldrb	r2, [r7, #11]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	4798      	blx	r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	e002      	b.n	8007a94 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e000      	b.n	8007a94 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007aaa:	7afb      	ldrb	r3, [r7, #11]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d16a      	bne.n	8007b86 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d155      	bne.n	8007b6c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d914      	bls.n	8007af6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	1ad2      	subs	r2, r2, r3
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 ff0c 	bl	8008900 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2200      	movs	r2, #0
 8007aec:	2100      	movs	r1, #0
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f001 fbaf 	bl	8009252 <USBD_LL_PrepareReceive>
 8007af4:	e03a      	b.n	8007b6c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d11c      	bne.n	8007b3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d316      	bcc.n	8007b3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d20f      	bcs.n	8007b3c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2100      	movs	r1, #0
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 feed 	bl	8008900 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2200      	movs	r2, #0
 8007b32:	2100      	movs	r1, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f001 fb8c 	bl	8009252 <USBD_LL_PrepareReceive>
 8007b3a:	e017      	b.n	8007b6c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d105      	bne.n	8007b5e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b5e:	2180      	movs	r1, #128	; 0x80
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f001 facb 	bl	80090fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 ff1c 	bl	80089a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d123      	bne.n	8007bbe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fe9b 	bl	80078b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b84:	e01b      	b.n	8007bbe <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d013      	beq.n	8007bba <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d10e      	bne.n	8007bba <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	7afa      	ldrb	r2, [r7, #11]
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	4798      	blx	r3
 8007bac:	4603      	mov	r3, r0
 8007bae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	e002      	b.n	8007bc0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e000      	b.n	8007bc0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d009      	beq.n	8007c0c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6852      	ldr	r2, [r2, #4]
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	4611      	mov	r1, r2
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fa2d 	bl	8009072 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2240      	movs	r2, #64	; 0x40
 8007c24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2180      	movs	r1, #128	; 0x80
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fa1f 	bl	8009072 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2204      	movs	r2, #4
 8007c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d105      	bne.n	8007cb2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d10b      	bne.n	8007cea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d12:	8a3b      	ldrh	r3, [r7, #16]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	b21a      	sxth	r2, r3
 8007d18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b21b      	sxth	r3, r3
 8007d20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d22:	89fb      	ldrh	r3, [r7, #14]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	371c      	adds	r7, #28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d004      	beq.n	8007d54 <USBD_StdDevReq+0x24>
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d002      	beq.n	8007d54 <USBD_StdDevReq+0x24>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <USBD_StdDevReq+0x38>
 8007d52:	e050      	b.n	8007df6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
    break;
 8007d66:	e04b      	b.n	8007e00 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b09      	cmp	r3, #9
 8007d6e:	d83c      	bhi.n	8007dea <USBD_StdDevReq+0xba>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <USBD_StdDevReq+0x48>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007dcd 	.word	0x08007dcd
 8007d7c:	08007de1 	.word	0x08007de1
 8007d80:	08007deb 	.word	0x08007deb
 8007d84:	08007dd7 	.word	0x08007dd7
 8007d88:	08007deb 	.word	0x08007deb
 8007d8c:	08007dab 	.word	0x08007dab
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007deb 	.word	0x08007deb
 8007d98:	08007dc3 	.word	0x08007dc3
 8007d9c:	08007db5 	.word	0x08007db5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9d0 	bl	8008148 <USBD_GetDescriptor>
      break;
 8007da8:	e024      	b.n	8007df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fb5f 	bl	8008470 <USBD_SetAddress>
      break;
 8007db2:	e01f      	b.n	8007df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fb9c 	bl	80084f4 <USBD_SetConfig>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc0:	e018      	b.n	8007df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fc39 	bl	800863c <USBD_GetConfig>
      break;
 8007dca:	e013      	b.n	8007df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fc68 	bl	80086a4 <USBD_GetStatus>
      break;
 8007dd4:	e00e      	b.n	8007df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fc96 	bl	800870a <USBD_SetFeature>
      break;
 8007dde:	e009      	b.n	8007df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fca5 	bl	8008732 <USBD_ClrFeature>
      break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fcfb 	bl	80087e8 <USBD_CtlError>
      break;
 8007df2:	bf00      	nop
    }
    break;
 8007df4:	e004      	b.n	8007e00 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fcf5 	bl	80087e8 <USBD_CtlError>
    break;
 8007dfe:	bf00      	nop
  }

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d003      	beq.n	8007e2e <USBD_StdItfReq+0x22>
 8007e26:	2b40      	cmp	r3, #64	; 0x40
 8007e28:	d001      	beq.n	8007e2e <USBD_StdItfReq+0x22>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d12a      	bne.n	8007e84 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e34:	3b01      	subs	r3, #1
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d81d      	bhi.n	8007e76 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	889b      	ldrh	r3, [r3, #4]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d813      	bhi.n	8007e6c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d110      	bne.n	8007e80 <USBD_StdItfReq+0x74>
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10d      	bne.n	8007e80 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fd8a 	bl	800897e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007e6a:	e009      	b.n	8007e80 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fcba 	bl	80087e8 <USBD_CtlError>
      break;
 8007e74:	e004      	b.n	8007e80 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fcb5 	bl	80087e8 <USBD_CtlError>
      break;
 8007e7e:	e000      	b.n	8007e82 <USBD_StdItfReq+0x76>
      break;
 8007e80:	bf00      	nop
    }
    break;
 8007e82:	e004      	b.n	8007e8e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fcae 	bl	80087e8 <USBD_CtlError>
    break;
 8007e8c:	bf00      	nop
  }

  return ret;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	889b      	ldrh	r3, [r3, #4]
 8007eaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d004      	beq.n	8007ec2 <USBD_StdEPReq+0x2a>
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	d002      	beq.n	8007ec2 <USBD_StdEPReq+0x2a>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <USBD_StdEPReq+0x3e>
 8007ec0:	e137      	b.n	8008132 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed4:	e132      	b.n	800813c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d03e      	beq.n	8007f5c <USBD_StdEPReq+0xc4>
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d002      	beq.n	8007ee8 <USBD_StdEPReq+0x50>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d079      	beq.n	8007fda <USBD_StdEPReq+0x142>
 8007ee6:	e11e      	b.n	8008126 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d002      	beq.n	8007ef8 <USBD_StdEPReq+0x60>
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d015      	beq.n	8007f22 <USBD_StdEPReq+0x8a>
 8007ef6:	e02b      	b.n	8007f50 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00c      	beq.n	8007f18 <USBD_StdEPReq+0x80>
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b80      	cmp	r3, #128	; 0x80
 8007f02:	d009      	beq.n	8007f18 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 f8f7 	bl	80090fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 f8f3 	bl	80090fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007f16:	e020      	b.n	8007f5a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fc64 	bl	80087e8 <USBD_CtlError>
        break;
 8007f20:	e01b      	b.n	8007f5a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10e      	bne.n	8007f48 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <USBD_StdEPReq+0xb0>
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b80      	cmp	r3, #128	; 0x80
 8007f34:	d008      	beq.n	8007f48 <USBD_StdEPReq+0xb0>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88db      	ldrh	r3, [r3, #6]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f8da 	bl	80090fc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fd18 	bl	800897e <USBD_CtlSendStatus>

        break;
 8007f4e:	e004      	b.n	8007f5a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fc48 	bl	80087e8 <USBD_CtlError>
        break;
 8007f58:	bf00      	nop
      }
      break;
 8007f5a:	e0e9      	b.n	8008130 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d002      	beq.n	8007f6c <USBD_StdEPReq+0xd4>
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d015      	beq.n	8007f96 <USBD_StdEPReq+0xfe>
 8007f6a:	e02f      	b.n	8007fcc <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00c      	beq.n	8007f8c <USBD_StdEPReq+0xf4>
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b80      	cmp	r3, #128	; 0x80
 8007f76:	d009      	beq.n	8007f8c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f8bd 	bl	80090fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f82:	2180      	movs	r1, #128	; 0x80
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 f8b9 	bl	80090fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007f8a:	e025      	b.n	8007fd8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fc2a 	bl	80087e8 <USBD_CtlError>
        break;
 8007f94:	e020      	b.n	8007fd8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d11b      	bne.n	8007fd6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f8c4 	bl	800913a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fce3 	bl	800897e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fca:	e004      	b.n	8007fd6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fc0a 	bl	80087e8 <USBD_CtlError>
        break;
 8007fd4:	e000      	b.n	8007fd8 <USBD_StdEPReq+0x140>
        break;
 8007fd6:	bf00      	nop
      }
      break;
 8007fd8:	e0aa      	b.n	8008130 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d002      	beq.n	8007fea <USBD_StdEPReq+0x152>
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d032      	beq.n	800804e <USBD_StdEPReq+0x1b6>
 8007fe8:	e097      	b.n	800811a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <USBD_StdEPReq+0x168>
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b80      	cmp	r3, #128	; 0x80
 8007ff4:	d004      	beq.n	8008000 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fbf5 	bl	80087e8 <USBD_CtlError>
          break;
 8007ffe:	e091      	b.n	8008124 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008004:	2b00      	cmp	r3, #0
 8008006:	da0b      	bge.n	8008020 <USBD_StdEPReq+0x188>
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	3310      	adds	r3, #16
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	4413      	add	r3, r2
 800801c:	3304      	adds	r3, #4
 800801e:	e00b      	b.n	8008038 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	4413      	add	r3, r2
 8008036:	3304      	adds	r3, #4
 8008038:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2202      	movs	r2, #2
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fc3f 	bl	80088ca <USBD_CtlSendData>
        break;
 800804c:	e06a      	b.n	8008124 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800804e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008052:	2b00      	cmp	r3, #0
 8008054:	da11      	bge.n	800807a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	f003 020f 	and.w	r2, r3, #15
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	3324      	adds	r3, #36	; 0x24
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d117      	bne.n	80080a0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fbb8 	bl	80087e8 <USBD_CtlError>
            break;
 8008078:	e054      	b.n	8008124 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fba5 	bl	80087e8 <USBD_CtlError>
            break;
 800809e:	e041      	b.n	8008124 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	da0b      	bge.n	80080c0 <USBD_StdEPReq+0x228>
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	3310      	adds	r3, #16
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	3304      	adds	r3, #4
 80080be:	e00b      	b.n	80080d8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	4413      	add	r3, r2
 80080d6:	3304      	adds	r3, #4
 80080d8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <USBD_StdEPReq+0x24e>
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d103      	bne.n	80080ee <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e00e      	b.n	800810c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 f840 	bl	8009178 <USBD_LL_IsStallEP>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e002      	b.n	800810c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2202      	movs	r2, #2
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbd9 	bl	80088ca <USBD_CtlSendData>
          break;
 8008118:	e004      	b.n	8008124 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fb63 	bl	80087e8 <USBD_CtlError>
        break;
 8008122:	bf00      	nop
      }
      break;
 8008124:	e004      	b.n	8008130 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fb5d 	bl	80087e8 <USBD_CtlError>
      break;
 800812e:	bf00      	nop
    }
    break;
 8008130:	e004      	b.n	800813c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fb57 	bl	80087e8 <USBD_CtlError>
    break;
 800813a:	bf00      	nop
  }

  return ret;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	885b      	ldrh	r3, [r3, #2]
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b01      	subs	r3, #1
 8008168:	2b0e      	cmp	r3, #14
 800816a:	f200 8152 	bhi.w	8008412 <USBD_GetDescriptor+0x2ca>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <USBD_GetDescriptor+0x2c>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	080081e5 	.word	0x080081e5
 8008178:	080081fd 	.word	0x080081fd
 800817c:	0800823d 	.word	0x0800823d
 8008180:	08008413 	.word	0x08008413
 8008184:	08008413 	.word	0x08008413
 8008188:	080083b3 	.word	0x080083b3
 800818c:	080083df 	.word	0x080083df
 8008190:	08008413 	.word	0x08008413
 8008194:	08008413 	.word	0x08008413
 8008198:	08008413 	.word	0x08008413
 800819c:	08008413 	.word	0x08008413
 80081a0:	08008413 	.word	0x08008413
 80081a4:	08008413 	.word	0x08008413
 80081a8:	08008413 	.word	0x08008413
 80081ac:	080081b1 	.word	0x080081b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	7c12      	ldrb	r2, [r2, #16]
 80081c8:	f107 0108 	add.w	r1, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80081d2:	e126      	b.n	8008422 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fb06 	bl	80087e8 <USBD_CtlError>
      err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
    break;
 80081e2:	e11e      	b.n	8008422 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7c12      	ldrb	r2, [r2, #16]
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
    break;
 80081fa:	e112      	b.n	8008422 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7c1b      	ldrb	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10d      	bne.n	8008220 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820c:	f107 0208 	add.w	r2, r7, #8
 8008210:	4610      	mov	r0, r2
 8008212:	4798      	blx	r3
 8008214:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	2202      	movs	r2, #2
 800821c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800821e:	e100      	b.n	8008422 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	f107 0208 	add.w	r2, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	2202      	movs	r2, #2
 8008238:	701a      	strb	r2, [r3, #0]
    break;
 800823a:	e0f2      	b.n	8008422 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	885b      	ldrh	r3, [r3, #2]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b05      	cmp	r3, #5
 8008244:	f200 80ac 	bhi.w	80083a0 <USBD_GetDescriptor+0x258>
 8008248:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <USBD_GetDescriptor+0x108>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008269 	.word	0x08008269
 8008254:	0800829d 	.word	0x0800829d
 8008258:	080082d1 	.word	0x080082d1
 800825c:	08008305 	.word	0x08008305
 8008260:	08008339 	.word	0x08008339
 8008264:	0800836d 	.word	0x0800836d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	7c12      	ldrb	r2, [r2, #16]
 8008280:	f107 0108 	add.w	r1, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800828a:	e091      	b.n	80083b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 faaa 	bl	80087e8 <USBD_CtlError>
        err++;
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	3301      	adds	r3, #1
 8008298:	72fb      	strb	r3, [r7, #11]
      break;
 800829a:	e089      	b.n	80083b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	7c12      	ldrb	r2, [r2, #16]
 80082b4:	f107 0108 	add.w	r1, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082be:	e077      	b.n	80083b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa90 	bl	80087e8 <USBD_CtlError>
        err++;
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	3301      	adds	r3, #1
 80082cc:	72fb      	strb	r3, [r7, #11]
      break;
 80082ce:	e06f      	b.n	80083b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7c12      	ldrb	r2, [r2, #16]
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082f2:	e05d      	b.n	80083b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fa76 	bl	80087e8 <USBD_CtlError>
        err++;
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	3301      	adds	r3, #1
 8008300:	72fb      	strb	r3, [r7, #11]
      break;
 8008302:	e055      	b.n	80083b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7c12      	ldrb	r2, [r2, #16]
 800831c:	f107 0108 	add.w	r1, r7, #8
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008326:	e043      	b.n	80083b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa5c 	bl	80087e8 <USBD_CtlError>
        err++;
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	3301      	adds	r3, #1
 8008334:	72fb      	strb	r3, [r7, #11]
      break;
 8008336:	e03b      	b.n	80083b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	7c12      	ldrb	r2, [r2, #16]
 8008350:	f107 0108 	add.w	r1, r7, #8
 8008354:	4610      	mov	r0, r2
 8008356:	4798      	blx	r3
 8008358:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800835a:	e029      	b.n	80083b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa42 	bl	80087e8 <USBD_CtlError>
        err++;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3301      	adds	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]
      break;
 800836a:	e021      	b.n	80083b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800838e:	e00f      	b.n	80083b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa28 	bl	80087e8 <USBD_CtlError>
        err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
      break;
 800839e:	e007      	b.n	80083b0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa20 	bl	80087e8 <USBD_CtlError>
      err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80083ae:	bf00      	nop
    }
    break;
 80083b0:	e037      	b.n	8008422 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	7c1b      	ldrb	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d109      	bne.n	80083ce <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	f107 0208 	add.w	r2, r7, #8
 80083c6:	4610      	mov	r0, r2
 80083c8:	4798      	blx	r3
 80083ca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80083cc:	e029      	b.n	8008422 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fa09 	bl	80087e8 <USBD_CtlError>
      err++;
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	3301      	adds	r3, #1
 80083da:	72fb      	strb	r3, [r7, #11]
    break;
 80083dc:	e021      	b.n	8008422 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7c1b      	ldrb	r3, [r3, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ee:	f107 0208 	add.w	r2, r7, #8
 80083f2:	4610      	mov	r0, r2
 80083f4:	4798      	blx	r3
 80083f6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3301      	adds	r3, #1
 80083fc:	2207      	movs	r2, #7
 80083fe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008400:	e00f      	b.n	8008422 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f9ef 	bl	80087e8 <USBD_CtlError>
      err++;
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	3301      	adds	r3, #1
 800840e:	72fb      	strb	r3, [r7, #11]
    break;
 8008410:	e007      	b.n	8008422 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f9e7 	bl	80087e8 <USBD_CtlError>
    err++;
 800841a:	7afb      	ldrb	r3, [r7, #11]
 800841c:	3301      	adds	r3, #1
 800841e:	72fb      	strb	r3, [r7, #11]
    break;
 8008420:	bf00      	nop
  }

  if (err != 0U)
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d11e      	bne.n	8008466 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	88db      	ldrh	r3, [r3, #6]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d016      	beq.n	800845e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008430:	893b      	ldrh	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00e      	beq.n	8008454 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	88da      	ldrh	r2, [r3, #6]
 800843a:	893b      	ldrh	r3, [r7, #8]
 800843c:	4293      	cmp	r3, r2
 800843e:	bf28      	it	cs
 8008440:	4613      	movcs	r3, r2
 8008442:	b29b      	uxth	r3, r3
 8008444:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008446:	893b      	ldrh	r3, [r7, #8]
 8008448:	461a      	mov	r2, r3
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa3c 	bl	80088ca <USBD_CtlSendData>
 8008452:	e009      	b.n	8008468 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9c6 	bl	80087e8 <USBD_CtlError>
 800845c:	e004      	b.n	8008468 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa8d 	bl	800897e <USBD_CtlSendStatus>
 8008464:	e000      	b.n	8008468 <USBD_GetDescriptor+0x320>
    return;
 8008466:	bf00      	nop
    }
  }
}
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop

08008470 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	889b      	ldrh	r3, [r3, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d130      	bne.n	80084e4 <USBD_SetAddress+0x74>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	88db      	ldrh	r3, [r3, #6]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d12c      	bne.n	80084e4 <USBD_SetAddress+0x74>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	885b      	ldrh	r3, [r3, #2]
 800848e:	2b7f      	cmp	r3, #127	; 0x7f
 8008490:	d828      	bhi.n	80084e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	885b      	ldrh	r3, [r3, #2]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d104      	bne.n	80084b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f99c 	bl	80087e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b0:	e01c      	b.n	80084ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	7bfa      	ldrb	r2, [r7, #15]
 80084b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fe87 	bl	80091d2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fa5a 	bl	800897e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d8:	e008      	b.n	80084ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e2:	e003      	b.n	80084ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f97e 	bl	80087e8 <USBD_CtlError>
  }
}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	b2da      	uxtb	r2, r3
 8008508:	4b4b      	ldr	r3, [pc, #300]	; (8008638 <USBD_SetConfig+0x144>)
 800850a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800850c:	4b4a      	ldr	r3, [pc, #296]	; (8008638 <USBD_SetConfig+0x144>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d905      	bls.n	8008520 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f966 	bl	80087e8 <USBD_CtlError>
    return USBD_FAIL;
 800851c:	2303      	movs	r3, #3
 800851e:	e087      	b.n	8008630 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008526:	2b02      	cmp	r3, #2
 8008528:	d002      	beq.n	8008530 <USBD_SetConfig+0x3c>
 800852a:	2b03      	cmp	r3, #3
 800852c:	d025      	beq.n	800857a <USBD_SetConfig+0x86>
 800852e:	e071      	b.n	8008614 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008530:	4b41      	ldr	r3, [pc, #260]	; (8008638 <USBD_SetConfig+0x144>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01c      	beq.n	8008572 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008538:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <USBD_SetConfig+0x144>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008542:	4b3d      	ldr	r3, [pc, #244]	; (8008638 <USBD_SetConfig+0x144>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff f9bd 	bl	80078c8 <USBD_SetClassConfig>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f944 	bl	80087e8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008560:	e065      	b.n	800862e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa0b 	bl	800897e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2203      	movs	r2, #3
 800856c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008570:	e05d      	b.n	800862e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa03 	bl	800897e <USBD_CtlSendStatus>
    break;
 8008578:	e059      	b.n	800862e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800857a:	4b2f      	ldr	r3, [pc, #188]	; (8008638 <USBD_SetConfig+0x144>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d112      	bne.n	80085a8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800858a:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <USBD_SetConfig+0x144>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008594:	4b28      	ldr	r3, [pc, #160]	; (8008638 <USBD_SetConfig+0x144>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff f9b0 	bl	8007900 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f9ec 	bl	800897e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80085a6:	e042      	b.n	800862e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80085a8:	4b23      	ldr	r3, [pc, #140]	; (8008638 <USBD_SetConfig+0x144>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d02a      	beq.n	800860c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff f99e 	bl	8007900 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80085c4:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <USBD_SetConfig+0x144>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80085ce:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <USBD_SetConfig+0x144>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff f977 	bl	80078c8 <USBD_SetClassConfig>
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00f      	beq.n	8008604 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f8fe 	bl	80087e8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7ff f983 	bl	8007900 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2202      	movs	r2, #2
 80085fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008602:	e014      	b.n	800862e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f9ba 	bl	800897e <USBD_CtlSendStatus>
    break;
 800860a:	e010      	b.n	800862e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f9b6 	bl	800897e <USBD_CtlSendStatus>
    break;
 8008612:	e00c      	b.n	800862e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f8e6 	bl	80087e8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <USBD_SetConfig+0x144>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff f96c 	bl	8007900 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008628:	2303      	movs	r3, #3
 800862a:	73fb      	strb	r3, [r7, #15]
    break;
 800862c:	bf00      	nop
  }

  return ret;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	200001b9 	.word	0x200001b9

0800863c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d004      	beq.n	8008658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8c9 	bl	80087e8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008656:	e021      	b.n	800869c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	2b01      	cmp	r3, #1
 8008660:	db17      	blt.n	8008692 <USBD_GetConfig+0x56>
 8008662:	2b02      	cmp	r3, #2
 8008664:	dd02      	ble.n	800866c <USBD_GetConfig+0x30>
 8008666:	2b03      	cmp	r3, #3
 8008668:	d00b      	beq.n	8008682 <USBD_GetConfig+0x46>
 800866a:	e012      	b.n	8008692 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3308      	adds	r3, #8
 8008676:	2201      	movs	r2, #1
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f925 	bl	80088ca <USBD_CtlSendData>
      break;
 8008680:	e00c      	b.n	800869c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3304      	adds	r3, #4
 8008686:	2201      	movs	r2, #1
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f91d 	bl	80088ca <USBD_CtlSendData>
      break;
 8008690:	e004      	b.n	800869c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f8a7 	bl	80087e8 <USBD_CtlError>
      break;
 800869a:	bf00      	nop
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	3b01      	subs	r3, #1
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d81e      	bhi.n	80086f8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	88db      	ldrh	r3, [r3, #6]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d004      	beq.n	80086cc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f88f 	bl	80087e8 <USBD_CtlError>
      break;
 80086ca:	e01a      	b.n	8008702 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f043 0202 	orr.w	r2, r3, #2
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	330c      	adds	r3, #12
 80086ec:	2202      	movs	r2, #2
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8ea 	bl	80088ca <USBD_CtlSendData>
    break;
 80086f6:	e004      	b.n	8008702 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f874 	bl	80087e8 <USBD_CtlError>
    break;
 8008700:	bf00      	nop
  }
}
 8008702:	bf00      	nop
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	885b      	ldrh	r3, [r3, #2]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d106      	bne.n	800872a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f92a 	bl	800897e <USBD_CtlSendStatus>
  }
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	3b01      	subs	r3, #1
 8008744:	2b02      	cmp	r3, #2
 8008746:	d80b      	bhi.n	8008760 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	885b      	ldrh	r3, [r3, #2]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d10c      	bne.n	800876a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f910 	bl	800897e <USBD_CtlSendStatus>
      }
      break;
 800875e:	e004      	b.n	800876a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f840 	bl	80087e8 <USBD_CtlError>
      break;
 8008768:	e000      	b.n	800876c <USBD_ClrFeature+0x3a>
      break;
 800876a:	bf00      	nop
  }
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	781a      	ldrb	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7ff faa8 	bl	8007cf4 <SWAPBYTE>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3301      	adds	r3, #1
 80087b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff fa9b 	bl	8007cf4 <SWAPBYTE>
 80087be:	4603      	mov	r3, r0
 80087c0:	461a      	mov	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff fa8e 	bl	8007cf4 <SWAPBYTE>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	80da      	strh	r2, [r3, #6]
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087f2:	2180      	movs	r1, #128	; 0x80
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fc81 	bl	80090fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087fa:	2100      	movs	r1, #0
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fc7d 	bl	80090fc <USBD_LL_StallEP>
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d036      	beq.n	800888e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008824:	6938      	ldr	r0, [r7, #16]
 8008826:	f000 f836 	bl	8008896 <USBD_GetLen>
 800882a:	4603      	mov	r3, r0
 800882c:	3301      	adds	r3, #1
 800882e:	b29b      	uxth	r3, r3
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	7812      	ldrb	r2, [r2, #0]
 8008842:	701a      	strb	r2, [r3, #0]
  idx++;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	3301      	adds	r3, #1
 8008848:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	4413      	add	r3, r2
 8008850:	2203      	movs	r2, #3
 8008852:	701a      	strb	r2, [r3, #0]
  idx++;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	3301      	adds	r3, #1
 8008858:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800885a:	e013      	b.n	8008884 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	4413      	add	r3, r2
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	7812      	ldrb	r2, [r2, #0]
 8008866:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3301      	adds	r3, #1
 800886c:	613b      	str	r3, [r7, #16]
    idx++;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	3301      	adds	r3, #1
 8008872:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	4413      	add	r3, r2
 800887a:	2200      	movs	r2, #0
 800887c:	701a      	strb	r2, [r3, #0]
    idx++;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	3301      	adds	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e7      	bne.n	800885c <USBD_GetString+0x52>
 800888c:	e000      	b.n	8008890 <USBD_GetString+0x86>
    return;
 800888e:	bf00      	nop
  }
}
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088a6:	e005      	b.n	80088b4 <USBD_GetLen+0x1e>
  {
    len++;
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	3301      	adds	r3, #1
 80088ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f5      	bne.n	80088a8 <USBD_GetLen+0x12>
  }

  return len;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2202      	movs	r2, #2
 80088da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	2100      	movs	r1, #0
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fc8d 	bl	8009210 <USBD_LL_Transmit>

  return USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	2100      	movs	r1, #0
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 fc7c 	bl	8009210 <USBD_LL_Transmit>

  return USBD_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2203      	movs	r2, #3
 8008932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	2100      	movs	r1, #0
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fc80 	bl	8009252 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	2100      	movs	r1, #0
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 fc6f 	bl	8009252 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2204      	movs	r2, #4
 800898a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800898e:	2300      	movs	r3, #0
 8008990:	2200      	movs	r2, #0
 8008992:	2100      	movs	r1, #0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc3b 	bl	8009210 <USBD_LL_Transmit>

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2205      	movs	r2, #5
 80089b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089b4:	2300      	movs	r3, #0
 80089b6:	2200      	movs	r2, #0
 80089b8:	2100      	movs	r1, #0
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fc49 	bl	8009252 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80089d0:	2200      	movs	r2, #0
 80089d2:	4912      	ldr	r1, [pc, #72]	; (8008a1c <MX_USB_Device_Init+0x50>)
 80089d4:	4812      	ldr	r0, [pc, #72]	; (8008a20 <MX_USB_Device_Init+0x54>)
 80089d6:	f7fe ff09 	bl	80077ec <USBD_Init>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80089e0:	f7f8 f91c 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80089e4:	490f      	ldr	r1, [pc, #60]	; (8008a24 <MX_USB_Device_Init+0x58>)
 80089e6:	480e      	ldr	r0, [pc, #56]	; (8008a20 <MX_USB_Device_Init+0x54>)
 80089e8:	f7fe ff30 	bl	800784c <USBD_RegisterClass>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80089f2:	f7f8 f913 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80089f6:	490c      	ldr	r1, [pc, #48]	; (8008a28 <MX_USB_Device_Init+0x5c>)
 80089f8:	4809      	ldr	r0, [pc, #36]	; (8008a20 <MX_USB_Device_Init+0x54>)
 80089fa:	f7fe fe5b 	bl	80076b4 <USBD_CDC_RegisterInterface>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008a04:	f7f8 f90a 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <MX_USB_Device_Init+0x54>)
 8008a0a:	f7fe ff46 	bl	800789a <USBD_Start>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008a14:	f7f8 f902 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008a18:	bf00      	nop
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000130 	.word	0x20000130
 8008a20:	2000068c 	.word	0x2000068c
 8008a24:	20000018 	.word	0x20000018
 8008a28:	2000011c 	.word	0x2000011c

08008a2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a30:	2200      	movs	r2, #0
 8008a32:	4905      	ldr	r1, [pc, #20]	; (8008a48 <CDC_Init_FS+0x1c>)
 8008a34:	4805      	ldr	r0, [pc, #20]	; (8008a4c <CDC_Init_FS+0x20>)
 8008a36:	f7fe fe52 	bl	80076de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a3a:	4905      	ldr	r1, [pc, #20]	; (8008a50 <CDC_Init_FS+0x24>)
 8008a3c:	4803      	ldr	r0, [pc, #12]	; (8008a4c <CDC_Init_FS+0x20>)
 8008a3e:	f7fe fe67 	bl	8007710 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20000d44 	.word	0x20000d44
 8008a4c:	2000068c 	.word	0x2000068c
 8008a50:	2000095c 	.word	0x2000095c

08008a54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
 8008a70:	4613      	mov	r3, r2
 8008a72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	2b23      	cmp	r3, #35	; 0x23
 8008a78:	d84a      	bhi.n	8008b10 <CDC_Control_FS+0xac>
 8008a7a:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <CDC_Control_FS+0x1c>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008b11 	.word	0x08008b11
 8008a84:	08008b11 	.word	0x08008b11
 8008a88:	08008b11 	.word	0x08008b11
 8008a8c:	08008b11 	.word	0x08008b11
 8008a90:	08008b11 	.word	0x08008b11
 8008a94:	08008b11 	.word	0x08008b11
 8008a98:	08008b11 	.word	0x08008b11
 8008a9c:	08008b11 	.word	0x08008b11
 8008aa0:	08008b11 	.word	0x08008b11
 8008aa4:	08008b11 	.word	0x08008b11
 8008aa8:	08008b11 	.word	0x08008b11
 8008aac:	08008b11 	.word	0x08008b11
 8008ab0:	08008b11 	.word	0x08008b11
 8008ab4:	08008b11 	.word	0x08008b11
 8008ab8:	08008b11 	.word	0x08008b11
 8008abc:	08008b11 	.word	0x08008b11
 8008ac0:	08008b11 	.word	0x08008b11
 8008ac4:	08008b11 	.word	0x08008b11
 8008ac8:	08008b11 	.word	0x08008b11
 8008acc:	08008b11 	.word	0x08008b11
 8008ad0:	08008b11 	.word	0x08008b11
 8008ad4:	08008b11 	.word	0x08008b11
 8008ad8:	08008b11 	.word	0x08008b11
 8008adc:	08008b11 	.word	0x08008b11
 8008ae0:	08008b11 	.word	0x08008b11
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	08008b11 	.word	0x08008b11
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b11 	.word	0x08008b11
 8008af8:	08008b11 	.word	0x08008b11
 8008afc:	08008b11 	.word	0x08008b11
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b11 	.word	0x08008b11
 8008b08:	08008b11 	.word	0x08008b11
 8008b0c:	08008b11 	.word	0x08008b11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b10:	bf00      	nop
  }

  return (USBD_OK);
 8008b12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7f7 fb73 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	4805      	ldr	r0, [pc, #20]	; (8008b4c <CDC_Receive_FS+0x2c>)
 8008b36:	f7fe fdeb 	bl	8007710 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b3a:	4804      	ldr	r0, [pc, #16]	; (8008b4c <CDC_Receive_FS+0x2c>)
 8008b3c:	f7fe fe2c 	bl	8007798 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	2000068c 	.word	0x2000068c

08008b50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b60:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <CDC_Transmit_FS+0x48>)
 8008b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e00b      	b.n	8008b8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b76:	887b      	ldrh	r3, [r7, #2]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4806      	ldr	r0, [pc, #24]	; (8008b98 <CDC_Transmit_FS+0x48>)
 8008b7e:	f7fe fdae 	bl	80076de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b82:	4805      	ldr	r0, [pc, #20]	; (8008b98 <CDC_Transmit_FS+0x48>)
 8008b84:	f7fe fdd8 	bl	8007738 <USBD_CDC_TransmitPacket>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	2000068c 	.word	0x2000068c

08008b9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
	...

08008bc0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2212      	movs	r2, #18
 8008bd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20000150 	.word	0x20000150

08008be4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bf6:	4b03      	ldr	r3, [pc, #12]	; (8008c04 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	20000164 	.word	0x20000164

08008c08 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d105      	bne.n	8008c26 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	4907      	ldr	r1, [pc, #28]	; (8008c3c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008c1e:	4808      	ldr	r0, [pc, #32]	; (8008c40 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008c20:	f7ff fdf3 	bl	800880a <USBD_GetString>
 8008c24:	e004      	b.n	8008c30 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	4904      	ldr	r1, [pc, #16]	; (8008c3c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008c2a:	4805      	ldr	r0, [pc, #20]	; (8008c40 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008c2c:	f7ff fded 	bl	800880a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c30:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	2000112c 	.word	0x2000112c
 8008c40:	08009444 	.word	0x08009444

08008c44 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	4904      	ldr	r1, [pc, #16]	; (8008c64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008c54:	4804      	ldr	r0, [pc, #16]	; (8008c68 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008c56:	f7ff fdd8 	bl	800880a <USBD_GetString>
  return USBD_StrDesc;
 8008c5a:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	2000112c 	.word	0x2000112c
 8008c68:	0800945c 	.word	0x0800945c

08008c6c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	221a      	movs	r2, #26
 8008c7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c7e:	f000 f843 	bl	8008d08 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008c82:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000168 	.word	0x20000168

08008c90 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4907      	ldr	r1, [pc, #28]	; (8008cc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008ca8:	f7ff fdaf 	bl	800880a <USBD_GetString>
 8008cac:	e004      	b.n	8008cb8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	4904      	ldr	r1, [pc, #16]	; (8008cc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008cb2:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008cb4:	f7ff fda9 	bl	800880a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb8:	4b02      	ldr	r3, [pc, #8]	; (8008cc4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	2000112c 	.word	0x2000112c
 8008cc8:	08009470 	.word	0x08009470

08008ccc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	6039      	str	r1, [r7, #0]
 8008cd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d105      	bne.n	8008cea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	4907      	ldr	r1, [pc, #28]	; (8008d00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008ce2:	4808      	ldr	r0, [pc, #32]	; (8008d04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008ce4:	f7ff fd91 	bl	800880a <USBD_GetString>
 8008ce8:	e004      	b.n	8008cf4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4904      	ldr	r1, [pc, #16]	; (8008d00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008cee:	4805      	ldr	r0, [pc, #20]	; (8008d04 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008cf0:	f7ff fd8b 	bl	800880a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf4:	4b02      	ldr	r3, [pc, #8]	; (8008d00 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	2000112c 	.word	0x2000112c
 8008d04:	0800947c 	.word	0x0800947c

08008d08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <Get_SerialNum+0x44>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d14:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <Get_SerialNum+0x48>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d1a:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <Get_SerialNum+0x4c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4413      	add	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d2e:	2208      	movs	r2, #8
 8008d30:	4909      	ldr	r1, [pc, #36]	; (8008d58 <Get_SerialNum+0x50>)
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 f814 	bl	8008d60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d38:	2204      	movs	r2, #4
 8008d3a:	4908      	ldr	r1, [pc, #32]	; (8008d5c <Get_SerialNum+0x54>)
 8008d3c:	68b8      	ldr	r0, [r7, #8]
 8008d3e:	f000 f80f 	bl	8008d60 <IntToUnicode>
  }
}
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	1fff7590 	.word	0x1fff7590
 8008d50:	1fff7594 	.word	0x1fff7594
 8008d54:	1fff7598 	.word	0x1fff7598
 8008d58:	2000016a 	.word	0x2000016a
 8008d5c:	2000017a 	.word	0x2000017a

08008d60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d72:	2300      	movs	r3, #0
 8008d74:	75fb      	strb	r3, [r7, #23]
 8008d76:	e027      	b.n	8008dc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	0f1b      	lsrs	r3, r3, #28
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d80b      	bhi.n	8008d98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	0f1b      	lsrs	r3, r3, #28
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	440b      	add	r3, r1
 8008d90:	3230      	adds	r2, #48	; 0x30
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e00a      	b.n	8008dae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0f1b      	lsrs	r3, r3, #28
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4619      	mov	r1, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	440b      	add	r3, r1
 8008da8:	3237      	adds	r2, #55	; 0x37
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	3301      	adds	r3, #1
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	75fb      	strb	r3, [r7, #23]
 8008dc8:	7dfa      	ldrb	r2, [r7, #23]
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d3d3      	bcc.n	8008d78 <IntToUnicode+0x18>
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	371c      	adds	r7, #28
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a0d      	ldr	r2, [pc, #52]	; (8008e20 <HAL_PCD_MspInit+0x44>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d113      	bne.n	8008e16 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008dee:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <HAL_PCD_MspInit+0x48>)
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <HAL_PCD_MspInit+0x48>)
 8008df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008df8:	6593      	str	r3, [r2, #88]	; 0x58
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <HAL_PCD_MspInit+0x48>)
 8008dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008e06:	2200      	movs	r2, #0
 8008e08:	2100      	movs	r1, #0
 8008e0a:	2014      	movs	r0, #20
 8008e0c:	f7f8 fb3f 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008e10:	2014      	movs	r0, #20
 8008e12:	f7f8 fb56 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008e16:	bf00      	nop
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	40005c00 	.word	0x40005c00
 8008e24:	40021000 	.word	0x40021000

08008e28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7fe fd76 	bl	8007930 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	440b      	add	r3, r1
 8008e6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	4619      	mov	r1, r3
 8008e76:	f7fe fdae 	bl	80079d6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	440b      	add	r3, r1
 8008ea2:	333c      	adds	r3, #60	; 0x3c
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f7fe fdf7 	bl	8007a9c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008eae:	bf00      	nop
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe fefb 	bl	8007cc0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008eda:	2301      	movs	r3, #1
 8008edc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d001      	beq.n	8008eea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008ee6:	f7f7 fe99 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ef0:	7bfa      	ldrb	r2, [r7, #15]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fea8 	bl	8007c4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fe61 	bl	8007bc8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fea3 	bl	8007c6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d005      	beq.n	8008f38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f2c:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <HAL_PCD_SuspendCallback+0x30>)
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	4a03      	ldr	r2, [pc, #12]	; (8008f40 <HAL_PCD_SuspendCallback+0x30>)
 8008f32:	f043 0306 	orr.w	r3, r3, #6
 8008f36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	e000ed00 	.word	0xe000ed00

08008f44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d007      	beq.n	8008f64 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f54:	4b08      	ldr	r3, [pc, #32]	; (8008f78 <HAL_PCD_ResumeCallback+0x34>)
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	4a07      	ldr	r2, [pc, #28]	; (8008f78 <HAL_PCD_ResumeCallback+0x34>)
 8008f5a:	f023 0306 	bic.w	r3, r3, #6
 8008f5e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008f60:	f000 f9fa 	bl	8009358 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fe92 	bl	8007c94 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	e000ed00 	.word	0xe000ed00

08008f7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8008f84:	4a2b      	ldr	r2, [pc, #172]	; (8009034 <USBD_LL_Init+0xb8>)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a29      	ldr	r2, [pc, #164]	; (8009034 <USBD_LL_Init+0xb8>)
 8008f90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008f94:	4b27      	ldr	r3, [pc, #156]	; (8009034 <USBD_LL_Init+0xb8>)
 8008f96:	4a28      	ldr	r2, [pc, #160]	; (8009038 <USBD_LL_Init+0xbc>)
 8008f98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f9a:	4b26      	ldr	r3, [pc, #152]	; (8009034 <USBD_LL_Init+0xb8>)
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008fa0:	4b24      	ldr	r3, [pc, #144]	; (8009034 <USBD_LL_Init+0xb8>)
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fa6:	4b23      	ldr	r3, [pc, #140]	; (8009034 <USBD_LL_Init+0xb8>)
 8008fa8:	2202      	movs	r2, #2
 8008faa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008fac:	4b21      	ldr	r3, [pc, #132]	; (8009034 <USBD_LL_Init+0xb8>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008fb2:	4b20      	ldr	r3, [pc, #128]	; (8009034 <USBD_LL_Init+0xb8>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <USBD_LL_Init+0xb8>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008fbe:	4b1d      	ldr	r3, [pc, #116]	; (8009034 <USBD_LL_Init+0xb8>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008fc4:	481b      	ldr	r0, [pc, #108]	; (8009034 <USBD_LL_Init+0xb8>)
 8008fc6:	f7f8 fc4b 	bl	8001860 <HAL_PCD_Init>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8008fd0:	f7f7 fe24 	bl	8000c1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fda:	2318      	movs	r3, #24
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2100      	movs	r1, #0
 8008fe0:	f7f9 ff39 	bl	8002e56 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008fea:	2358      	movs	r3, #88	; 0x58
 8008fec:	2200      	movs	r2, #0
 8008fee:	2180      	movs	r1, #128	; 0x80
 8008ff0:	f7f9 ff31 	bl	8002e56 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ffa:	23c0      	movs	r3, #192	; 0xc0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2181      	movs	r1, #129	; 0x81
 8009000:	f7f9 ff29 	bl	8002e56 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800900a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800900e:	2200      	movs	r2, #0
 8009010:	2101      	movs	r1, #1
 8009012:	f7f9 ff20 	bl	8002e56 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800901c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009020:	2200      	movs	r2, #0
 8009022:	2182      	movs	r1, #130	; 0x82
 8009024:	f7f9 ff17 	bl	8002e56 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	2000132c 	.word	0x2000132c
 8009038:	40005c00 	.word	0x40005c00

0800903c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009052:	4618      	mov	r0, r3
 8009054:	f7f8 fce9 	bl	8001a2a <HAL_PCD_Start>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f980 	bl	8009364 <USBD_Get_USB_Status>
 8009064:	4603      	mov	r3, r0
 8009066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009068:	7bbb      	ldrb	r3, [r7, #14]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	4608      	mov	r0, r1
 800907c:	4611      	mov	r1, r2
 800907e:	461a      	mov	r2, r3
 8009080:	4603      	mov	r3, r0
 8009082:	70fb      	strb	r3, [r7, #3]
 8009084:	460b      	mov	r3, r1
 8009086:	70bb      	strb	r3, [r7, #2]
 8009088:	4613      	mov	r3, r2
 800908a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800909a:	78bb      	ldrb	r3, [r7, #2]
 800909c:	883a      	ldrh	r2, [r7, #0]
 800909e:	78f9      	ldrb	r1, [r7, #3]
 80090a0:	f7f8 fe58 	bl	8001d54 <HAL_PCD_EP_Open>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 f95a 	bl	8009364 <USBD_Get_USB_Status>
 80090b0:	4603      	mov	r3, r0
 80090b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	4611      	mov	r1, r2
 80090dc:	4618      	mov	r0, r3
 80090de:	f7f8 fe9f 	bl	8001e20 <HAL_PCD_EP_Close>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f93b 	bl	8009364 <USBD_Get_USB_Status>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	4611      	mov	r1, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f7f8 ff60 	bl	8001fe0 <HAL_PCD_EP_SetStall>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f91c 	bl	8009364 <USBD_Get_USB_Status>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009130:	7bbb      	ldrb	r3, [r7, #14]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	4611      	mov	r1, r2
 8009158:	4618      	mov	r0, r3
 800915a:	f7f8 ffa1 	bl	80020a0 <HAL_PCD_EP_ClrStall>
 800915e:	4603      	mov	r3, r0
 8009160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f8fd 	bl	8009364 <USBD_Get_USB_Status>
 800916a:	4603      	mov	r3, r0
 800916c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800918a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800918c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009190:	2b00      	cmp	r3, #0
 8009192:	da0c      	bge.n	80091ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	440b      	add	r3, r1
 80091a8:	3302      	adds	r3, #2
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	e00b      	b.n	80091c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091b4:	68f9      	ldr	r1, [r7, #12]
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	440b      	add	r3, r1
 80091c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80091c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7f8 fd8a 	bl	8001d0a <HAL_PCD_SetAddress>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 f8b1 	bl	8009364 <USBD_Get_USB_Status>
 8009202:	4603      	mov	r3, r0
 8009204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009206:	7bbb      	ldrb	r3, [r7, #14]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	607a      	str	r2, [r7, #4]
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	460b      	mov	r3, r1
 800921e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800922e:	7af9      	ldrb	r1, [r7, #11]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	f7f8 fe91 	bl	8001f5a <HAL_PCD_EP_Transmit>
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 f890 	bl	8009364 <USBD_Get_USB_Status>
 8009244:	4603      	mov	r3, r0
 8009246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009248:	7dbb      	ldrb	r3, [r7, #22]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
 800925e:	460b      	mov	r3, r1
 8009260:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009270:	7af9      	ldrb	r1, [r7, #11]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	f7f8 fe1b 	bl	8001eb0 <HAL_PCD_EP_Receive>
 800927a:	4603      	mov	r3, r0
 800927c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 f86f 	bl	8009364 <USBD_Get_USB_Status>
 8009286:	4603      	mov	r3, r0
 8009288:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800928a:	7dbb      	ldrb	r3, [r7, #22]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	4611      	mov	r1, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f8 fe3d 	bl	8001f2a <HAL_PCD_EP_GetRxCount>
 80092b0:	4603      	mov	r3, r0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <HAL_PCDEx_LPM_Callback+0x18>
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d013      	beq.n	80092fa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80092d2:	e023      	b.n	800931c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d007      	beq.n	80092ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80092dc:	f000 f83c 	bl	8009358 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092e0:	4b10      	ldr	r3, [pc, #64]	; (8009324 <HAL_PCDEx_LPM_Callback+0x68>)
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	4a0f      	ldr	r2, [pc, #60]	; (8009324 <HAL_PCDEx_LPM_Callback+0x68>)
 80092e6:	f023 0306 	bic.w	r3, r3, #6
 80092ea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fcce 	bl	8007c94 <USBD_LL_Resume>
    break;
 80092f8:	e010      	b.n	800931c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe fcb2 	bl	8007c6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d005      	beq.n	800931a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800930e:	4b05      	ldr	r3, [pc, #20]	; (8009324 <HAL_PCDEx_LPM_Callback+0x68>)
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	4a04      	ldr	r2, [pc, #16]	; (8009324 <HAL_PCDEx_LPM_Callback+0x68>)
 8009314:	f043 0306 	orr.w	r3, r3, #6
 8009318:	6113      	str	r3, [r2, #16]
    break;
 800931a:	bf00      	nop
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	e000ed00 	.word	0xe000ed00

08009328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009330:	4b03      	ldr	r3, [pc, #12]	; (8009340 <USBD_static_malloc+0x18>)
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	200001bc 	.word	0x200001bc

08009344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]

}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800935c:	f7f6 ffbe 	bl	80002dc <SystemClock_Config>
}
 8009360:	bf00      	nop
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	2b03      	cmp	r3, #3
 8009376:	d817      	bhi.n	80093a8 <USBD_Get_USB_Status+0x44>
 8009378:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <USBD_Get_USB_Status+0x1c>)
 800937a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937e:	bf00      	nop
 8009380:	08009391 	.word	0x08009391
 8009384:	08009397 	.word	0x08009397
 8009388:	0800939d 	.word	0x0800939d
 800938c:	080093a3 	.word	0x080093a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
    break;
 8009394:	e00b      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009396:	2303      	movs	r3, #3
 8009398:	73fb      	strb	r3, [r7, #15]
    break;
 800939a:	e008      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    break;
 80093a0:	e005      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	73fb      	strb	r3, [r7, #15]
    break;
 80093a6:	e002      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	73fb      	strb	r3, [r7, #15]
    break;
 80093ac:	bf00      	nop
  }
  return usb_status;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <__libc_init_array>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	4e0d      	ldr	r6, [pc, #52]	; (80093f4 <__libc_init_array+0x38>)
 80093c0:	4c0d      	ldr	r4, [pc, #52]	; (80093f8 <__libc_init_array+0x3c>)
 80093c2:	1ba4      	subs	r4, r4, r6
 80093c4:	10a4      	asrs	r4, r4, #2
 80093c6:	2500      	movs	r5, #0
 80093c8:	42a5      	cmp	r5, r4
 80093ca:	d109      	bne.n	80093e0 <__libc_init_array+0x24>
 80093cc:	4e0b      	ldr	r6, [pc, #44]	; (80093fc <__libc_init_array+0x40>)
 80093ce:	4c0c      	ldr	r4, [pc, #48]	; (8009400 <__libc_init_array+0x44>)
 80093d0:	f000 f82c 	bl	800942c <_init>
 80093d4:	1ba4      	subs	r4, r4, r6
 80093d6:	10a4      	asrs	r4, r4, #2
 80093d8:	2500      	movs	r5, #0
 80093da:	42a5      	cmp	r5, r4
 80093dc:	d105      	bne.n	80093ea <__libc_init_array+0x2e>
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093e4:	4798      	blx	r3
 80093e6:	3501      	adds	r5, #1
 80093e8:	e7ee      	b.n	80093c8 <__libc_init_array+0xc>
 80093ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093ee:	4798      	blx	r3
 80093f0:	3501      	adds	r5, #1
 80093f2:	e7f2      	b.n	80093da <__libc_init_array+0x1e>
 80093f4:	0800949c 	.word	0x0800949c
 80093f8:	0800949c 	.word	0x0800949c
 80093fc:	0800949c 	.word	0x0800949c
 8009400:	080094a0 	.word	0x080094a0

08009404 <memcpy>:
 8009404:	b510      	push	{r4, lr}
 8009406:	1e43      	subs	r3, r0, #1
 8009408:	440a      	add	r2, r1
 800940a:	4291      	cmp	r1, r2
 800940c:	d100      	bne.n	8009410 <memcpy+0xc>
 800940e:	bd10      	pop	{r4, pc}
 8009410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009418:	e7f7      	b.n	800940a <memcpy+0x6>

0800941a <memset>:
 800941a:	4402      	add	r2, r0
 800941c:	4603      	mov	r3, r0
 800941e:	4293      	cmp	r3, r2
 8009420:	d100      	bne.n	8009424 <memset+0xa>
 8009422:	4770      	bx	lr
 8009424:	f803 1b01 	strb.w	r1, [r3], #1
 8009428:	e7f9      	b.n	800941e <memset+0x4>
	...

0800942c <_init>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr

08009438 <_fini>:
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	bf00      	nop
 800943c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943e:	bc08      	pop	{r3}
 8009440:	469e      	mov	lr, r3
 8009442:	4770      	bx	lr
